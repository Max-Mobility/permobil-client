// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = true;
var ENVIRONMENT_HAS_NODE = ENVIRONMENT_IS_NODE;
var ENVIRONMENT_IS_SHELL = false;

if (Module['ENVIRONMENT']) {
  throw new Error(
    'Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)'
  );
}

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_, readAsync, readBinary, setWindowTitle;

if (ENVIRONMENT_IS_NODE) {
  /* REMOVED AFTER GENERATING */
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  read_ = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  /* CHANGED AFTER GENERATING
  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);
  */

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  /* CHANGED AFTER GENERATING
  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);
  */
  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function() {
    return '[Emscripten Module object]';
  };
} else {
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];
if (!Object.getOwnPropertyDescriptor(Module, 'arguments'))
  Object.defineProperty(Module, 'arguments', {
    get: function() {
      abort('Module.arguments has been replaced with plain arguments_');
    }
  });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];
if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram'))
  Object.defineProperty(Module, 'thisProgram', {
    get: function() {
      abort('Module.thisProgram has been replaced with plain thisProgram');
    }
  });
if (Module['quit']) quit_ = Module['quit'];
if (!Object.getOwnPropertyDescriptor(Module, 'quit'))
  Object.defineProperty(Module, 'quit', {
    get: function() {
      abort('Module.quit has been replaced with plain quit_');
    }
  });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(
  typeof Module['memoryInitializerPrefixURL'] === 'undefined',
  'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead'
);
assert(
  typeof Module['pthreadMainPrefixURL'] === 'undefined',
  'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead'
);
assert(
  typeof Module['cdInitializerPrefixURL'] === 'undefined',
  'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead'
);
assert(
  typeof Module['filePackagePrefixURL'] === 'undefined',
  'Module.filePackagePrefixURL option was removed, use Module.locateFile instead'
);
assert(
  typeof Module['read'] === 'undefined',
  'Module.read option was removed (modify read_ in JS)'
);
assert(
  typeof Module['readAsync'] === 'undefined',
  'Module.readAsync option was removed (modify readAsync in JS)'
);
assert(
  typeof Module['readBinary'] === 'undefined',
  'Module.readBinary option was removed (modify readBinary in JS)'
);
assert(
  typeof Module['setWindowTitle'] === 'undefined',
  'Module.setWindowTitle option was removed (modify setWindowTitle in JS)'
);
if (!Object.getOwnPropertyDescriptor(Module, 'read'))
  Object.defineProperty(Module, 'read', {
    get: function() {
      abort('Module.read has been replaced with plain read_');
    }
  });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync'))
  Object.defineProperty(Module, 'readAsync', {
    get: function() {
      abort('Module.readAsync has been replaced with plain readAsync');
    }
  });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary'))
  Object.defineProperty(Module, 'readBinary', {
    get: function() {
      abort('Module.readBinary has been replaced with plain readBinary');
    }
  });
// TODO: add when SDL2 is fixed if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle') } });

// TODO remove when SDL2 is fixed (also see above)

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort(
    'cannot use the stack before compiled code is ready to run, and has provided stack access'
  );
};

function staticAlloc(size) {
  abort(
    'staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)'
  );
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR >> 2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort(
      'failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly'
    );
  }
  HEAP32[DYNAMICTOP_PTR >> 2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1':
    case 'i8':
      return 1;
    case 'i16':
      return 2;
    case 'i32':
      return 4;
    case 'i64':
      return 8;
    case 'float':
      return 4;
    case 'double':
      return 8;
    default: {
      if (type[type.length - 1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(
          bits % 8 === 0,
          'getNativeTypeSize invalid bits ' + bits + ', type ' + type
        );
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = {
  // special asm2wasm imports
  'f64-rem': function(x, y) {
    return x % y;
  },
  debugger: function() {
    debugger;
  }
};

var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index - jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}

function makeBigInt(low, high, unsigned) {
  return unsigned
    ? +(low >>> 0) + +(high >>> 0) * 4294967296.0
    : +(low >>> 0) + +(high | 0) * 4294967296.0;
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length - 1);
    assert(
      'dynCall_' + sig in Module,
      "bad function pointer type - no table for sig '" + sig + "'"
    );
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(
      'dynCall_' + sig in Module,
      "bad function pointer type - no table for sig '" + sig + "'"
    );
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() {
    abort(
      'getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."'
    );
  },
  staticAlloc: function() {
    abort(
      'staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."'
    );
  },
  stackAlloc: function() {
    abort(
      'stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."'
    );
  }
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary'))
  Object.defineProperty(Module, 'wasmBinary', {
    get: function() {
      abort('Module.wasmBinary has been replaced with plain wasmBinary');
    }
  });

// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length - 1) === '*') type = 'i32'; // pointers are 32-bit
  switch (type) {
    case 'i1':
      HEAP8[(ptr >> 0)] = value;
      break;
    case 'i8':
      HEAP8[(ptr >> 0)] = value;
      break;
    case 'i16':
      HEAP16[(ptr >> 1)] = value;
      break;
    case 'i32':
      HEAP32[(ptr >> 2)] = value;
      break;
    case 'i64':
      ((tempI64 = [
        value >>> 0,
        ((tempDouble = value),
        +Math_abs(tempDouble) >= 1.0
          ? tempDouble > 0.0
            ? (Math_min(+Math_floor(tempDouble / 4294967296.0), 4294967295.0) |
                0) >>>
              0
            : ~~+Math_ceil(
                (tempDouble - +(~~tempDouble >>> 0)) / 4294967296.0
              ) >>> 0
          : 0)
      ]),
        (HEAP32[ptr >> 2] = tempI64[0]),
        (HEAP32[(ptr + 4) >> 2] = tempI64[1]));
      break;
    case 'float':
      HEAPF32[(ptr >> 2)] = value;
      break;
    case 'double':
      HEAPF64[(ptr >> 3)] = value;
      break;
    default:
      abort('invalid type for setValue: ' + type);
  }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length - 1) === '*') type = 'i32'; // pointers are 32-bit
  switch (type) {
    case 'i1':
      return HEAP8[(ptr >> 0)];
    case 'i8':
      return HEAP8[(ptr >> 0)];
    case 'i16':
      return HEAP16[(ptr >> 1)];
    case 'i32':
      return HEAP32[(ptr >> 2)];
    case 'i64':
      return HEAP32[(ptr >> 2)];
    case 'float':
      return HEAPF32[(ptr >> 2)];
    case 'double':
      return HEAPF64[(ptr >> 3)];
    default:
      abort('invalid type for getValue: ' + type);
  }
  return null;
}

// Wasm globals

var wasmMemory;

// Potentially used for direct table calls.
var wasmTable;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(
    func,
    'Cannot call unknown function ' + ident + ', make sure it is exported'
  );
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    string: function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) {
        // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    array: function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  assert(
    !(opts && opts.async),
    'async call is only supported with Emterpretify for now, see #9029'
  );

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  };
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, stackAlloc, dynamicAlloc][allocator](
      Math.max(size, singleType ? 1 : types.length)
    );
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[(ptr >> 2)] = 0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[(ptr++ >> 0)] = 0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0,
    type,
    typeSize,
    previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret + i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort(
    'this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!'
  );
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[ptr++ >> 0];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder =
  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) {
        str += String.fromCharCode(u0);
        continue;
      }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xe0) == 0xc0) {
        str += String.fromCharCode(((u0 & 31) << 6) | u1);
        continue;
      }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xf0) == 0xe0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xf8) != 0xf0)
          warnOnce(
            'Invalid UTF-8 leading byte 0x' +
              u0.toString(16) +
              ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!'
          );
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xd800 | (ch >> 10), 0xdc00 | (ch & 0x3ff));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0))
    // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xd800 && u <= 0xdfff) {
      var u1 = str.charCodeAt(++i);
      u = (0x10000 + ((u & 0x3ff) << 10)) | (u1 & 0x3ff);
    }
    if (u <= 0x7f) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7ff) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xc0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xffff) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xe0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000)
        warnOnce(
          'Invalid Unicode code point 0x' +
            u.toString(16) +
            ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).'
        );
      outU8Array[outIdx++] = 0xf0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(
    typeof maxBytesToWrite == 'number',
    'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!'
  );
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xd800 && u <= 0xdfff)
      u = (0x10000 + ((u & 0x3ff) << 10)) | (str.charCodeAt(++i) & 0x3ff);
    if (u <= 0x7f) ++len;
    else if (u <= 0x7ff) len += 2;
    else if (u <= 0xffff) len += 3;
    else len += 4;
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder =
  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(
    ptr % 2 == 0,
    'Pointer passed to UTF16ToString must be aligned to two bytes!'
  );
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(ptr + i * 2) >> 1];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(
    outPtr % 2 == 0,
    'Pointer passed to stringToUTF16 must be aligned to two bytes!'
  );
  assert(
    typeof maxBytesToWrite == 'number',
    'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!'
  );
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7fffffff;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite =
    maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[outPtr >> 1] = codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[outPtr >> 1] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length * 2;
}

function UTF32ToString(ptr) {
  assert(
    ptr % 4 == 0,
    'Pointer passed to UTF32ToString must be aligned to four bytes!'
  );
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(ptr + i * 4) >> 2];
    if (utf32 == 0) return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xd800 | (ch >> 10), 0xdc00 | (ch & 0x3ff));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(
    outPtr % 4 == 0,
    'Pointer passed to stringToUTF32 must be aligned to four bytes!'
  );
  assert(
    typeof maxBytesToWrite == 'number',
    'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!'
  );
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7fffffff;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xd800 && codeUnit <= 0xdfff) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit =
        (0x10000 + ((codeUnit & 0x3ff) << 10)) | (trailSurrogate & 0x3ff);
    }
    HEAP32[outPtr >> 2] = codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[outPtr >> 2] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xd800 && codeUnit <= 0xdfff) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce(
    'writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!'
  );

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(
    array.length >= 0,
    'writeArrayToMemory array must have a length (should be an array or typed array)'
  );
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert((str.charCodeAt(i) === str.charCodeAt(i)) & 0xff);
    HEAP8[buffer++ >> 0] = str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[buffer >> 0] = 0;
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
  /** @type {ArrayBuffer} */
  buffer,
  /** @type {Int8Array} */
  HEAP8,
  /** @type {Uint8Array} */
  HEAPU8,
  /** @type {Int16Array} */
  HEAP16,
  /** @type {Uint16Array} */
  HEAPU16,
  /** @type {Int32Array} */
  HEAP32,
  /** @type {Uint32Array} */
  HEAPU32,
  /** @type {Float32Array} */
  HEAPF32,
  /** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE = 8,
  STACK_BASE = 18416,
  STACKTOP = STACK_BASE,
  STACK_MAX = 5261296,
  DYNAMIC_BASE = 5261296,
  DYNAMICTOP_PTR = 18384;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');

var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK'])
  assert(
    TOTAL_STACK === Module['TOTAL_STACK'],
    'the stack size can no longer be determined at runtime'
  );

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (!Object.getOwnPropertyDescriptor(Module, 'TOTAL_MEMORY'))
  Object.defineProperty(Module, 'TOTAL_MEMORY', {
    get: function() {
      abort(
        'Module.TOTAL_MEMORY has been replaced with plain INITIAL_TOTAL_MEMORY'
      );
    }
  });

assert(
  INITIAL_TOTAL_MEMORY >= TOTAL_STACK,
  'TOTAL_MEMORY should be larger than TOTAL_STACK, was ' +
    INITIAL_TOTAL_MEMORY +
    '! (TOTAL_STACK=' +
    TOTAL_STACK +
    ')'
);

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(
  typeof Int32Array !== 'undefined' &&
    typeof Float64Array !== 'undefined' &&
    Int32Array.prototype.subarray !== undefined &&
    Int32Array.prototype.set !== undefined,
  'JS engine does not provide full typed array support'
);

if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['TOTAL_MEMORY'].
INITIAL_TOTAL_MEMORY = buffer.byteLength;
updateGlobalBufferViews();

HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;

// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2) - 1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2) - 2] = 0x89bacdfe;
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2) - 1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2) - 2];
  if (cookie1 != 0x02135467 || cookie2 != 0x89bacdfe) {
    abort(
      'Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' +
        cookie2.toString(16) +
        ' ' +
        cookie1.toString(16)
    );
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */)
    abort(
      'Runtime error: The application has corrupted its heap memory area (address zero)!'
    );
}

function abortStackOverflow(allocSize) {
  abort(
    'Stack overflow! Attempted to allocate ' +
      allocSize +
      ' bytes on the stack, but stack has only ' +
      (STACK_MAX - stackSave() + allocSize) +
      ' bytes available!'
  );
}

HEAP32[0] = 0x63736d65; /* 'emsc' */

// Endianness check (note: assumes compiler arch was little-endian)
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63)
  throw 'Runtime error: expected the system to be little-endian!';

function abortFnPtrError(ptr, sig) {
  abort(
    'Invalid function pointer ' +
      ptr +
      " called with signature '" +
      sig +
      "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info."
  );
}

function callRuntimeCallbacks(callbacks) {
  while (callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__ = []; // functions called before the runtime is initialized
var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function')
      Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();

  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function')
      Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32
    ? 2 * Math.abs(1 << (bits - 1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
    : Math.pow(2, bits) + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half =
    bits <= 32
      ? Math.abs(1 << (bits - 1)) // abs is needed if bits == 32
      : Math.pow(2, bits - 1);
  if (value >= half && (bits <= 32 || value > half)) {
    // for huge values, we can hit the precision limit and always get true here. so don't do that
    // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
    // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2 * half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(
  Math.imul,
  'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill'
);
assert(
  Math.fround,
  'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill'
);
assert(
  Math.clz32,
  'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill'
);
assert(
  Math.trunc,
  'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill'
);

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module['preloadedImages'] = {}; // maps url to image data
Module['preloadedAudios'] = {}; // maps url to audio data

var memoryInitializer = null;

// show errors on likely calls to FS when it was not included
var FS = {
  error: function() {
    abort(
      'Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1'
    );
  },
  init: function() {
    FS.error();
  },
  createDataFile: function() {
    FS.error();
  },
  createPreloadedFile: function() {
    FS.error();
  },
  createLazyFile: function() {
    FS.error();
  },
  open: function() {
    FS.error();
  },
  mkdev: function() {
    FS.error();
  },
  registerDevice: function() {
    FS.error();
  },
  analyzePath: function() {
    FS.error();
  },
  loadFilesFromDB: function() {
    FS.error();
  },

  ErrnoError: function ErrnoError() {
    FS.error();
  }
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith
    ? filename.startsWith(dataURIPrefix)
    : filename.indexOf(dataURIPrefix) === 0;
}

// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = [];

// STATICTOP = STATIC_BASE + 18408;
/* global initializers */ __ATINIT__.push({
  func: function() {
    globalCtors();
  }
});

memoryInitializer =
  'data:application/octet-stream;base64,';

/* no memory initializer */
var tempDoublePtr = 18400;
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) {
  // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];
  HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];
  HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];
  HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];
  HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];
  HEAP8[tempDoublePtr + 4] = HEAP8[ptr + 4];
  HEAP8[tempDoublePtr + 5] = HEAP8[ptr + 5];
  HEAP8[tempDoublePtr + 6] = HEAP8[ptr + 6];
  HEAP8[tempDoublePtr + 7] = HEAP8[ptr + 7];
}

// {{PRE_LIBRARY}}

function demangle(func) {
  warnOnce(
    'warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling'
  );
  return func;
}

function demangleAll(text) {
  var regex = /__Z[\w\d_]+/g;
  return text.replace(regex, function(x) {
    var y = demangle(x);
    return x === y ? x : y + ' [' + x + ']';
  });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch (e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

var ___exception_infos = {};

var ___exception_caught = [];

function ___exception_addRef(ptr) {
  if (!ptr) return;
  var info = ___exception_infos[ptr];
  info.refcount++;
}

function ___exception_deAdjust(adjusted) {
  if (!adjusted || ___exception_infos[adjusted]) return adjusted;
  for (var key in ___exception_infos) {
    var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
    var adj = ___exception_infos[ptr].adjusted;
    var len = adj.length;
    for (var i = 0; i < len; i++) {
      if (adj[i] === adjusted) {
        return ptr;
      }
    }
  }
  return adjusted;
}
function ___cxa_begin_catch(ptr) {
  var info = ___exception_infos[ptr];
  if (info && !info.caught) {
    info.caught = true;
    __ZSt18uncaught_exceptionv.uncaught_exceptions--;
  }
  if (info) info.rethrown = false;
  ___exception_caught.push(ptr);
  ___exception_addRef(___exception_deAdjust(ptr));
  return ptr;
}

function ___cxa_pure_virtual() {
  ABORT = true;

  throw 'Pure virtual function called!';
}

function ___cxa_uncaught_exceptions() {
  return __ZSt18uncaught_exceptionv.uncaught_exceptions;
}

function ___gxx_personality_v0() {}

function ___lock() {}

var PATH = {
  splitPath: function(filename) {
    var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
    return splitPathRe.exec(filename).slice(1);
  },
  normalizeArray: function(parts, allowAboveRoot) {
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for (var i = parts.length - 1; i >= 0; i--) {
      var last = parts[i];
      if (last === '.') {
        parts.splice(i, 1);
      } else if (last === '..') {
        parts.splice(i, 1);
        up++;
      } else if (up) {
        parts.splice(i, 1);
        up--;
      }
    }
    // if the path is allowed to go above the root, restore leading ..s
    if (allowAboveRoot) {
      for (; up; up--) {
        parts.unshift('..');
      }
    }
    return parts;
  },
  normalize: function(path) {
    var isAbsolute = path.charAt(0) === '/',
      trailingSlash = path.substr(-1) === '/';
    // Normalize the path
    path = PATH.normalizeArray(
      path.split('/').filter(function(p) {
        return !!p;
      }),
      !isAbsolute
    ).join('/');
    if (!path && !isAbsolute) {
      path = '.';
    }
    if (path && trailingSlash) {
      path += '/';
    }
    return (isAbsolute ? '/' : '') + path;
  },
  dirname: function(path) {
    var result = PATH.splitPath(path),
      root = result[0],
      dir = result[1];
    if (!root && !dir) {
      // No dirname whatsoever
      return '.';
    }
    if (dir) {
      // It has a dirname, strip trailing slash
      dir = dir.substr(0, dir.length - 1);
    }
    return root + dir;
  },
  basename: function(path) {
    // EMSCRIPTEN return '/'' for '/', not an empty string
    if (path === '/') return '/';
    var lastSlash = path.lastIndexOf('/');
    if (lastSlash === -1) return path;
    return path.substr(lastSlash + 1);
  },
  extname: function(path) {
    return PATH.splitPath(path)[3];
  },
  join: function() {
    var paths = Array.prototype.slice.call(arguments, 0);
    return PATH.normalize(paths.join('/'));
  },
  join2: function(l, r) {
    return PATH.normalize(l + '/' + r);
  }
};
var SYSCALLS = {
  buffers: [null, [], []],
  printChar: function(stream, curr) {
    var buffer = SYSCALLS.buffers[stream];
    assert(buffer);
    if (curr === 0 || curr === 10) {
      (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
      buffer.length = 0;
    } else {
      buffer.push(curr);
    }
  },
  varargs: 0,
  get: function(varargs) {
    SYSCALLS.varargs += 4;
    var ret = HEAP32[(SYSCALLS.varargs - 4) >> 2];
    return ret;
  },
  getStr: function() {
    var ret = UTF8ToString(SYSCALLS.get());
    return ret;
  },
  get64: function() {
    var low = SYSCALLS.get(),
      high = SYSCALLS.get();
    if (low >= 0) assert(high === 0);
    else assert(high === -1);
    return low;
  },
  getZero: function() {
    assert(SYSCALLS.get() === 0);
  }
};
function ___syscall140(which, varargs) {
  SYSCALLS.varargs = varargs;
  try {
    // llseek
    var stream = SYSCALLS.getStreamFromFD(),
      offset_high = SYSCALLS.get(),
      offset_low = SYSCALLS.get(),
      result = SYSCALLS.get(),
      whence = SYSCALLS.get();
    abort(
      'it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM'
    );
    return 0;
  } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
}

function flush_NO_FILESYSTEM() {
  // flush anything remaining in the buffers during shutdown
  var fflush = Module['_fflush'];
  if (fflush) fflush(0);
  var buffers = SYSCALLS.buffers;
  if (buffers[1].length) SYSCALLS.printChar(1, 10);
  if (buffers[2].length) SYSCALLS.printChar(2, 10);
}
function ___syscall146(which, varargs) {
  SYSCALLS.varargs = varargs;
  try {
    // writev
    // hack to support printf in SYSCALLS_REQUIRE_FILESYSTEM=0
    var stream = SYSCALLS.get(),
      iov = SYSCALLS.get(),
      iovcnt = SYSCALLS.get();
    var ret = 0;
    for (var i = 0; i < iovcnt; i++) {
      var ptr = HEAP32[(iov + i * 8) >> 2];
      var len = HEAP32[(iov + (i * 8 + 4)) >> 2];
      for (var j = 0; j < len; j++) {
        SYSCALLS.printChar(stream, HEAPU8[ptr + j]);
      }
      ret += len;
    }
    return ret;
  } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
}

function ___syscall54(which, varargs) {
  SYSCALLS.varargs = varargs;
  try {
    // ioctl
    return 0;
  } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
}

function ___syscall6(which, varargs) {
  SYSCALLS.varargs = varargs;
  try {
    // close
    var stream = SYSCALLS.getStreamFromFD();
    abort(
      'it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM'
    );
    return 0;
  } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
}

function ___unlock() {}

var structRegistrations = {};

function runDestructors(destructors) {
  while (destructors.length) {
    var ptr = destructors.pop();
    var del = destructors.pop();
    del(ptr);
  }
}

function simpleReadValueFromPointer(pointer) {
  return this['fromWireType'](HEAPU32[pointer >> 2]);
}

var awaitingDependencies = {};

var registeredTypes = {};

var typeDependencies = {};

var char_0 = 48;

var char_9 = 57;
function makeLegalFunctionName(name) {
  if (undefined === name) {
    return '_unknown';
  }
  name = name.replace(/[^a-zA-Z0-9_]/g, '$');
  var f = name.charCodeAt(0);
  if (f >= char_0 && f <= char_9) {
    return '_' + name;
  } else {
    return name;
  }
}
function createNamedFunction(name, body) {
  name = makeLegalFunctionName(name);
  /*jshint evil:true*/
  return new Function(
    'body',
    'return function ' +
      name +
      '() {\n' +
      '    "use strict";' +
      '    return body.apply(this, arguments);\n' +
      '};\n'
  )(body);
}
function extendError(baseErrorType, errorName) {
  var errorClass = createNamedFunction(errorName, function(message) {
    this.name = errorName;
    this.message = message;

    var stack = new Error(message).stack;
    if (stack !== undefined) {
      this.stack =
        this.toString() + '\n' + stack.replace(/^Error(:[^\n]*)?\n/, '');
    }
  });
  errorClass.prototype = Object.create(baseErrorType.prototype);
  errorClass.prototype.constructor = errorClass;
  errorClass.prototype.toString = function() {
    if (this.message === undefined) {
      return this.name;
    } else {
      return this.name + ': ' + this.message;
    }
  };

  return errorClass;
}
var InternalError = undefined;
function throwInternalError(message) {
  throw new InternalError(message);
}
function whenDependentTypesAreResolved(
  myTypes,
  dependentTypes,
  getTypeConverters
) {
  myTypes.forEach(function(type) {
    typeDependencies[type] = dependentTypes;
  });

  function onComplete(typeConverters) {
    var myTypeConverters = getTypeConverters(typeConverters);
    if (myTypeConverters.length !== myTypes.length) {
      throwInternalError('Mismatched type converter count');
    }
    for (var i = 0; i < myTypes.length; ++i) {
      registerType(myTypes[i], myTypeConverters[i]);
    }
  }

  var typeConverters = new Array(dependentTypes.length);
  var unregisteredTypes = [];
  var registered = 0;
  dependentTypes.forEach(function(dt, i) {
    if (registeredTypes.hasOwnProperty(dt)) {
      typeConverters[i] = registeredTypes[dt];
    } else {
      unregisteredTypes.push(dt);
      if (!awaitingDependencies.hasOwnProperty(dt)) {
        awaitingDependencies[dt] = [];
      }
      awaitingDependencies[dt].push(function() {
        typeConverters[i] = registeredTypes[dt];
        ++registered;
        if (registered === unregisteredTypes.length) {
          onComplete(typeConverters);
        }
      });
    }
  });
  if (0 === unregisteredTypes.length) {
    onComplete(typeConverters);
  }
}
function __embind_finalize_value_object(structType) {
  var reg = structRegistrations[structType];
  delete structRegistrations[structType];

  var rawConstructor = reg.rawConstructor;
  var rawDestructor = reg.rawDestructor;
  var fieldRecords = reg.fields;
  var fieldTypes = fieldRecords
    .map(function(field) {
      return field.getterReturnType;
    })
    .concat(
      fieldRecords.map(function(field) {
        return field.setterArgumentType;
      })
    );
  whenDependentTypesAreResolved([structType], fieldTypes, function(fieldTypes) {
    var fields = {};
    fieldRecords.forEach(function(field, i) {
      var fieldName = field.fieldName;
      var getterReturnType = fieldTypes[i];
      var getter = field.getter;
      var getterContext = field.getterContext;
      var setterArgumentType = fieldTypes[i + fieldRecords.length];
      var setter = field.setter;
      var setterContext = field.setterContext;
      fields[fieldName] = {
        read: function(ptr) {
          return getterReturnType['fromWireType'](getter(getterContext, ptr));
        },
        write: function(ptr, o) {
          var destructors = [];
          setter(
            setterContext,
            ptr,
            setterArgumentType['toWireType'](destructors, o)
          );
          runDestructors(destructors);
        }
      };
    });

    return [
      {
        name: reg.name,
        fromWireType: function(ptr) {
          var rv = {};
          for (var i in fields) {
            rv[i] = fields[i].read(ptr);
          }
          rawDestructor(ptr);
          return rv;
        },
        toWireType: function(destructors, o) {
          // todo: Here we have an opportunity for -O3 level "unsafe" optimizations:
          // assume all fields are present without checking.
          for (var fieldName in fields) {
            if (!(fieldName in o)) {
              throw new TypeError('Missing field');
            }
          }
          var ptr = rawConstructor();
          for (fieldName in fields) {
            fields[fieldName].write(ptr, o[fieldName]);
          }
          if (destructors !== null) {
            destructors.push(rawDestructor, ptr);
          }
          return ptr;
        },
        argPackAdvance: 8,
        readValueFromPointer: simpleReadValueFromPointer,
        destructorFunction: rawDestructor
      }
    ];
  });
}

function getShiftFromSize(size) {
  switch (size) {
    case 1:
      return 0;
    case 2:
      return 1;
    case 4:
      return 2;
    case 8:
      return 3;
    default:
      throw new TypeError('Unknown type size: ' + size);
  }
}

function embind_init_charCodes() {
  var codes = new Array(256);
  for (var i = 0; i < 256; ++i) {
    codes[i] = String.fromCharCode(i);
  }
  embind_charCodes = codes;
}
var embind_charCodes = undefined;
function readLatin1String(ptr) {
  var ret = '';
  var c = ptr;
  while (HEAPU8[c]) {
    ret += embind_charCodes[HEAPU8[c++]];
  }
  return ret;
}

var BindingError = undefined;
function throwBindingError(message) {
  throw new BindingError(message);
}
function registerType(rawType, registeredInstance, options) {
  options = options || {};

  if (!('argPackAdvance' in registeredInstance)) {
    throw new TypeError(
      'registerType registeredInstance requires argPackAdvance'
    );
  }

  var name = registeredInstance.name;
  if (!rawType) {
    throwBindingError(
      'type "' + name + '" must have a positive integer typeid pointer'
    );
  }
  if (registeredTypes.hasOwnProperty(rawType)) {
    if (options.ignoreDuplicateRegistrations) {
      return;
    } else {
      throwBindingError("Cannot register type '" + name + "' twice");
    }
  }

  registeredTypes[rawType] = registeredInstance;
  delete typeDependencies[rawType];

  if (awaitingDependencies.hasOwnProperty(rawType)) {
    var callbacks = awaitingDependencies[rawType];
    delete awaitingDependencies[rawType];
    callbacks.forEach(function(cb) {
      cb();
    });
  }
}
function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
  var shift = getShiftFromSize(size);

  name = readLatin1String(name);
  registerType(rawType, {
    name: name,
    fromWireType: function(wt) {
      // ambiguous emscripten ABI: sometimes return values are
      // true or false, and sometimes integers (0 or 1)
      return !!wt;
    },
    toWireType: function(destructors, o) {
      return o ? trueValue : falseValue;
    },
    argPackAdvance: 8,
    readValueFromPointer: function(pointer) {
      // TODO: if heap is fixed (like in asm.js) this could be executed outside
      var heap;
      if (size === 1) {
        heap = HEAP8;
      } else if (size === 2) {
        heap = HEAP16;
      } else if (size === 4) {
        heap = HEAP32;
      } else {
        throw new TypeError('Unknown boolean type size: ' + name);
      }
      return this['fromWireType'](heap[pointer >> shift]);
    },
    destructorFunction: null // This type does not need a destructor
  });
}

function ClassHandle_isAliasOf(other) {
  if (!(this instanceof ClassHandle)) {
    return false;
  }
  if (!(other instanceof ClassHandle)) {
    return false;
  }

  var leftClass = this.$$.ptrType.registeredClass;
  var left = this.$$.ptr;
  var rightClass = other.$$.ptrType.registeredClass;
  var right = other.$$.ptr;

  while (leftClass.baseClass) {
    left = leftClass.upcast(left);
    leftClass = leftClass.baseClass;
  }

  while (rightClass.baseClass) {
    right = rightClass.upcast(right);
    rightClass = rightClass.baseClass;
  }

  return leftClass === rightClass && left === right;
}

function shallowCopyInternalPointer(o) {
  return {
    count: o.count,
    deleteScheduled: o.deleteScheduled,
    preservePointerOnDelete: o.preservePointerOnDelete,
    ptr: o.ptr,
    ptrType: o.ptrType,
    smartPtr: o.smartPtr,
    smartPtrType: o.smartPtrType
  };
}

function throwInstanceAlreadyDeleted(obj) {
  function getInstanceTypeName(handle) {
    return handle.$$.ptrType.registeredClass.name;
  }
  throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
}

var finalizationGroup = false;

function detachFinalizer(handle) {}

function runDestructor($$) {
  if ($$.smartPtr) {
    $$.smartPtrType.rawDestructor($$.smartPtr);
  } else {
    $$.ptrType.registeredClass.rawDestructor($$.ptr);
  }
}
function releaseClassHandle($$) {
  $$.count.value -= 1;
  var toDelete = 0 === $$.count.value;
  if (toDelete) {
    runDestructor($$);
  }
}
function attachFinalizer(handle) {
  if ('undefined' === typeof FinalizationGroup) {
    attachFinalizer = function(handle) {
      return handle;
    };
    return handle;
  }
  // If the running environment has a FinalizationGroup (see
  // https://github.com/tc39/proposal-weakrefs), then attach finalizers
  // for class handles.  We check for the presence of FinalizationGroup
  // at run-time, not build-time.
  finalizationGroup = new FinalizationGroup(function(iter) {
    for (var result = iter.next(); !result.done; result = iter.next()) {
      var $$ = result.value;
      if (!$$.ptr) {
        console.warn('object already deleted: ' + $$.ptr);
      } else {
        releaseClassHandle($$);
      }
    }
  });
  attachFinalizer = function(handle) {
    finalizationGroup.register(handle, handle.$$, handle.$$);
    return handle;
  };
  detachFinalizer = function(handle) {
    finalizationGroup.unregister(handle.$$);
  };
  return attachFinalizer(handle);
}
function ClassHandle_clone() {
  if (!this.$$.ptr) {
    throwInstanceAlreadyDeleted(this);
  }

  if (this.$$.preservePointerOnDelete) {
    this.$$.count.value += 1;
    return this;
  } else {
    var clone = attachFinalizer(
      Object.create(Object.getPrototypeOf(this), {
        $$: {
          value: shallowCopyInternalPointer(this.$$)
        }
      })
    );

    clone.$$.count.value += 1;
    clone.$$.deleteScheduled = false;
    return clone;
  }
}

function ClassHandle_delete() {
  if (!this.$$.ptr) {
    throwInstanceAlreadyDeleted(this);
  }

  if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
    throwBindingError('Object already scheduled for deletion');
  }

  detachFinalizer(this);
  releaseClassHandle(this.$$);

  if (!this.$$.preservePointerOnDelete) {
    this.$$.smartPtr = undefined;
    this.$$.ptr = undefined;
  }
}

function ClassHandle_isDeleted() {
  return !this.$$.ptr;
}

var delayFunction = undefined;

var deletionQueue = [];

function flushPendingDeletes() {
  while (deletionQueue.length) {
    var obj = deletionQueue.pop();
    obj.$$.deleteScheduled = false;
    obj['delete']();
  }
}
function ClassHandle_deleteLater() {
  if (!this.$$.ptr) {
    throwInstanceAlreadyDeleted(this);
  }
  if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
    throwBindingError('Object already scheduled for deletion');
  }
  deletionQueue.push(this);
  if (deletionQueue.length === 1 && delayFunction) {
    delayFunction(flushPendingDeletes);
  }
  this.$$.deleteScheduled = true;
  return this;
}
function init_ClassHandle() {
  ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
  ClassHandle.prototype['clone'] = ClassHandle_clone;
  ClassHandle.prototype['delete'] = ClassHandle_delete;
  ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
  ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
}
function ClassHandle() {}

var registeredPointers = {};

function ensureOverloadTable(proto, methodName, humanName) {
  if (undefined === proto[methodName].overloadTable) {
    var prevFunc = proto[methodName];
    // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
    proto[methodName] = function() {
      // TODO This check can be removed in -O3 level "unsafe" optimizations.
      if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
        throwBindingError(
          "Function '" +
            humanName +
            "' called with an invalid number of arguments (" +
            arguments.length +
            ') - expects one of (' +
            proto[methodName].overloadTable +
            ')!'
        );
      }
      return proto[methodName].overloadTable[arguments.length].apply(
        this,
        arguments
      );
    };
    // Move the previous function into the overload table.
    proto[methodName].overloadTable = [];
    proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
  }
}
function exposePublicSymbol(name, value, numArguments) {
  if (Module.hasOwnProperty(name)) {
    if (
      undefined === numArguments ||
      (undefined !== Module[name].overloadTable &&
        undefined !== Module[name].overloadTable[numArguments])
    ) {
      throwBindingError("Cannot register public name '" + name + "' twice");
    }

    // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
    // that routes between the two.
    ensureOverloadTable(Module, name, name);
    if (Module.hasOwnProperty(numArguments)) {
      throwBindingError(
        'Cannot register multiple overloads of a function with the same number of arguments (' +
          numArguments +
          ')!'
      );
    }
    // Add the new function into the overload table.
    Module[name].overloadTable[numArguments] = value;
  } else {
    Module[name] = value;
    if (undefined !== numArguments) {
      Module[name].numArguments = numArguments;
    }
  }
}

function RegisteredClass(
  name,
  constructor,
  instancePrototype,
  rawDestructor,
  baseClass,
  getActualType,
  upcast,
  downcast
) {
  this.name = name;
  this.constructor = constructor;
  this.instancePrototype = instancePrototype;
  this.rawDestructor = rawDestructor;
  this.baseClass = baseClass;
  this.getActualType = getActualType;
  this.upcast = upcast;
  this.downcast = downcast;
  this.pureVirtualFunctions = [];
}

function upcastPointer(ptr, ptrClass, desiredClass) {
  while (ptrClass !== desiredClass) {
    if (!ptrClass.upcast) {
      throwBindingError(
        'Expected null or instance of ' +
          desiredClass.name +
          ', got an instance of ' +
          ptrClass.name
      );
    }
    ptr = ptrClass.upcast(ptr);
    ptrClass = ptrClass.baseClass;
  }
  return ptr;
}
function constNoSmartPtrRawPointerToWireType(destructors, handle) {
  if (handle === null) {
    if (this.isReference) {
      throwBindingError('null is not a valid ' + this.name);
    }
    return 0;
  }

  if (!handle.$$) {
    throwBindingError(
      'Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name
    );
  }
  if (!handle.$$.ptr) {
    throwBindingError(
      'Cannot pass deleted object as a pointer of type ' + this.name
    );
  }
  var handleClass = handle.$$.ptrType.registeredClass;
  var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  return ptr;
}

function genericPointerToWireType(destructors, handle) {
  var ptr;
  if (handle === null) {
    if (this.isReference) {
      throwBindingError('null is not a valid ' + this.name);
    }

    if (this.isSmartPointer) {
      ptr = this.rawConstructor();
      if (destructors !== null) {
        destructors.push(this.rawDestructor, ptr);
      }
      return ptr;
    } else {
      return 0;
    }
  }

  if (!handle.$$) {
    throwBindingError(
      'Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name
    );
  }
  if (!handle.$$.ptr) {
    throwBindingError(
      'Cannot pass deleted object as a pointer of type ' + this.name
    );
  }
  if (!this.isConst && handle.$$.ptrType.isConst) {
    throwBindingError(
      'Cannot convert argument of type ' +
        (handle.$$.smartPtrType
          ? handle.$$.smartPtrType.name
          : handle.$$.ptrType.name) +
        ' to parameter type ' +
        this.name
    );
  }
  var handleClass = handle.$$.ptrType.registeredClass;
  ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);

  if (this.isSmartPointer) {
    // TODO: this is not strictly true
    // We could support BY_EMVAL conversions from raw pointers to smart pointers
    // because the smart pointer can hold a reference to the handle
    if (undefined === handle.$$.smartPtr) {
      throwBindingError('Passing raw pointer to smart pointer is illegal');
    }

    switch (this.sharingPolicy) {
      case 0: // NONE
        // no upcasting
        if (handle.$$.smartPtrType === this) {
          ptr = handle.$$.smartPtr;
        } else {
          throwBindingError(
            'Cannot convert argument of type ' +
              (handle.$$.smartPtrType
                ? handle.$$.smartPtrType.name
                : handle.$$.ptrType.name) +
              ' to parameter type ' +
              this.name
          );
        }
        break;

      case 1: // INTRUSIVE
        ptr = handle.$$.smartPtr;
        break;

      case 2: // BY_EMVAL
        if (handle.$$.smartPtrType === this) {
          ptr = handle.$$.smartPtr;
        } else {
          var clonedHandle = handle['clone']();
          ptr = this.rawShare(
            ptr,
            __emval_register(function() {
              clonedHandle['delete']();
            })
          );
          if (destructors !== null) {
            destructors.push(this.rawDestructor, ptr);
          }
        }
        break;

      default:
        throwBindingError('Unsupporting sharing policy');
    }
  }
  return ptr;
}

function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
  if (handle === null) {
    if (this.isReference) {
      throwBindingError('null is not a valid ' + this.name);
    }
    return 0;
  }

  if (!handle.$$) {
    throwBindingError(
      'Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name
    );
  }
  if (!handle.$$.ptr) {
    throwBindingError(
      'Cannot pass deleted object as a pointer of type ' + this.name
    );
  }
  if (handle.$$.ptrType.isConst) {
    throwBindingError(
      'Cannot convert argument of type ' +
        handle.$$.ptrType.name +
        ' to parameter type ' +
        this.name
    );
  }
  var handleClass = handle.$$.ptrType.registeredClass;
  var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  return ptr;
}

function RegisteredPointer_getPointee(ptr) {
  if (this.rawGetPointee) {
    ptr = this.rawGetPointee(ptr);
  }
  return ptr;
}

function RegisteredPointer_destructor(ptr) {
  if (this.rawDestructor) {
    this.rawDestructor(ptr);
  }
}

function RegisteredPointer_deleteObject(handle) {
  if (handle !== null) {
    handle['delete']();
  }
}

function downcastPointer(ptr, ptrClass, desiredClass) {
  if (ptrClass === desiredClass) {
    return ptr;
  }
  if (undefined === desiredClass.baseClass) {
    return null; // no conversion
  }

  var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
  if (rv === null) {
    return null;
  }
  return desiredClass.downcast(rv);
}

function getInheritedInstanceCount() {
  return Object.keys(registeredInstances).length;
}

function getLiveInheritedInstances() {
  var rv = [];
  for (var k in registeredInstances) {
    if (registeredInstances.hasOwnProperty(k)) {
      rv.push(registeredInstances[k]);
    }
  }
  return rv;
}

function setDelayFunction(fn) {
  delayFunction = fn;
  if (deletionQueue.length && delayFunction) {
    delayFunction(flushPendingDeletes);
  }
}
function init_embind() {
  Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
  Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
  Module['flushPendingDeletes'] = flushPendingDeletes;
  Module['setDelayFunction'] = setDelayFunction;
}
var registeredInstances = {};

function getBasestPointer(class_, ptr) {
  if (ptr === undefined) {
    throwBindingError('ptr should not be undefined');
  }
  while (class_.baseClass) {
    ptr = class_.upcast(ptr);
    class_ = class_.baseClass;
  }
  return ptr;
}
function getInheritedInstance(class_, ptr) {
  ptr = getBasestPointer(class_, ptr);
  return registeredInstances[ptr];
}

function makeClassHandle(prototype, record) {
  if (!record.ptrType || !record.ptr) {
    throwInternalError('makeClassHandle requires ptr and ptrType');
  }
  var hasSmartPtrType = !!record.smartPtrType;
  var hasSmartPtr = !!record.smartPtr;
  if (hasSmartPtrType !== hasSmartPtr) {
    throwInternalError('Both smartPtrType and smartPtr must be specified');
  }
  record.count = { value: 1 };
  return attachFinalizer(
    Object.create(prototype, {
      $$: {
        value: record
      }
    })
  );
}
function RegisteredPointer_fromWireType(ptr) {
  // ptr is a raw pointer (or a raw smartpointer)

  // rawPointer is a maybe-null raw pointer
  var rawPointer = this.getPointee(ptr);
  if (!rawPointer) {
    this.destructor(ptr);
    return null;
  }

  var registeredInstance = getInheritedInstance(
    this.registeredClass,
    rawPointer
  );
  if (undefined !== registeredInstance) {
    // JS object has been neutered, time to repopulate it
    if (0 === registeredInstance.$$.count.value) {
      registeredInstance.$$.ptr = rawPointer;
      registeredInstance.$$.smartPtr = ptr;
      return registeredInstance['clone']();
    } else {
      // else, just increment reference count on existing object
      // it already has a reference to the smart pointer
      var rv = registeredInstance['clone']();
      this.destructor(ptr);
      return rv;
    }
  }

  function makeDefaultHandle() {
    if (this.isSmartPointer) {
      return makeClassHandle(this.registeredClass.instancePrototype, {
        ptrType: this.pointeeType,
        ptr: rawPointer,
        smartPtrType: this,
        smartPtr: ptr
      });
    } else {
      return makeClassHandle(this.registeredClass.instancePrototype, {
        ptrType: this,
        ptr: ptr
      });
    }
  }

  var actualType = this.registeredClass.getActualType(rawPointer);
  var registeredPointerRecord = registeredPointers[actualType];
  if (!registeredPointerRecord) {
    return makeDefaultHandle.call(this);
  }

  var toType;
  if (this.isConst) {
    toType = registeredPointerRecord.constPointerType;
  } else {
    toType = registeredPointerRecord.pointerType;
  }
  var dp = downcastPointer(
    rawPointer,
    this.registeredClass,
    toType.registeredClass
  );
  if (dp === null) {
    return makeDefaultHandle.call(this);
  }
  if (this.isSmartPointer) {
    return makeClassHandle(toType.registeredClass.instancePrototype, {
      ptrType: toType,
      ptr: dp,
      smartPtrType: this,
      smartPtr: ptr
    });
  } else {
    return makeClassHandle(toType.registeredClass.instancePrototype, {
      ptrType: toType,
      ptr: dp
    });
  }
}
function init_RegisteredPointer() {
  RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
  RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
  RegisteredPointer.prototype['argPackAdvance'] = 8;
  RegisteredPointer.prototype[
    'readValueFromPointer'
  ] = simpleReadValueFromPointer;
  RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
  RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
}
function RegisteredPointer(
  name,
  registeredClass,
  isReference,
  isConst,

  // smart pointer properties
  isSmartPointer,
  pointeeType,
  sharingPolicy,
  rawGetPointee,
  rawConstructor,
  rawShare,
  rawDestructor
) {
  this.name = name;
  this.registeredClass = registeredClass;
  this.isReference = isReference;
  this.isConst = isConst;

  // smart pointer properties
  this.isSmartPointer = isSmartPointer;
  this.pointeeType = pointeeType;
  this.sharingPolicy = sharingPolicy;
  this.rawGetPointee = rawGetPointee;
  this.rawConstructor = rawConstructor;
  this.rawShare = rawShare;
  this.rawDestructor = rawDestructor;

  if (!isSmartPointer && registeredClass.baseClass === undefined) {
    if (isConst) {
      this['toWireType'] = constNoSmartPtrRawPointerToWireType;
      this.destructorFunction = null;
    } else {
      this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
      this.destructorFunction = null;
    }
  } else {
    this['toWireType'] = genericPointerToWireType;
    // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
    // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
    // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
    //       craftInvokerFunction altogether.
  }
}

function replacePublicSymbol(name, value, numArguments) {
  if (!Module.hasOwnProperty(name)) {
    throwInternalError('Replacing nonexistant public symbol');
  }
  // If there's an overload table for this symbol, replace the symbol in the overload table instead.
  if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
    Module[name].overloadTable[numArguments] = value;
  } else {
    Module[name] = value;
    Module[name].argCount = numArguments;
  }
}

function embind__requireFunction(signature, rawFunction) {
  signature = readLatin1String(signature);

  function makeDynCaller(dynCall) {
    var args = [];
    for (var i = 1; i < signature.length; ++i) {
      args.push('a' + i);
    }

    var name = 'dynCall_' + signature + '_' + rawFunction;
    var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
    body +=
      '    return dynCall(rawFunction' +
      (args.length ? ', ' : '') +
      args.join(', ') +
      ');\n';
    body += '};\n';

    return new Function('dynCall', 'rawFunction', body)(dynCall, rawFunction);
  }

  var fp;
  if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
    fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
  } else if (typeof FUNCTION_TABLE !== 'undefined') {
    fp = FUNCTION_TABLE[rawFunction];
  } else {
    // asm.js does not give direct access to the function tables,
    // and thus we must go through the dynCall interface which allows
    // calling into a signature's function table by pointer value.
    //
    // https://github.com/dherman/asm.js/issues/83
    //
    // This has three main penalties:
    // - dynCall is another function call in the path from JavaScript to C++.
    // - JITs may not predict through the function table indirection at runtime.
    var dc = Module['dynCall_' + signature];
    if (dc === undefined) {
      // We will always enter this branch if the signature
      // contains 'f' and PRECISE_F32 is not enabled.
      //
      // Try again, replacing 'f' with 'd'.
      dc = Module['dynCall_' + signature.replace(/f/g, 'd')];
      if (dc === undefined) {
        throwBindingError('No dynCall invoker for signature: ' + signature);
      }
    }
    fp = makeDynCaller(dc);
  }

  if (typeof fp !== 'function') {
    throwBindingError(
      'unknown function pointer with signature ' +
        signature +
        ': ' +
        rawFunction
    );
  }
  return fp;
}

var UnboundTypeError = undefined;

function getTypeName(type) {
  var ptr = ___getTypeName(type);
  var rv = readLatin1String(ptr);
  _free(ptr);
  return rv;
}
function throwUnboundTypeError(message, types) {
  var unboundTypes = [];
  var seen = {};
  function visit(type) {
    if (seen[type]) {
      return;
    }
    if (registeredTypes[type]) {
      return;
    }
    if (typeDependencies[type]) {
      typeDependencies[type].forEach(visit);
      return;
    }
    unboundTypes.push(type);
    seen[type] = true;
  }
  types.forEach(visit);

  throw new UnboundTypeError(
    message + ': ' + unboundTypes.map(getTypeName).join([', '])
  );
}
function __embind_register_class(
  rawType,
  rawPointerType,
  rawConstPointerType,
  baseClassRawType,
  getActualTypeSignature,
  getActualType,
  upcastSignature,
  upcast,
  downcastSignature,
  downcast,
  name,
  destructorSignature,
  rawDestructor
) {
  name = readLatin1String(name);
  getActualType = embind__requireFunction(
    getActualTypeSignature,
    getActualType
  );
  if (upcast) {
    upcast = embind__requireFunction(upcastSignature, upcast);
  }
  if (downcast) {
    downcast = embind__requireFunction(downcastSignature, downcast);
  }
  rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
  var legalFunctionName = makeLegalFunctionName(name);

  exposePublicSymbol(legalFunctionName, function() {
    // this code cannot run if baseClassRawType is zero
    throwUnboundTypeError(
      'Cannot construct ' + name + ' due to unbound types',
      [baseClassRawType]
    );
  });

  whenDependentTypesAreResolved(
    [rawType, rawPointerType, rawConstPointerType],
    baseClassRawType ? [baseClassRawType] : [],
    function(base) {
      base = base[0];

      var baseClass;
      var basePrototype;
      if (baseClassRawType) {
        baseClass = base.registeredClass;
        basePrototype = baseClass.instancePrototype;
      } else {
        basePrototype = ClassHandle.prototype;
      }

      var constructor = createNamedFunction(legalFunctionName, function() {
        if (Object.getPrototypeOf(this) !== instancePrototype) {
          throw new BindingError("Use 'new' to construct " + name);
        }
        if (undefined === registeredClass.constructor_body) {
          throw new BindingError(name + ' has no accessible constructor');
        }
        var body = registeredClass.constructor_body[arguments.length];
        if (undefined === body) {
          throw new BindingError(
            'Tried to invoke ctor of ' +
              name +
              ' with invalid number of parameters (' +
              arguments.length +
              ') - expected (' +
              Object.keys(registeredClass.constructor_body).toString() +
              ') parameters instead!'
          );
        }
        return body.apply(this, arguments);
      });

      var instancePrototype = Object.create(basePrototype, {
        constructor: { value: constructor }
      });

      constructor.prototype = instancePrototype;

      var registeredClass = new RegisteredClass(
        name,
        constructor,
        instancePrototype,
        rawDestructor,
        baseClass,
        getActualType,
        upcast,
        downcast
      );

      var referenceConverter = new RegisteredPointer(
        name,
        registeredClass,
        true,
        false,
        false
      );

      var pointerConverter = new RegisteredPointer(
        name + '*',
        registeredClass,
        false,
        false,
        false
      );

      var constPointerConverter = new RegisteredPointer(
        name + ' const*',
        registeredClass,
        false,
        true,
        false
      );

      registeredPointers[rawType] = {
        pointerType: pointerConverter,
        constPointerType: constPointerConverter
      };

      replacePublicSymbol(legalFunctionName, constructor);

      return [referenceConverter, pointerConverter, constPointerConverter];
    }
  );
}

function heap32VectorToArray(count, firstElement) {
  var array = [];
  for (var i = 0; i < count; i++) {
    array.push(HEAP32[(firstElement >> 2) + i]);
  }
  return array;
}
function __embind_register_class_constructor(
  rawClassType,
  argCount,
  rawArgTypesAddr,
  invokerSignature,
  invoker,
  rawConstructor
) {
  var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
  invoker = embind__requireFunction(invokerSignature, invoker);

  whenDependentTypesAreResolved([], [rawClassType], function(classType) {
    classType = classType[0];
    var humanName = 'constructor ' + classType.name;

    if (undefined === classType.registeredClass.constructor_body) {
      classType.registeredClass.constructor_body = [];
    }
    if (
      undefined !== classType.registeredClass.constructor_body[argCount - 1]
    ) {
      throw new BindingError(
        'Cannot register multiple constructors with identical number of parameters (' +
          (argCount - 1) +
          ") for class '" +
          classType.name +
          "'! Overload resolution is currently only performed using the parameter count, not actual type info!"
      );
    }
    classType.registeredClass.constructor_body[
      argCount - 1
    ] = function unboundTypeHandler() {
      throwUnboundTypeError(
        'Cannot construct ' + classType.name + ' due to unbound types',
        rawArgTypes
      );
    };

    whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
      classType.registeredClass.constructor_body[
        argCount - 1
      ] = function constructor_body() {
        if (arguments.length !== argCount - 1) {
          throwBindingError(
            humanName +
              ' called with ' +
              arguments.length +
              ' arguments, expected ' +
              (argCount - 1)
          );
        }
        var destructors = [];
        var args = new Array(argCount);
        args[0] = rawConstructor;
        for (var i = 1; i < argCount; ++i) {
          args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
        }

        var ptr = invoker.apply(null, args);
        runDestructors(destructors);

        return argTypes[0]['fromWireType'](ptr);
      };
      return [];
    });
    return [];
  });
}

function new_(constructor, argumentList) {
  if (!(constructor instanceof Function)) {
    throw new TypeError(
      'new_ called with constructor type ' +
        typeof constructor +
        ' which is not a function'
    );
  }

  /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
  var dummy = createNamedFunction(
    constructor.name || 'unknownFunctionName',
    function() {}
  );
  dummy.prototype = constructor.prototype;
  var obj = new dummy();

  var r = constructor.apply(obj, argumentList);
  return r instanceof Object ? r : obj;
}
function craftInvokerFunction(
  humanName,
  argTypes,
  classType,
  cppInvokerFunc,
  cppTargetFunc
) {
  // humanName: a human-readable string name for the function to be generated.
  // argTypes: An array that contains the embind type objects for all types in the function signature.
  //    argTypes[0] is the type object for the function return value.
  //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
  //    argTypes[2...] are the actual function parameters.
  // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
  // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
  // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
  var argCount = argTypes.length;

  if (argCount < 2) {
    throwBindingError(
      "argTypes array size mismatch! Must at least get return value and 'this' types!"
    );
  }

  var isClassMethodFunc = argTypes[1] !== null && classType !== null;

  // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }

  // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
  // TODO: Remove this completely once all function invokers are being dynamically generated.
  var needsDestructorStack = false;

  for (var i = 1; i < argTypes.length; ++i) {
    // Skip return value at index 0 - it's not deleted here.
    if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) {
      // The type does not define a destructor function - must use dynamic stack
      needsDestructorStack = true;
      break;
    }
  }

  var returns = argTypes[0].name !== 'void';

  var argsList = '';
  var argsListWired = '';
  for (var i = 0; i < argCount - 2; ++i) {
    argsList += (i !== 0 ? ', ' : '') + 'arg' + i;
    argsListWired += (i !== 0 ? ', ' : '') + 'arg' + i + 'Wired';
  }

  var invokerFnBody =
    'return function ' +
    makeLegalFunctionName(humanName) +
    '(' +
    argsList +
    ') {\n' +
    'if (arguments.length !== ' +
    (argCount - 2) +
    ') {\n' +
    "throwBindingError('function " +
    humanName +
    " called with ' + arguments.length + ' arguments, expected " +
    (argCount - 2) +
    " args!');\n" +
    '}\n';

  if (needsDestructorStack) {
    invokerFnBody += 'var destructors = [];\n';
  }

  var dtorStack = needsDestructorStack ? 'destructors' : 'null';
  var args1 = [
    'throwBindingError',
    'invoker',
    'fn',
    'runDestructors',
    'retType',
    'classParam'
  ];
  var args2 = [
    throwBindingError,
    cppInvokerFunc,
    cppTargetFunc,
    runDestructors,
    argTypes[0],
    argTypes[1]
  ];

  if (isClassMethodFunc) {
    invokerFnBody +=
      'var thisWired = classParam.toWireType(' + dtorStack + ', this);\n';
  }

  for (var i = 0; i < argCount - 2; ++i) {
    invokerFnBody +=
      'var arg' +
      i +
      'Wired = argType' +
      i +
      '.toWireType(' +
      dtorStack +
      ', arg' +
      i +
      '); // ' +
      argTypes[i + 2].name +
      '\n';
    args1.push('argType' + i);
    args2.push(argTypes[i + 2]);
  }

  if (isClassMethodFunc) {
    argsListWired =
      'thisWired' + (argsListWired.length > 0 ? ', ' : '') + argsListWired;
  }

  invokerFnBody +=
    (returns ? 'var rv = ' : '') +
    'invoker(fn' +
    (argsListWired.length > 0 ? ', ' : '') +
    argsListWired +
    ');\n';

  if (needsDestructorStack) {
    invokerFnBody += 'runDestructors(destructors);\n';
  } else {
    for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {
      // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
      var paramName = i === 1 ? 'thisWired' : 'arg' + (i - 2) + 'Wired';
      if (argTypes[i].destructorFunction !== null) {
        invokerFnBody +=
          paramName + '_dtor(' + paramName + '); // ' + argTypes[i].name + '\n';
        args1.push(paramName + '_dtor');
        args2.push(argTypes[i].destructorFunction);
      }
    }
  }

  if (returns) {
    invokerFnBody += 'var ret = retType.fromWireType(rv);\n' + 'return ret;\n';
  } else {
  }
  invokerFnBody += '}\n';

  args1.push(invokerFnBody);

  var invokerFunction = new_(Function, args1).apply(null, args2);
  return invokerFunction;
}
function __embind_register_class_function(
  rawClassType,
  methodName,
  argCount,
  rawArgTypesAddr, // [ReturnType, ThisType, Args...]
  invokerSignature,
  rawInvoker,
  context,
  isPureVirtual
) {
  var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
  methodName = readLatin1String(methodName);
  rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);

  whenDependentTypesAreResolved([], [rawClassType], function(classType) {
    classType = classType[0];
    var humanName = classType.name + '.' + methodName;

    if (isPureVirtual) {
      classType.registeredClass.pureVirtualFunctions.push(methodName);
    }

    function unboundTypesHandler() {
      throwUnboundTypeError(
        'Cannot call ' + humanName + ' due to unbound types',
        rawArgTypes
      );
    }

    var proto = classType.registeredClass.instancePrototype;
    var method = proto[methodName];
    if (
      undefined === method ||
      (undefined === method.overloadTable &&
        method.className !== classType.name &&
        method.argCount === argCount - 2)
    ) {
      // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
      unboundTypesHandler.argCount = argCount - 2;
      unboundTypesHandler.className = classType.name;
      proto[methodName] = unboundTypesHandler;
    } else {
      // There was an existing function with the same name registered. Set up a function overload routing table.
      ensureOverloadTable(proto, methodName, humanName);
      proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
    }

    whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
      var memberFunction = craftInvokerFunction(
        humanName,
        argTypes,
        classType,
        rawInvoker,
        context
      );

      // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
      // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
      if (undefined === proto[methodName].overloadTable) {
        // Set argCount in case an overload is registered later
        memberFunction.argCount = argCount - 2;
        proto[methodName] = memberFunction;
      } else {
        proto[methodName].overloadTable[argCount - 2] = memberFunction;
      }

      return [];
    });
    return [];
  });
}

function validateThis(this_, classType, humanName) {
  if (!(this_ instanceof Object)) {
    throwBindingError(humanName + ' with invalid "this": ' + this_);
  }
  if (!(this_ instanceof classType.registeredClass.constructor)) {
    throwBindingError(
      humanName + ' incompatible with "this" of type ' + this_.constructor.name
    );
  }
  if (!this_.$$.ptr) {
    throwBindingError(
      'cannot call emscripten binding method ' +
        humanName +
        ' on deleted object'
    );
  }

  // todo: kill this
  return upcastPointer(
    this_.$$.ptr,
    this_.$$.ptrType.registeredClass,
    classType.registeredClass
  );
}
function __embind_register_class_property(
  classType,
  fieldName,
  getterReturnType,
  getterSignature,
  getter,
  getterContext,
  setterArgumentType,
  setterSignature,
  setter,
  setterContext
) {
  fieldName = readLatin1String(fieldName);
  getter = embind__requireFunction(getterSignature, getter);

  whenDependentTypesAreResolved([], [classType], function(classType) {
    classType = classType[0];
    var humanName = classType.name + '.' + fieldName;
    var desc = {
      get: function() {
        throwUnboundTypeError(
          'Cannot access ' + humanName + ' due to unbound types',
          [getterReturnType, setterArgumentType]
        );
      },
      enumerable: true,
      configurable: true
    };
    if (setter) {
      desc.set = function() {
        throwUnboundTypeError(
          'Cannot access ' + humanName + ' due to unbound types',
          [getterReturnType, setterArgumentType]
        );
      };
    } else {
      desc.set = function(v) {
        throwBindingError(humanName + ' is a read-only property');
      };
    }

    Object.defineProperty(
      classType.registeredClass.instancePrototype,
      fieldName,
      desc
    );

    whenDependentTypesAreResolved(
      [],
      setter ? [getterReturnType, setterArgumentType] : [getterReturnType],
      function(types) {
        var getterReturnType = types[0];
        var desc = {
          get: function() {
            var ptr = validateThis(this, classType, humanName + ' getter');
            return getterReturnType['fromWireType'](getter(getterContext, ptr));
          },
          enumerable: true
        };

        if (setter) {
          setter = embind__requireFunction(setterSignature, setter);
          var setterArgumentType = types[1];
          desc.set = function(v) {
            var ptr = validateThis(this, classType, humanName + ' setter');
            var destructors = [];
            setter(
              setterContext,
              ptr,
              setterArgumentType['toWireType'](destructors, v)
            );
            runDestructors(destructors);
          };
        }

        Object.defineProperty(
          classType.registeredClass.instancePrototype,
          fieldName,
          desc
        );
        return [];
      }
    );

    return [];
  });
}

var emval_free_list = [];

var emval_handle_array = [
  {},
  { value: undefined },
  { value: null },
  { value: true },
  { value: false }
];
function __emval_decref(handle) {
  if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
    emval_handle_array[handle] = undefined;
    emval_free_list.push(handle);
  }
}

function count_emval_handles() {
  var count = 0;
  for (var i = 5; i < emval_handle_array.length; ++i) {
    if (emval_handle_array[i] !== undefined) {
      ++count;
    }
  }
  return count;
}

function get_first_emval() {
  for (var i = 5; i < emval_handle_array.length; ++i) {
    if (emval_handle_array[i] !== undefined) {
      return emval_handle_array[i];
    }
  }
  return null;
}
function init_emval() {
  Module['count_emval_handles'] = count_emval_handles;
  Module['get_first_emval'] = get_first_emval;
}
function __emval_register(value) {
  switch (value) {
    case undefined: {
      return 1;
    }
    case null: {
      return 2;
    }
    case true: {
      return 3;
    }
    case false: {
      return 4;
    }
    default: {
      var handle = emval_free_list.length
        ? emval_free_list.pop()
        : emval_handle_array.length;

      emval_handle_array[handle] = { refcount: 1, value: value };
      return handle;
    }
  }
}
function __embind_register_emval(rawType, name) {
  name = readLatin1String(name);
  registerType(rawType, {
    name: name,
    fromWireType: function(handle) {
      var rv = emval_handle_array[handle].value;
      __emval_decref(handle);
      return rv;
    },
    toWireType: function(destructors, value) {
      return __emval_register(value);
    },
    argPackAdvance: 8,
    readValueFromPointer: simpleReadValueFromPointer,
    destructorFunction: null // This type does not need a destructor

    // TODO: do we need a deleteObject here?  write a test where
    // emval is passed into JS via an interface
  });
}

function enumReadValueFromPointer(name, shift, signed) {
  switch (shift) {
    case 0:
      return function(pointer) {
        var heap = signed ? HEAP8 : HEAPU8;
        return this['fromWireType'](heap[pointer]);
      };
    case 1:
      return function(pointer) {
        var heap = signed ? HEAP16 : HEAPU16;
        return this['fromWireType'](heap[pointer >> 1]);
      };
    case 2:
      return function(pointer) {
        var heap = signed ? HEAP32 : HEAPU32;
        return this['fromWireType'](heap[pointer >> 2]);
      };
    default:
      throw new TypeError('Unknown integer type: ' + name);
  }
}
function __embind_register_enum(rawType, name, size, isSigned) {
  var shift = getShiftFromSize(size);
  name = readLatin1String(name);

  function ctor() {}
  ctor.values = {};

  registerType(rawType, {
    name: name,
    constructor: ctor,
    fromWireType: function(c) {
      return this.constructor.values[c];
    },
    toWireType: function(destructors, c) {
      return c.value;
    },
    argPackAdvance: 8,
    readValueFromPointer: enumReadValueFromPointer(name, shift, isSigned),
    destructorFunction: null
  });
  exposePublicSymbol(name, ctor);
}

function requireRegisteredType(rawType, humanName) {
  var impl = registeredTypes[rawType];
  if (undefined === impl) {
    throwBindingError(humanName + ' has unknown type ' + getTypeName(rawType));
  }
  return impl;
}
function __embind_register_enum_value(rawEnumType, name, enumValue) {
  var enumType = requireRegisteredType(rawEnumType, 'enum');
  name = readLatin1String(name);

  var Enum = enumType.constructor;

  var Value = Object.create(enumType.constructor.prototype, {
    value: { value: enumValue },
    constructor: {
      value: createNamedFunction(enumType.name + '_' + name, function() {})
    }
  });
  Enum.values[enumValue] = Value;
  Enum[name] = Value;
}

function _embind_repr(v) {
  if (v === null) {
    return 'null';
  }
  var t = typeof v;
  if (t === 'object' || t === 'array' || t === 'function') {
    return v.toString();
  } else {
    return '' + v;
  }
}

function floatReadValueFromPointer(name, shift) {
  switch (shift) {
    case 2:
      return function(pointer) {
        return this['fromWireType'](HEAPF32[pointer >> 2]);
      };
    case 3:
      return function(pointer) {
        return this['fromWireType'](HEAPF64[pointer >> 3]);
      };
    default:
      throw new TypeError('Unknown float type: ' + name);
  }
}
function __embind_register_float(rawType, name, size) {
  var shift = getShiftFromSize(size);
  name = readLatin1String(name);
  registerType(rawType, {
    name: name,
    fromWireType: function(value) {
      return value;
    },
    toWireType: function(destructors, value) {
      // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
      // avoid the following if() and assume value is of proper type.
      if (typeof value !== 'number' && typeof value !== 'boolean') {
        throw new TypeError(
          'Cannot convert "' + _embind_repr(value) + '" to ' + this.name
        );
      }
      return value;
    },
    argPackAdvance: 8,
    readValueFromPointer: floatReadValueFromPointer(name, shift),
    destructorFunction: null // This type does not need a destructor
  });
}

function integerReadValueFromPointer(name, shift, signed) {
  // integers are quite common, so generate very specialized functions
  switch (shift) {
    case 0:
      return signed
        ? function readS8FromPointer(pointer) {
            return HEAP8[pointer];
          }
        : function readU8FromPointer(pointer) {
            return HEAPU8[pointer];
          };
    case 1:
      return signed
        ? function readS16FromPointer(pointer) {
            return HEAP16[pointer >> 1];
          }
        : function readU16FromPointer(pointer) {
            return HEAPU16[pointer >> 1];
          };
    case 2:
      return signed
        ? function readS32FromPointer(pointer) {
            return HEAP32[pointer >> 2];
          }
        : function readU32FromPointer(pointer) {
            return HEAPU32[pointer >> 2];
          };
    default:
      throw new TypeError('Unknown integer type: ' + name);
  }
}
function __embind_register_integer(
  primitiveType,
  name,
  size,
  minRange,
  maxRange
) {
  name = readLatin1String(name);
  if (maxRange === -1) {
    // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
    maxRange = 4294967295;
  }

  var shift = getShiftFromSize(size);

  var fromWireType = function(value) {
    return value;
  };

  if (minRange === 0) {
    var bitshift = 32 - 8 * size;
    fromWireType = function(value) {
      return (value << bitshift) >>> bitshift;
    };
  }

  var isUnsignedType = name.indexOf('unsigned') != -1;

  registerType(primitiveType, {
    name: name,
    fromWireType: fromWireType,
    toWireType: function(destructors, value) {
      // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
      // avoid the following two if()s and assume value is of proper type.
      if (typeof value !== 'number' && typeof value !== 'boolean') {
        throw new TypeError(
          'Cannot convert "' + _embind_repr(value) + '" to ' + this.name
        );
      }
      if (value < minRange || value > maxRange) {
        throw new TypeError(
          'Passing a number "' +
            _embind_repr(value) +
            '" from JS side to C/C++ side to an argument of type "' +
            name +
            '", which is outside the valid range [' +
            minRange +
            ', ' +
            maxRange +
            ']!'
        );
      }
      return isUnsignedType ? value >>> 0 : value | 0;
    },
    argPackAdvance: 8,
    readValueFromPointer: integerReadValueFromPointer(
      name,
      shift,
      minRange !== 0
    ),
    destructorFunction: null // This type does not need a destructor
  });
}

function __embind_register_memory_view(rawType, dataTypeIndex, name) {
  var typeMapping = [
    Int8Array,
    Uint8Array,
    Int16Array,
    Uint16Array,
    Int32Array,
    Uint32Array,
    Float32Array,
    Float64Array
  ];

  var TA = typeMapping[dataTypeIndex];

  function decodeMemoryView(handle) {
    handle = handle >> 2;
    var heap = HEAPU32;
    var size = heap[handle]; // in elements
    var data = heap[handle + 1]; // byte offset into emscripten heap
    return new TA(heap['buffer'], data, size);
  }

  name = readLatin1String(name);
  registerType(
    rawType,
    {
      name: name,
      fromWireType: decodeMemoryView,
      argPackAdvance: 8,
      readValueFromPointer: decodeMemoryView
    },
    {
      ignoreDuplicateRegistrations: true
    }
  );
}

function __embind_register_std_string(rawType, name) {
  name = readLatin1String(name);
  var stdStringIsUTF8 =
    //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
    name === 'std::string';

  registerType(rawType, {
    name: name,
    fromWireType: function(value) {
      var length = HEAPU32[value >> 2];

      var str;
      if (stdStringIsUTF8) {
        //ensure null termination at one-past-end byte if not present yet
        var endChar = HEAPU8[value + 4 + length];
        var endCharSwap = 0;
        if (endChar != 0) {
          endCharSwap = endChar;
          HEAPU8[value + 4 + length] = 0;
        }

        var decodeStartPtr = value + 4;
        //looping here to support possible embedded '0' bytes
        for (var i = 0; i <= length; ++i) {
          var currentBytePtr = value + 4 + i;
          if (HEAPU8[currentBytePtr] == 0) {
            var stringSegment = UTF8ToString(decodeStartPtr);
            if (str === undefined) str = stringSegment;
            else {
              str += String.fromCharCode(0);
              str += stringSegment;
            }
            decodeStartPtr = currentBytePtr + 1;
          }
        }

        if (endCharSwap != 0) HEAPU8[value + 4 + length] = endCharSwap;
      } else {
        var a = new Array(length);
        for (var i = 0; i < length; ++i) {
          a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
        }
        str = a.join('');
      }

      _free(value);

      return str;
    },
    toWireType: function(destructors, value) {
      if (value instanceof ArrayBuffer) {
        value = new Uint8Array(value);
      }

      var getLength;
      var valueIsOfTypeString = typeof value === 'string';

      if (
        !(
          valueIsOfTypeString ||
          value instanceof Uint8Array ||
          value instanceof Uint8ClampedArray ||
          value instanceof Int8Array
        )
      ) {
        throwBindingError('Cannot pass non-string to std::string');
      }
      if (stdStringIsUTF8 && valueIsOfTypeString) {
        getLength = function() {
          return lengthBytesUTF8(value);
        };
      } else {
        getLength = function() {
          return value.length;
        };
      }

      // assumes 4-byte alignment
      var length = getLength();
      var ptr = _malloc(4 + length + 1);
      HEAPU32[ptr >> 2] = length;

      if (stdStringIsUTF8 && valueIsOfTypeString) {
        stringToUTF8(value, ptr + 4, length + 1);
      } else {
        if (valueIsOfTypeString) {
          for (var i = 0; i < length; ++i) {
            var charCode = value.charCodeAt(i);
            if (charCode > 255) {
              _free(ptr);
              throwBindingError(
                'String has UTF-16 code units that do not fit in 8 bits'
              );
            }
            HEAPU8[ptr + 4 + i] = charCode;
          }
        } else {
          for (var i = 0; i < length; ++i) {
            HEAPU8[ptr + 4 + i] = value[i];
          }
        }
      }

      if (destructors !== null) {
        destructors.push(_free, ptr);
      }
      return ptr;
    },
    argPackAdvance: 8,
    readValueFromPointer: simpleReadValueFromPointer,
    destructorFunction: function(ptr) {
      _free(ptr);
    }
  });
}

function __embind_register_std_wstring(rawType, charSize, name) {
  // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by emscripten_resize_heap().
  name = readLatin1String(name);
  var getHeap, shift;
  if (charSize === 2) {
    getHeap = function() {
      return HEAPU16;
    };
    shift = 1;
  } else if (charSize === 4) {
    getHeap = function() {
      return HEAPU32;
    };
    shift = 2;
  }
  registerType(rawType, {
    name: name,
    fromWireType: function(value) {
      var HEAP = getHeap();
      var length = HEAPU32[value >> 2];
      var a = new Array(length);
      var start = (value + 4) >> shift;
      for (var i = 0; i < length; ++i) {
        a[i] = String.fromCharCode(HEAP[start + i]);
      }
      _free(value);
      return a.join('');
    },
    toWireType: function(destructors, value) {
      // assumes 4-byte alignment
      var HEAP = getHeap();
      var length = value.length;
      var ptr = _malloc(4 + length * charSize);
      HEAPU32[ptr >> 2] = length;
      var start = (ptr + 4) >> shift;
      for (var i = 0; i < length; ++i) {
        HEAP[start + i] = value.charCodeAt(i);
      }
      if (destructors !== null) {
        destructors.push(_free, ptr);
      }
      return ptr;
    },
    argPackAdvance: 8,
    readValueFromPointer: simpleReadValueFromPointer,
    destructorFunction: function(ptr) {
      _free(ptr);
    }
  });
}

function __embind_register_value_object(
  rawType,
  name,
  constructorSignature,
  rawConstructor,
  destructorSignature,
  rawDestructor
) {
  structRegistrations[rawType] = {
    name: readLatin1String(name),
    rawConstructor: embind__requireFunction(
      constructorSignature,
      rawConstructor
    ),
    rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),
    fields: []
  };
}

function __embind_register_value_object_field(
  structType,
  fieldName,
  getterReturnType,
  getterSignature,
  getter,
  getterContext,
  setterArgumentType,
  setterSignature,
  setter,
  setterContext
) {
  structRegistrations[structType].fields.push({
    fieldName: readLatin1String(fieldName),
    getterReturnType: getterReturnType,
    getter: embind__requireFunction(getterSignature, getter),
    getterContext: getterContext,
    setterArgumentType: setterArgumentType,
    setter: embind__requireFunction(setterSignature, setter),
    setterContext: setterContext
  });
}

function __embind_register_void(rawType, name) {
  name = readLatin1String(name);
  registerType(rawType, {
    isVoid: true, // void return values can be optimized out sometimes
    name: name,
    argPackAdvance: 0,
    fromWireType: function() {
      return undefined;
    },
    toWireType: function(destructors, o) {
      // TODO: assert if anything else is given?
      return undefined;
    }
  });
}

function __emval_incref(handle) {
  if (handle > 4) {
    emval_handle_array[handle].refcount += 1;
  }
}

function __emval_take_value(type, argv) {
  type = requireRegisteredType(type, '_emval_take_value');
  var v = type['readValueFromPointer'](argv);
  return __emval_register(v);
}

function _abort() {
  Module['abort']();
}

function _emscripten_get_heap_size() {
  return HEAP8.length;
}

function _llvm_trap() {
  abort('trap!');
}

function _emscripten_memcpy_big(dest, src, num) {
  HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
}

function ___setErrNo(value) {
  if (Module['___errno_location'])
    HEAP32[Module['___errno_location']() >> 2] = value;
  else err('failed to set errno from JS');
  return value;
}

function abortOnCannotGrowMemory(requestedSize) {
  abort(
    'Cannot enlarge memory arrays to size ' +
      requestedSize +
      ' bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' +
      HEAP8.length +
      ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 '
  );
}
function _emscripten_resize_heap(requestedSize) {
  abortOnCannotGrowMemory(requestedSize);
}
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');
init_ClassHandle();
init_RegisteredPointer();
init_embind();
UnboundTypeError = Module['UnboundTypeError'] = extendError(
  Error,
  'UnboundTypeError'
);
init_emval();
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xff) {
      if (ASSERTIONS) {
        assert(
          false,
          'Character code ' +
            chr +
            ' (' +
            String.fromCharCode(chr) +
            ')  at offset ' +
            i +
            ' not in 0x00-0xFF.'
        );
      }
      chr &= 0xff;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}

// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 =
  typeof atob === 'function'
    ? atob
    : function(input) {
        var keyStr =
          'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

        var output = '';
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;
        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
        do {
          enc1 = keyStr.indexOf(input.charAt(i++));
          enc2 = keyStr.indexOf(input.charAt(i++));
          enc3 = keyStr.indexOf(input.charAt(i++));
          enc4 = keyStr.indexOf(input.charAt(i++));

          chr1 = (enc1 << 2) | (enc2 >> 4);
          chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
          chr3 = ((enc3 & 3) << 6) | enc4;

          output = output + String.fromCharCode(chr1);

          if (enc3 !== 64) {
            output = output + String.fromCharCode(chr2);
          }
          if (enc4 !== 64) {
            output = output + String.fromCharCode(chr3);
          }
        } while (i < input.length);
        return output;
      };

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0; i < decoded.length; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}

// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Int8Array,Int32Array

function nullFunc_dii(x) {
  abortFnPtrError(x, 'dii');
}
function nullFunc_i(x) {
  abortFnPtrError(x, 'i');
}
function nullFunc_ii(x) {
  abortFnPtrError(x, 'ii');
}
function nullFunc_iidiiii(x) {
  abortFnPtrError(x, 'iidiiii');
}
function nullFunc_iii(x) {
  abortFnPtrError(x, 'iii');
}
function nullFunc_iiii(x) {
  abortFnPtrError(x, 'iiii');
}
function nullFunc_iiiii(x) {
  abortFnPtrError(x, 'iiiii');
}
function nullFunc_v(x) {
  abortFnPtrError(x, 'v');
}
function nullFunc_vi(x) {
  abortFnPtrError(x, 'vi');
}
function nullFunc_vii(x) {
  abortFnPtrError(x, 'vii');
}
function nullFunc_viid(x) {
  abortFnPtrError(x, 'viid');
}
function nullFunc_viii(x) {
  abortFnPtrError(x, 'viii');
}
function nullFunc_viiii(x) {
  abortFnPtrError(x, 'viiii');
}
function nullFunc_viiiii(x) {
  abortFnPtrError(x, 'viiiii');
}
function nullFunc_viiiiii(x) {
  abortFnPtrError(x, 'viiiiii');
}

var asmGlobalArg = {
  Math: Math,
  Int8Array: Int8Array,
  Int16Array: Int16Array,
  Int32Array: Int32Array,
  Uint8Array: Uint8Array,
  Uint16Array: Uint16Array,
  Float32Array: Float32Array,
  Float64Array: Float64Array
};

var asmLibraryArg = {
  abort: abort,
  setTempRet0: setTempRet0,
  getTempRet0: getTempRet0,
  abortStackOverflow: abortStackOverflow,
  nullFunc_dii: nullFunc_dii,
  nullFunc_i: nullFunc_i,
  nullFunc_ii: nullFunc_ii,
  nullFunc_iidiiii: nullFunc_iidiiii,
  nullFunc_iii: nullFunc_iii,
  nullFunc_iiii: nullFunc_iiii,
  nullFunc_iiiii: nullFunc_iiiii,
  nullFunc_v: nullFunc_v,
  nullFunc_vi: nullFunc_vi,
  nullFunc_vii: nullFunc_vii,
  nullFunc_viid: nullFunc_viid,
  nullFunc_viii: nullFunc_viii,
  nullFunc_viiii: nullFunc_viiii,
  nullFunc_viiiii: nullFunc_viiiii,
  nullFunc_viiiiii: nullFunc_viiiiii,
  ClassHandle: ClassHandle,
  ClassHandle_clone: ClassHandle_clone,
  ClassHandle_delete: ClassHandle_delete,
  ClassHandle_deleteLater: ClassHandle_deleteLater,
  ClassHandle_isAliasOf: ClassHandle_isAliasOf,
  ClassHandle_isDeleted: ClassHandle_isDeleted,
  RegisteredClass: RegisteredClass,
  RegisteredPointer: RegisteredPointer,
  RegisteredPointer_deleteObject: RegisteredPointer_deleteObject,
  RegisteredPointer_destructor: RegisteredPointer_destructor,
  RegisteredPointer_fromWireType: RegisteredPointer_fromWireType,
  RegisteredPointer_getPointee: RegisteredPointer_getPointee,
  ___cxa_begin_catch: ___cxa_begin_catch,
  ___cxa_pure_virtual: ___cxa_pure_virtual,
  ___cxa_uncaught_exceptions: ___cxa_uncaught_exceptions,
  ___exception_addRef: ___exception_addRef,
  ___exception_deAdjust: ___exception_deAdjust,
  ___gxx_personality_v0: ___gxx_personality_v0,
  ___lock: ___lock,
  ___setErrNo: ___setErrNo,
  ___syscall140: ___syscall140,
  ___syscall146: ___syscall146,
  ___syscall54: ___syscall54,
  ___syscall6: ___syscall6,
  ___unlock: ___unlock,
  __embind_finalize_value_object: __embind_finalize_value_object,
  __embind_register_bool: __embind_register_bool,
  __embind_register_class: __embind_register_class,
  __embind_register_class_constructor: __embind_register_class_constructor,
  __embind_register_class_function: __embind_register_class_function,
  __embind_register_class_property: __embind_register_class_property,
  __embind_register_emval: __embind_register_emval,
  __embind_register_enum: __embind_register_enum,
  __embind_register_enum_value: __embind_register_enum_value,
  __embind_register_float: __embind_register_float,
  __embind_register_integer: __embind_register_integer,
  __embind_register_memory_view: __embind_register_memory_view,
  __embind_register_std_string: __embind_register_std_string,
  __embind_register_std_wstring: __embind_register_std_wstring,
  __embind_register_value_object: __embind_register_value_object,
  __embind_register_value_object_field: __embind_register_value_object_field,
  __embind_register_void: __embind_register_void,
  __emval_decref: __emval_decref,
  __emval_incref: __emval_incref,
  __emval_register: __emval_register,
  __emval_take_value: __emval_take_value,
  _abort: _abort,
  _embind_repr: _embind_repr,
  _emscripten_get_heap_size: _emscripten_get_heap_size,
  _emscripten_memcpy_big: _emscripten_memcpy_big,
  _emscripten_resize_heap: _emscripten_resize_heap,
  _llvm_trap: _llvm_trap,
  abortOnCannotGrowMemory: abortOnCannotGrowMemory,
  attachFinalizer: attachFinalizer,
  constNoSmartPtrRawPointerToWireType: constNoSmartPtrRawPointerToWireType,
  count_emval_handles: count_emval_handles,
  craftInvokerFunction: craftInvokerFunction,
  createNamedFunction: createNamedFunction,
  demangle: demangle,
  demangleAll: demangleAll,
  detachFinalizer: detachFinalizer,
  downcastPointer: downcastPointer,
  embind__requireFunction: embind__requireFunction,
  embind_init_charCodes: embind_init_charCodes,
  ensureOverloadTable: ensureOverloadTable,
  enumReadValueFromPointer: enumReadValueFromPointer,
  exposePublicSymbol: exposePublicSymbol,
  extendError: extendError,
  floatReadValueFromPointer: floatReadValueFromPointer,
  flushPendingDeletes: flushPendingDeletes,
  flush_NO_FILESYSTEM: flush_NO_FILESYSTEM,
  genericPointerToWireType: genericPointerToWireType,
  getBasestPointer: getBasestPointer,
  getInheritedInstance: getInheritedInstance,
  getInheritedInstanceCount: getInheritedInstanceCount,
  getLiveInheritedInstances: getLiveInheritedInstances,
  getShiftFromSize: getShiftFromSize,
  getTypeName: getTypeName,
  get_first_emval: get_first_emval,
  heap32VectorToArray: heap32VectorToArray,
  init_ClassHandle: init_ClassHandle,
  init_RegisteredPointer: init_RegisteredPointer,
  init_embind: init_embind,
  init_emval: init_emval,
  integerReadValueFromPointer: integerReadValueFromPointer,
  jsStackTrace: jsStackTrace,
  makeClassHandle: makeClassHandle,
  makeLegalFunctionName: makeLegalFunctionName,
  new_: new_,
  nonConstNoSmartPtrRawPointerToWireType: nonConstNoSmartPtrRawPointerToWireType,
  readLatin1String: readLatin1String,
  registerType: registerType,
  releaseClassHandle: releaseClassHandle,
  replacePublicSymbol: replacePublicSymbol,
  requireRegisteredType: requireRegisteredType,
  runDestructor: runDestructor,
  runDestructors: runDestructors,
  setDelayFunction: setDelayFunction,
  shallowCopyInternalPointer: shallowCopyInternalPointer,
  simpleReadValueFromPointer: simpleReadValueFromPointer,
  stackTrace: stackTrace,
  throwBindingError: throwBindingError,
  throwInstanceAlreadyDeleted: throwInstanceAlreadyDeleted,
  throwInternalError: throwInternalError,
  throwUnboundTypeError: throwUnboundTypeError,
  upcastPointer: upcastPointer,
  validateThis: validateThis,
  whenDependentTypesAreResolved: whenDependentTypesAreResolved,
  tempDoublePtr: tempDoublePtr,
  DYNAMICTOP_PTR: DYNAMICTOP_PTR
};
// EMSCRIPTEN_START_ASM
var asm = /** @suppress {uselessCode} */ (function(global, env, buffer) {
  'almost asm';

  var HEAP8 = new global.Int8Array(buffer),
    HEAP16 = new global.Int16Array(buffer),
    HEAP32 = new global.Int32Array(buffer),
    HEAPU8 = new global.Uint8Array(buffer),
    HEAPU16 = new global.Uint16Array(buffer),
    HEAPF32 = new global.Float32Array(buffer),
    HEAPF64 = new global.Float64Array(buffer),
    tempDoublePtr = env.tempDoublePtr | 0,
    DYNAMICTOP_PTR = env.DYNAMICTOP_PTR | 0,
    __THREW__ = 0,
    threwValue = 0,
    setjmpId = 0,
    tempInt = 0,
    tempBigInt = 0,
    tempBigIntS = 0,
    tempValue = 0,
    tempDouble = 0.0,
    Math_imul = global.Math.imul,
    Math_clz32 = global.Math.clz32,
    abort = env.abort,
    setTempRet0 = env.setTempRet0,
    getTempRet0 = env.getTempRet0,
    abortStackOverflow = env.abortStackOverflow,
    nullFunc_dii = env.nullFunc_dii,
    nullFunc_i = env.nullFunc_i,
    nullFunc_ii = env.nullFunc_ii,
    nullFunc_iidiiii = env.nullFunc_iidiiii,
    nullFunc_iii = env.nullFunc_iii,
    nullFunc_iiii = env.nullFunc_iiii,
    nullFunc_iiiii = env.nullFunc_iiiii,
    nullFunc_v = env.nullFunc_v,
    nullFunc_vi = env.nullFunc_vi,
    nullFunc_vii = env.nullFunc_vii,
    nullFunc_viid = env.nullFunc_viid,
    nullFunc_viii = env.nullFunc_viii,
    nullFunc_viiii = env.nullFunc_viiii,
    nullFunc_viiiii = env.nullFunc_viiiii,
    nullFunc_viiiiii = env.nullFunc_viiiiii,
    ClassHandle = env.ClassHandle,
    ClassHandle_clone = env.ClassHandle_clone,
    ClassHandle_delete = env.ClassHandle_delete,
    ClassHandle_deleteLater = env.ClassHandle_deleteLater,
    ClassHandle_isAliasOf = env.ClassHandle_isAliasOf,
    ClassHandle_isDeleted = env.ClassHandle_isDeleted,
    RegisteredClass = env.RegisteredClass,
    RegisteredPointer = env.RegisteredPointer,
    RegisteredPointer_deleteObject = env.RegisteredPointer_deleteObject,
    RegisteredPointer_destructor = env.RegisteredPointer_destructor,
    RegisteredPointer_fromWireType = env.RegisteredPointer_fromWireType,
    RegisteredPointer_getPointee = env.RegisteredPointer_getPointee,
    ___cxa_begin_catch = env.___cxa_begin_catch,
    ___cxa_pure_virtual = env.___cxa_pure_virtual,
    ___cxa_uncaught_exceptions = env.___cxa_uncaught_exceptions,
    ___exception_addRef = env.___exception_addRef,
    ___exception_deAdjust = env.___exception_deAdjust,
    ___gxx_personality_v0 = env.___gxx_personality_v0,
    ___lock = env.___lock,
    ___setErrNo = env.___setErrNo,
    ___syscall140 = env.___syscall140,
    ___syscall146 = env.___syscall146,
    ___syscall54 = env.___syscall54,
    ___syscall6 = env.___syscall6,
    ___unlock = env.___unlock,
    __embind_finalize_value_object = env.__embind_finalize_value_object,
    __embind_register_bool = env.__embind_register_bool,
    __embind_register_class = env.__embind_register_class,
    __embind_register_class_constructor =
      env.__embind_register_class_constructor,
    __embind_register_class_function = env.__embind_register_class_function,
    __embind_register_class_property = env.__embind_register_class_property,
    __embind_register_emval = env.__embind_register_emval,
    __embind_register_enum = env.__embind_register_enum,
    __embind_register_enum_value = env.__embind_register_enum_value,
    __embind_register_float = env.__embind_register_float,
    __embind_register_integer = env.__embind_register_integer,
    __embind_register_memory_view = env.__embind_register_memory_view,
    __embind_register_std_string = env.__embind_register_std_string,
    __embind_register_std_wstring = env.__embind_register_std_wstring,
    __embind_register_value_object = env.__embind_register_value_object,
    __embind_register_value_object_field =
      env.__embind_register_value_object_field,
    __embind_register_void = env.__embind_register_void,
    __emval_decref = env.__emval_decref,
    __emval_incref = env.__emval_incref,
    __emval_register = env.__emval_register,
    __emval_take_value = env.__emval_take_value,
    _abort = env._abort,
    _embind_repr = env._embind_repr,
    _emscripten_get_heap_size = env._emscripten_get_heap_size,
    _emscripten_memcpy_big = env._emscripten_memcpy_big,
    _emscripten_resize_heap = env._emscripten_resize_heap,
    _llvm_trap = env._llvm_trap,
    abortOnCannotGrowMemory = env.abortOnCannotGrowMemory,
    attachFinalizer = env.attachFinalizer,
    constNoSmartPtrRawPointerToWireType =
      env.constNoSmartPtrRawPointerToWireType,
    count_emval_handles = env.count_emval_handles,
    craftInvokerFunction = env.craftInvokerFunction,
    createNamedFunction = env.createNamedFunction,
    demangle = env.demangle,
    demangleAll = env.demangleAll,
    detachFinalizer = env.detachFinalizer,
    downcastPointer = env.downcastPointer,
    embind__requireFunction = env.embind__requireFunction,
    embind_init_charCodes = env.embind_init_charCodes,
    ensureOverloadTable = env.ensureOverloadTable,
    enumReadValueFromPointer = env.enumReadValueFromPointer,
    exposePublicSymbol = env.exposePublicSymbol,
    extendError = env.extendError,
    floatReadValueFromPointer = env.floatReadValueFromPointer,
    flushPendingDeletes = env.flushPendingDeletes,
    flush_NO_FILESYSTEM = env.flush_NO_FILESYSTEM,
    genericPointerToWireType = env.genericPointerToWireType,
    getBasestPointer = env.getBasestPointer,
    getInheritedInstance = env.getInheritedInstance,
    getInheritedInstanceCount = env.getInheritedInstanceCount,
    getLiveInheritedInstances = env.getLiveInheritedInstances,
    getShiftFromSize = env.getShiftFromSize,
    getTypeName = env.getTypeName,
    get_first_emval = env.get_first_emval,
    heap32VectorToArray = env.heap32VectorToArray,
    init_ClassHandle = env.init_ClassHandle,
    init_RegisteredPointer = env.init_RegisteredPointer,
    init_embind = env.init_embind,
    init_emval = env.init_emval,
    integerReadValueFromPointer = env.integerReadValueFromPointer,
    jsStackTrace = env.jsStackTrace,
    makeClassHandle = env.makeClassHandle,
    makeLegalFunctionName = env.makeLegalFunctionName,
    new_ = env.new_,
    nonConstNoSmartPtrRawPointerToWireType =
      env.nonConstNoSmartPtrRawPointerToWireType,
    readLatin1String = env.readLatin1String,
    registerType = env.registerType,
    releaseClassHandle = env.releaseClassHandle,
    replacePublicSymbol = env.replacePublicSymbol,
    requireRegisteredType = env.requireRegisteredType,
    runDestructor = env.runDestructor,
    runDestructors = env.runDestructors,
    setDelayFunction = env.setDelayFunction,
    shallowCopyInternalPointer = env.shallowCopyInternalPointer,
    simpleReadValueFromPointer = env.simpleReadValueFromPointer,
    stackTrace = env.stackTrace,
    throwBindingError = env.throwBindingError,
    throwInstanceAlreadyDeleted = env.throwInstanceAlreadyDeleted,
    throwInternalError = env.throwInternalError,
    throwUnboundTypeError = env.throwUnboundTypeError,
    upcastPointer = env.upcastPointer,
    validateThis = env.validateThis,
    whenDependentTypesAreResolved = env.whenDependentTypesAreResolved,
    STACKTOP = 18416,
    STACK_MAX = 5261296,
    tempFloat = 0.0;

  // EMSCRIPTEN_START_FUNCS
  function globalCtors() {
    __GLOBAL__sub_I_packet_cpp();
    __GLOBAL__sub_I_bind_cpp();
  }
  function stackAlloc(size) {
    size = size | 0;
    var ret = 0;
    ret = STACKTOP;
    STACKTOP = (STACKTOP + size) | 0;
    STACKTOP = (STACKTOP + 15) & -16;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0);

    return ret | 0;
  }
  function stackSave() {
    return STACKTOP | 0;
  }
  function stackRestore(top) {
    top = top | 0;
    STACKTOP = top;
  }
  function establishStackSpace(stackBase, stackMax) {
    stackBase = stackBase | 0;
    stackMax = stackMax | 0;
    STACKTOP = stackBase;
    STACK_MAX = stackMax;
  }

  function ___cxx_global_var_init() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN44EmscriptenBindingInitializer_packet_bindingsC2Ev(18168);
    return;
  }
  function __ZN44EmscriptenBindingInitializer_packet_bindingsC2Ev($this) {
    $this = $this | 0;
    var $$addr$i$i = 0,
      $$addr$i$i289 = 0,
      $$addr$i$i298 = 0,
      $$addr$i$i313 = 0,
      $$addr$i$i328 = 0,
      $$addr$i$i343 = 0,
      $$addr$i$i358 = 0,
      $$addr$i$i373 = 0,
      $$addr$i$i388 = 0,
      $$addr$i$i403 = 0,
      $$addr$i$i418 = 0,
      $$addr$i$i433 = 0,
      $$addr$i$i448 = 0,
      $$addr$i$i463 = 0,
      $$addr$i$i478 = 0,
      $$addr$i$i493 = 0,
      $$addr$i$i508 = 0,
      $$addr$i$i523 = 0,
      $$addr$i$i538 = 0,
      $$addr$i$i554 = 0;
    var $$addr$i$i567 = 0,
      $$addr$i$i584 = 0,
      $$addr$i$i606 = 0,
      $$addr$i$i628 = 0,
      $$addr$i11$i = 0,
      $$addr$i13$i = 0,
      $$addr$i15$i = 0,
      $$addr$i8$i = 0,
      $$addr$i8$i297 = 0,
      $$addr$i8$i312 = 0,
      $$addr$i8$i327 = 0,
      $$addr$i8$i342 = 0,
      $$addr$i8$i357 = 0,
      $$addr$i8$i372 = 0,
      $$addr$i8$i387 = 0,
      $$addr$i8$i402 = 0,
      $$addr$i8$i417 = 0,
      $$addr$i8$i432 = 0,
      $$addr$i8$i447 = 0,
      $$addr$i8$i462 = 0;
    var $$addr$i8$i477 = 0,
      $$addr$i8$i492 = 0,
      $$addr$i8$i507 = 0,
      $$addr$i8$i522 = 0,
      $$addr$i8$i537 = 0,
      $$addr$i8$i566 = 0,
      $$addr$i9$i = 0,
      $$addr$i9$i583 = 0,
      $$addr$i9$i605 = 0,
      $$addr$i9$i627 = 0,
      $$field = 0,
      $$field105 = 0,
      $$field108 = 0,
      $$field112 = 0,
      $$field115 = 0,
      $$field129 = 0,
      $$field132 = 0,
      $$field136 = 0,
      $$field139 = 0,
      $$field16 = 0;
    var $$field19 = 0,
      $$field28 = 0,
      $$field31 = 0,
      $$field40 = 0,
      $$field43 = 0,
      $$field57 = 0,
      $$field60 = 0,
      $$field64 = 0,
      $$field67 = 0,
      $$field7 = 0,
      $$field81 = 0,
      $$field84 = 0,
      $$field88 = 0,
      $$field91 = 0,
      $$index107 = 0,
      $$index114 = 0,
      $$index131 = 0,
      $$index138 = 0,
      $$index18 = 0,
      $$index30 = 0;
    var $$index42 = 0,
      $$index59 = 0,
      $$index6 = 0,
      $$index66 = 0,
      $$index83 = 0,
      $$index90 = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $100 = 0,
      $101 = 0,
      $102 = 0,
      $103 = 0,
      $104 = 0,
      $105 = 0,
      $106 = 0,
      $107 = 0,
      $108 = 0,
      $109 = 0,
      $11 = 0;
    var $110 = 0,
      $111 = 0,
      $112 = 0,
      $113 = 0,
      $114 = 0,
      $115 = 0,
      $116 = 0,
      $117 = 0,
      $118 = 0,
      $119 = 0,
      $12 = 0,
      $120 = 0,
      $121 = 0,
      $122 = 0,
      $123 = 0,
      $124 = 0,
      $125 = 0,
      $126 = 0,
      $127 = 0,
      $128 = 0;
    var $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0,
      $23 = 0,
      $24 = 0,
      $25 = 0,
      $26 = 0,
      $27 = 0,
      $28 = 0,
      $29 = 0,
      $3 = 0,
      $30 = 0;
    var $31 = 0,
      $32 = 0,
      $33 = 0,
      $34 = 0,
      $35 = 0,
      $36 = 0,
      $37 = 0,
      $38 = 0,
      $39 = 0,
      $4 = 0,
      $40 = 0,
      $41 = 0,
      $42 = 0,
      $43 = 0,
      $44 = 0,
      $45 = 0,
      $46 = 0,
      $47 = 0,
      $48 = 0,
      $49 = 0;
    var $5 = 0,
      $50 = 0,
      $51 = 0,
      $52 = 0,
      $53 = 0,
      $54 = 0,
      $55 = 0,
      $56 = 0,
      $57 = 0,
      $58 = 0,
      $59 = 0,
      $6 = 0,
      $60 = 0,
      $61 = 0,
      $62 = 0,
      $63 = 0,
      $64 = 0,
      $65 = 0,
      $66 = 0,
      $67 = 0;
    var $68 = 0,
      $69 = 0,
      $7 = 0,
      $70 = 0,
      $71 = 0,
      $72 = 0,
      $73 = 0,
      $74 = 0,
      $75 = 0,
      $76 = 0,
      $77 = 0,
      $78 = 0,
      $79 = 0,
      $8 = 0,
      $80 = 0,
      $81 = 0,
      $82 = 0,
      $83 = 0,
      $84 = 0,
      $85 = 0;
    var $86 = 0,
      $87 = 0,
      $88 = 0,
      $89 = 0,
      $9 = 0,
      $90 = 0,
      $91 = 0,
      $92 = 0,
      $93 = 0,
      $94 = 0,
      $95 = 0,
      $96 = 0,
      $97 = 0,
      $98 = 0,
      $99 = 0,
      $_getActualType$i = 0,
      $call = 0,
      $call$i = 0,
      $call$i$i$i = 0,
      $call$i$i$i294 = 0;
    var $call$i$i$i307 = 0,
      $call$i$i$i322 = 0,
      $call$i$i$i337 = 0,
      $call$i$i$i352 = 0,
      $call$i$i$i367 = 0,
      $call$i$i$i382 = 0,
      $call$i$i$i397 = 0,
      $call$i$i$i412 = 0,
      $call$i$i$i427 = 0,
      $call$i$i$i442 = 0,
      $call$i$i$i457 = 0,
      $call$i$i$i472 = 0,
      $call$i$i$i487 = 0,
      $call$i$i$i502 = 0,
      $call$i$i$i517 = 0,
      $call$i$i$i532 = 0,
      $call$i$i$i547 = 0,
      $call$i$i$i563 = 0,
      $call$i$i$i576 = 0,
      $call$i$i$i598 = 0;
    var $call$i$i$i620 = 0,
      $call$i$i$i642 = 0,
      $call$i$i10$i = 0,
      $call$i$i10$i601 = 0,
      $call$i$i10$i623 = 0,
      $call$i$i10$i645 = 0,
      $call$i$i12$i = 0,
      $call$i$i14$i = 0,
      $call$i$i16$i = 0,
      $call$i$i9$i = 0,
      $call$i$i9$i310 = 0,
      $call$i$i9$i325 = 0,
      $call$i$i9$i340 = 0,
      $call$i$i9$i355 = 0,
      $call$i$i9$i370 = 0,
      $call$i$i9$i385 = 0,
      $call$i$i9$i400 = 0,
      $call$i$i9$i415 = 0,
      $call$i$i9$i430 = 0,
      $call$i$i9$i445 = 0;
    var $call$i$i9$i460 = 0,
      $call$i$i9$i475 = 0,
      $call$i$i9$i490 = 0,
      $call$i$i9$i505 = 0,
      $call$i$i9$i520 = 0,
      $call$i$i9$i535 = 0,
      $call$i$i9$i550 = 0,
      $call$i$i9$i579 = 0,
      $call$i292 = 0,
      $call$i305 = 0,
      $call$i320 = 0,
      $call$i335 = 0,
      $call$i350 = 0,
      $call$i365 = 0,
      $call$i380 = 0,
      $call$i395 = 0,
      $call$i410 = 0,
      $call$i425 = 0,
      $call$i440 = 0,
      $call$i455 = 0;
    var $call$i470 = 0,
      $call$i485 = 0,
      $call$i500 = 0,
      $call$i515 = 0,
      $call$i530 = 0,
      $call$i545 = 0,
      $call$i561 = 0,
      $call$i574 = 0,
      $call$i596 = 0,
      $call$i618 = 0,
      $call$i640 = 0,
      $call10 = 0,
      $call101 = 0,
      $call103 = 0,
      $call109 = 0,
      $call111 = 0,
      $call117 = 0,
      $call123 = 0,
      $call125 = 0,
      $call127 = 0;
    var $call129 = 0,
      $call13 = 0,
      $call131 = 0,
      $call133 = 0,
      $call139 = 0,
      $call141 = 0,
      $call143 = 0,
      $call145 = 0,
      $call147 = 0,
      $call153 = 0,
      $call155 = 0,
      $call157 = 0,
      $call159 = 0,
      $call16 = 0,
      $call161 = 0,
      $call163 = 0,
      $call165 = 0,
      $call167 = 0,
      $call169 = 0,
      $call171 = 0;
    var $call173 = 0,
      $call175 = 0,
      $call18 = 0,
      $call181 = 0,
      $call185 = 0,
      $call186 = 0,
      $call187 = 0,
      $call188 = 0,
      $call189 = 0,
      $call190 = 0,
      $call191 = 0,
      $call192 = 0,
      $call193 = 0,
      $call194 = 0,
      $call195 = 0,
      $call196 = 0,
      $call197 = 0,
      $call198 = 0,
      $call199 = 0,
      $call2 = 0;
    var $call2$i = 0,
      $call2$i293 = 0,
      $call2$i306 = 0,
      $call2$i321 = 0,
      $call2$i336 = 0,
      $call2$i351 = 0,
      $call2$i366 = 0,
      $call2$i381 = 0,
      $call2$i396 = 0,
      $call2$i411 = 0,
      $call2$i426 = 0,
      $call2$i441 = 0,
      $call2$i456 = 0,
      $call2$i471 = 0,
      $call2$i486 = 0,
      $call2$i501 = 0,
      $call2$i516 = 0,
      $call2$i531 = 0,
      $call2$i546 = 0,
      $call2$i562 = 0;
    var $call2$i575 = 0,
      $call2$i597 = 0,
      $call2$i619 = 0,
      $call2$i641 = 0,
      $call20 = 0,
      $call200 = 0,
      $call201 = 0,
      $call202 = 0,
      $call203 = 0,
      $call204 = 0,
      $call205 = 0,
      $call206 = 0,
      $call207 = 0,
      $call210 = 0,
      $call211 = 0,
      $call214 = 0,
      $call215 = 0,
      $call216 = 0,
      $call217 = 0,
      $call218 = 0;
    var $call219 = 0,
      $call22 = 0,
      $call220 = 0,
      $call24 = 0,
      $call26 = 0,
      $call3$i = 0,
      $call32 = 0,
      $call34 = 0,
      $call36 = 0,
      $call38 = 0,
      $call4$i = 0,
      $call4$i295 = 0,
      $call4$i308 = 0,
      $call4$i323 = 0,
      $call4$i338 = 0,
      $call4$i353 = 0,
      $call4$i368 = 0,
      $call4$i383 = 0,
      $call4$i398 = 0,
      $call4$i413 = 0;
    var $call4$i428 = 0,
      $call4$i443 = 0,
      $call4$i458 = 0,
      $call4$i473 = 0,
      $call4$i488 = 0,
      $call4$i503 = 0,
      $call4$i518 = 0,
      $call4$i533 = 0,
      $call4$i548 = 0,
      $call4$i564 = 0,
      $call4$i577 = 0,
      $call4$i599 = 0,
      $call4$i621 = 0,
      $call4$i643 = 0,
      $call42 = 0,
      $call43 = 0,
      $call46 = 0,
      $call47 = 0,
      $call48 = 0,
      $call49 = 0;
    var $call5 = 0,
      $call5$i = 0,
      $call5$i296 = 0,
      $call5$i309 = 0,
      $call5$i324 = 0,
      $call5$i339 = 0,
      $call5$i354 = 0,
      $call5$i369 = 0,
      $call5$i384 = 0,
      $call5$i399 = 0,
      $call5$i414 = 0,
      $call5$i429 = 0,
      $call5$i444 = 0,
      $call5$i459 = 0,
      $call5$i474 = 0,
      $call5$i489 = 0,
      $call5$i504 = 0,
      $call5$i519 = 0,
      $call5$i534 = 0,
      $call5$i549 = 0;
    var $call5$i565 = 0,
      $call5$i578 = 0,
      $call5$i600 = 0,
      $call5$i622 = 0,
      $call5$i644 = 0,
      $call52 = 0,
      $call53 = 0,
      $call54 = 0,
      $call55 = 0,
      $call56 = 0,
      $call57 = 0,
      $call58 = 0,
      $call59 = 0,
      $call6$i = 0,
      $call60 = 0,
      $call61 = 0,
      $call62 = 0,
      $call63 = 0,
      $call64 = 0,
      $call69 = 0;
    var $call7$i = 0,
      $call7$i311 = 0,
      $call7$i326 = 0,
      $call7$i341 = 0,
      $call7$i356 = 0,
      $call7$i371 = 0,
      $call7$i386 = 0,
      $call7$i401 = 0,
      $call7$i416 = 0,
      $call7$i431 = 0,
      $call7$i446 = 0,
      $call7$i461 = 0,
      $call7$i476 = 0,
      $call7$i491 = 0,
      $call7$i506 = 0,
      $call7$i521 = 0,
      $call7$i536 = 0,
      $call7$i551 = 0,
      $call7$i580 = 0,
      $call71 = 0;
    var $call77 = 0,
      $call79 = 0,
      $call8 = 0,
      $call8$i = 0,
      $call8$i602 = 0,
      $call8$i624 = 0,
      $call8$i646 = 0,
      $call81 = 0,
      $call83 = 0,
      $call85 = 0,
      $call87 = 0,
      $call89 = 0,
      $call9 = 0,
      $call91 = 0,
      $call93 = 0,
      $call95 = 0,
      $callable$addr$i = 0,
      $callable$addr$i$i = 0,
      $callable$addr$i$index5 = 0,
      $callable$addr$i271 = 0;
    var $callable$addr$i271$index14 = 0,
      $callable$addr$i278 = 0,
      $callable$addr$i278$index26 = 0,
      $callable$addr$i285 = 0,
      $callable$addr$i285$index38 = 0,
      $callable$i$field = 0,
      $callable$i$field3 = 0,
      $callable$i$index2 = 0,
      $callable$i273$field = 0,
      $callable$i273$field12 = 0,
      $callable$i273$index11 = 0,
      $callable$i280$field = 0,
      $callable$i280$field24 = 0,
      $callable$i280$index23 = 0,
      $callable$i287$field = 0,
      $callable$i287$field36 = 0,
      $callable$i287$index35 = 0,
      $destructor$i = 0,
      $downcast$i = 0,
      $field$addr$i = 0;
    var $field$addr$i301 = 0,
      $field$addr$i316 = 0,
      $field$addr$i331 = 0,
      $field$addr$i346 = 0,
      $field$addr$i361 = 0,
      $field$addr$i376 = 0,
      $field$addr$i391 = 0,
      $field$addr$i406 = 0,
      $field$addr$i421 = 0,
      $field$addr$i436 = 0,
      $field$addr$i451 = 0,
      $field$addr$i466 = 0,
      $field$addr$i481 = 0,
      $field$addr$i496 = 0,
      $field$addr$i511 = 0,
      $field$addr$i526 = 0,
      $field$addr$i541 = 0,
      $field$addr$i570 = 0,
      $fieldName$addr$i = 0,
      $fieldName$addr$i300 = 0;
    var $fieldName$addr$i315 = 0,
      $fieldName$addr$i330 = 0,
      $fieldName$addr$i345 = 0,
      $fieldName$addr$i360 = 0,
      $fieldName$addr$i375 = 0,
      $fieldName$addr$i390 = 0,
      $fieldName$addr$i405 = 0,
      $fieldName$addr$i420 = 0,
      $fieldName$addr$i435 = 0,
      $fieldName$addr$i450 = 0,
      $fieldName$addr$i465 = 0,
      $fieldName$addr$i480 = 0,
      $fieldName$addr$i495 = 0,
      $fieldName$addr$i510 = 0,
      $fieldName$addr$i525 = 0,
      $fieldName$addr$i540 = 0,
      $fieldName$addr$i556 = 0,
      $fieldName$addr$i569 = 0,
      $fieldName$addr$i586 = 0,
      $fieldName$addr$i608 = 0;
    var $fieldName$addr$i630 = 0,
      $getter$addr$i = 0,
      $getter$addr$i$index54 = 0,
      $getter$addr$i587 = 0,
      $getter$addr$i587$index78 = 0,
      $getter$addr$i609 = 0,
      $getter$addr$i609$index102 = 0,
      $getter$addr$i631 = 0,
      $getter$addr$i631$index126 = 0,
      $getter$i = 0,
      $getter$i302 = 0,
      $getter$i317 = 0,
      $getter$i332 = 0,
      $getter$i347 = 0,
      $getter$i362 = 0,
      $getter$i377 = 0,
      $getter$i392 = 0,
      $getter$i407 = 0,
      $getter$i422 = 0,
      $getter$i437 = 0;
    var $getter$i452 = 0,
      $getter$i467 = 0,
      $getter$i482 = 0,
      $getter$i497 = 0,
      $getter$i512 = 0,
      $getter$i527 = 0,
      $getter$i542 = 0,
      $getter$i558$field = 0,
      $getter$i558$field49 = 0,
      $getter$i558$index48 = 0,
      $getter$i571 = 0,
      $getter$i593$field = 0,
      $getter$i593$field73 = 0,
      $getter$i593$index72 = 0,
      $getter$i615$field = 0,
      $getter$i615$field97 = 0,
      $getter$i615$index96 = 0,
      $getter$i637$field = 0,
      $getter$i637$field121 = 0,
      $getter$i637$index120 = 0;
    var $gter$i = 0,
      $gter$i589 = 0,
      $gter$i611 = 0,
      $gter$i633 = 0,
      $indirect$arg$temp$i$byval_copy2D2D = 0,
      $indirect$arg$temp$i$index92D2D = 0,
      $indirect$arg$temp$i272$byval_copy2D2D = 0,
      $indirect$arg$temp$i272$index212D2D = 0,
      $indirect$arg$temp$i2722D2D = 0,
      $indirect$arg$temp$i279$byval_copy2D2D = 0,
      $indirect$arg$temp$i279$index332D2D = 0,
      $indirect$arg$temp$i2792D2D = 0,
      $indirect$arg$temp$i286$byval_copy2D2D = 0,
      $indirect$arg$temp$i286$index452D2D = 0,
      $indirect$arg$temp$i2862D2D = 0,
      $indirect$arg$temp$i2D2D = 0,
      $indirect$arg$temp$i557$byval_copy2D2D = 0,
      $indirect$arg$temp$i557$index622D2D = 0,
      $indirect$arg$temp$i5572D2D = 0,
      $indirect$arg$temp$i591$byval_copy2D2D = 0;
    var $indirect$arg$temp$i591$index862D2D = 0,
      $indirect$arg$temp$i5912D2D = 0,
      $indirect$arg$temp$i613$byval_copy2D2D = 0,
      $indirect$arg$temp$i613$index1102D2D = 0,
      $indirect$arg$temp$i6132D2D = 0,
      $indirect$arg$temp$i635$byval_copy2D2D = 0,
      $indirect$arg$temp$i635$index1342D2D = 0,
      $indirect$arg$temp$i6352D2D = 0,
      $indirect$arg$temp$index12D2D = 0,
      $indirect$arg$temp225$index102D2D = 0,
      $indirect$arg$temp2252682D2D = 0,
      $indirect$arg$temp2252D2D = 0,
      $indirect$arg$temp227$index222D2D = 0,
      $indirect$arg$temp2272752D2D = 0,
      $indirect$arg$temp2272D2D = 0,
      $indirect$arg$temp229$index342D2D = 0,
      $indirect$arg$temp2292822D2D = 0,
      $indirect$arg$temp2292D2D = 0,
      $indirect$arg$temp249$index462D2D = 0,
      $indirect$arg$temp2492D2D = 0;
    var $indirect$arg$temp2495522D2D = 0,
      $indirect$arg$temp250$index472D2D = 0,
      $indirect$arg$temp2502D2D = 0,
      $indirect$arg$temp2505532D2D = 0,
      $indirect$arg$temp253$index702D2D = 0,
      $indirect$arg$temp2532D2D = 0,
      $indirect$arg$temp2535812D2D = 0,
      $indirect$arg$temp254$index712D2D = 0,
      $indirect$arg$temp2542D2D = 0,
      $indirect$arg$temp2545822D2D = 0,
      $indirect$arg$temp256$index942D2D = 0,
      $indirect$arg$temp2562D2D = 0,
      $indirect$arg$temp2566032D2D = 0,
      $indirect$arg$temp257$index952D2D = 0,
      $indirect$arg$temp2572D2D = 0,
      $indirect$arg$temp2576042D2D = 0,
      $indirect$arg$temp259$index1182D2D = 0,
      $indirect$arg$temp2592D2D = 0,
      $indirect$arg$temp2596252D2D = 0,
      $indirect$arg$temp260$index1192D2D = 0;
    var $indirect$arg$temp2602D2D = 0,
      $indirect$arg$temp2606262D2D = 0,
      $indirect$arg$temp2652D2D = 0,
      $indirect$arg$temp2D2D = 0,
      $indirect$arg$temp7$i$byval_copy2D2D = 0,
      $indirect$arg$temp7$i$index692D2D = 0,
      $indirect$arg$temp7$i2D2D = 0,
      $indirect$arg$temp7$i592$byval_copy2D2D = 0,
      $indirect$arg$temp7$i592$index932D2D = 0,
      $indirect$arg$temp7$i5922D2D = 0,
      $indirect$arg$temp7$i614$byval_copy2D2D = 0,
      $indirect$arg$temp7$i614$index1172D2D = 0,
      $indirect$arg$temp7$i6142D2D = 0,
      $indirect$arg$temp7$i636$byval_copy2D2D = 0,
      $indirect$arg$temp7$i636$index1412D2D = 0,
      $indirect$arg$temp7$i6362D2D = 0,
      $methodName$addr$i = 0,
      $methodName$addr$i270 = 0,
      $methodName$addr$i277 = 0,
      $methodName$addr$i284 = 0;
    var $name$addr$i = 0,
      $ref$tmp = 0,
      $ref$tmp106 = 0,
      $ref$tmp114 = 0,
      $ref$tmp12 = 0,
      $ref$tmp120 = 0,
      $ref$tmp136 = 0,
      $ref$tmp15 = 0,
      $ref$tmp150 = 0,
      $ref$tmp178 = 0,
      $ref$tmp184 = 0,
      $ref$tmp209 = 0,
      $ref$tmp213 = 0,
      $ref$tmp222 = 0,
      $ref$tmp29 = 0,
      $ref$tmp4 = 0,
      $ref$tmp41 = 0,
      $ref$tmp45 = 0,
      $ref$tmp51 = 0,
      $ref$tmp66 = 0;
    var $ref$tmp7 = 0,
      $ref$tmp74 = 0,
      $ref$tmp98 = 0,
      $setter$addr$i = 0,
      $setter$addr$i$index55 = 0,
      $setter$addr$i588 = 0,
      $setter$addr$i588$index79 = 0,
      $setter$addr$i610 = 0,
      $setter$addr$i610$index103 = 0,
      $setter$addr$i632 = 0,
      $setter$addr$i632$index127 = 0,
      $setter$i = 0,
      $setter$i303 = 0,
      $setter$i318 = 0,
      $setter$i333 = 0,
      $setter$i348 = 0,
      $setter$i363 = 0,
      $setter$i378 = 0,
      $setter$i393 = 0,
      $setter$i408 = 0;
    var $setter$i423 = 0,
      $setter$i438 = 0,
      $setter$i453 = 0,
      $setter$i468 = 0,
      $setter$i483 = 0,
      $setter$i498 = 0,
      $setter$i513 = 0,
      $setter$i528 = 0,
      $setter$i543 = 0,
      $setter$i559$field = 0,
      $setter$i559$field52 = 0,
      $setter$i559$index51 = 0,
      $setter$i572 = 0,
      $setter$i594$field = 0,
      $setter$i594$field76 = 0,
      $setter$i594$index75 = 0,
      $setter$i616$field = 0,
      $setter$i616$field100 = 0,
      $setter$i616$index99 = 0,
      $setter$i638$field = 0;
    var $setter$i638$field124 = 0,
      $setter$i638$index123 = 0,
      $ster$i = 0,
      $ster$i590 = 0,
      $ster$i612 = 0,
      $ster$i634 = 0,
      $this$addr = 0,
      $this$addr$i = 0,
      $this$addr$i$i = 0,
      $this$addr$i263 = 0,
      $this$addr$i266 = 0,
      $this$addr$i269 = 0,
      $this$addr$i276 = 0,
      $this$addr$i283 = 0,
      $this$addr$i290 = 0,
      $this$addr$i299 = 0,
      $this$addr$i314 = 0,
      $this$addr$i329 = 0,
      $this$addr$i344 = 0,
      $this$addr$i359 = 0;
    var $this$addr$i374 = 0,
      $this$addr$i389 = 0,
      $this$addr$i404 = 0,
      $this$addr$i419 = 0,
      $this$addr$i434 = 0,
      $this$addr$i449 = 0,
      $this$addr$i464 = 0,
      $this$addr$i479 = 0,
      $this$addr$i494 = 0,
      $this$addr$i509 = 0,
      $this$addr$i524 = 0,
      $this$addr$i539 = 0,
      $this$addr$i555 = 0,
      $this$addr$i568 = 0,
      $this$addr$i585 = 0,
      $this$addr$i607 = 0,
      $this$addr$i629 = 0,
      $this1$i$i = 0,
      $this1$i264 = 0,
      $this1$i267 = 0;
    var $this1$i274 = 0,
      $this1$i281 = 0,
      $this1$i288 = 0,
      $this1$i291 = 0,
      $this1$i304 = 0,
      $this1$i319 = 0,
      $this1$i334 = 0,
      $this1$i349 = 0,
      $this1$i364 = 0,
      $this1$i379 = 0,
      $this1$i394 = 0,
      $this1$i409 = 0,
      $this1$i424 = 0,
      $this1$i439 = 0,
      $this1$i454 = 0,
      $this1$i469 = 0,
      $this1$i484 = 0,
      $this1$i499 = 0,
      $this1$i514 = 0,
      $this1$i529 = 0;
    var $this1$i544 = 0,
      $this1$i560 = 0,
      $this1$i573 = 0,
      $this1$i595 = 0,
      $this1$i617 = 0,
      $upcast$i = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 1232) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1232 | 0);
    $indirect$arg$temp7$i636$byval_copy2D2D = (sp + 1192) | 0;
    $indirect$arg$temp$i635$byval_copy2D2D = (sp + 1184) | 0;
    $indirect$arg$temp7$i614$byval_copy2D2D = (sp + 1176) | 0;
    $indirect$arg$temp$i613$byval_copy2D2D = (sp + 1168) | 0;
    $indirect$arg$temp7$i592$byval_copy2D2D = (sp + 1160) | 0;
    $indirect$arg$temp$i591$byval_copy2D2D = (sp + 1152) | 0;
    $indirect$arg$temp7$i$byval_copy2D2D = (sp + 1144) | 0;
    $indirect$arg$temp$i557$byval_copy2D2D = (sp + 1136) | 0;
    $indirect$arg$temp$i286$byval_copy2D2D = (sp + 1128) | 0;
    $indirect$arg$temp$i279$byval_copy2D2D = (sp + 1120) | 0;
    $indirect$arg$temp$i272$byval_copy2D2D = (sp + 1112) | 0;
    $indirect$arg$temp$i$byval_copy2D2D = (sp + 1104) | 0;
    $getter$addr$i631 = (sp + 1080) | 0;
    $setter$addr$i632 = (sp + 1072) | 0;
    $indirect$arg$temp$i6352D2D = (sp + 1056) | 0;
    $indirect$arg$temp7$i6362D2D = (sp + 1048) | 0;
    $indirect$arg$temp2606262D2D = (sp + 88) | 0;
    $indirect$arg$temp2596252D2D = (sp + 80) | 0;
    $getter$addr$i609 = (sp + 1024) | 0;
    $setter$addr$i610 = (sp + 1016) | 0;
    $indirect$arg$temp$i6132D2D = (sp + 1000) | 0;
    $indirect$arg$temp7$i6142D2D = (sp + 992) | 0;
    $indirect$arg$temp2576042D2D = (sp + 72) | 0;
    $indirect$arg$temp2566032D2D = (sp + 64) | 0;
    $getter$addr$i587 = (sp + 968) | 0;
    $setter$addr$i588 = (sp + 960) | 0;
    $indirect$arg$temp$i5912D2D = (sp + 944) | 0;
    $indirect$arg$temp7$i5922D2D = (sp + 936) | 0;
    $indirect$arg$temp2545822D2D = (sp + 56) | 0;
    $indirect$arg$temp2535812D2D = (sp + 48) | 0;
    $field$addr$i570 = (sp + 912) | 0;
    $getter$addr$i = (sp + 880) | 0;
    $setter$addr$i = (sp + 872) | 0;
    $indirect$arg$temp$i5572D2D = (sp + 856) | 0;
    $indirect$arg$temp7$i2D2D = (sp + 848) | 0;
    $indirect$arg$temp2505532D2D = (sp + 40) | 0;
    $indirect$arg$temp2495522D2D = (sp + 32) | 0;
    $field$addr$i541 = (sp + 828) | 0;
    $field$addr$i526 = (sp + 800) | 0;
    $field$addr$i511 = (sp + 772) | 0;
    $field$addr$i496 = (sp + 744) | 0;
    $field$addr$i481 = (sp + 716) | 0;
    $field$addr$i466 = (sp + 688) | 0;
    $field$addr$i451 = (sp + 660) | 0;
    $field$addr$i436 = (sp + 632) | 0;
    $field$addr$i421 = (sp + 604) | 0;
    $field$addr$i406 = (sp + 576) | 0;
    $field$addr$i391 = (sp + 548) | 0;
    $field$addr$i376 = (sp + 520) | 0;
    $field$addr$i361 = (sp + 492) | 0;
    $field$addr$i346 = (sp + 464) | 0;
    $field$addr$i331 = (sp + 436) | 0;
    $field$addr$i316 = (sp + 408) | 0;
    $field$addr$i301 = (sp + 380) | 0;
    $field$addr$i = (sp + 352) | 0;
    $callable$addr$i285 = (sp + 328) | 0;
    $indirect$arg$temp$i2862D2D = (sp + 320) | 0;
    $indirect$arg$temp2292822D2D = (sp + 24) | 0;
    $callable$addr$i278 = (sp + 304) | 0;
    $indirect$arg$temp$i2792D2D = (sp + 296) | 0;
    $indirect$arg$temp2272752D2D = (sp + 16) | 0;
    $callable$addr$i271 = (sp + 280) | 0;
    $indirect$arg$temp$i2722D2D = (sp + 272) | 0;
    $indirect$arg$temp2252682D2D = (sp + 8) | 0;
    $callable$addr$i = (sp + 256) | 0;
    $indirect$arg$temp$i2D2D = (sp + 248) | 0;
    $indirect$arg$temp2652D2D = sp;
    $ref$tmp = (sp + 1221) | 0;
    $ref$tmp4 = (sp + 1220) | 0;
    $ref$tmp7 = (sp + 1219) | 0;
    $ref$tmp12 = (sp + 1218) | 0;
    $ref$tmp15 = (sp + 1217) | 0;
    $ref$tmp29 = (sp + 1216) | 0;
    $ref$tmp41 = (sp + 1215) | 0;
    $ref$tmp45 = (sp + 1214) | 0;
    $ref$tmp51 = (sp + 1213) | 0;
    $ref$tmp66 = (sp + 1212) | 0;
    $ref$tmp74 = (sp + 1211) | 0;
    $ref$tmp98 = (sp + 1210) | 0;
    $ref$tmp106 = (sp + 1209) | 0;
    $ref$tmp114 = (sp + 1208) | 0;
    $ref$tmp120 = (sp + 1207) | 0;
    $ref$tmp136 = (sp + 1206) | 0;
    $ref$tmp150 = (sp + 1205) | 0;
    $ref$tmp178 = (sp + 1204) | 0;
    $ref$tmp184 = (sp + 1203) | 0;
    $ref$tmp209 = (sp + 1202) | 0;
    $ref$tmp213 = (sp + 1201) | 0;
    $ref$tmp222 = (sp + 1200) | 0;
    $indirect$arg$temp2D2D = (sp + 184) | 0;
    $indirect$arg$temp2252D2D = (sp + 176) | 0;
    $indirect$arg$temp2272D2D = (sp + 168) | 0;
    $indirect$arg$temp2292D2D = (sp + 160) | 0;
    $indirect$arg$temp2492D2D = (sp + 152) | 0;
    $indirect$arg$temp2502D2D = (sp + 144) | 0;
    $indirect$arg$temp2532D2D = (sp + 136) | 0;
    $indirect$arg$temp2542D2D = (sp + 128) | 0;
    $indirect$arg$temp2562D2D = (sp + 120) | 0;
    $indirect$arg$temp2572D2D = (sp + 112) | 0;
    $indirect$arg$temp2592D2D = (sp + 104) | 0;
    $indirect$arg$temp2602D2D = (sp + 96) | 0;
    $this$addr = $this;
    __ZN10emscripten15register_vectorIhEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc(
      6348
    );
    __ZN10emscripten5enum_IN5Motor5StateEEC2EPKc($ref$tmp, 6358);
    $call =
      __ZN10emscripten5enum_IN5Motor5StateEE5valueEPKcS2_($ref$tmp, 6369, 0) |
      0;
    $call2 =
      __ZN10emscripten5enum_IN5Motor5StateEE5valueEPKcS2_($call, 6373, 1) | 0;
    __ZN10emscripten5enum_IN5Motor5StateEE5valueEPKcS2_($call2, 6376, 2) | 0;
    __ZN10emscripten5enum_IN10SmartDrive5UnitsEEC2EPKc($ref$tmp4, 6382);
    $call5 =
      __ZN10emscripten5enum_IN10SmartDrive5UnitsEE5valueEPKcS2_(
        $ref$tmp4,
        6388,
        0
      ) | 0;
    __ZN10emscripten5enum_IN10SmartDrive5UnitsEE5valueEPKcS2_($call5, 6396, 1) |
      0;
    __ZN10emscripten5enum_IN10SmartDrive11ControlModeEEC2EPKc($ref$tmp7, 6403);
    $call8 =
      __ZN10emscripten5enum_IN10SmartDrive11ControlModeEE5valueEPKcS2_(
        $ref$tmp7,
        6425,
        0
      ) | 0;
    $call9 =
      __ZN10emscripten5enum_IN10SmartDrive11ControlModeEE5valueEPKcS2_(
        $call8,
        6434,
        1
      ) | 0;
    $call10 =
      __ZN10emscripten5enum_IN10SmartDrive11ControlModeEE5valueEPKcS2_(
        $call9,
        6447,
        2
      ) | 0;
    __ZN10emscripten5enum_IN10SmartDrive11ControlModeEE5valueEPKcS2_(
      $call10,
      6369,
      3
    ) | 0;
    __ZN10emscripten5enum_IN10SmartDrive17SwitchControlModeEEC2EPKc(
      $ref$tmp12,
      6456
    );
    $call13 =
      __ZN10emscripten5enum_IN10SmartDrive17SwitchControlModeEE5valueEPKcS2_(
        $ref$tmp12,
        6474,
        0
      ) | 0;
    __ZN10emscripten5enum_IN10SmartDrive17SwitchControlModeEE5valueEPKcS2_(
      $call13,
      6484,
      1
    ) | 0;
    __ZN10emscripten12value_objectIN10SmartDrive8SettingsEEC2EPKc(
      $ref$tmp15,
      6493
    );
    $call16 =
      __ZN10emscripten12value_objectIN10SmartDrive8SettingsEE5fieldIS2_NS1_11ControlModeEEERS3_PKcMT_T0_(
        $ref$tmp15,
        6512,
        0
      ) | 0;
    $call18 =
      __ZN10emscripten12value_objectIN10SmartDrive8SettingsEE5fieldIS2_NS1_5UnitsEEERS3_PKcMT_T0_(
        $call16,
        6382,
        1
      ) | 0;
    $call20 =
      __ZN10emscripten12value_objectIN10SmartDrive8SettingsEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call18,
        6524,
        2
      ) | 0;
    $call22 =
      __ZN10emscripten12value_objectIN10SmartDrive8SettingsEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call20,
        6530,
        3
      ) | 0;
    $call24 =
      __ZN10emscripten12value_objectIN10SmartDrive8SettingsEE5fieldIS2_fEERS3_PKcMT_T0_(
        $call22,
        6538,
        4
      ) | 0;
    $call26 =
      __ZN10emscripten12value_objectIN10SmartDrive8SettingsEE5fieldIS2_fEERS3_PKcMT_T0_(
        $call24,
        6553,
        8
      ) | 0;
    __ZN10emscripten12value_objectIN10SmartDrive8SettingsEE5fieldIS2_fEERS3_PKcMT_T0_(
      $call26,
      6566,
      12
    ) | 0;
    __ZN10emscripten12value_objectIN10SmartDrive8SettingsEED2Ev($ref$tmp15);
    __ZN10emscripten12value_objectIN10SmartDrive21SwitchControlSettingsEEC2EPKc(
      $ref$tmp29,
      6575
    );
    $call32 =
      __ZN10emscripten12value_objectIN10SmartDrive21SwitchControlSettingsEE5fieldIS2_NS1_17SwitchControlModeEEERS3_PKcMT_T0_(
        $ref$tmp29,
        6597,
        0
      ) | 0;
    $call34 =
      __ZN10emscripten12value_objectIN10SmartDrive21SwitchControlSettingsEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call32,
        6602,
        1
      ) | 0;
    $call36 =
      __ZN10emscripten12value_objectIN10SmartDrive21SwitchControlSettingsEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call34,
        6611,
        2
      ) | 0;
    $call38 =
      __ZN10emscripten12value_objectIN10SmartDrive21SwitchControlSettingsEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call36,
        6620,
        3
      ) | 0;
    __ZN10emscripten12value_objectIN10SmartDrive21SwitchControlSettingsEE5fieldIS2_fEERS3_PKcMT_T0_(
      $call38,
      6566,
      4
    ) | 0;
    __ZN10emscripten12value_objectIN10SmartDrive21SwitchControlSettingsEED2Ev(
      $ref$tmp29
    );
    __ZN10emscripten5enum_IN6Packet6DeviceEEC2EPKc($ref$tmp41, 6629);
    $call42 =
      __ZN10emscripten5enum_IN6Packet6DeviceEE5valueEPKcS2_(
        $ref$tmp41,
        6636,
        0
      ) | 0;
    $call43 =
      __ZN10emscripten5enum_IN6Packet6DeviceEE5valueEPKcS2_($call42, 6647, 1) |
      0;
    __ZN10emscripten5enum_IN6Packet6DeviceEE5valueEPKcS2_($call43, 6667, 2) | 0;
    __ZN10emscripten5enum_IN6Packet4TypeEEC2EPKc($ref$tmp45, 6679);
    $call46 =
      __ZN10emscripten5enum_IN6Packet4TypeEE5valueEPKcS2_($ref$tmp45, 6690, 0) |
      0;
    $call47 =
      __ZN10emscripten5enum_IN6Packet4TypeEE5valueEPKcS2_($call46, 6695, 1) | 0;
    $call48 =
      __ZN10emscripten5enum_IN6Packet4TypeEE5valueEPKcS2_($call47, 6700, 2) | 0;
    $call49 =
      __ZN10emscripten5enum_IN6Packet4TypeEE5valueEPKcS2_($call48, 6376, 3) | 0;
    __ZN10emscripten5enum_IN6Packet4TypeEE5valueEPKcS2_($call49, 6708, 4) | 0;
    __ZN10emscripten5enum_IN6Packet4DataEEC2EPKc($ref$tmp51, 6712);
    $call52 =
      __ZN10emscripten5enum_IN6Packet4DataEE5valueEPKcS2_($ref$tmp51, 6727, 0) |
      0;
    $call53 =
      __ZN10emscripten5enum_IN6Packet4DataEE5valueEPKcS2_($call52, 6741, 1) | 0;
    $call54 =
      __ZN10emscripten5enum_IN6Packet4DataEE5valueEPKcS2_($call53, 6747, 2) | 0;
    $call55 =
      __ZN10emscripten5enum_IN6Packet4DataEE5valueEPKcS2_($call54, 6757, 3) | 0;
    $call56 =
      __ZN10emscripten5enum_IN6Packet4DataEE5valueEPKcS2_($call55, 6358, 4) | 0;
    $call57 =
      __ZN10emscripten5enum_IN6Packet4DataEE5valueEPKcS2_($call56, 6764, 5) | 0;
    $call58 =
      __ZN10emscripten5enum_IN6Packet4DataEE5valueEPKcS2_($call57, 6777, 6) | 0;
    $call59 =
      __ZN10emscripten5enum_IN6Packet4DataEE5valueEPKcS2_($call58, 6789, 7) | 0;
    $call60 =
      __ZN10emscripten5enum_IN6Packet4DataEE5valueEPKcS2_($call59, 6799, 8) | 0;
    $call61 =
      __ZN10emscripten5enum_IN6Packet4DataEE5valueEPKcS2_($call60, 6811, 9) | 0;
    $call62 =
      __ZN10emscripten5enum_IN6Packet4DataEE5valueEPKcS2_($call61, 6821, 10) |
      0;
    $call63 =
      __ZN10emscripten5enum_IN6Packet4DataEE5valueEPKcS2_($call62, 6832, 11) |
      0;
    $call64 =
      __ZN10emscripten5enum_IN6Packet4DataEE5valueEPKcS2_($call63, 6838, 12) |
      0;
    __ZN10emscripten5enum_IN6Packet4DataEE5valueEPKcS2_($call64, 6848, 13) | 0;
    __ZN10emscripten12value_objectIN6Packet11VersionInfoEEC2EPKc(
      $ref$tmp66,
      6777
    );
    $call69 =
      __ZN10emscripten12value_objectIN6Packet11VersionInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $ref$tmp66,
        6861,
        0
      ) | 0;
    $call71 =
      __ZN10emscripten12value_objectIN6Packet11VersionInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call69,
        6873,
        1
      ) | 0;
    __ZN10emscripten12value_objectIN6Packet11VersionInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
      $call71,
      6884,
      2
    ) | 0;
    __ZN10emscripten12value_objectIN6Packet11VersionInfoEED2Ev($ref$tmp66);
    __ZN10emscripten12value_objectIN6Packet9DailyInfoEEC2EPKc($ref$tmp74, 6789);
    $call77 =
      __ZN10emscripten12value_objectIN6Packet9DailyInfoEE5fieldIS2_tEERS3_PKcMT_T0_(
        $ref$tmp74,
        6904,
        0
      ) | 0;
    $call79 =
      __ZN10emscripten12value_objectIN6Packet9DailyInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call77,
        6909,
        2
      ) | 0;
    $call81 =
      __ZN10emscripten12value_objectIN6Packet9DailyInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call79,
        6915,
        3
      ) | 0;
    $call83 =
      __ZN10emscripten12value_objectIN6Packet9DailyInfoEE5fieldIS2_tEERS3_PKcMT_T0_(
        $call81,
        6919,
        4
      ) | 0;
    $call85 =
      __ZN10emscripten12value_objectIN6Packet9DailyInfoEE5fieldIS2_tEERS3_PKcMT_T0_(
        $call83,
        6930,
        6
      ) | 0;
    $call87 =
      __ZN10emscripten12value_objectIN6Packet9DailyInfoEE5fieldIS2_tEERS3_PKcMT_T0_(
        $call85,
        6944,
        8
      ) | 0;
    $call89 =
      __ZN10emscripten12value_objectIN6Packet9DailyInfoEE5fieldIS2_tEERS3_PKcMT_T0_(
        $call87,
        6954,
        10
      ) | 0;
    $call91 =
      __ZN10emscripten12value_objectIN6Packet9DailyInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call89,
        6967,
        12
      ) | 0;
    $call93 =
      __ZN10emscripten12value_objectIN6Packet9DailyInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call91,
        6976,
        13
      ) | 0;
    $call95 =
      __ZN10emscripten12value_objectIN6Packet9DailyInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call93,
        6982,
        14
      ) | 0;
    __ZN10emscripten12value_objectIN6Packet9DailyInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
      $call95,
      6992,
      15
    ) | 0;
    __ZN10emscripten12value_objectIN6Packet9DailyInfoEED2Ev($ref$tmp74);
    __ZN10emscripten12value_objectIN6Packet12PushSettingsEEC2EPKc(
      $ref$tmp98,
      6848
    );
    $call101 =
      __ZN10emscripten12value_objectIN6Packet12PushSettingsEE5fieldIS2_hEERS3_PKcMT_T0_(
        $ref$tmp98,
        7002,
        0
      ) | 0;
    $call103 =
      __ZN10emscripten12value_objectIN6Packet12PushSettingsEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call101,
        7012,
        1
      ) | 0;
    __ZN10emscripten12value_objectIN6Packet12PushSettingsEE5fieldIS2_hEERS3_PKcMT_T0_(
      $call103,
      7023,
      2
    ) | 0;
    __ZN10emscripten12value_objectIN6Packet12PushSettingsEED2Ev($ref$tmp98);
    __ZN10emscripten12value_objectIN6Packet11JourneyInfoEEC2EPKc(
      $ref$tmp106,
      6799
    );
    $call109 =
      __ZN10emscripten12value_objectIN6Packet11JourneyInfoEE5fieldIS2_tEERS3_PKcMT_T0_(
        $ref$tmp106,
        7036,
        0
      ) | 0;
    $call111 =
      __ZN10emscripten12value_objectIN6Packet11JourneyInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call109,
        6967,
        2
      ) | 0;
    __ZN10emscripten12value_objectIN6Packet11JourneyInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
      $call111,
      6976,
      3
    ) | 0;
    __ZN10emscripten12value_objectIN6Packet11JourneyInfoEED2Ev($ref$tmp106);
    __ZN10emscripten12value_objectIN6Packet12DistanceInfoEEC2EPKc(
      $ref$tmp114,
      7043
    );
    $call117 =
      __ZN10emscripten12value_objectIN6Packet12DistanceInfoEE5fieldIS2_yEERS3_PKcMT_T0_(
        $ref$tmp114,
        7056,
        0
      ) | 0;
    __ZN10emscripten12value_objectIN6Packet12DistanceInfoEE5fieldIS2_yEERS3_PKcMT_T0_(
      $call117,
      7070,
      8
    ) | 0;
    __ZN10emscripten12value_objectIN6Packet12DistanceInfoEED2Ev($ref$tmp114);
    __ZN10emscripten12value_objectIN6Packet9MotorInfoEEC2EPKc(
      $ref$tmp120,
      6811
    );
    $call123 =
      __ZN10emscripten12value_objectIN6Packet9MotorInfoEE5fieldIS2_N5Motor5StateEEERS3_PKcMT_T0_(
        $ref$tmp120,
        7083,
        0
      ) | 0;
    $call125 =
      __ZN10emscripten12value_objectIN6Packet9MotorInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call123,
        7089,
        1
      ) | 0;
    $call127 =
      __ZN10emscripten12value_objectIN6Packet9MotorInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call125,
        7102,
        2
      ) | 0;
    $call129 =
      __ZN10emscripten12value_objectIN6Packet9MotorInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call127,
        7110,
        3
      ) | 0;
    $call131 =
      __ZN10emscripten12value_objectIN6Packet9MotorInfoEE5fieldIS2_fEERS3_PKcMT_T0_(
        $call129,
        6967,
        4
      ) | 0;
    $call133 =
      __ZN10emscripten12value_objectIN6Packet9MotorInfoEE5fieldIS2_fEERS3_PKcMT_T0_(
        $call131,
        6976,
        8
      ) | 0;
    __ZN10emscripten12value_objectIN6Packet9MotorInfoEE5fieldIS2_fEERS3_PKcMT_T0_(
      $call133,
      7118,
      12
    ) | 0;
    __ZN10emscripten12value_objectIN6Packet9MotorInfoEED2Ev($ref$tmp120);
    __ZN10emscripten12value_objectIN6Packet8TimeInfoEEC2EPKc($ref$tmp136, 7128);
    $call139 =
      __ZN10emscripten12value_objectIN6Packet8TimeInfoEE5fieldIS2_tEERS3_PKcMT_T0_(
        $ref$tmp136,
        6904,
        0
      ) | 0;
    $call141 =
      __ZN10emscripten12value_objectIN6Packet8TimeInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call139,
        6909,
        2
      ) | 0;
    $call143 =
      __ZN10emscripten12value_objectIN6Packet8TimeInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call141,
        6915,
        3
      ) | 0;
    $call145 =
      __ZN10emscripten12value_objectIN6Packet8TimeInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call143,
        7137,
        4
      ) | 0;
    $call147 =
      __ZN10emscripten12value_objectIN6Packet8TimeInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call145,
        7143,
        5
      ) | 0;
    __ZN10emscripten12value_objectIN6Packet8TimeInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
      $call147,
      7151,
      6
    ) | 0;
    __ZN10emscripten12value_objectIN6Packet8TimeInfoEED2Ev($ref$tmp136);
    __ZN10emscripten12value_objectIN6Packet9ErrorInfoEEC2EPKc(
      $ref$tmp150,
      6838
    );
    $call153 =
      __ZN10emscripten12value_objectIN6Packet9ErrorInfoEE5fieldIS2_tEERS3_PKcMT_T0_(
        $ref$tmp150,
        6904,
        0
      ) | 0;
    $call155 =
      __ZN10emscripten12value_objectIN6Packet9ErrorInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call153,
        6909,
        2
      ) | 0;
    $call157 =
      __ZN10emscripten12value_objectIN6Packet9ErrorInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call155,
        6915,
        3
      ) | 0;
    $call159 =
      __ZN10emscripten12value_objectIN6Packet9ErrorInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call157,
        7159,
        4
      ) | 0;
    $call161 =
      __ZN10emscripten12value_objectIN6Packet9ErrorInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call159,
        7164,
        5
      ) | 0;
    $call163 =
      __ZN10emscripten12value_objectIN6Packet9ErrorInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call161,
        7171,
        6
      ) | 0;
    $call165 =
      __ZN10emscripten12value_objectIN6Packet9ErrorInfoEE5fieldIS2_N10SmartDrive5ErrorEEERS3_PKcMT_T0_(
        $call163,
        7178,
        7
      ) | 0;
    $call167 =
      __ZN10emscripten12value_objectIN6Packet9ErrorInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call165,
        7194,
        8
      ) | 0;
    $call169 =
      __ZN10emscripten12value_objectIN6Packet9ErrorInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call167,
        7218,
        9
      ) | 0;
    $call171 =
      __ZN10emscripten12value_objectIN6Packet9ErrorInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call169,
        7239,
        10
      ) | 0;
    $call173 =
      __ZN10emscripten12value_objectIN6Packet9ErrorInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call171,
        7259,
        11
      ) | 0;
    $call175 =
      __ZN10emscripten12value_objectIN6Packet9ErrorInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
        $call173,
        7278,
        12
      ) | 0;
    __ZN10emscripten12value_objectIN6Packet9ErrorInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
      $call175,
      7303,
      13
    ) | 0;
    __ZN10emscripten12value_objectIN6Packet9ErrorInfoEED2Ev($ref$tmp150);
    __ZN10emscripten12value_objectIN6Packet10DeviceInfoEEC2EPKc(
      $ref$tmp178,
      6821
    );
    $call181 =
      __ZN10emscripten12value_objectIN6Packet10DeviceInfoEE5fieldIS2_NS1_6DeviceEEERS3_PKcMT_T0_(
        $ref$tmp178,
        7326,
        0
      ) | 0;
    __ZN10emscripten12value_objectIN6Packet10DeviceInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
      $call181,
      7102,
      1
    ) | 0;
    __ZN10emscripten12value_objectIN6Packet10DeviceInfoEED2Ev($ref$tmp178);
    __ZN10emscripten5enum_IN6Packet7CommandEEC2EPKc($ref$tmp184, 7333);
    $call185 =
      __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_(
        $ref$tmp184,
        7351,
        0
      ) | 0;
    $call186 =
      __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_(
        $call185,
        7367,
        1
      ) | 0;
    $call187 =
      __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_(
        $call186,
        7379,
        2
      ) | 0;
    $call188 =
      __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_(
        $call187,
        7383,
        3
      ) | 0;
    $call189 =
      __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_(
        $call188,
        7393,
        4
      ) | 0;
    $call190 =
      __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_(
        $call189,
        7408,
        5
      ) | 0;
    $call191 =
      __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_(
        $call190,
        7420,
        6
      ) | 0;
    $call192 =
      __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_(
        $call191,
        7433,
        7
      ) | 0;
    $call193 =
      __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_(
        $call192,
        7446,
        8
      ) | 0;
    $call194 =
      __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_(
        $call193,
        7458,
        9
      ) | 0;
    $call195 =
      __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_(
        $call194,
        7471,
        10
      ) | 0;
    $call196 =
      __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_(
        $call195,
        7479,
        11
      ) | 0;
    $call197 =
      __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_(
        $call196,
        7488,
        12
      ) | 0;
    $call198 =
      __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_(
        $call197,
        7496,
        13
      ) | 0;
    $call199 =
      __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_(
        $call198,
        7505,
        14
      ) | 0;
    $call200 =
      __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_(
        $call199,
        7515,
        15
      ) | 0;
    $call201 =
      __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_(
        $call200,
        7520,
        16
      ) | 0;
    $call202 =
      __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_(
        $call201,
        7536,
        17
      ) | 0;
    $call203 =
      __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_(
        $call202,
        7546,
        18
      ) | 0;
    $call204 =
      __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_(
        $call203,
        7555,
        19
      ) | 0;
    $call205 =
      __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_(
        $call204,
        7569,
        20
      ) | 0;
    $call206 =
      __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_(
        $call205,
        7586,
        21
      ) | 0;
    $call207 =
      __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_(
        $call206,
        7602,
        22
      ) | 0;
    __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_($call207, 7614, 23) |
      0;
    __ZN10emscripten5enum_IN6Packet3OTAEEC2EPKc($ref$tmp209, 7639);
    $call210 =
      __ZN10emscripten5enum_IN6Packet3OTAEE5valueEPKcS2_($ref$tmp209, 6636, 0) |
      0;
    $call211 =
      __ZN10emscripten5enum_IN6Packet3OTAEE5valueEPKcS2_($call210, 6647, 1) | 0;
    __ZN10emscripten5enum_IN6Packet3OTAEE5valueEPKcS2_($call211, 6667, 2) | 0;
    __ZN10emscripten5enum_IN10SmartDrive5ErrorEEC2EPKc($ref$tmp213, 7653);
    $call214 =
      __ZN10emscripten5enum_IN10SmartDrive5ErrorEE5valueEPKcS2_(
        $ref$tmp213,
        7669,
        0
      ) | 0;
    $call215 =
      __ZN10emscripten5enum_IN10SmartDrive5ErrorEE5valueEPKcS2_(
        $call214,
        7677,
        1
      ) | 0;
    $call216 =
      __ZN10emscripten5enum_IN10SmartDrive5ErrorEE5valueEPKcS2_(
        $call215,
        7692,
        2
      ) | 0;
    $call217 =
      __ZN10emscripten5enum_IN10SmartDrive5ErrorEE5valueEPKcS2_(
        $call216,
        7704,
        3
      ) | 0;
    $call218 =
      __ZN10emscripten5enum_IN10SmartDrive5ErrorEE5valueEPKcS2_(
        $call217,
        7716,
        4
      ) | 0;
    $call219 =
      __ZN10emscripten5enum_IN10SmartDrive5ErrorEE5valueEPKcS2_(
        $call218,
        7732,
        5
      ) | 0;
    $call220 =
      __ZN10emscripten5enum_IN10SmartDrive5ErrorEE5valueEPKcS2_(
        $call219,
        7742,
        6
      ) | 0;
    __ZN10emscripten5enum_IN10SmartDrive5ErrorEE5valueEPKcS2_(
      $call220,
      7757,
      7
    ) | 0;
    $this$addr$i = $ref$tmp222;
    $name$addr$i = 7771;
    __ZN10emscripten8internal11NoBaseClass6verifyI6PacketEEvv();
    $_getActualType$i = 208;
    $call$i =
      __ZN10emscripten8internal11NoBaseClass11getUpcasterI6PacketEEPFvvEv() | 0;
    $upcast$i = $call$i;
    $call2$i =
      __ZN10emscripten8internal11NoBaseClass13getDowncasterI6PacketEEPFvvEv() |
      0;
    $downcast$i = $call2$i;
    $destructor$i = 209;
    $call3$i = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $call4$i =
      __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI6PacketEEvE3getEv() |
      0;
    $call5$i =
      __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK6PacketEEvE3getEv() |
      0;
    $call6$i = __ZN10emscripten8internal11NoBaseClass3getEv() | 0;
    $0 = $_getActualType$i;
    $$addr$i$i = $0;
    $call$i$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() | 0;
    $1 = $_getActualType$i;
    $2 = $upcast$i;
    $$addr$i11$i = $2;
    $call$i$i12$i =
      __ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv() | 0;
    $3 = $upcast$i;
    $4 = $downcast$i;
    $$addr$i13$i = $4;
    $call$i$i14$i =
      __ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv() | 0;
    $5 = $downcast$i;
    $6 = $name$addr$i;
    $7 = $destructor$i;
    $$addr$i15$i = $7;
    $call$i$i16$i =
      __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() | 0;
    $8 = $destructor$i;
    __embind_register_class(
      $call3$i | 0,
      $call4$i | 0,
      $call5$i | 0,
      $call6$i | 0,
      $call$i$i$i | 0,
      $1 | 0,
      $call$i$i12$i | 0,
      $3 | 0,
      $call$i$i14$i | 0,
      $5 | 0,
      $6 | 0,
      $call$i$i16$i | 0,
      $8 | 0
    );
    $this$addr$i263 = $ref$tmp222;
    $this1$i264 = $this$addr$i263;
    $this$addr$i$i = $this1$i264;
    $callable$addr$i$i = 210;
    $this1$i$i = $this$addr$i$i;
    $9 = $callable$addr$i$i;
    __ZN10emscripten8internal24RegisterClassConstructorIPFP6PacketvEE6invokeIS2_JEEEvS5_(
      $9
    );
    HEAP32[$indirect$arg$temp2D2D >> 2] = 211;
    $indirect$arg$temp$index12D2D = ($indirect$arg$temp2D2D + 4) | 0;
    HEAP32[$indirect$arg$temp$index12D2D >> 2] = 0;
    HEAP8[$indirect$arg$temp2652D2D >> 0] =
      HEAP8[$indirect$arg$temp2D2D >> 0] | 0;
    HEAP8[($indirect$arg$temp2652D2D + 1) >> 0] =
      HEAP8[($indirect$arg$temp2D2D + 1) >> 0] | 0;
    HEAP8[($indirect$arg$temp2652D2D + 2) >> 0] =
      HEAP8[($indirect$arg$temp2D2D + 2) >> 0] | 0;
    HEAP8[($indirect$arg$temp2652D2D + 3) >> 0] =
      HEAP8[($indirect$arg$temp2D2D + 3) >> 0] | 0;
    HEAP8[($indirect$arg$temp2652D2D + 4) >> 0] =
      HEAP8[($indirect$arg$temp2D2D + 4) >> 0] | 0;
    HEAP8[($indirect$arg$temp2652D2D + 5) >> 0] =
      HEAP8[($indirect$arg$temp2D2D + 5) >> 0] | 0;
    HEAP8[($indirect$arg$temp2652D2D + 6) >> 0] =
      HEAP8[($indirect$arg$temp2D2D + 6) >> 0] | 0;
    HEAP8[($indirect$arg$temp2652D2D + 7) >> 0] =
      HEAP8[($indirect$arg$temp2D2D + 7) >> 0] | 0;
    $callable$i$field = HEAP32[$indirect$arg$temp2652D2D >> 2] | 0;
    $callable$i$index2 = ($indirect$arg$temp2652D2D + 4) | 0;
    $callable$i$field3 = HEAP32[$callable$i$index2 >> 2] | 0;
    $this$addr$i266 = $this1$i$i;
    $methodName$addr$i = 7778;
    HEAP32[$callable$addr$i >> 2] = $callable$i$field;
    $callable$addr$i$index5 = ($callable$addr$i + 4) | 0;
    HEAP32[$callable$addr$i$index5 >> 2] = $callable$i$field3;
    $this1$i267 = $this$addr$i266;
    $10 = $methodName$addr$i;
    $$field = HEAP32[$callable$addr$i >> 2] | 0;
    $$index6 = ($callable$addr$i + 4) | 0;
    $$field7 = HEAP32[$$index6 >> 2] | 0;
    HEAP32[$indirect$arg$temp$i2D2D >> 2] = $$field;
    $indirect$arg$temp$i$index92D2D = ($indirect$arg$temp$i2D2D + 4) | 0;
    HEAP32[$indirect$arg$temp$i$index92D2D >> 2] = $$field7;
    HEAP32[$indirect$arg$temp$i$byval_copy2D2D >> 2] =
      HEAP32[$indirect$arg$temp$i2D2D >> 2] | 0;
    HEAP32[($indirect$arg$temp$i$byval_copy2D2D + 4) >> 2] =
      HEAP32[($indirect$arg$temp$i2D2D + 4) >> 2] | 0;
    __ZN10emscripten8internal19RegisterClassMethodIM6PacketFbvEE6invokeIS2_JEEEvPKcS4_(
      $10,
      $indirect$arg$temp$i$byval_copy2D2D
    );
    HEAP32[$indirect$arg$temp2252D2D >> 2] = 212;
    $indirect$arg$temp225$index102D2D = ($indirect$arg$temp2252D2D + 4) | 0;
    HEAP32[$indirect$arg$temp225$index102D2D >> 2] = 0;
    HEAP8[$indirect$arg$temp2252682D2D >> 0] =
      HEAP8[$indirect$arg$temp2252D2D >> 0] | 0;
    HEAP8[($indirect$arg$temp2252682D2D + 1) >> 0] =
      HEAP8[($indirect$arg$temp2252D2D + 1) >> 0] | 0;
    HEAP8[($indirect$arg$temp2252682D2D + 2) >> 0] =
      HEAP8[($indirect$arg$temp2252D2D + 2) >> 0] | 0;
    HEAP8[($indirect$arg$temp2252682D2D + 3) >> 0] =
      HEAP8[($indirect$arg$temp2252D2D + 3) >> 0] | 0;
    HEAP8[($indirect$arg$temp2252682D2D + 4) >> 0] =
      HEAP8[($indirect$arg$temp2252D2D + 4) >> 0] | 0;
    HEAP8[($indirect$arg$temp2252682D2D + 5) >> 0] =
      HEAP8[($indirect$arg$temp2252D2D + 5) >> 0] | 0;
    HEAP8[($indirect$arg$temp2252682D2D + 6) >> 0] =
      HEAP8[($indirect$arg$temp2252D2D + 6) >> 0] | 0;
    HEAP8[($indirect$arg$temp2252682D2D + 7) >> 0] =
      HEAP8[($indirect$arg$temp2252D2D + 7) >> 0] | 0;
    $callable$i273$field = HEAP32[$indirect$arg$temp2252682D2D >> 2] | 0;
    $callable$i273$index11 = ($indirect$arg$temp2252682D2D + 4) | 0;
    $callable$i273$field12 = HEAP32[$callable$i273$index11 >> 2] | 0;
    $this$addr$i269 = $this1$i267;
    $methodName$addr$i270 = 7784;
    HEAP32[$callable$addr$i271 >> 2] = $callable$i273$field;
    $callable$addr$i271$index14 = ($callable$addr$i271 + 4) | 0;
    HEAP32[$callable$addr$i271$index14 >> 2] = $callable$i273$field12;
    $this1$i274 = $this$addr$i269;
    $11 = $methodName$addr$i270;
    $$field16 = HEAP32[$callable$addr$i271 >> 2] | 0;
    $$index18 = ($callable$addr$i271 + 4) | 0;
    $$field19 = HEAP32[$$index18 >> 2] | 0;
    HEAP32[$indirect$arg$temp$i2722D2D >> 2] = $$field16;
    $indirect$arg$temp$i272$index212D2D = ($indirect$arg$temp$i2722D2D + 4) | 0;
    HEAP32[$indirect$arg$temp$i272$index212D2D >> 2] = $$field19;
    HEAP32[$indirect$arg$temp$i272$byval_copy2D2D >> 2] =
      HEAP32[$indirect$arg$temp$i2722D2D >> 2] | 0;
    HEAP32[($indirect$arg$temp$i272$byval_copy2D2D + 4) >> 2] =
      HEAP32[($indirect$arg$temp$i2722D2D + 4) >> 2] | 0;
    __ZN10emscripten8internal19RegisterClassMethodIM6PacketFbNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeIS2_JEEEvPKcSB_(
      $11,
      $indirect$arg$temp$i272$byval_copy2D2D
    );
    HEAP32[$indirect$arg$temp2272D2D >> 2] = 213;
    $indirect$arg$temp227$index222D2D = ($indirect$arg$temp2272D2D + 4) | 0;
    HEAP32[$indirect$arg$temp227$index222D2D >> 2] = 0;
    HEAP8[$indirect$arg$temp2272752D2D >> 0] =
      HEAP8[$indirect$arg$temp2272D2D >> 0] | 0;
    HEAP8[($indirect$arg$temp2272752D2D + 1) >> 0] =
      HEAP8[($indirect$arg$temp2272D2D + 1) >> 0] | 0;
    HEAP8[($indirect$arg$temp2272752D2D + 2) >> 0] =
      HEAP8[($indirect$arg$temp2272D2D + 2) >> 0] | 0;
    HEAP8[($indirect$arg$temp2272752D2D + 3) >> 0] =
      HEAP8[($indirect$arg$temp2272D2D + 3) >> 0] | 0;
    HEAP8[($indirect$arg$temp2272752D2D + 4) >> 0] =
      HEAP8[($indirect$arg$temp2272D2D + 4) >> 0] | 0;
    HEAP8[($indirect$arg$temp2272752D2D + 5) >> 0] =
      HEAP8[($indirect$arg$temp2272D2D + 5) >> 0] | 0;
    HEAP8[($indirect$arg$temp2272752D2D + 6) >> 0] =
      HEAP8[($indirect$arg$temp2272D2D + 6) >> 0] | 0;
    HEAP8[($indirect$arg$temp2272752D2D + 7) >> 0] =
      HEAP8[($indirect$arg$temp2272D2D + 7) >> 0] | 0;
    $callable$i280$field = HEAP32[$indirect$arg$temp2272752D2D >> 2] | 0;
    $callable$i280$index23 = ($indirect$arg$temp2272752D2D + 4) | 0;
    $callable$i280$field24 = HEAP32[$callable$i280$index23 >> 2] | 0;
    $this$addr$i276 = $this1$i274;
    $methodName$addr$i277 = 7798;
    HEAP32[$callable$addr$i278 >> 2] = $callable$i280$field;
    $callable$addr$i278$index26 = ($callable$addr$i278 + 4) | 0;
    HEAP32[$callable$addr$i278$index26 >> 2] = $callable$i280$field24;
    $this1$i281 = $this$addr$i276;
    $12 = $methodName$addr$i277;
    $$field28 = HEAP32[$callable$addr$i278 >> 2] | 0;
    $$index30 = ($callable$addr$i278 + 4) | 0;
    $$field31 = HEAP32[$$index30 >> 2] | 0;
    HEAP32[$indirect$arg$temp$i2792D2D >> 2] = $$field28;
    $indirect$arg$temp$i279$index332D2D = ($indirect$arg$temp$i2792D2D + 4) | 0;
    HEAP32[$indirect$arg$temp$i279$index332D2D >> 2] = $$field31;
    HEAP32[$indirect$arg$temp$i279$byval_copy2D2D >> 2] =
      HEAP32[$indirect$arg$temp$i2792D2D >> 2] | 0;
    HEAP32[($indirect$arg$temp$i279$byval_copy2D2D + 4) >> 2] =
      HEAP32[($indirect$arg$temp$i2792D2D + 4) >> 2] | 0;
    __ZN10emscripten8internal19RegisterClassMethodIM6PacketFvvEE6invokeIS2_JEEEvPKcS4_(
      $12,
      $indirect$arg$temp$i279$byval_copy2D2D
    );
    HEAP32[$indirect$arg$temp2292D2D >> 2] = 214;
    $indirect$arg$temp229$index342D2D = ($indirect$arg$temp2292D2D + 4) | 0;
    HEAP32[$indirect$arg$temp229$index342D2D >> 2] = 0;
    HEAP8[$indirect$arg$temp2292822D2D >> 0] =
      HEAP8[$indirect$arg$temp2292D2D >> 0] | 0;
    HEAP8[($indirect$arg$temp2292822D2D + 1) >> 0] =
      HEAP8[($indirect$arg$temp2292D2D + 1) >> 0] | 0;
    HEAP8[($indirect$arg$temp2292822D2D + 2) >> 0] =
      HEAP8[($indirect$arg$temp2292D2D + 2) >> 0] | 0;
    HEAP8[($indirect$arg$temp2292822D2D + 3) >> 0] =
      HEAP8[($indirect$arg$temp2292D2D + 3) >> 0] | 0;
    HEAP8[($indirect$arg$temp2292822D2D + 4) >> 0] =
      HEAP8[($indirect$arg$temp2292D2D + 4) >> 0] | 0;
    HEAP8[($indirect$arg$temp2292822D2D + 5) >> 0] =
      HEAP8[($indirect$arg$temp2292D2D + 5) >> 0] | 0;
    HEAP8[($indirect$arg$temp2292822D2D + 6) >> 0] =
      HEAP8[($indirect$arg$temp2292D2D + 6) >> 0] | 0;
    HEAP8[($indirect$arg$temp2292822D2D + 7) >> 0] =
      HEAP8[($indirect$arg$temp2292D2D + 7) >> 0] | 0;
    $callable$i287$field = HEAP32[$indirect$arg$temp2292822D2D >> 2] | 0;
    $callable$i287$index35 = ($indirect$arg$temp2292822D2D + 4) | 0;
    $callable$i287$field36 = HEAP32[$callable$i287$index35 >> 2] | 0;
    $this$addr$i283 = $this1$i281;
    $methodName$addr$i284 = 7808;
    HEAP32[$callable$addr$i285 >> 2] = $callable$i287$field;
    $callable$addr$i285$index38 = ($callable$addr$i285 + 4) | 0;
    HEAP32[$callable$addr$i285$index38 >> 2] = $callable$i287$field36;
    $this1$i288 = $this$addr$i283;
    $13 = $methodName$addr$i284;
    $$field40 = HEAP32[$callable$addr$i285 >> 2] | 0;
    $$index42 = ($callable$addr$i285 + 4) | 0;
    $$field43 = HEAP32[$$index42 >> 2] | 0;
    HEAP32[$indirect$arg$temp$i2862D2D >> 2] = $$field40;
    $indirect$arg$temp$i286$index452D2D = ($indirect$arg$temp$i2862D2D + 4) | 0;
    HEAP32[$indirect$arg$temp$i286$index452D2D >> 2] = $$field43;
    HEAP32[$indirect$arg$temp$i286$byval_copy2D2D >> 2] =
      HEAP32[$indirect$arg$temp$i2862D2D >> 2] | 0;
    HEAP32[($indirect$arg$temp$i286$byval_copy2D2D + 4) >> 2] =
      HEAP32[($indirect$arg$temp$i2862D2D + 4) >> 2] | 0;
    __ZN10emscripten8internal19RegisterClassMethodIM6PacketFNSt3__26vectorIhNS3_9allocatorIhEEEEvEE6invokeIS2_JEEEvPKcS9_(
      $13,
      $indirect$arg$temp$i286$byval_copy2D2D
    );
    $this$addr$i290 = $this1$i288;
    $fieldName$addr$i = 7815;
    HEAP32[$field$addr$i >> 2] = 0;
    $this1$i291 = $this$addr$i290;
    $getter$i = 215;
    $setter$i = 216;
    $call$i292 = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $14 = $fieldName$addr$i;
    $call2$i293 = __ZN10emscripten8internal6TypeIDIivE3getEv() | 0;
    $15 = $getter$i;
    $$addr$i$i289 = $15;
    $call$i$i$i294 =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $16 = $getter$i;
    $call4$i295 =
      __ZN10emscripten8internal10getContextIM6PacketiEEPT_RKS4_($field$addr$i) |
      0;
    $call5$i296 = __ZN10emscripten8internal6TypeIDIivE3getEv() | 0;
    $17 = $setter$i;
    $$addr$i8$i = $17;
    $call$i$i9$i =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $18 = $setter$i;
    $call7$i =
      __ZN10emscripten8internal10getContextIM6PacketiEEPT_RKS4_($field$addr$i) |
      0;
    __embind_register_class_property(
      $call$i292 | 0,
      $14 | 0,
      $call2$i293 | 0,
      $call$i$i$i294 | 0,
      $16 | 0,
      $call4$i295 | 0,
      $call5$i296 | 0,
      $call$i$i9$i | 0,
      $18 | 0,
      $call7$i | 0
    );
    $this$addr$i299 = $this1$i291;
    $fieldName$addr$i300 = 7822;
    HEAP32[$field$addr$i301 >> 2] = 4;
    $this1$i304 = $this$addr$i299;
    $getter$i302 = 217;
    $setter$i303 = 218;
    $call$i305 = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $19 = $fieldName$addr$i300;
    $call2$i306 = __ZN10emscripten8internal6TypeIDIN6Packet4TypeEvE3getEv() | 0;
    $20 = $getter$i302;
    $$addr$i$i298 = $20;
    $call$i$i$i307 =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $21 = $getter$i302;
    $call4$i308 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_4TypeEEEPT_RKS5_(
        $field$addr$i301
      ) | 0;
    $call5$i309 = __ZN10emscripten8internal6TypeIDIN6Packet4TypeEvE3getEv() | 0;
    $22 = $setter$i303;
    $$addr$i8$i297 = $22;
    $call$i$i9$i310 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $23 = $setter$i303;
    $call7$i311 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_4TypeEEEPT_RKS5_(
        $field$addr$i301
      ) | 0;
    __embind_register_class_property(
      $call$i305 | 0,
      $19 | 0,
      $call2$i306 | 0,
      $call$i$i$i307 | 0,
      $21 | 0,
      $call4$i308 | 0,
      $call5$i309 | 0,
      $call$i$i9$i310 | 0,
      $23 | 0,
      $call7$i311 | 0
    );
    $this$addr$i314 = $this1$i304;
    $fieldName$addr$i315 = 6695;
    HEAP32[$field$addr$i316 >> 2] = 5;
    $this1$i319 = $this$addr$i314;
    $getter$i317 = 219;
    $setter$i318 = 220;
    $call$i320 = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $24 = $fieldName$addr$i315;
    $call2$i321 = __ZN10emscripten8internal6TypeIDIN6Packet4DataEvE3getEv() | 0;
    $25 = $getter$i317;
    $$addr$i$i313 = $25;
    $call$i$i$i322 =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $26 = $getter$i317;
    $call4$i323 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_4DataEEEPT_RKS5_(
        $field$addr$i316
      ) | 0;
    $call5$i324 = __ZN10emscripten8internal6TypeIDIN6Packet4DataEvE3getEv() | 0;
    $27 = $setter$i318;
    $$addr$i8$i312 = $27;
    $call$i$i9$i325 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $28 = $setter$i318;
    $call7$i326 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_4DataEEEPT_RKS5_(
        $field$addr$i316
      ) | 0;
    __embind_register_class_property(
      $call$i320 | 0,
      $24 | 0,
      $call2$i321 | 0,
      $call$i$i$i322 | 0,
      $26 | 0,
      $call4$i323 | 0,
      $call5$i324 | 0,
      $call$i$i9$i325 | 0,
      $28 | 0,
      $call7$i326 | 0
    );
    $this$addr$i329 = $this1$i319;
    $fieldName$addr$i330 = 6700;
    HEAP32[$field$addr$i331 >> 2] = 5;
    $this1$i334 = $this$addr$i329;
    $getter$i332 = 221;
    $setter$i333 = 222;
    $call$i335 = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $29 = $fieldName$addr$i330;
    $call2$i336 =
      __ZN10emscripten8internal6TypeIDIN6Packet7CommandEvE3getEv() | 0;
    $30 = $getter$i332;
    $$addr$i$i328 = $30;
    $call$i$i$i337 =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $31 = $getter$i332;
    $call4$i338 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_7CommandEEEPT_RKS5_(
        $field$addr$i331
      ) | 0;
    $call5$i339 =
      __ZN10emscripten8internal6TypeIDIN6Packet7CommandEvE3getEv() | 0;
    $32 = $setter$i333;
    $$addr$i8$i327 = $32;
    $call$i$i9$i340 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $33 = $setter$i333;
    $call7$i341 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_7CommandEEEPT_RKS5_(
        $field$addr$i331
      ) | 0;
    __embind_register_class_property(
      $call$i335 | 0,
      $29 | 0,
      $call2$i336 | 0,
      $call$i$i$i337 | 0,
      $31 | 0,
      $call4$i338 | 0,
      $call5$i339 | 0,
      $call$i$i9$i340 | 0,
      $33 | 0,
      $call7$i341 | 0
    );
    $this$addr$i344 = $this1$i334;
    $fieldName$addr$i345 = 6376;
    HEAP32[$field$addr$i346 >> 2] = 5;
    $this1$i349 = $this$addr$i344;
    $getter$i347 = 223;
    $setter$i348 = 224;
    $call$i350 = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $34 = $fieldName$addr$i345;
    $call2$i351 =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive5ErrorEvE3getEv() | 0;
    $35 = $getter$i347;
    $$addr$i$i343 = $35;
    $call$i$i$i352 =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $36 = $getter$i347;
    $call4$i353 =
      __ZN10emscripten8internal10getContextIM6PacketN10SmartDrive5ErrorEEEPT_RKS6_(
        $field$addr$i346
      ) | 0;
    $call5$i354 =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive5ErrorEvE3getEv() | 0;
    $37 = $setter$i348;
    $$addr$i8$i342 = $37;
    $call$i$i9$i355 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $38 = $setter$i348;
    $call7$i356 =
      __ZN10emscripten8internal10getContextIM6PacketN10SmartDrive5ErrorEEEPT_RKS6_(
        $field$addr$i346
      ) | 0;
    __embind_register_class_property(
      $call$i350 | 0,
      $34 | 0,
      $call2$i351 | 0,
      $call$i$i$i352 | 0,
      $36 | 0,
      $call4$i353 | 0,
      $call5$i354 | 0,
      $call$i$i9$i355 | 0,
      $38 | 0,
      $call7$i356 | 0
    );
    $this$addr$i359 = $this1$i349;
    $fieldName$addr$i360 = 6708;
    HEAP32[$field$addr$i361 >> 2] = 5;
    $this1$i364 = $this$addr$i359;
    $getter$i362 = 225;
    $setter$i363 = 226;
    $call$i365 = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $39 = $fieldName$addr$i360;
    $call2$i366 = __ZN10emscripten8internal6TypeIDIN6Packet3OTAEvE3getEv() | 0;
    $40 = $getter$i362;
    $$addr$i$i358 = $40;
    $call$i$i$i367 =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $41 = $getter$i362;
    $call4$i368 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_3OTAEEEPT_RKS5_(
        $field$addr$i361
      ) | 0;
    $call5$i369 = __ZN10emscripten8internal6TypeIDIN6Packet3OTAEvE3getEv() | 0;
    $42 = $setter$i363;
    $$addr$i8$i357 = $42;
    $call$i$i9$i370 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $43 = $setter$i363;
    $call7$i371 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_3OTAEEEPT_RKS5_(
        $field$addr$i361
      ) | 0;
    __embind_register_class_property(
      $call$i365 | 0,
      $39 | 0,
      $call2$i366 | 0,
      $call$i$i$i367 | 0,
      $41 | 0,
      $call4$i368 | 0,
      $call5$i369 | 0,
      $call$i$i9$i370 | 0,
      $43 | 0,
      $call7$i371 | 0
    );
    $this$addr$i374 = $this1$i364;
    $fieldName$addr$i375 = 7827;
    HEAP32[$field$addr$i376 >> 2] = 8;
    $this1$i379 = $this$addr$i374;
    $getter$i377 = 227;
    $setter$i378 = 228;
    $call$i380 = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $44 = $fieldName$addr$i375;
    $call2$i381 =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive8SettingsEvE3getEv() | 0;
    $45 = $getter$i377;
    $$addr$i$i373 = $45;
    $call$i$i$i382 =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $46 = $getter$i377;
    $call4$i383 =
      __ZN10emscripten8internal10getContextIM6PacketN10SmartDrive8SettingsEEEPT_RKS6_(
        $field$addr$i376
      ) | 0;
    $call5$i384 =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive8SettingsEvE3getEv() | 0;
    $47 = $setter$i378;
    $$addr$i8$i372 = $47;
    $call$i$i9$i385 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $48 = $setter$i378;
    $call7$i386 =
      __ZN10emscripten8internal10getContextIM6PacketN10SmartDrive8SettingsEEEPT_RKS6_(
        $field$addr$i376
      ) | 0;
    __embind_register_class_property(
      $call$i380 | 0,
      $44 | 0,
      $call2$i381 | 0,
      $call$i$i$i382 | 0,
      $46 | 0,
      $call4$i383 | 0,
      $call5$i384 | 0,
      $call$i$i9$i385 | 0,
      $48 | 0,
      $call7$i386 | 0
    );
    $this$addr$i389 = $this1$i379;
    $fieldName$addr$i390 = 7836;
    HEAP32[$field$addr$i391 >> 2] = 8;
    $this1$i394 = $this$addr$i389;
    $getter$i392 = 229;
    $setter$i393 = 230;
    $call$i395 = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $49 = $fieldName$addr$i390;
    $call2$i396 =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive21SwitchControlSettingsEvE3getEv() |
      0;
    $50 = $getter$i392;
    $$addr$i$i388 = $50;
    $call$i$i$i397 =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $51 = $getter$i392;
    $call4$i398 =
      __ZN10emscripten8internal10getContextIM6PacketN10SmartDrive21SwitchControlSettingsEEEPT_RKS6_(
        $field$addr$i391
      ) | 0;
    $call5$i399 =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive21SwitchControlSettingsEvE3getEv() |
      0;
    $52 = $setter$i393;
    $$addr$i8$i387 = $52;
    $call$i$i9$i400 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $53 = $setter$i393;
    $call7$i401 =
      __ZN10emscripten8internal10getContextIM6PacketN10SmartDrive21SwitchControlSettingsEEEPT_RKS6_(
        $field$addr$i391
      ) | 0;
    __embind_register_class_property(
      $call$i395 | 0,
      $49 | 0,
      $call2$i396 | 0,
      $call$i$i$i397 | 0,
      $51 | 0,
      $call4$i398 | 0,
      $call5$i399 | 0,
      $call$i$i9$i400 | 0,
      $53 | 0,
      $call7$i401 | 0
    );
    $this$addr$i404 = $this1$i394;
    $fieldName$addr$i405 = 7858;
    HEAP32[$field$addr$i406 >> 2] = 8;
    $this1$i409 = $this$addr$i404;
    $getter$i407 = 231;
    $setter$i408 = 232;
    $call$i410 = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $54 = $fieldName$addr$i405;
    $call2$i411 =
      __ZN10emscripten8internal6TypeIDIN6Packet12PushSettingsEvE3getEv() | 0;
    $55 = $getter$i407;
    $$addr$i$i403 = $55;
    $call$i$i$i412 =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $56 = $getter$i407;
    $call4$i413 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_12PushSettingsEEEPT_RKS5_(
        $field$addr$i406
      ) | 0;
    $call5$i414 =
      __ZN10emscripten8internal6TypeIDIN6Packet12PushSettingsEvE3getEv() | 0;
    $57 = $setter$i408;
    $$addr$i8$i402 = $57;
    $call$i$i9$i415 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $58 = $setter$i408;
    $call7$i416 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_12PushSettingsEEEPT_RKS5_(
        $field$addr$i406
      ) | 0;
    __embind_register_class_property(
      $call$i410 | 0,
      $54 | 0,
      $call2$i411 | 0,
      $call$i$i$i412 | 0,
      $56 | 0,
      $call4$i413 | 0,
      $call5$i414 | 0,
      $call$i$i9$i415 | 0,
      $58 | 0,
      $call7$i416 | 0
    );
    $this$addr$i419 = $this1$i409;
    $fieldName$addr$i420 = 7871;
    HEAP32[$field$addr$i421 >> 2] = 8;
    $this1$i424 = $this$addr$i419;
    $getter$i422 = 233;
    $setter$i423 = 234;
    $call$i425 = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $59 = $fieldName$addr$i420;
    $call2$i426 =
      __ZN10emscripten8internal6TypeIDIN6Packet11VersionInfoEvE3getEv() | 0;
    $60 = $getter$i422;
    $$addr$i$i418 = $60;
    $call$i$i$i427 =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $61 = $getter$i422;
    $call4$i428 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_11VersionInfoEEEPT_RKS5_(
        $field$addr$i421
      ) | 0;
    $call5$i429 =
      __ZN10emscripten8internal6TypeIDIN6Packet11VersionInfoEvE3getEv() | 0;
    $62 = $setter$i423;
    $$addr$i8$i417 = $62;
    $call$i$i9$i430 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $63 = $setter$i423;
    $call7$i431 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_11VersionInfoEEEPT_RKS5_(
        $field$addr$i421
      ) | 0;
    __embind_register_class_property(
      $call$i425 | 0,
      $59 | 0,
      $call2$i426 | 0,
      $call$i$i$i427 | 0,
      $61 | 0,
      $call4$i428 | 0,
      $call5$i429 | 0,
      $call$i$i9$i430 | 0,
      $63 | 0,
      $call7$i431 | 0
    );
    $this$addr$i434 = $this1$i424;
    $fieldName$addr$i435 = 7883;
    HEAP32[$field$addr$i436 >> 2] = 8;
    $this1$i439 = $this$addr$i434;
    $getter$i437 = 235;
    $setter$i438 = 236;
    $call$i440 = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $64 = $fieldName$addr$i435;
    $call2$i441 =
      __ZN10emscripten8internal6TypeIDIN6Packet9DailyInfoEvE3getEv() | 0;
    $65 = $getter$i437;
    $$addr$i$i433 = $65;
    $call$i$i$i442 =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $66 = $getter$i437;
    $call4$i443 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_9DailyInfoEEEPT_RKS5_(
        $field$addr$i436
      ) | 0;
    $call5$i444 =
      __ZN10emscripten8internal6TypeIDIN6Packet9DailyInfoEvE3getEv() | 0;
    $67 = $setter$i438;
    $$addr$i8$i432 = $67;
    $call$i$i9$i445 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $68 = $setter$i438;
    $call7$i446 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_9DailyInfoEEEPT_RKS5_(
        $field$addr$i436
      ) | 0;
    __embind_register_class_property(
      $call$i440 | 0,
      $64 | 0,
      $call2$i441 | 0,
      $call$i$i$i442 | 0,
      $66 | 0,
      $call4$i443 | 0,
      $call5$i444 | 0,
      $call$i$i9$i445 | 0,
      $68 | 0,
      $call7$i446 | 0
    );
    $this$addr$i449 = $this1$i439;
    $fieldName$addr$i450 = 7893;
    HEAP32[$field$addr$i451 >> 2] = 8;
    $this1$i454 = $this$addr$i449;
    $getter$i452 = 237;
    $setter$i453 = 238;
    $call$i455 = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $69 = $fieldName$addr$i450;
    $call2$i456 =
      __ZN10emscripten8internal6TypeIDIN6Packet11JourneyInfoEvE3getEv() | 0;
    $70 = $getter$i452;
    $$addr$i$i448 = $70;
    $call$i$i$i457 =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $71 = $getter$i452;
    $call4$i458 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_11JourneyInfoEEEPT_RKS5_(
        $field$addr$i451
      ) | 0;
    $call5$i459 =
      __ZN10emscripten8internal6TypeIDIN6Packet11JourneyInfoEvE3getEv() | 0;
    $72 = $setter$i453;
    $$addr$i8$i447 = $72;
    $call$i$i9$i460 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $73 = $setter$i453;
    $call7$i461 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_11JourneyInfoEEEPT_RKS5_(
        $field$addr$i451
      ) | 0;
    __embind_register_class_property(
      $call$i455 | 0,
      $69 | 0,
      $call2$i456 | 0,
      $call$i$i$i457 | 0,
      $71 | 0,
      $call4$i458 | 0,
      $call5$i459 | 0,
      $call$i$i9$i460 | 0,
      $73 | 0,
      $call7$i461 | 0
    );
    $this$addr$i464 = $this1$i454;
    $fieldName$addr$i465 = 7905;
    HEAP32[$field$addr$i466 >> 2] = 8;
    $this1$i469 = $this$addr$i464;
    $getter$i467 = 239;
    $setter$i468 = 240;
    $call$i470 = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $74 = $fieldName$addr$i465;
    $call2$i471 =
      __ZN10emscripten8internal6TypeIDIN6Packet9MotorInfoEvE3getEv() | 0;
    $75 = $getter$i467;
    $$addr$i$i463 = $75;
    $call$i$i$i472 =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $76 = $getter$i467;
    $call4$i473 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_9MotorInfoEEEPT_RKS5_(
        $field$addr$i466
      ) | 0;
    $call5$i474 =
      __ZN10emscripten8internal6TypeIDIN6Packet9MotorInfoEvE3getEv() | 0;
    $77 = $setter$i468;
    $$addr$i8$i462 = $77;
    $call$i$i9$i475 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $78 = $setter$i468;
    $call7$i476 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_9MotorInfoEEEPT_RKS5_(
        $field$addr$i466
      ) | 0;
    __embind_register_class_property(
      $call$i470 | 0,
      $74 | 0,
      $call2$i471 | 0,
      $call$i$i$i472 | 0,
      $76 | 0,
      $call4$i473 | 0,
      $call5$i474 | 0,
      $call$i$i9$i475 | 0,
      $78 | 0,
      $call7$i476 | 0
    );
    $this$addr$i479 = $this1$i469;
    $fieldName$addr$i480 = 7915;
    HEAP32[$field$addr$i481 >> 2] = 8;
    $this1$i484 = $this$addr$i479;
    $getter$i482 = 241;
    $setter$i483 = 242;
    $call$i485 = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $79 = $fieldName$addr$i480;
    $call2$i486 =
      __ZN10emscripten8internal6TypeIDIN6Packet8TimeInfoEvE3getEv() | 0;
    $80 = $getter$i482;
    $$addr$i$i478 = $80;
    $call$i$i$i487 =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $81 = $getter$i482;
    $call4$i488 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_8TimeInfoEEEPT_RKS5_(
        $field$addr$i481
      ) | 0;
    $call5$i489 =
      __ZN10emscripten8internal6TypeIDIN6Packet8TimeInfoEvE3getEv() | 0;
    $82 = $setter$i483;
    $$addr$i8$i477 = $82;
    $call$i$i9$i490 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $83 = $setter$i483;
    $call7$i491 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_8TimeInfoEEEPT_RKS5_(
        $field$addr$i481
      ) | 0;
    __embind_register_class_property(
      $call$i485 | 0,
      $79 | 0,
      $call2$i486 | 0,
      $call$i$i$i487 | 0,
      $81 | 0,
      $call4$i488 | 0,
      $call5$i489 | 0,
      $call$i$i9$i490 | 0,
      $83 | 0,
      $call7$i491 | 0
    );
    $this$addr$i494 = $this1$i484;
    $fieldName$addr$i495 = 7924;
    HEAP32[$field$addr$i496 >> 2] = 8;
    $this1$i499 = $this$addr$i494;
    $getter$i497 = 243;
    $setter$i498 = 244;
    $call$i500 = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $84 = $fieldName$addr$i495;
    $call2$i501 =
      __ZN10emscripten8internal6TypeIDIN6Packet10DeviceInfoEvE3getEv() | 0;
    $85 = $getter$i497;
    $$addr$i$i493 = $85;
    $call$i$i$i502 =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $86 = $getter$i497;
    $call4$i503 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_10DeviceInfoEEEPT_RKS5_(
        $field$addr$i496
      ) | 0;
    $call5$i504 =
      __ZN10emscripten8internal6TypeIDIN6Packet10DeviceInfoEvE3getEv() | 0;
    $87 = $setter$i498;
    $$addr$i8$i492 = $87;
    $call$i$i9$i505 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $88 = $setter$i498;
    $call7$i506 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_10DeviceInfoEEEPT_RKS5_(
        $field$addr$i496
      ) | 0;
    __embind_register_class_property(
      $call$i500 | 0,
      $84 | 0,
      $call2$i501 | 0,
      $call$i$i$i502 | 0,
      $86 | 0,
      $call4$i503 | 0,
      $call5$i504 | 0,
      $call$i$i9$i505 | 0,
      $88 | 0,
      $call7$i506 | 0
    );
    $this$addr$i509 = $this1$i499;
    $fieldName$addr$i510 = 7935;
    HEAP32[$field$addr$i511 >> 2] = 8;
    $this1$i514 = $this$addr$i509;
    $getter$i512 = 245;
    $setter$i513 = 246;
    $call$i515 = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $89 = $fieldName$addr$i510;
    $call2$i516 =
      __ZN10emscripten8internal6TypeIDIN6Packet9ErrorInfoEvE3getEv() | 0;
    $90 = $getter$i512;
    $$addr$i$i508 = $90;
    $call$i$i$i517 =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $91 = $getter$i512;
    $call4$i518 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_9ErrorInfoEEEPT_RKS5_(
        $field$addr$i511
      ) | 0;
    $call5$i519 =
      __ZN10emscripten8internal6TypeIDIN6Packet9ErrorInfoEvE3getEv() | 0;
    $92 = $setter$i513;
    $$addr$i8$i507 = $92;
    $call$i$i9$i520 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $93 = $setter$i513;
    $call7$i521 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_9ErrorInfoEEEPT_RKS5_(
        $field$addr$i511
      ) | 0;
    __embind_register_class_property(
      $call$i515 | 0,
      $89 | 0,
      $call2$i516 | 0,
      $call$i$i$i517 | 0,
      $91 | 0,
      $call4$i518 | 0,
      $call5$i519 | 0,
      $call$i$i9$i520 | 0,
      $93 | 0,
      $call7$i521 | 0
    );
    $this$addr$i524 = $this1$i514;
    $fieldName$addr$i525 = 7945;
    HEAP32[$field$addr$i526 >> 2] = 8;
    $this1$i529 = $this$addr$i524;
    $getter$i527 = 247;
    $setter$i528 = 248;
    $call$i530 = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $94 = $fieldName$addr$i525;
    $call2$i531 =
      __ZN10emscripten8internal6TypeIDIN6Packet11BatteryInfoEvE3getEv() | 0;
    $95 = $getter$i527;
    $$addr$i$i523 = $95;
    $call$i$i$i532 =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $96 = $getter$i527;
    $call4$i533 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_11BatteryInfoEEEPT_RKS5_(
        $field$addr$i526
      ) | 0;
    $call5$i534 =
      __ZN10emscripten8internal6TypeIDIN6Packet11BatteryInfoEvE3getEv() | 0;
    $97 = $setter$i528;
    $$addr$i8$i522 = $97;
    $call$i$i9$i535 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $98 = $setter$i528;
    $call7$i536 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_11BatteryInfoEEEPT_RKS5_(
        $field$addr$i526
      ) | 0;
    __embind_register_class_property(
      $call$i530 | 0,
      $94 | 0,
      $call2$i531 | 0,
      $call$i$i$i532 | 0,
      $96 | 0,
      $call4$i533 | 0,
      $call5$i534 | 0,
      $call$i$i9$i535 | 0,
      $98 | 0,
      $call7$i536 | 0
    );
    $this$addr$i539 = $this1$i529;
    $fieldName$addr$i540 = 7957;
    HEAP32[$field$addr$i541 >> 2] = 8;
    $this1$i544 = $this$addr$i539;
    $getter$i542 = 249;
    $setter$i543 = 250;
    $call$i545 = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $99 = $fieldName$addr$i540;
    $call2$i546 =
      __ZN10emscripten8internal6TypeIDIN6Packet12DistanceInfoEvE3getEv() | 0;
    $100 = $getter$i542;
    $$addr$i$i538 = $100;
    $call$i$i$i547 =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $101 = $getter$i542;
    $call4$i548 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_12DistanceInfoEEEPT_RKS5_(
        $field$addr$i541
      ) | 0;
    $call5$i549 =
      __ZN10emscripten8internal6TypeIDIN6Packet12DistanceInfoEvE3getEv() | 0;
    $102 = $setter$i543;
    $$addr$i8$i537 = $102;
    $call$i$i9$i550 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $103 = $setter$i543;
    $call7$i551 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_12DistanceInfoEEEPT_RKS5_(
        $field$addr$i541
      ) | 0;
    __embind_register_class_property(
      $call$i545 | 0,
      $99 | 0,
      $call2$i546 | 0,
      $call$i$i$i547 | 0,
      $101 | 0,
      $call4$i548 | 0,
      $call5$i549 | 0,
      $call$i$i9$i550 | 0,
      $103 | 0,
      $call7$i551 | 0
    );
    HEAP32[$indirect$arg$temp2492D2D >> 2] = 251;
    $indirect$arg$temp249$index462D2D = ($indirect$arg$temp2492D2D + 4) | 0;
    HEAP32[$indirect$arg$temp249$index462D2D >> 2] = 0;
    HEAP32[$indirect$arg$temp2502D2D >> 2] = 252;
    $indirect$arg$temp250$index472D2D = ($indirect$arg$temp2502D2D + 4) | 0;
    HEAP32[$indirect$arg$temp250$index472D2D >> 2] = 0;
    HEAP8[$indirect$arg$temp2505532D2D >> 0] =
      HEAP8[$indirect$arg$temp2502D2D >> 0] | 0;
    HEAP8[($indirect$arg$temp2505532D2D + 1) >> 0] =
      HEAP8[($indirect$arg$temp2502D2D + 1) >> 0] | 0;
    HEAP8[($indirect$arg$temp2505532D2D + 2) >> 0] =
      HEAP8[($indirect$arg$temp2502D2D + 2) >> 0] | 0;
    HEAP8[($indirect$arg$temp2505532D2D + 3) >> 0] =
      HEAP8[($indirect$arg$temp2502D2D + 3) >> 0] | 0;
    HEAP8[($indirect$arg$temp2505532D2D + 4) >> 0] =
      HEAP8[($indirect$arg$temp2502D2D + 4) >> 0] | 0;
    HEAP8[($indirect$arg$temp2505532D2D + 5) >> 0] =
      HEAP8[($indirect$arg$temp2502D2D + 5) >> 0] | 0;
    HEAP8[($indirect$arg$temp2505532D2D + 6) >> 0] =
      HEAP8[($indirect$arg$temp2502D2D + 6) >> 0] | 0;
    HEAP8[($indirect$arg$temp2505532D2D + 7) >> 0] =
      HEAP8[($indirect$arg$temp2502D2D + 7) >> 0] | 0;
    HEAP8[$indirect$arg$temp2495522D2D >> 0] =
      HEAP8[$indirect$arg$temp2492D2D >> 0] | 0;
    HEAP8[($indirect$arg$temp2495522D2D + 1) >> 0] =
      HEAP8[($indirect$arg$temp2492D2D + 1) >> 0] | 0;
    HEAP8[($indirect$arg$temp2495522D2D + 2) >> 0] =
      HEAP8[($indirect$arg$temp2492D2D + 2) >> 0] | 0;
    HEAP8[($indirect$arg$temp2495522D2D + 3) >> 0] =
      HEAP8[($indirect$arg$temp2492D2D + 3) >> 0] | 0;
    HEAP8[($indirect$arg$temp2495522D2D + 4) >> 0] =
      HEAP8[($indirect$arg$temp2492D2D + 4) >> 0] | 0;
    HEAP8[($indirect$arg$temp2495522D2D + 5) >> 0] =
      HEAP8[($indirect$arg$temp2492D2D + 5) >> 0] | 0;
    HEAP8[($indirect$arg$temp2495522D2D + 6) >> 0] =
      HEAP8[($indirect$arg$temp2492D2D + 6) >> 0] | 0;
    HEAP8[($indirect$arg$temp2495522D2D + 7) >> 0] =
      HEAP8[($indirect$arg$temp2492D2D + 7) >> 0] | 0;
    $getter$i558$field = HEAP32[$indirect$arg$temp2495522D2D >> 2] | 0;
    $getter$i558$index48 = ($indirect$arg$temp2495522D2D + 4) | 0;
    $getter$i558$field49 = HEAP32[$getter$i558$index48 >> 2] | 0;
    $setter$i559$field = HEAP32[$indirect$arg$temp2505532D2D >> 2] | 0;
    $setter$i559$index51 = ($indirect$arg$temp2505532D2D + 4) | 0;
    $setter$i559$field52 = HEAP32[$setter$i559$index51 >> 2] | 0;
    $this$addr$i555 = $this1$i544;
    $fieldName$addr$i556 = 7970;
    HEAP32[$getter$addr$i >> 2] = $getter$i558$field;
    $getter$addr$i$index54 = ($getter$addr$i + 4) | 0;
    HEAP32[$getter$addr$i$index54 >> 2] = $getter$i558$field49;
    HEAP32[$setter$addr$i >> 2] = $setter$i559$field;
    $setter$addr$i$index55 = ($setter$addr$i + 4) | 0;
    HEAP32[$setter$addr$i$index55 >> 2] = $setter$i559$field52;
    $this1$i560 = $this$addr$i555;
    $gter$i = 253;
    $ster$i = 254;
    $call$i561 = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $104 = $fieldName$addr$i556;
    $call2$i562 = __ZN10emscripten8internal6TypeIDIivE3getEv() | 0;
    $105 = $gter$i;
    $$addr$i$i554 = $105;
    $call$i$i$i563 =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $106 = $gter$i;
    $$field57 = HEAP32[$getter$addr$i >> 2] | 0;
    $$index59 = ($getter$addr$i + 4) | 0;
    $$field60 = HEAP32[$$index59 >> 2] | 0;
    HEAP32[$indirect$arg$temp$i5572D2D >> 2] = $$field57;
    $indirect$arg$temp$i557$index622D2D = ($indirect$arg$temp$i5572D2D + 4) | 0;
    HEAP32[$indirect$arg$temp$i557$index622D2D >> 2] = $$field60;
    HEAP32[$indirect$arg$temp$i557$byval_copy2D2D >> 2] =
      HEAP32[$indirect$arg$temp$i5572D2D >> 2] | 0;
    HEAP32[($indirect$arg$temp$i557$byval_copy2D2D + 4) >> 2] =
      HEAP32[($indirect$arg$temp$i5572D2D + 4) >> 2] | 0;
    $call4$i564 =
      __ZN10emscripten8internal12GetterPolicyIM6PacketKFivEE10getContextES4_(
        $indirect$arg$temp$i557$byval_copy2D2D
      ) | 0;
    $call5$i565 = __ZN10emscripten8internal6TypeIDIivE3getEv() | 0;
    $107 = $ster$i;
    $$addr$i9$i = $107;
    $call$i$i10$i =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $108 = $ster$i;
    $$field64 = HEAP32[$setter$addr$i >> 2] | 0;
    $$index66 = ($setter$addr$i + 4) | 0;
    $$field67 = HEAP32[$$index66 >> 2] | 0;
    HEAP32[$indirect$arg$temp7$i2D2D >> 2] = $$field64;
    $indirect$arg$temp7$i$index692D2D = ($indirect$arg$temp7$i2D2D + 4) | 0;
    HEAP32[$indirect$arg$temp7$i$index692D2D >> 2] = $$field67;
    HEAP32[$indirect$arg$temp7$i$byval_copy2D2D >> 2] =
      HEAP32[$indirect$arg$temp7$i2D2D >> 2] | 0;
    HEAP32[($indirect$arg$temp7$i$byval_copy2D2D + 4) >> 2] =
      HEAP32[($indirect$arg$temp7$i2D2D + 4) >> 2] | 0;
    $call8$i =
      __ZN10emscripten8internal12SetterPolicyIM6PacketFviEE10getContextES4_(
        $indirect$arg$temp7$i$byval_copy2D2D
      ) | 0;
    __embind_register_class_property(
      $call$i561 | 0,
      $104 | 0,
      $call2$i562 | 0,
      $call$i$i$i563 | 0,
      $106 | 0,
      $call4$i564 | 0,
      $call5$i565 | 0,
      $call$i$i10$i | 0,
      $108 | 0,
      $call8$i | 0
    );
    $this$addr$i568 = $this1$i560;
    $fieldName$addr$i569 = 7978;
    HEAP32[$field$addr$i570 >> 2] = 8;
    $this1$i573 = $this$addr$i568;
    $getter$i571 = 225;
    $setter$i572 = 226;
    $call$i574 = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $109 = $fieldName$addr$i569;
    $call2$i575 = __ZN10emscripten8internal6TypeIDIN6Packet3OTAEvE3getEv() | 0;
    $110 = $getter$i571;
    $$addr$i$i567 = $110;
    $call$i$i$i576 =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $111 = $getter$i571;
    $call4$i577 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_3OTAEEEPT_RKS5_(
        $field$addr$i570
      ) | 0;
    $call5$i578 = __ZN10emscripten8internal6TypeIDIN6Packet3OTAEvE3getEv() | 0;
    $112 = $setter$i572;
    $$addr$i8$i566 = $112;
    $call$i$i9$i579 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $113 = $setter$i572;
    $call7$i580 =
      __ZN10emscripten8internal10getContextIM6PacketNS2_3OTAEEEPT_RKS5_(
        $field$addr$i570
      ) | 0;
    __embind_register_class_property(
      $call$i574 | 0,
      $109 | 0,
      $call2$i575 | 0,
      $call$i$i$i576 | 0,
      $111 | 0,
      $call4$i577 | 0,
      $call5$i578 | 0,
      $call$i$i9$i579 | 0,
      $113 | 0,
      $call7$i580 | 0
    );
    HEAP32[$indirect$arg$temp2532D2D >> 2] = 255;
    $indirect$arg$temp253$index702D2D = ($indirect$arg$temp2532D2D + 4) | 0;
    HEAP32[$indirect$arg$temp253$index702D2D >> 2] = 0;
    HEAP32[$indirect$arg$temp2542D2D >> 2] = 256;
    $indirect$arg$temp254$index712D2D = ($indirect$arg$temp2542D2D + 4) | 0;
    HEAP32[$indirect$arg$temp254$index712D2D >> 2] = 0;
    HEAP8[$indirect$arg$temp2545822D2D >> 0] =
      HEAP8[$indirect$arg$temp2542D2D >> 0] | 0;
    HEAP8[($indirect$arg$temp2545822D2D + 1) >> 0] =
      HEAP8[($indirect$arg$temp2542D2D + 1) >> 0] | 0;
    HEAP8[($indirect$arg$temp2545822D2D + 2) >> 0] =
      HEAP8[($indirect$arg$temp2542D2D + 2) >> 0] | 0;
    HEAP8[($indirect$arg$temp2545822D2D + 3) >> 0] =
      HEAP8[($indirect$arg$temp2542D2D + 3) >> 0] | 0;
    HEAP8[($indirect$arg$temp2545822D2D + 4) >> 0] =
      HEAP8[($indirect$arg$temp2542D2D + 4) >> 0] | 0;
    HEAP8[($indirect$arg$temp2545822D2D + 5) >> 0] =
      HEAP8[($indirect$arg$temp2542D2D + 5) >> 0] | 0;
    HEAP8[($indirect$arg$temp2545822D2D + 6) >> 0] =
      HEAP8[($indirect$arg$temp2542D2D + 6) >> 0] | 0;
    HEAP8[($indirect$arg$temp2545822D2D + 7) >> 0] =
      HEAP8[($indirect$arg$temp2542D2D + 7) >> 0] | 0;
    HEAP8[$indirect$arg$temp2535812D2D >> 0] =
      HEAP8[$indirect$arg$temp2532D2D >> 0] | 0;
    HEAP8[($indirect$arg$temp2535812D2D + 1) >> 0] =
      HEAP8[($indirect$arg$temp2532D2D + 1) >> 0] | 0;
    HEAP8[($indirect$arg$temp2535812D2D + 2) >> 0] =
      HEAP8[($indirect$arg$temp2532D2D + 2) >> 0] | 0;
    HEAP8[($indirect$arg$temp2535812D2D + 3) >> 0] =
      HEAP8[($indirect$arg$temp2532D2D + 3) >> 0] | 0;
    HEAP8[($indirect$arg$temp2535812D2D + 4) >> 0] =
      HEAP8[($indirect$arg$temp2532D2D + 4) >> 0] | 0;
    HEAP8[($indirect$arg$temp2535812D2D + 5) >> 0] =
      HEAP8[($indirect$arg$temp2532D2D + 5) >> 0] | 0;
    HEAP8[($indirect$arg$temp2535812D2D + 6) >> 0] =
      HEAP8[($indirect$arg$temp2532D2D + 6) >> 0] | 0;
    HEAP8[($indirect$arg$temp2535812D2D + 7) >> 0] =
      HEAP8[($indirect$arg$temp2532D2D + 7) >> 0] | 0;
    $getter$i593$field = HEAP32[$indirect$arg$temp2535812D2D >> 2] | 0;
    $getter$i593$index72 = ($indirect$arg$temp2535812D2D + 4) | 0;
    $getter$i593$field73 = HEAP32[$getter$i593$index72 >> 2] | 0;
    $setter$i594$field = HEAP32[$indirect$arg$temp2545822D2D >> 2] | 0;
    $setter$i594$index75 = ($indirect$arg$temp2545822D2D + 4) | 0;
    $setter$i594$field76 = HEAP32[$setter$i594$index75 >> 2] | 0;
    $this$addr$i585 = $this1$i573;
    $fieldName$addr$i586 = 7056;
    HEAP32[$getter$addr$i587 >> 2] = $getter$i593$field;
    $getter$addr$i587$index78 = ($getter$addr$i587 + 4) | 0;
    HEAP32[$getter$addr$i587$index78 >> 2] = $getter$i593$field73;
    HEAP32[$setter$addr$i588 >> 2] = $setter$i594$field;
    $setter$addr$i588$index79 = ($setter$addr$i588 + 4) | 0;
    HEAP32[$setter$addr$i588$index79 >> 2] = $setter$i594$field76;
    $this1$i595 = $this$addr$i585;
    $gter$i589 = 253;
    $ster$i590 = 254;
    $call$i596 = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $114 = $fieldName$addr$i586;
    $call2$i597 = __ZN10emscripten8internal6TypeIDIivE3getEv() | 0;
    $115 = $gter$i589;
    $$addr$i$i584 = $115;
    $call$i$i$i598 =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $116 = $gter$i589;
    $$field81 = HEAP32[$getter$addr$i587 >> 2] | 0;
    $$index83 = ($getter$addr$i587 + 4) | 0;
    $$field84 = HEAP32[$$index83 >> 2] | 0;
    HEAP32[$indirect$arg$temp$i5912D2D >> 2] = $$field81;
    $indirect$arg$temp$i591$index862D2D = ($indirect$arg$temp$i5912D2D + 4) | 0;
    HEAP32[$indirect$arg$temp$i591$index862D2D >> 2] = $$field84;
    HEAP32[$indirect$arg$temp$i591$byval_copy2D2D >> 2] =
      HEAP32[$indirect$arg$temp$i5912D2D >> 2] | 0;
    HEAP32[($indirect$arg$temp$i591$byval_copy2D2D + 4) >> 2] =
      HEAP32[($indirect$arg$temp$i5912D2D + 4) >> 2] | 0;
    $call4$i599 =
      __ZN10emscripten8internal12GetterPolicyIM6PacketKFivEE10getContextES4_(
        $indirect$arg$temp$i591$byval_copy2D2D
      ) | 0;
    $call5$i600 = __ZN10emscripten8internal6TypeIDIivE3getEv() | 0;
    $117 = $ster$i590;
    $$addr$i9$i583 = $117;
    $call$i$i10$i601 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $118 = $ster$i590;
    $$field88 = HEAP32[$setter$addr$i588 >> 2] | 0;
    $$index90 = ($setter$addr$i588 + 4) | 0;
    $$field91 = HEAP32[$$index90 >> 2] | 0;
    HEAP32[$indirect$arg$temp7$i5922D2D >> 2] = $$field88;
    $indirect$arg$temp7$i592$index932D2D =
      ($indirect$arg$temp7$i5922D2D + 4) | 0;
    HEAP32[$indirect$arg$temp7$i592$index932D2D >> 2] = $$field91;
    HEAP32[$indirect$arg$temp7$i592$byval_copy2D2D >> 2] =
      HEAP32[$indirect$arg$temp7$i5922D2D >> 2] | 0;
    HEAP32[($indirect$arg$temp7$i592$byval_copy2D2D + 4) >> 2] =
      HEAP32[($indirect$arg$temp7$i5922D2D + 4) >> 2] | 0;
    $call8$i602 =
      __ZN10emscripten8internal12SetterPolicyIM6PacketFviEE10getContextES4_(
        $indirect$arg$temp7$i592$byval_copy2D2D
      ) | 0;
    __embind_register_class_property(
      $call$i596 | 0,
      $114 | 0,
      $call2$i597 | 0,
      $call$i$i$i598 | 0,
      $116 | 0,
      $call4$i599 | 0,
      $call5$i600 | 0,
      $call$i$i10$i601 | 0,
      $118 | 0,
      $call8$i602 | 0
    );
    HEAP32[$indirect$arg$temp2562D2D >> 2] = 257;
    $indirect$arg$temp256$index942D2D = ($indirect$arg$temp2562D2D + 4) | 0;
    HEAP32[$indirect$arg$temp256$index942D2D >> 2] = 0;
    HEAP32[$indirect$arg$temp2572D2D >> 2] = 258;
    $indirect$arg$temp257$index952D2D = ($indirect$arg$temp2572D2D + 4) | 0;
    HEAP32[$indirect$arg$temp257$index952D2D >> 2] = 0;
    HEAP8[$indirect$arg$temp2576042D2D >> 0] =
      HEAP8[$indirect$arg$temp2572D2D >> 0] | 0;
    HEAP8[($indirect$arg$temp2576042D2D + 1) >> 0] =
      HEAP8[($indirect$arg$temp2572D2D + 1) >> 0] | 0;
    HEAP8[($indirect$arg$temp2576042D2D + 2) >> 0] =
      HEAP8[($indirect$arg$temp2572D2D + 2) >> 0] | 0;
    HEAP8[($indirect$arg$temp2576042D2D + 3) >> 0] =
      HEAP8[($indirect$arg$temp2572D2D + 3) >> 0] | 0;
    HEAP8[($indirect$arg$temp2576042D2D + 4) >> 0] =
      HEAP8[($indirect$arg$temp2572D2D + 4) >> 0] | 0;
    HEAP8[($indirect$arg$temp2576042D2D + 5) >> 0] =
      HEAP8[($indirect$arg$temp2572D2D + 5) >> 0] | 0;
    HEAP8[($indirect$arg$temp2576042D2D + 6) >> 0] =
      HEAP8[($indirect$arg$temp2572D2D + 6) >> 0] | 0;
    HEAP8[($indirect$arg$temp2576042D2D + 7) >> 0] =
      HEAP8[($indirect$arg$temp2572D2D + 7) >> 0] | 0;
    HEAP8[$indirect$arg$temp2566032D2D >> 0] =
      HEAP8[$indirect$arg$temp2562D2D >> 0] | 0;
    HEAP8[($indirect$arg$temp2566032D2D + 1) >> 0] =
      HEAP8[($indirect$arg$temp2562D2D + 1) >> 0] | 0;
    HEAP8[($indirect$arg$temp2566032D2D + 2) >> 0] =
      HEAP8[($indirect$arg$temp2562D2D + 2) >> 0] | 0;
    HEAP8[($indirect$arg$temp2566032D2D + 3) >> 0] =
      HEAP8[($indirect$arg$temp2562D2D + 3) >> 0] | 0;
    HEAP8[($indirect$arg$temp2566032D2D + 4) >> 0] =
      HEAP8[($indirect$arg$temp2562D2D + 4) >> 0] | 0;
    HEAP8[($indirect$arg$temp2566032D2D + 5) >> 0] =
      HEAP8[($indirect$arg$temp2562D2D + 5) >> 0] | 0;
    HEAP8[($indirect$arg$temp2566032D2D + 6) >> 0] =
      HEAP8[($indirect$arg$temp2562D2D + 6) >> 0] | 0;
    HEAP8[($indirect$arg$temp2566032D2D + 7) >> 0] =
      HEAP8[($indirect$arg$temp2562D2D + 7) >> 0] | 0;
    $getter$i615$field = HEAP32[$indirect$arg$temp2566032D2D >> 2] | 0;
    $getter$i615$index96 = ($indirect$arg$temp2566032D2D + 4) | 0;
    $getter$i615$field97 = HEAP32[$getter$i615$index96 >> 2] | 0;
    $setter$i616$field = HEAP32[$indirect$arg$temp2576042D2D >> 2] | 0;
    $setter$i616$index99 = ($indirect$arg$temp2576042D2D + 4) | 0;
    $setter$i616$field100 = HEAP32[$setter$i616$index99 >> 2] | 0;
    $this$addr$i607 = $this1$i595;
    $fieldName$addr$i608 = 7070;
    HEAP32[$getter$addr$i609 >> 2] = $getter$i615$field;
    $getter$addr$i609$index102 = ($getter$addr$i609 + 4) | 0;
    HEAP32[$getter$addr$i609$index102 >> 2] = $getter$i615$field97;
    HEAP32[$setter$addr$i610 >> 2] = $setter$i616$field;
    $setter$addr$i610$index103 = ($setter$addr$i610 + 4) | 0;
    HEAP32[$setter$addr$i610$index103 >> 2] = $setter$i616$field100;
    $this1$i617 = $this$addr$i607;
    $gter$i611 = 253;
    $ster$i612 = 254;
    $call$i618 = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $119 = $fieldName$addr$i608;
    $call2$i619 = __ZN10emscripten8internal6TypeIDIivE3getEv() | 0;
    $120 = $gter$i611;
    $$addr$i$i606 = $120;
    $call$i$i$i620 =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $121 = $gter$i611;
    $$field105 = HEAP32[$getter$addr$i609 >> 2] | 0;
    $$index107 = ($getter$addr$i609 + 4) | 0;
    $$field108 = HEAP32[$$index107 >> 2] | 0;
    HEAP32[$indirect$arg$temp$i6132D2D >> 2] = $$field105;
    $indirect$arg$temp$i613$index1102D2D =
      ($indirect$arg$temp$i6132D2D + 4) | 0;
    HEAP32[$indirect$arg$temp$i613$index1102D2D >> 2] = $$field108;
    HEAP32[$indirect$arg$temp$i613$byval_copy2D2D >> 2] =
      HEAP32[$indirect$arg$temp$i6132D2D >> 2] | 0;
    HEAP32[($indirect$arg$temp$i613$byval_copy2D2D + 4) >> 2] =
      HEAP32[($indirect$arg$temp$i6132D2D + 4) >> 2] | 0;
    $call4$i621 =
      __ZN10emscripten8internal12GetterPolicyIM6PacketKFivEE10getContextES4_(
        $indirect$arg$temp$i613$byval_copy2D2D
      ) | 0;
    $call5$i622 = __ZN10emscripten8internal6TypeIDIivE3getEv() | 0;
    $122 = $ster$i612;
    $$addr$i9$i605 = $122;
    $call$i$i10$i623 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $123 = $ster$i612;
    $$field112 = HEAP32[$setter$addr$i610 >> 2] | 0;
    $$index114 = ($setter$addr$i610 + 4) | 0;
    $$field115 = HEAP32[$$index114 >> 2] | 0;
    HEAP32[$indirect$arg$temp7$i6142D2D >> 2] = $$field112;
    $indirect$arg$temp7$i614$index1172D2D =
      ($indirect$arg$temp7$i6142D2D + 4) | 0;
    HEAP32[$indirect$arg$temp7$i614$index1172D2D >> 2] = $$field115;
    HEAP32[$indirect$arg$temp7$i614$byval_copy2D2D >> 2] =
      HEAP32[$indirect$arg$temp7$i6142D2D >> 2] | 0;
    HEAP32[($indirect$arg$temp7$i614$byval_copy2D2D + 4) >> 2] =
      HEAP32[($indirect$arg$temp7$i6142D2D + 4) >> 2] | 0;
    $call8$i624 =
      __ZN10emscripten8internal12SetterPolicyIM6PacketFviEE10getContextES4_(
        $indirect$arg$temp7$i614$byval_copy2D2D
      ) | 0;
    __embind_register_class_property(
      $call$i618 | 0,
      $119 | 0,
      $call2$i619 | 0,
      $call$i$i$i620 | 0,
      $121 | 0,
      $call4$i621 | 0,
      $call5$i622 | 0,
      $call$i$i10$i623 | 0,
      $123 | 0,
      $call8$i624 | 0
    );
    HEAP32[$indirect$arg$temp2592D2D >> 2] = 259;
    $indirect$arg$temp259$index1182D2D = ($indirect$arg$temp2592D2D + 4) | 0;
    HEAP32[$indirect$arg$temp259$index1182D2D >> 2] = 0;
    HEAP32[$indirect$arg$temp2602D2D >> 2] = 260;
    $indirect$arg$temp260$index1192D2D = ($indirect$arg$temp2602D2D + 4) | 0;
    HEAP32[$indirect$arg$temp260$index1192D2D >> 2] = 0;
    HEAP8[$indirect$arg$temp2606262D2D >> 0] =
      HEAP8[$indirect$arg$temp2602D2D >> 0] | 0;
    HEAP8[($indirect$arg$temp2606262D2D + 1) >> 0] =
      HEAP8[($indirect$arg$temp2602D2D + 1) >> 0] | 0;
    HEAP8[($indirect$arg$temp2606262D2D + 2) >> 0] =
      HEAP8[($indirect$arg$temp2602D2D + 2) >> 0] | 0;
    HEAP8[($indirect$arg$temp2606262D2D + 3) >> 0] =
      HEAP8[($indirect$arg$temp2602D2D + 3) >> 0] | 0;
    HEAP8[($indirect$arg$temp2606262D2D + 4) >> 0] =
      HEAP8[($indirect$arg$temp2602D2D + 4) >> 0] | 0;
    HEAP8[($indirect$arg$temp2606262D2D + 5) >> 0] =
      HEAP8[($indirect$arg$temp2602D2D + 5) >> 0] | 0;
    HEAP8[($indirect$arg$temp2606262D2D + 6) >> 0] =
      HEAP8[($indirect$arg$temp2602D2D + 6) >> 0] | 0;
    HEAP8[($indirect$arg$temp2606262D2D + 7) >> 0] =
      HEAP8[($indirect$arg$temp2602D2D + 7) >> 0] | 0;
    HEAP8[$indirect$arg$temp2596252D2D >> 0] =
      HEAP8[$indirect$arg$temp2592D2D >> 0] | 0;
    HEAP8[($indirect$arg$temp2596252D2D + 1) >> 0] =
      HEAP8[($indirect$arg$temp2592D2D + 1) >> 0] | 0;
    HEAP8[($indirect$arg$temp2596252D2D + 2) >> 0] =
      HEAP8[($indirect$arg$temp2592D2D + 2) >> 0] | 0;
    HEAP8[($indirect$arg$temp2596252D2D + 3) >> 0] =
      HEAP8[($indirect$arg$temp2592D2D + 3) >> 0] | 0;
    HEAP8[($indirect$arg$temp2596252D2D + 4) >> 0] =
      HEAP8[($indirect$arg$temp2592D2D + 4) >> 0] | 0;
    HEAP8[($indirect$arg$temp2596252D2D + 5) >> 0] =
      HEAP8[($indirect$arg$temp2592D2D + 5) >> 0] | 0;
    HEAP8[($indirect$arg$temp2596252D2D + 6) >> 0] =
      HEAP8[($indirect$arg$temp2592D2D + 6) >> 0] | 0;
    HEAP8[($indirect$arg$temp2596252D2D + 7) >> 0] =
      HEAP8[($indirect$arg$temp2592D2D + 7) >> 0] | 0;
    $getter$i637$field = HEAP32[$indirect$arg$temp2596252D2D >> 2] | 0;
    $getter$i637$index120 = ($indirect$arg$temp2596252D2D + 4) | 0;
    $getter$i637$field121 = HEAP32[$getter$i637$index120 >> 2] | 0;
    $setter$i638$field = HEAP32[$indirect$arg$temp2606262D2D >> 2] | 0;
    $setter$i638$index123 = ($indirect$arg$temp2606262D2D + 4) | 0;
    $setter$i638$field124 = HEAP32[$setter$i638$index123 >> 2] | 0;
    $this$addr$i629 = $this1$i617;
    $fieldName$addr$i630 = 7988;
    HEAP32[$getter$addr$i631 >> 2] = $getter$i637$field;
    $getter$addr$i631$index126 = ($getter$addr$i631 + 4) | 0;
    HEAP32[$getter$addr$i631$index126 >> 2] = $getter$i637$field121;
    HEAP32[$setter$addr$i632 >> 2] = $setter$i638$field;
    $setter$addr$i632$index127 = ($setter$addr$i632 + 4) | 0;
    HEAP32[$setter$addr$i632$index127 >> 2] = $setter$i638$field124;
    $gter$i633 = 261;
    $ster$i634 = 262;
    $call$i640 = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $124 = $fieldName$addr$i630;
    $call2$i641 =
      __ZN10emscripten8internal6TypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEvE3getEv() |
      0;
    $125 = $gter$i633;
    $$addr$i$i628 = $125;
    $call$i$i$i642 =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $126 = $gter$i633;
    $$field129 = HEAP32[$getter$addr$i631 >> 2] | 0;
    $$index131 = ($getter$addr$i631 + 4) | 0;
    $$field132 = HEAP32[$$index131 >> 2] | 0;
    HEAP32[$indirect$arg$temp$i6352D2D >> 2] = $$field129;
    $indirect$arg$temp$i635$index1342D2D =
      ($indirect$arg$temp$i6352D2D + 4) | 0;
    HEAP32[$indirect$arg$temp$i635$index1342D2D >> 2] = $$field132;
    HEAP32[$indirect$arg$temp$i635$byval_copy2D2D >> 2] =
      HEAP32[$indirect$arg$temp$i6352D2D >> 2] | 0;
    HEAP32[($indirect$arg$temp$i635$byval_copy2D2D + 4) >> 2] =
      HEAP32[($indirect$arg$temp$i6352D2D + 4) >> 2] | 0;
    $call4$i643 =
      __ZN10emscripten8internal12GetterPolicyIM6PacketKFNSt3__26vectorIhNS3_9allocatorIhEEEEvEE10getContextES9_(
        $indirect$arg$temp$i635$byval_copy2D2D
      ) | 0;
    $call5$i644 =
      __ZN10emscripten8internal6TypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEvE3getEv() |
      0;
    $127 = $ster$i634;
    $$addr$i9$i627 = $127;
    $call$i$i10$i645 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $128 = $ster$i634;
    $$field136 = HEAP32[$setter$addr$i632 >> 2] | 0;
    $$index138 = ($setter$addr$i632 + 4) | 0;
    $$field139 = HEAP32[$$index138 >> 2] | 0;
    HEAP32[$indirect$arg$temp7$i6362D2D >> 2] = $$field136;
    $indirect$arg$temp7$i636$index1412D2D =
      ($indirect$arg$temp7$i6362D2D + 4) | 0;
    HEAP32[$indirect$arg$temp7$i636$index1412D2D >> 2] = $$field139;
    HEAP32[$indirect$arg$temp7$i636$byval_copy2D2D >> 2] =
      HEAP32[$indirect$arg$temp7$i6362D2D >> 2] | 0;
    HEAP32[($indirect$arg$temp7$i636$byval_copy2D2D + 4) >> 2] =
      HEAP32[($indirect$arg$temp7$i6362D2D + 4) >> 2] | 0;
    $call8$i646 =
      __ZN10emscripten8internal12SetterPolicyIM6PacketFvNSt3__26vectorIhNS3_9allocatorIhEEEEEE10getContextES9_(
        $indirect$arg$temp7$i636$byval_copy2D2D
      ) | 0;
    __embind_register_class_property(
      $call$i640 | 0,
      $124 | 0,
      $call2$i641 | 0,
      $call$i$i$i642 | 0,
      $126 | 0,
      $call4$i643 | 0,
      $call5$i644 | 0,
      $call$i$i10$i645 | 0,
      $128 | 0,
      $call8$i646 | 0
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten15register_vectorIhEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc(
    $name
  ) {
    $name = $name | 0;
    var $$addr$i$i = 0,
      $$addr$i11$i = 0,
      $$addr$i13$i = 0,
      $$addr$i15$i = 0,
      $$field = 0,
      $$field13 = 0,
      $$field16 = 0,
      $$field20 = 0,
      $$field23 = 0,
      $$field31 = 0,
      $$field34 = 0,
      $$field38 = 0,
      $$field41 = 0,
      $$field49 = 0,
      $$field5 = 0,
      $$field52 = 0,
      $$index15 = 0,
      $$index22 = 0,
      $$index33 = 0,
      $$index4 = 0;
    var $$index40 = 0,
      $$index51 = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0;
    var $_getActualType$i = 0,
      $call$i = 0,
      $call$i$i$i = 0,
      $call$i$i12$i = 0,
      $call$i$i14$i = 0,
      $call$i$i16$i = 0,
      $call2$i = 0,
      $call3$i = 0,
      $call4$i = 0,
      $call5$i = 0,
      $call6$i = 0,
      $callable$addr$i = 0,
      $callable$addr$i$i = 0,
      $callable$addr$i$index11 = 0,
      $callable$addr$i16 = 0,
      $callable$addr$i16$index29 = 0,
      $callable$addr$i23 = 0,
      $callable$addr$i23$index47 = 0,
      $callable$addr$i29 = 0,
      $callable$addr$i33 = 0;
    var $callable$i$field = 0,
      $callable$i$field9 = 0,
      $callable$i$index8 = 0,
      $callable$i18$field = 0,
      $callable$i18$field27 = 0,
      $callable$i18$index26 = 0,
      $callable$i25$field = 0,
      $callable$i25$field45 = 0,
      $callable$i25$index44 = 0,
      $destructor$i = 0,
      $downcast$i = 0,
      $indirect$arg$temp$i$byval_copy2D2D = 0,
      $indirect$arg$temp$i$index182D2D = 0,
      $indirect$arg$temp$i17$byval_copy2D2D = 0,
      $indirect$arg$temp$i17$index362D2D = 0,
      $indirect$arg$temp$i172D2D = 0,
      $indirect$arg$temp$i24$byval_copy2D2D = 0,
      $indirect$arg$temp$i24$index542D2D = 0,
      $indirect$arg$temp$i242D2D = 0,
      $indirect$arg$temp$i2D2D = 0;
    var $indirect$arg$temp$index72D2D = 0,
      $indirect$arg$temp102D2D = 0,
      $indirect$arg$temp2$index252D2D = 0,
      $indirect$arg$temp2132D2D = 0,
      $indirect$arg$temp22D2D = 0,
      $indirect$arg$temp2D2D = 0,
      $indirect$arg$temp4$index432D2D = 0,
      $indirect$arg$temp4202D2D = 0,
      $indirect$arg$temp42D2D = 0,
      $methodName$addr$i = 0,
      $methodName$addr$i15 = 0,
      $methodName$addr$i22 = 0,
      $methodName$addr$i28 = 0,
      $methodName$addr$i32 = 0,
      $name$addr = 0,
      $name$addr$i = 0,
      $push_back = 0,
      $push_back$index1 = 0,
      $ref$tmp = 0,
      $resize = 0;
    var $resize$index2 = 0,
      $size = 0,
      $size$index3 = 0,
      $this$addr$i = 0,
      $this$addr$i$i = 0,
      $this$addr$i11 = 0,
      $this$addr$i14 = 0,
      $this$addr$i21 = 0,
      $this$addr$i27 = 0,
      $this$addr$i31 = 0,
      $this$addr$i8 = 0,
      $this1$i$i = 0,
      $this1$i12 = 0,
      $this1$i19 = 0,
      $this1$i26 = 0,
      $this1$i30 = 0,
      $this1$i9 = 0,
      $upcast$i = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 256) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256 | 0);
    $indirect$arg$temp$i24$byval_copy2D2D = (sp + 240) | 0;
    $indirect$arg$temp$i17$byval_copy2D2D = (sp + 232) | 0;
    $indirect$arg$temp$i$byval_copy2D2D = (sp + 224) | 0;
    $callable$addr$i23 = (sp + 184) | 0;
    $indirect$arg$temp$i242D2D = (sp + 176) | 0;
    $indirect$arg$temp4202D2D = (sp + 16) | 0;
    $callable$addr$i16 = (sp + 160) | 0;
    $indirect$arg$temp$i172D2D = (sp + 152) | 0;
    $indirect$arg$temp2132D2D = (sp + 8) | 0;
    $callable$addr$i = (sp + 136) | 0;
    $indirect$arg$temp$i2D2D = (sp + 128) | 0;
    $indirect$arg$temp102D2D = sp;
    $push_back = (sp + 64) | 0;
    $resize = (sp + 56) | 0;
    $size = (sp + 48) | 0;
    $ref$tmp = (sp + 248) | 0;
    $indirect$arg$temp2D2D = (sp + 40) | 0;
    $indirect$arg$temp22D2D = (sp + 32) | 0;
    $indirect$arg$temp42D2D = (sp + 24) | 0;
    $name$addr = $name;
    HEAP32[$push_back >> 2] = 263;
    $push_back$index1 = ($push_back + 4) | 0;
    HEAP32[$push_back$index1 >> 2] = 0;
    HEAP32[$resize >> 2] = 264;
    $resize$index2 = ($resize + 4) | 0;
    HEAP32[$resize$index2 >> 2] = 0;
    HEAP32[$size >> 2] = 265;
    $size$index3 = ($size + 4) | 0;
    HEAP32[$size$index3 >> 2] = 0;
    $0 = $name$addr;
    $this$addr$i = $ref$tmp;
    $name$addr$i = $0;
    __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIhNS3_9allocatorIhEEEEEEvv();
    $_getActualType$i = 266;
    $call$i =
      __ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIhNS3_9allocatorIhEEEEEEPFvvEv() |
      0;
    $upcast$i = $call$i;
    $call2$i =
      __ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIhNS3_9allocatorIhEEEEEEPFvvEv() |
      0;
    $downcast$i = $call2$i;
    $destructor$i = 267;
    $call3$i =
      __ZN10emscripten8internal6TypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEvE3getEv() |
      0;
    $call4$i =
      __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIhNS3_9allocatorIhEEEEEEvE3getEv() |
      0;
    $call5$i =
      __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIhNS3_9allocatorIhEEEEEEvE3getEv() |
      0;
    $call6$i = __ZN10emscripten8internal11NoBaseClass3getEv() | 0;
    $1 = $_getActualType$i;
    $$addr$i$i = $1;
    $call$i$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() | 0;
    $2 = $_getActualType$i;
    $3 = $upcast$i;
    $$addr$i11$i = $3;
    $call$i$i12$i =
      __ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv() | 0;
    $4 = $upcast$i;
    $5 = $downcast$i;
    $$addr$i13$i = $5;
    $call$i$i14$i =
      __ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv() | 0;
    $6 = $downcast$i;
    $7 = $name$addr$i;
    $8 = $destructor$i;
    $$addr$i15$i = $8;
    $call$i$i16$i =
      __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() | 0;
    $9 = $destructor$i;
    __embind_register_class(
      $call3$i | 0,
      $call4$i | 0,
      $call5$i | 0,
      $call6$i | 0,
      $call$i$i$i | 0,
      $2 | 0,
      $call$i$i12$i | 0,
      $4 | 0,
      $call$i$i14$i | 0,
      $6 | 0,
      $7 | 0,
      $call$i$i16$i | 0,
      $9 | 0
    );
    $this$addr$i8 = $ref$tmp;
    $this1$i9 = $this$addr$i8;
    $this$addr$i$i = $this1$i9;
    $callable$addr$i$i = 268;
    $this1$i$i = $this$addr$i$i;
    $10 = $callable$addr$i$i;
    __ZN10emscripten8internal24RegisterClassConstructorIPFPNSt3__26vectorIhNS2_9allocatorIhEEEEvEE6invokeIS6_JEEEvS9_(
      $10
    );
    $$field = HEAP32[$push_back >> 2] | 0;
    $$index4 = ($push_back + 4) | 0;
    $$field5 = HEAP32[$$index4 >> 2] | 0;
    HEAP32[$indirect$arg$temp2D2D >> 2] = $$field;
    $indirect$arg$temp$index72D2D = ($indirect$arg$temp2D2D + 4) | 0;
    HEAP32[$indirect$arg$temp$index72D2D >> 2] = $$field5;
    HEAP8[$indirect$arg$temp102D2D >> 0] =
      HEAP8[$indirect$arg$temp2D2D >> 0] | 0;
    HEAP8[($indirect$arg$temp102D2D + 1) >> 0] =
      HEAP8[($indirect$arg$temp2D2D + 1) >> 0] | 0;
    HEAP8[($indirect$arg$temp102D2D + 2) >> 0] =
      HEAP8[($indirect$arg$temp2D2D + 2) >> 0] | 0;
    HEAP8[($indirect$arg$temp102D2D + 3) >> 0] =
      HEAP8[($indirect$arg$temp2D2D + 3) >> 0] | 0;
    HEAP8[($indirect$arg$temp102D2D + 4) >> 0] =
      HEAP8[($indirect$arg$temp2D2D + 4) >> 0] | 0;
    HEAP8[($indirect$arg$temp102D2D + 5) >> 0] =
      HEAP8[($indirect$arg$temp2D2D + 5) >> 0] | 0;
    HEAP8[($indirect$arg$temp102D2D + 6) >> 0] =
      HEAP8[($indirect$arg$temp2D2D + 6) >> 0] | 0;
    HEAP8[($indirect$arg$temp102D2D + 7) >> 0] =
      HEAP8[($indirect$arg$temp2D2D + 7) >> 0] | 0;
    $callable$i$field = HEAP32[$indirect$arg$temp102D2D >> 2] | 0;
    $callable$i$index8 = ($indirect$arg$temp102D2D + 4) | 0;
    $callable$i$field9 = HEAP32[$callable$i$index8 >> 2] | 0;
    $this$addr$i11 = $this1$i$i;
    $methodName$addr$i = 7994;
    HEAP32[$callable$addr$i >> 2] = $callable$i$field;
    $callable$addr$i$index11 = ($callable$addr$i + 4) | 0;
    HEAP32[$callable$addr$i$index11 >> 2] = $callable$i$field9;
    $this1$i12 = $this$addr$i11;
    $11 = $methodName$addr$i;
    $$field13 = HEAP32[$callable$addr$i >> 2] | 0;
    $$index15 = ($callable$addr$i + 4) | 0;
    $$field16 = HEAP32[$$index15 >> 2] | 0;
    HEAP32[$indirect$arg$temp$i2D2D >> 2] = $$field13;
    $indirect$arg$temp$i$index182D2D = ($indirect$arg$temp$i2D2D + 4) | 0;
    HEAP32[$indirect$arg$temp$i$index182D2D >> 2] = $$field16;
    HEAP32[$indirect$arg$temp$i$byval_copy2D2D >> 2] =
      HEAP32[$indirect$arg$temp$i2D2D >> 2] | 0;
    HEAP32[($indirect$arg$temp$i$byval_copy2D2D + 4) >> 2] =
      HEAP32[($indirect$arg$temp$i2D2D + 4) >> 2] | 0;
    __ZN10emscripten8internal19RegisterClassMethodIMNSt3__26vectorIhNS2_9allocatorIhEEEEFvRKhEE6invokeIS6_JEEEvPKcSA_(
      $11,
      $indirect$arg$temp$i$byval_copy2D2D
    );
    $$field20 = HEAP32[$resize >> 2] | 0;
    $$index22 = ($resize + 4) | 0;
    $$field23 = HEAP32[$$index22 >> 2] | 0;
    HEAP32[$indirect$arg$temp22D2D >> 2] = $$field20;
    $indirect$arg$temp2$index252D2D = ($indirect$arg$temp22D2D + 4) | 0;
    HEAP32[$indirect$arg$temp2$index252D2D >> 2] = $$field23;
    HEAP8[$indirect$arg$temp2132D2D >> 0] =
      HEAP8[$indirect$arg$temp22D2D >> 0] | 0;
    HEAP8[($indirect$arg$temp2132D2D + 1) >> 0] =
      HEAP8[($indirect$arg$temp22D2D + 1) >> 0] | 0;
    HEAP8[($indirect$arg$temp2132D2D + 2) >> 0] =
      HEAP8[($indirect$arg$temp22D2D + 2) >> 0] | 0;
    HEAP8[($indirect$arg$temp2132D2D + 3) >> 0] =
      HEAP8[($indirect$arg$temp22D2D + 3) >> 0] | 0;
    HEAP8[($indirect$arg$temp2132D2D + 4) >> 0] =
      HEAP8[($indirect$arg$temp22D2D + 4) >> 0] | 0;
    HEAP8[($indirect$arg$temp2132D2D + 5) >> 0] =
      HEAP8[($indirect$arg$temp22D2D + 5) >> 0] | 0;
    HEAP8[($indirect$arg$temp2132D2D + 6) >> 0] =
      HEAP8[($indirect$arg$temp22D2D + 6) >> 0] | 0;
    HEAP8[($indirect$arg$temp2132D2D + 7) >> 0] =
      HEAP8[($indirect$arg$temp22D2D + 7) >> 0] | 0;
    $callable$i18$field = HEAP32[$indirect$arg$temp2132D2D >> 2] | 0;
    $callable$i18$index26 = ($indirect$arg$temp2132D2D + 4) | 0;
    $callable$i18$field27 = HEAP32[$callable$i18$index26 >> 2] | 0;
    $this$addr$i14 = $this1$i12;
    $methodName$addr$i15 = 8004;
    HEAP32[$callable$addr$i16 >> 2] = $callable$i18$field;
    $callable$addr$i16$index29 = ($callable$addr$i16 + 4) | 0;
    HEAP32[$callable$addr$i16$index29 >> 2] = $callable$i18$field27;
    $this1$i19 = $this$addr$i14;
    $12 = $methodName$addr$i15;
    $$field31 = HEAP32[$callable$addr$i16 >> 2] | 0;
    $$index33 = ($callable$addr$i16 + 4) | 0;
    $$field34 = HEAP32[$$index33 >> 2] | 0;
    HEAP32[$indirect$arg$temp$i172D2D >> 2] = $$field31;
    $indirect$arg$temp$i17$index362D2D = ($indirect$arg$temp$i172D2D + 4) | 0;
    HEAP32[$indirect$arg$temp$i17$index362D2D >> 2] = $$field34;
    HEAP32[$indirect$arg$temp$i17$byval_copy2D2D >> 2] =
      HEAP32[$indirect$arg$temp$i172D2D >> 2] | 0;
    HEAP32[($indirect$arg$temp$i17$byval_copy2D2D + 4) >> 2] =
      HEAP32[($indirect$arg$temp$i172D2D + 4) >> 2] | 0;
    __ZN10emscripten8internal19RegisterClassMethodIMNSt3__26vectorIhNS2_9allocatorIhEEEEFvmRKhEE6invokeIS6_JEEEvPKcSA_(
      $12,
      $indirect$arg$temp$i17$byval_copy2D2D
    );
    $$field38 = HEAP32[$size >> 2] | 0;
    $$index40 = ($size + 4) | 0;
    $$field41 = HEAP32[$$index40 >> 2] | 0;
    HEAP32[$indirect$arg$temp42D2D >> 2] = $$field38;
    $indirect$arg$temp4$index432D2D = ($indirect$arg$temp42D2D + 4) | 0;
    HEAP32[$indirect$arg$temp4$index432D2D >> 2] = $$field41;
    HEAP8[$indirect$arg$temp4202D2D >> 0] =
      HEAP8[$indirect$arg$temp42D2D >> 0] | 0;
    HEAP8[($indirect$arg$temp4202D2D + 1) >> 0] =
      HEAP8[($indirect$arg$temp42D2D + 1) >> 0] | 0;
    HEAP8[($indirect$arg$temp4202D2D + 2) >> 0] =
      HEAP8[($indirect$arg$temp42D2D + 2) >> 0] | 0;
    HEAP8[($indirect$arg$temp4202D2D + 3) >> 0] =
      HEAP8[($indirect$arg$temp42D2D + 3) >> 0] | 0;
    HEAP8[($indirect$arg$temp4202D2D + 4) >> 0] =
      HEAP8[($indirect$arg$temp42D2D + 4) >> 0] | 0;
    HEAP8[($indirect$arg$temp4202D2D + 5) >> 0] =
      HEAP8[($indirect$arg$temp42D2D + 5) >> 0] | 0;
    HEAP8[($indirect$arg$temp4202D2D + 6) >> 0] =
      HEAP8[($indirect$arg$temp42D2D + 6) >> 0] | 0;
    HEAP8[($indirect$arg$temp4202D2D + 7) >> 0] =
      HEAP8[($indirect$arg$temp42D2D + 7) >> 0] | 0;
    $callable$i25$field = HEAP32[$indirect$arg$temp4202D2D >> 2] | 0;
    $callable$i25$index44 = ($indirect$arg$temp4202D2D + 4) | 0;
    $callable$i25$field45 = HEAP32[$callable$i25$index44 >> 2] | 0;
    $this$addr$i21 = $this1$i19;
    $methodName$addr$i22 = 8011;
    HEAP32[$callable$addr$i23 >> 2] = $callable$i25$field;
    $callable$addr$i23$index47 = ($callable$addr$i23 + 4) | 0;
    HEAP32[$callable$addr$i23$index47 >> 2] = $callable$i25$field45;
    $this1$i26 = $this$addr$i21;
    $13 = $methodName$addr$i22;
    $$field49 = HEAP32[$callable$addr$i23 >> 2] | 0;
    $$index51 = ($callable$addr$i23 + 4) | 0;
    $$field52 = HEAP32[$$index51 >> 2] | 0;
    HEAP32[$indirect$arg$temp$i242D2D >> 2] = $$field49;
    $indirect$arg$temp$i24$index542D2D = ($indirect$arg$temp$i242D2D + 4) | 0;
    HEAP32[$indirect$arg$temp$i24$index542D2D >> 2] = $$field52;
    HEAP32[$indirect$arg$temp$i24$byval_copy2D2D >> 2] =
      HEAP32[$indirect$arg$temp$i242D2D >> 2] | 0;
    HEAP32[($indirect$arg$temp$i24$byval_copy2D2D + 4) >> 2] =
      HEAP32[($indirect$arg$temp$i242D2D + 4) >> 2] | 0;
    __ZN10emscripten8internal19RegisterClassMethodIMNSt3__26vectorIhNS2_9allocatorIhEEEEKFmvEE6invokeIS6_JEEEvPKcS8_(
      $13,
      $indirect$arg$temp$i24$byval_copy2D2D
    );
    $this$addr$i27 = $this1$i26;
    $methodName$addr$i28 = 8016;
    $callable$addr$i29 = 269;
    $this1$i30 = $this$addr$i27;
    $14 = $methodName$addr$i28;
    $15 = $callable$addr$i29;
    __ZN10emscripten8internal19RegisterClassMethodIPFNS_3valERKNSt3__26vectorIhNS3_9allocatorIhEEEEmEE6invokeIS7_JEEEvPKcSB_(
      $14,
      $15
    );
    $this$addr$i31 = $this1$i30;
    $methodName$addr$i32 = 8020;
    $callable$addr$i33 = 270;
    $16 = $methodName$addr$i32;
    $17 = $callable$addr$i33;
    __ZN10emscripten8internal19RegisterClassMethodIPFbRNSt3__26vectorIhNS2_9allocatorIhEEEEmRKhEE6invokeIS6_JEEEvPKcSB_(
      $16,
      $17
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten5enum_IN5Motor5StateEEC2EPKc($this, $name) {
    $this = $this | 0;
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $name$addr = 0,
      $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDIN5Motor5StateEvE3getEv() | 0;
    $0 = $name$addr;
    __embind_register_enum($call | 0, $0 | 0, 1, 0);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten5enum_IN5Motor5StateEE5valueEPKcS2_(
    $this,
    $name,
    $value
  ) {
    $this = $this | 0;
    $name = $name | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $conv = 0,
      $name$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $value$addr = $value;
    $this1 = $this$addr;
    $call = __ZN10emscripten8internal6TypeIDIN5Motor5StateEvE3getEv() | 0;
    $0 = $name$addr;
    $1 = $value$addr;
    $conv = $1 & 255;
    __embind_register_enum_value($call | 0, $0 | 0, $conv | 0);
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten5enum_IN10SmartDrive5UnitsEEC2EPKc($this, $name) {
    $this = $this | 0;
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $name$addr = 0,
      $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDIN10SmartDrive5UnitsEvE3getEv() | 0;
    $0 = $name$addr;
    __embind_register_enum($call | 0, $0 | 0, 1, 0);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten5enum_IN10SmartDrive5UnitsEE5valueEPKcS2_(
    $this,
    $name,
    $value
  ) {
    $this = $this | 0;
    $name = $name | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $conv = 0,
      $name$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $value$addr = $value;
    $this1 = $this$addr;
    $call = __ZN10emscripten8internal6TypeIDIN10SmartDrive5UnitsEvE3getEv() | 0;
    $0 = $name$addr;
    $1 = $value$addr;
    $conv = $1 & 255;
    __embind_register_enum_value($call | 0, $0 | 0, $conv | 0);
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten5enum_IN10SmartDrive11ControlModeEEC2EPKc(
    $this,
    $name
  ) {
    $this = $this | 0;
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $name$addr = 0,
      $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $call =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive11ControlModeEvE3getEv() |
      0;
    $0 = $name$addr;
    __embind_register_enum($call | 0, $0 | 0, 1, 0);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten5enum_IN10SmartDrive11ControlModeEE5valueEPKcS2_(
    $this,
    $name,
    $value
  ) {
    $this = $this | 0;
    $name = $name | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $conv = 0,
      $name$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $value$addr = $value;
    $this1 = $this$addr;
    $call =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive11ControlModeEvE3getEv() |
      0;
    $0 = $name$addr;
    $1 = $value$addr;
    $conv = $1 & 255;
    __embind_register_enum_value($call | 0, $0 | 0, $conv | 0);
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten5enum_IN10SmartDrive17SwitchControlModeEEC2EPKc(
    $this,
    $name
  ) {
    $this = $this | 0;
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $name$addr = 0,
      $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $call =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive17SwitchControlModeEvE3getEv() |
      0;
    $0 = $name$addr;
    __embind_register_enum($call | 0, $0 | 0, 1, 0);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten5enum_IN10SmartDrive17SwitchControlModeEE5valueEPKcS2_(
    $this,
    $name,
    $value
  ) {
    $this = $this | 0;
    $name = $name | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $conv = 0,
      $name$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $value$addr = $value;
    $this1 = $this$addr;
    $call =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive17SwitchControlModeEvE3getEv() |
      0;
    $0 = $name$addr;
    $1 = $value$addr;
    $conv = $1 & 255;
    __embind_register_enum_value($call | 0, $0 | 0, $conv | 0);
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN10SmartDrive8SettingsEEC2EPKc(
    $this,
    $name
  ) {
    $this = $this | 0;
    $name = $name | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $ctor = 0,
      $dtor = 0,
      $name$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $this1 = $this$addr;
    __ZN10emscripten8internal11noncopyableC2Ev($this1);
    $ctor = 271;
    $dtor = 272;
    $call =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive8SettingsEvE3getEv() | 0;
    $0 = $name$addr;
    $1 = $ctor;
    $$addr$i = $1;
    $call$i$i = __ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv() | 0;
    $2 = $ctor;
    $3 = $dtor;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() | 0;
    $4 = $dtor;
    __embind_register_value_object(
      $call | 0,
      $0 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call$i$i9 | 0,
      $4 | 0
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten12value_objectIN10SmartDrive8SettingsEE5fieldIS2_NS1_11ControlModeEEERS3_PKcMT_T0_(
    $this,
    $fieldName,
    $field
  ) {
    $this = $this | 0;
    $fieldName = $fieldName | 0;
    $field = $field | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $field$addr = 0,
      $fieldName$addr = 0,
      $getter = 0,
      $setter = 0,
      $this$addr = 0,
      $this1 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $field$addr = (sp + 8) | 0;
    $this$addr = $this;
    $fieldName$addr = $fieldName;
    HEAP32[$field$addr >> 2] = $field;
    $this1 = $this$addr;
    $getter = 273;
    $setter = 274;
    $call =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive8SettingsEvE3getEv() | 0;
    $0 = $fieldName$addr;
    $call2 =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive11ControlModeEvE3getEv() |
      0;
    $1 = $getter;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $2 = $getter;
    $call4 =
      __ZN10emscripten8internal10getContextIMN10SmartDrive8SettingsENS2_11ControlModeEEEPT_RKS6_(
        $field$addr
      ) | 0;
    $call5 =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive11ControlModeEvE3getEv() |
      0;
    $3 = $setter;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $4 = $setter;
    $call7 =
      __ZN10emscripten8internal10getContextIMN10SmartDrive8SettingsENS2_11ControlModeEEEPT_RKS6_(
        $field$addr
      ) | 0;
    __embind_register_value_object_field(
      $call | 0,
      $0 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      $call5 | 0,
      $call$i$i9 | 0,
      $4 | 0,
      $call7 | 0
    );
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN10SmartDrive8SettingsEE5fieldIS2_NS1_5UnitsEEERS3_PKcMT_T0_(
    $this,
    $fieldName,
    $field
  ) {
    $this = $this | 0;
    $fieldName = $fieldName | 0;
    $field = $field | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $field$addr = 0,
      $fieldName$addr = 0,
      $getter = 0,
      $setter = 0,
      $this$addr = 0,
      $this1 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $field$addr = (sp + 8) | 0;
    $this$addr = $this;
    $fieldName$addr = $fieldName;
    HEAP32[$field$addr >> 2] = $field;
    $this1 = $this$addr;
    $getter = 275;
    $setter = 276;
    $call =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive8SettingsEvE3getEv() | 0;
    $0 = $fieldName$addr;
    $call2 =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive5UnitsEvE3getEv() | 0;
    $1 = $getter;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $2 = $getter;
    $call4 =
      __ZN10emscripten8internal10getContextIMN10SmartDrive8SettingsENS2_5UnitsEEEPT_RKS6_(
        $field$addr
      ) | 0;
    $call5 =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive5UnitsEvE3getEv() | 0;
    $3 = $setter;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $4 = $setter;
    $call7 =
      __ZN10emscripten8internal10getContextIMN10SmartDrive8SettingsENS2_5UnitsEEEPT_RKS6_(
        $field$addr
      ) | 0;
    __embind_register_value_object_field(
      $call | 0,
      $0 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      $call5 | 0,
      $call$i$i9 | 0,
      $4 | 0,
      $call7 | 0
    );
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN10SmartDrive8SettingsEE5fieldIS2_hEERS3_PKcMT_T0_(
    $this,
    $fieldName,
    $field
  ) {
    $this = $this | 0;
    $fieldName = $fieldName | 0;
    $field = $field | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $field$addr = 0,
      $fieldName$addr = 0,
      $getter = 0,
      $setter = 0,
      $this$addr = 0,
      $this1 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $field$addr = (sp + 8) | 0;
    $this$addr = $this;
    $fieldName$addr = $fieldName;
    HEAP32[$field$addr >> 2] = $field;
    $this1 = $this$addr;
    $getter = 277;
    $setter = 278;
    $call =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive8SettingsEvE3getEv() | 0;
    $0 = $fieldName$addr;
    $call2 = __ZN10emscripten8internal6TypeIDIhvE3getEv() | 0;
    $1 = $getter;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $2 = $getter;
    $call4 =
      __ZN10emscripten8internal10getContextIMN10SmartDrive8SettingsEhEEPT_RKS5_(
        $field$addr
      ) | 0;
    $call5 = __ZN10emscripten8internal6TypeIDIhvE3getEv() | 0;
    $3 = $setter;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $4 = $setter;
    $call7 =
      __ZN10emscripten8internal10getContextIMN10SmartDrive8SettingsEhEEPT_RKS5_(
        $field$addr
      ) | 0;
    __embind_register_value_object_field(
      $call | 0,
      $0 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      $call5 | 0,
      $call$i$i9 | 0,
      $4 | 0,
      $call7 | 0
    );
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN10SmartDrive8SettingsEE5fieldIS2_fEERS3_PKcMT_T0_(
    $this,
    $fieldName,
    $field
  ) {
    $this = $this | 0;
    $fieldName = $fieldName | 0;
    $field = $field | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $field$addr = 0,
      $fieldName$addr = 0,
      $getter = 0,
      $setter = 0,
      $this$addr = 0,
      $this1 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $field$addr = (sp + 8) | 0;
    $this$addr = $this;
    $fieldName$addr = $fieldName;
    HEAP32[$field$addr >> 2] = $field;
    $this1 = $this$addr;
    $getter = 279;
    $setter = 280;
    $call =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive8SettingsEvE3getEv() | 0;
    $0 = $fieldName$addr;
    $call2 = __ZN10emscripten8internal6TypeIDIfvE3getEv() | 0;
    $1 = $getter;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJfiiEEEPKcv() | 0;
    $2 = $getter;
    $call4 =
      __ZN10emscripten8internal10getContextIMN10SmartDrive8SettingsEfEEPT_RKS5_(
        $field$addr
      ) | 0;
    $call5 = __ZN10emscripten8internal6TypeIDIfvE3getEv() | 0;
    $3 = $setter;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviifEEEPKcv() | 0;
    $4 = $setter;
    $call7 =
      __ZN10emscripten8internal10getContextIMN10SmartDrive8SettingsEfEEPT_RKS5_(
        $field$addr
      ) | 0;
    __embind_register_value_object_field(
      $call | 0,
      $0 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      $call5 | 0,
      $call$i$i9 | 0,
      $4 | 0,
      $call7 | 0
    );
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN10SmartDrive8SettingsEED2Ev($this) {
    $this = $this | 0;
    var $call = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $this1 = $this$addr;
    $call =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive8SettingsEvE3getEv() | 0;
    __embind_finalize_value_object($call | 0);
    __ZN10emscripten8internal11noncopyableD2Ev($this1);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten12value_objectIN10SmartDrive21SwitchControlSettingsEEC2EPKc(
    $this,
    $name
  ) {
    $this = $this | 0;
    $name = $name | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $ctor = 0,
      $dtor = 0,
      $name$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $this1 = $this$addr;
    __ZN10emscripten8internal11noncopyableC2Ev($this1);
    $ctor = 281;
    $dtor = 282;
    $call =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive21SwitchControlSettingsEvE3getEv() |
      0;
    $0 = $name$addr;
    $1 = $ctor;
    $$addr$i = $1;
    $call$i$i = __ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv() | 0;
    $2 = $ctor;
    $3 = $dtor;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() | 0;
    $4 = $dtor;
    __embind_register_value_object(
      $call | 0,
      $0 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call$i$i9 | 0,
      $4 | 0
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten12value_objectIN10SmartDrive21SwitchControlSettingsEE5fieldIS2_NS1_17SwitchControlModeEEERS3_PKcMT_T0_(
    $this,
    $fieldName,
    $field
  ) {
    $this = $this | 0;
    $fieldName = $fieldName | 0;
    $field = $field | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $field$addr = 0,
      $fieldName$addr = 0,
      $getter = 0,
      $setter = 0,
      $this$addr = 0,
      $this1 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $field$addr = (sp + 8) | 0;
    $this$addr = $this;
    $fieldName$addr = $fieldName;
    HEAP32[$field$addr >> 2] = $field;
    $this1 = $this$addr;
    $getter = 283;
    $setter = 284;
    $call =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive21SwitchControlSettingsEvE3getEv() |
      0;
    $0 = $fieldName$addr;
    $call2 =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive17SwitchControlModeEvE3getEv() |
      0;
    $1 = $getter;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $2 = $getter;
    $call4 =
      __ZN10emscripten8internal10getContextIMN10SmartDrive21SwitchControlSettingsENS2_17SwitchControlModeEEEPT_RKS6_(
        $field$addr
      ) | 0;
    $call5 =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive17SwitchControlModeEvE3getEv() |
      0;
    $3 = $setter;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $4 = $setter;
    $call7 =
      __ZN10emscripten8internal10getContextIMN10SmartDrive21SwitchControlSettingsENS2_17SwitchControlModeEEEPT_RKS6_(
        $field$addr
      ) | 0;
    __embind_register_value_object_field(
      $call | 0,
      $0 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      $call5 | 0,
      $call$i$i9 | 0,
      $4 | 0,
      $call7 | 0
    );
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN10SmartDrive21SwitchControlSettingsEE5fieldIS2_hEERS3_PKcMT_T0_(
    $this,
    $fieldName,
    $field
  ) {
    $this = $this | 0;
    $fieldName = $fieldName | 0;
    $field = $field | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $field$addr = 0,
      $fieldName$addr = 0,
      $getter = 0,
      $setter = 0,
      $this$addr = 0,
      $this1 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $field$addr = (sp + 8) | 0;
    $this$addr = $this;
    $fieldName$addr = $fieldName;
    HEAP32[$field$addr >> 2] = $field;
    $this1 = $this$addr;
    $getter = 285;
    $setter = 286;
    $call =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive21SwitchControlSettingsEvE3getEv() |
      0;
    $0 = $fieldName$addr;
    $call2 = __ZN10emscripten8internal6TypeIDIhvE3getEv() | 0;
    $1 = $getter;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $2 = $getter;
    $call4 =
      __ZN10emscripten8internal10getContextIMN10SmartDrive21SwitchControlSettingsEhEEPT_RKS5_(
        $field$addr
      ) | 0;
    $call5 = __ZN10emscripten8internal6TypeIDIhvE3getEv() | 0;
    $3 = $setter;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $4 = $setter;
    $call7 =
      __ZN10emscripten8internal10getContextIMN10SmartDrive21SwitchControlSettingsEhEEPT_RKS5_(
        $field$addr
      ) | 0;
    __embind_register_value_object_field(
      $call | 0,
      $0 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      $call5 | 0,
      $call$i$i9 | 0,
      $4 | 0,
      $call7 | 0
    );
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN10SmartDrive21SwitchControlSettingsEE5fieldIS2_fEERS3_PKcMT_T0_(
    $this,
    $fieldName,
    $field
  ) {
    $this = $this | 0;
    $fieldName = $fieldName | 0;
    $field = $field | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $field$addr = 0,
      $fieldName$addr = 0,
      $getter = 0,
      $setter = 0,
      $this$addr = 0,
      $this1 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $field$addr = (sp + 8) | 0;
    $this$addr = $this;
    $fieldName$addr = $fieldName;
    HEAP32[$field$addr >> 2] = $field;
    $this1 = $this$addr;
    $getter = 287;
    $setter = 288;
    $call =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive21SwitchControlSettingsEvE3getEv() |
      0;
    $0 = $fieldName$addr;
    $call2 = __ZN10emscripten8internal6TypeIDIfvE3getEv() | 0;
    $1 = $getter;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJfiiEEEPKcv() | 0;
    $2 = $getter;
    $call4 =
      __ZN10emscripten8internal10getContextIMN10SmartDrive21SwitchControlSettingsEfEEPT_RKS5_(
        $field$addr
      ) | 0;
    $call5 = __ZN10emscripten8internal6TypeIDIfvE3getEv() | 0;
    $3 = $setter;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviifEEEPKcv() | 0;
    $4 = $setter;
    $call7 =
      __ZN10emscripten8internal10getContextIMN10SmartDrive21SwitchControlSettingsEfEEPT_RKS5_(
        $field$addr
      ) | 0;
    __embind_register_value_object_field(
      $call | 0,
      $0 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      $call5 | 0,
      $call$i$i9 | 0,
      $4 | 0,
      $call7 | 0
    );
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN10SmartDrive21SwitchControlSettingsEED2Ev(
    $this
  ) {
    $this = $this | 0;
    var $call = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $this1 = $this$addr;
    $call =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive21SwitchControlSettingsEvE3getEv() |
      0;
    __embind_finalize_value_object($call | 0);
    __ZN10emscripten8internal11noncopyableD2Ev($this1);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten5enum_IN6Packet6DeviceEEC2EPKc($this, $name) {
    $this = $this | 0;
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $name$addr = 0,
      $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet6DeviceEvE3getEv() | 0;
    $0 = $name$addr;
    __embind_register_enum($call | 0, $0 | 0, 1, 0);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten5enum_IN6Packet6DeviceEE5valueEPKcS2_(
    $this,
    $name,
    $value
  ) {
    $this = $this | 0;
    $name = $name | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $conv = 0,
      $name$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $value$addr = $value;
    $this1 = $this$addr;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet6DeviceEvE3getEv() | 0;
    $0 = $name$addr;
    $1 = $value$addr;
    $conv = $1 & 255;
    __embind_register_enum_value($call | 0, $0 | 0, $conv | 0);
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten5enum_IN6Packet4TypeEEC2EPKc($this, $name) {
    $this = $this | 0;
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $name$addr = 0,
      $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet4TypeEvE3getEv() | 0;
    $0 = $name$addr;
    __embind_register_enum($call | 0, $0 | 0, 1, 0);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten5enum_IN6Packet4TypeEE5valueEPKcS2_(
    $this,
    $name,
    $value
  ) {
    $this = $this | 0;
    $name = $name | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $conv = 0,
      $name$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $value$addr = $value;
    $this1 = $this$addr;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet4TypeEvE3getEv() | 0;
    $0 = $name$addr;
    $1 = $value$addr;
    $conv = $1 & 255;
    __embind_register_enum_value($call | 0, $0 | 0, $conv | 0);
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten5enum_IN6Packet4DataEEC2EPKc($this, $name) {
    $this = $this | 0;
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $name$addr = 0,
      $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet4DataEvE3getEv() | 0;
    $0 = $name$addr;
    __embind_register_enum($call | 0, $0 | 0, 1, 0);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten5enum_IN6Packet4DataEE5valueEPKcS2_(
    $this,
    $name,
    $value
  ) {
    $this = $this | 0;
    $name = $name | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $conv = 0,
      $name$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $value$addr = $value;
    $this1 = $this$addr;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet4DataEvE3getEv() | 0;
    $0 = $name$addr;
    $1 = $value$addr;
    $conv = $1 & 255;
    __embind_register_enum_value($call | 0, $0 | 0, $conv | 0);
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN6Packet11VersionInfoEEC2EPKc(
    $this,
    $name
  ) {
    $this = $this | 0;
    $name = $name | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $ctor = 0,
      $dtor = 0,
      $name$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $this1 = $this$addr;
    __ZN10emscripten8internal11noncopyableC2Ev($this1);
    $ctor = 289;
    $dtor = 290;
    $call =
      __ZN10emscripten8internal6TypeIDIN6Packet11VersionInfoEvE3getEv() | 0;
    $0 = $name$addr;
    $1 = $ctor;
    $$addr$i = $1;
    $call$i$i = __ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv() | 0;
    $2 = $ctor;
    $3 = $dtor;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() | 0;
    $4 = $dtor;
    __embind_register_value_object(
      $call | 0,
      $0 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call$i$i9 | 0,
      $4 | 0
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten12value_objectIN6Packet11VersionInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
    $this,
    $fieldName,
    $field
  ) {
    $this = $this | 0;
    $fieldName = $fieldName | 0;
    $field = $field | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $field$addr = 0,
      $fieldName$addr = 0,
      $getter = 0,
      $setter = 0,
      $this$addr = 0,
      $this1 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $field$addr = (sp + 8) | 0;
    $this$addr = $this;
    $fieldName$addr = $fieldName;
    HEAP32[$field$addr >> 2] = $field;
    $this1 = $this$addr;
    $getter = 291;
    $setter = 292;
    $call =
      __ZN10emscripten8internal6TypeIDIN6Packet11VersionInfoEvE3getEv() | 0;
    $0 = $fieldName$addr;
    $call2 = __ZN10emscripten8internal6TypeIDIhvE3getEv() | 0;
    $1 = $getter;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $2 = $getter;
    $call4 =
      __ZN10emscripten8internal10getContextIMN6Packet11VersionInfoEhEEPT_RKS5_(
        $field$addr
      ) | 0;
    $call5 = __ZN10emscripten8internal6TypeIDIhvE3getEv() | 0;
    $3 = $setter;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $4 = $setter;
    $call7 =
      __ZN10emscripten8internal10getContextIMN6Packet11VersionInfoEhEEPT_RKS5_(
        $field$addr
      ) | 0;
    __embind_register_value_object_field(
      $call | 0,
      $0 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      $call5 | 0,
      $call$i$i9 | 0,
      $4 | 0,
      $call7 | 0
    );
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN6Packet11VersionInfoEED2Ev($this) {
    $this = $this | 0;
    var $call = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $this1 = $this$addr;
    $call =
      __ZN10emscripten8internal6TypeIDIN6Packet11VersionInfoEvE3getEv() | 0;
    __embind_finalize_value_object($call | 0);
    __ZN10emscripten8internal11noncopyableD2Ev($this1);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten12value_objectIN6Packet9DailyInfoEEC2EPKc(
    $this,
    $name
  ) {
    $this = $this | 0;
    $name = $name | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $ctor = 0,
      $dtor = 0,
      $name$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $this1 = $this$addr;
    __ZN10emscripten8internal11noncopyableC2Ev($this1);
    $ctor = 293;
    $dtor = 294;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet9DailyInfoEvE3getEv() | 0;
    $0 = $name$addr;
    $1 = $ctor;
    $$addr$i = $1;
    $call$i$i = __ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv() | 0;
    $2 = $ctor;
    $3 = $dtor;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() | 0;
    $4 = $dtor;
    __embind_register_value_object(
      $call | 0,
      $0 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call$i$i9 | 0,
      $4 | 0
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten12value_objectIN6Packet9DailyInfoEE5fieldIS2_tEERS3_PKcMT_T0_(
    $this,
    $fieldName,
    $field
  ) {
    $this = $this | 0;
    $fieldName = $fieldName | 0;
    $field = $field | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $field$addr = 0,
      $fieldName$addr = 0,
      $getter = 0,
      $setter = 0,
      $this$addr = 0,
      $this1 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $field$addr = (sp + 8) | 0;
    $this$addr = $this;
    $fieldName$addr = $fieldName;
    HEAP32[$field$addr >> 2] = $field;
    $this1 = $this$addr;
    $getter = 295;
    $setter = 296;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet9DailyInfoEvE3getEv() | 0;
    $0 = $fieldName$addr;
    $call2 = __ZN10emscripten8internal6TypeIDItvE3getEv() | 0;
    $1 = $getter;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $2 = $getter;
    $call4 =
      __ZN10emscripten8internal10getContextIMN6Packet9DailyInfoEtEEPT_RKS5_(
        $field$addr
      ) | 0;
    $call5 = __ZN10emscripten8internal6TypeIDItvE3getEv() | 0;
    $3 = $setter;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $4 = $setter;
    $call7 =
      __ZN10emscripten8internal10getContextIMN6Packet9DailyInfoEtEEPT_RKS5_(
        $field$addr
      ) | 0;
    __embind_register_value_object_field(
      $call | 0,
      $0 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      $call5 | 0,
      $call$i$i9 | 0,
      $4 | 0,
      $call7 | 0
    );
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN6Packet9DailyInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
    $this,
    $fieldName,
    $field
  ) {
    $this = $this | 0;
    $fieldName = $fieldName | 0;
    $field = $field | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $field$addr = 0,
      $fieldName$addr = 0,
      $getter = 0,
      $setter = 0,
      $this$addr = 0,
      $this1 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $field$addr = (sp + 8) | 0;
    $this$addr = $this;
    $fieldName$addr = $fieldName;
    HEAP32[$field$addr >> 2] = $field;
    $this1 = $this$addr;
    $getter = 297;
    $setter = 298;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet9DailyInfoEvE3getEv() | 0;
    $0 = $fieldName$addr;
    $call2 = __ZN10emscripten8internal6TypeIDIhvE3getEv() | 0;
    $1 = $getter;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $2 = $getter;
    $call4 =
      __ZN10emscripten8internal10getContextIMN6Packet9DailyInfoEhEEPT_RKS5_(
        $field$addr
      ) | 0;
    $call5 = __ZN10emscripten8internal6TypeIDIhvE3getEv() | 0;
    $3 = $setter;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $4 = $setter;
    $call7 =
      __ZN10emscripten8internal10getContextIMN6Packet9DailyInfoEhEEPT_RKS5_(
        $field$addr
      ) | 0;
    __embind_register_value_object_field(
      $call | 0,
      $0 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      $call5 | 0,
      $call$i$i9 | 0,
      $4 | 0,
      $call7 | 0
    );
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN6Packet9DailyInfoEED2Ev($this) {
    $this = $this | 0;
    var $call = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $this1 = $this$addr;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet9DailyInfoEvE3getEv() | 0;
    __embind_finalize_value_object($call | 0);
    __ZN10emscripten8internal11noncopyableD2Ev($this1);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten12value_objectIN6Packet12PushSettingsEEC2EPKc(
    $this,
    $name
  ) {
    $this = $this | 0;
    $name = $name | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $ctor = 0,
      $dtor = 0,
      $name$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $this1 = $this$addr;
    __ZN10emscripten8internal11noncopyableC2Ev($this1);
    $ctor = 299;
    $dtor = 300;
    $call =
      __ZN10emscripten8internal6TypeIDIN6Packet12PushSettingsEvE3getEv() | 0;
    $0 = $name$addr;
    $1 = $ctor;
    $$addr$i = $1;
    $call$i$i = __ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv() | 0;
    $2 = $ctor;
    $3 = $dtor;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() | 0;
    $4 = $dtor;
    __embind_register_value_object(
      $call | 0,
      $0 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call$i$i9 | 0,
      $4 | 0
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten12value_objectIN6Packet12PushSettingsEE5fieldIS2_hEERS3_PKcMT_T0_(
    $this,
    $fieldName,
    $field
  ) {
    $this = $this | 0;
    $fieldName = $fieldName | 0;
    $field = $field | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $field$addr = 0,
      $fieldName$addr = 0,
      $getter = 0,
      $setter = 0,
      $this$addr = 0,
      $this1 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $field$addr = (sp + 8) | 0;
    $this$addr = $this;
    $fieldName$addr = $fieldName;
    HEAP32[$field$addr >> 2] = $field;
    $this1 = $this$addr;
    $getter = 301;
    $setter = 302;
    $call =
      __ZN10emscripten8internal6TypeIDIN6Packet12PushSettingsEvE3getEv() | 0;
    $0 = $fieldName$addr;
    $call2 = __ZN10emscripten8internal6TypeIDIhvE3getEv() | 0;
    $1 = $getter;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $2 = $getter;
    $call4 =
      __ZN10emscripten8internal10getContextIMN6Packet12PushSettingsEhEEPT_RKS5_(
        $field$addr
      ) | 0;
    $call5 = __ZN10emscripten8internal6TypeIDIhvE3getEv() | 0;
    $3 = $setter;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $4 = $setter;
    $call7 =
      __ZN10emscripten8internal10getContextIMN6Packet12PushSettingsEhEEPT_RKS5_(
        $field$addr
      ) | 0;
    __embind_register_value_object_field(
      $call | 0,
      $0 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      $call5 | 0,
      $call$i$i9 | 0,
      $4 | 0,
      $call7 | 0
    );
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN6Packet12PushSettingsEED2Ev($this) {
    $this = $this | 0;
    var $call = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $this1 = $this$addr;
    $call =
      __ZN10emscripten8internal6TypeIDIN6Packet12PushSettingsEvE3getEv() | 0;
    __embind_finalize_value_object($call | 0);
    __ZN10emscripten8internal11noncopyableD2Ev($this1);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten12value_objectIN6Packet11JourneyInfoEEC2EPKc(
    $this,
    $name
  ) {
    $this = $this | 0;
    $name = $name | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $ctor = 0,
      $dtor = 0,
      $name$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $this1 = $this$addr;
    __ZN10emscripten8internal11noncopyableC2Ev($this1);
    $ctor = 303;
    $dtor = 304;
    $call =
      __ZN10emscripten8internal6TypeIDIN6Packet11JourneyInfoEvE3getEv() | 0;
    $0 = $name$addr;
    $1 = $ctor;
    $$addr$i = $1;
    $call$i$i = __ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv() | 0;
    $2 = $ctor;
    $3 = $dtor;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() | 0;
    $4 = $dtor;
    __embind_register_value_object(
      $call | 0,
      $0 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call$i$i9 | 0,
      $4 | 0
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten12value_objectIN6Packet11JourneyInfoEE5fieldIS2_tEERS3_PKcMT_T0_(
    $this,
    $fieldName,
    $field
  ) {
    $this = $this | 0;
    $fieldName = $fieldName | 0;
    $field = $field | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $field$addr = 0,
      $fieldName$addr = 0,
      $getter = 0,
      $setter = 0,
      $this$addr = 0,
      $this1 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $field$addr = (sp + 8) | 0;
    $this$addr = $this;
    $fieldName$addr = $fieldName;
    HEAP32[$field$addr >> 2] = $field;
    $this1 = $this$addr;
    $getter = 305;
    $setter = 306;
    $call =
      __ZN10emscripten8internal6TypeIDIN6Packet11JourneyInfoEvE3getEv() | 0;
    $0 = $fieldName$addr;
    $call2 = __ZN10emscripten8internal6TypeIDItvE3getEv() | 0;
    $1 = $getter;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $2 = $getter;
    $call4 =
      __ZN10emscripten8internal10getContextIMN6Packet11JourneyInfoEtEEPT_RKS5_(
        $field$addr
      ) | 0;
    $call5 = __ZN10emscripten8internal6TypeIDItvE3getEv() | 0;
    $3 = $setter;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $4 = $setter;
    $call7 =
      __ZN10emscripten8internal10getContextIMN6Packet11JourneyInfoEtEEPT_RKS5_(
        $field$addr
      ) | 0;
    __embind_register_value_object_field(
      $call | 0,
      $0 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      $call5 | 0,
      $call$i$i9 | 0,
      $4 | 0,
      $call7 | 0
    );
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN6Packet11JourneyInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
    $this,
    $fieldName,
    $field
  ) {
    $this = $this | 0;
    $fieldName = $fieldName | 0;
    $field = $field | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $field$addr = 0,
      $fieldName$addr = 0,
      $getter = 0,
      $setter = 0,
      $this$addr = 0,
      $this1 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $field$addr = (sp + 8) | 0;
    $this$addr = $this;
    $fieldName$addr = $fieldName;
    HEAP32[$field$addr >> 2] = $field;
    $this1 = $this$addr;
    $getter = 307;
    $setter = 308;
    $call =
      __ZN10emscripten8internal6TypeIDIN6Packet11JourneyInfoEvE3getEv() | 0;
    $0 = $fieldName$addr;
    $call2 = __ZN10emscripten8internal6TypeIDIhvE3getEv() | 0;
    $1 = $getter;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $2 = $getter;
    $call4 =
      __ZN10emscripten8internal10getContextIMN6Packet11JourneyInfoEhEEPT_RKS5_(
        $field$addr
      ) | 0;
    $call5 = __ZN10emscripten8internal6TypeIDIhvE3getEv() | 0;
    $3 = $setter;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $4 = $setter;
    $call7 =
      __ZN10emscripten8internal10getContextIMN6Packet11JourneyInfoEhEEPT_RKS5_(
        $field$addr
      ) | 0;
    __embind_register_value_object_field(
      $call | 0,
      $0 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      $call5 | 0,
      $call$i$i9 | 0,
      $4 | 0,
      $call7 | 0
    );
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN6Packet11JourneyInfoEED2Ev($this) {
    $this = $this | 0;
    var $call = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $this1 = $this$addr;
    $call =
      __ZN10emscripten8internal6TypeIDIN6Packet11JourneyInfoEvE3getEv() | 0;
    __embind_finalize_value_object($call | 0);
    __ZN10emscripten8internal11noncopyableD2Ev($this1);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten12value_objectIN6Packet12DistanceInfoEEC2EPKc(
    $this,
    $name
  ) {
    $this = $this | 0;
    $name = $name | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $ctor = 0,
      $dtor = 0,
      $name$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $this1 = $this$addr;
    __ZN10emscripten8internal11noncopyableC2Ev($this1);
    $ctor = 309;
    $dtor = 310;
    $call =
      __ZN10emscripten8internal6TypeIDIN6Packet12DistanceInfoEvE3getEv() | 0;
    $0 = $name$addr;
    $1 = $ctor;
    $$addr$i = $1;
    $call$i$i = __ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv() | 0;
    $2 = $ctor;
    $3 = $dtor;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() | 0;
    $4 = $dtor;
    __embind_register_value_object(
      $call | 0,
      $0 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call$i$i9 | 0,
      $4 | 0
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten12value_objectIN6Packet12DistanceInfoEE5fieldIS2_yEERS3_PKcMT_T0_(
    $this,
    $fieldName,
    $field
  ) {
    $this = $this | 0;
    $fieldName = $fieldName | 0;
    $field = $field | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $field$addr = 0,
      $fieldName$addr = 0,
      $getter = 0,
      $setter = 0,
      $this$addr = 0,
      $this1 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $field$addr = (sp + 8) | 0;
    $this$addr = $this;
    $fieldName$addr = $fieldName;
    HEAP32[$field$addr >> 2] = $field;
    $this1 = $this$addr;
    $getter = 311;
    $setter = 312;
    $call =
      __ZN10emscripten8internal6TypeIDIN6Packet12DistanceInfoEvE3getEv() | 0;
    $0 = $fieldName$addr;
    $call2 = __ZN10emscripten8internal6TypeIDIyvE3getEv() | 0;
    $1 = $getter;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $2 = $getter;
    $call4 =
      __ZN10emscripten8internal10getContextIMN6Packet12DistanceInfoEyEEPT_RKS5_(
        $field$addr
      ) | 0;
    $call5 = __ZN10emscripten8internal6TypeIDIyvE3getEv() | 0;
    $3 = $setter;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $4 = $setter;
    $call7 =
      __ZN10emscripten8internal10getContextIMN6Packet12DistanceInfoEyEEPT_RKS5_(
        $field$addr
      ) | 0;
    __embind_register_value_object_field(
      $call | 0,
      $0 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      $call5 | 0,
      $call$i$i9 | 0,
      $4 | 0,
      $call7 | 0
    );
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN6Packet12DistanceInfoEED2Ev($this) {
    $this = $this | 0;
    var $call = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $this1 = $this$addr;
    $call =
      __ZN10emscripten8internal6TypeIDIN6Packet12DistanceInfoEvE3getEv() | 0;
    __embind_finalize_value_object($call | 0);
    __ZN10emscripten8internal11noncopyableD2Ev($this1);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten12value_objectIN6Packet9MotorInfoEEC2EPKc(
    $this,
    $name
  ) {
    $this = $this | 0;
    $name = $name | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $ctor = 0,
      $dtor = 0,
      $name$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $this1 = $this$addr;
    __ZN10emscripten8internal11noncopyableC2Ev($this1);
    $ctor = 313;
    $dtor = 314;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet9MotorInfoEvE3getEv() | 0;
    $0 = $name$addr;
    $1 = $ctor;
    $$addr$i = $1;
    $call$i$i = __ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv() | 0;
    $2 = $ctor;
    $3 = $dtor;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() | 0;
    $4 = $dtor;
    __embind_register_value_object(
      $call | 0,
      $0 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call$i$i9 | 0,
      $4 | 0
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten12value_objectIN6Packet9MotorInfoEE5fieldIS2_N5Motor5StateEEERS3_PKcMT_T0_(
    $this,
    $fieldName,
    $field
  ) {
    $this = $this | 0;
    $fieldName = $fieldName | 0;
    $field = $field | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $field$addr = 0,
      $fieldName$addr = 0,
      $getter = 0,
      $setter = 0,
      $this$addr = 0,
      $this1 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $field$addr = (sp + 8) | 0;
    $this$addr = $this;
    $fieldName$addr = $fieldName;
    HEAP32[$field$addr >> 2] = $field;
    $this1 = $this$addr;
    $getter = 315;
    $setter = 316;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet9MotorInfoEvE3getEv() | 0;
    $0 = $fieldName$addr;
    $call2 = __ZN10emscripten8internal6TypeIDIN5Motor5StateEvE3getEv() | 0;
    $1 = $getter;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $2 = $getter;
    $call4 =
      __ZN10emscripten8internal10getContextIMN6Packet9MotorInfoEN5Motor5StateEEEPT_RKS7_(
        $field$addr
      ) | 0;
    $call5 = __ZN10emscripten8internal6TypeIDIN5Motor5StateEvE3getEv() | 0;
    $3 = $setter;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $4 = $setter;
    $call7 =
      __ZN10emscripten8internal10getContextIMN6Packet9MotorInfoEN5Motor5StateEEEPT_RKS7_(
        $field$addr
      ) | 0;
    __embind_register_value_object_field(
      $call | 0,
      $0 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      $call5 | 0,
      $call$i$i9 | 0,
      $4 | 0,
      $call7 | 0
    );
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN6Packet9MotorInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
    $this,
    $fieldName,
    $field
  ) {
    $this = $this | 0;
    $fieldName = $fieldName | 0;
    $field = $field | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $field$addr = 0,
      $fieldName$addr = 0,
      $getter = 0,
      $setter = 0,
      $this$addr = 0,
      $this1 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $field$addr = (sp + 8) | 0;
    $this$addr = $this;
    $fieldName$addr = $fieldName;
    HEAP32[$field$addr >> 2] = $field;
    $this1 = $this$addr;
    $getter = 317;
    $setter = 318;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet9MotorInfoEvE3getEv() | 0;
    $0 = $fieldName$addr;
    $call2 = __ZN10emscripten8internal6TypeIDIhvE3getEv() | 0;
    $1 = $getter;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $2 = $getter;
    $call4 =
      __ZN10emscripten8internal10getContextIMN6Packet9MotorInfoEhEEPT_RKS5_(
        $field$addr
      ) | 0;
    $call5 = __ZN10emscripten8internal6TypeIDIhvE3getEv() | 0;
    $3 = $setter;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $4 = $setter;
    $call7 =
      __ZN10emscripten8internal10getContextIMN6Packet9MotorInfoEhEEPT_RKS5_(
        $field$addr
      ) | 0;
    __embind_register_value_object_field(
      $call | 0,
      $0 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      $call5 | 0,
      $call$i$i9 | 0,
      $4 | 0,
      $call7 | 0
    );
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN6Packet9MotorInfoEE5fieldIS2_fEERS3_PKcMT_T0_(
    $this,
    $fieldName,
    $field
  ) {
    $this = $this | 0;
    $fieldName = $fieldName | 0;
    $field = $field | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $field$addr = 0,
      $fieldName$addr = 0,
      $getter = 0,
      $setter = 0,
      $this$addr = 0,
      $this1 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $field$addr = (sp + 8) | 0;
    $this$addr = $this;
    $fieldName$addr = $fieldName;
    HEAP32[$field$addr >> 2] = $field;
    $this1 = $this$addr;
    $getter = 319;
    $setter = 320;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet9MotorInfoEvE3getEv() | 0;
    $0 = $fieldName$addr;
    $call2 = __ZN10emscripten8internal6TypeIDIfvE3getEv() | 0;
    $1 = $getter;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJfiiEEEPKcv() | 0;
    $2 = $getter;
    $call4 =
      __ZN10emscripten8internal10getContextIMN6Packet9MotorInfoEfEEPT_RKS5_(
        $field$addr
      ) | 0;
    $call5 = __ZN10emscripten8internal6TypeIDIfvE3getEv() | 0;
    $3 = $setter;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviifEEEPKcv() | 0;
    $4 = $setter;
    $call7 =
      __ZN10emscripten8internal10getContextIMN6Packet9MotorInfoEfEEPT_RKS5_(
        $field$addr
      ) | 0;
    __embind_register_value_object_field(
      $call | 0,
      $0 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      $call5 | 0,
      $call$i$i9 | 0,
      $4 | 0,
      $call7 | 0
    );
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN6Packet9MotorInfoEED2Ev($this) {
    $this = $this | 0;
    var $call = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $this1 = $this$addr;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet9MotorInfoEvE3getEv() | 0;
    __embind_finalize_value_object($call | 0);
    __ZN10emscripten8internal11noncopyableD2Ev($this1);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten12value_objectIN6Packet8TimeInfoEEC2EPKc(
    $this,
    $name
  ) {
    $this = $this | 0;
    $name = $name | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $ctor = 0,
      $dtor = 0,
      $name$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $this1 = $this$addr;
    __ZN10emscripten8internal11noncopyableC2Ev($this1);
    $ctor = 321;
    $dtor = 322;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet8TimeInfoEvE3getEv() | 0;
    $0 = $name$addr;
    $1 = $ctor;
    $$addr$i = $1;
    $call$i$i = __ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv() | 0;
    $2 = $ctor;
    $3 = $dtor;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() | 0;
    $4 = $dtor;
    __embind_register_value_object(
      $call | 0,
      $0 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call$i$i9 | 0,
      $4 | 0
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten12value_objectIN6Packet8TimeInfoEE5fieldIS2_tEERS3_PKcMT_T0_(
    $this,
    $fieldName,
    $field
  ) {
    $this = $this | 0;
    $fieldName = $fieldName | 0;
    $field = $field | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $field$addr = 0,
      $fieldName$addr = 0,
      $getter = 0,
      $setter = 0,
      $this$addr = 0,
      $this1 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $field$addr = (sp + 8) | 0;
    $this$addr = $this;
    $fieldName$addr = $fieldName;
    HEAP32[$field$addr >> 2] = $field;
    $this1 = $this$addr;
    $getter = 323;
    $setter = 324;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet8TimeInfoEvE3getEv() | 0;
    $0 = $fieldName$addr;
    $call2 = __ZN10emscripten8internal6TypeIDItvE3getEv() | 0;
    $1 = $getter;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $2 = $getter;
    $call4 =
      __ZN10emscripten8internal10getContextIMN6Packet8TimeInfoEtEEPT_RKS5_(
        $field$addr
      ) | 0;
    $call5 = __ZN10emscripten8internal6TypeIDItvE3getEv() | 0;
    $3 = $setter;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $4 = $setter;
    $call7 =
      __ZN10emscripten8internal10getContextIMN6Packet8TimeInfoEtEEPT_RKS5_(
        $field$addr
      ) | 0;
    __embind_register_value_object_field(
      $call | 0,
      $0 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      $call5 | 0,
      $call$i$i9 | 0,
      $4 | 0,
      $call7 | 0
    );
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN6Packet8TimeInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
    $this,
    $fieldName,
    $field
  ) {
    $this = $this | 0;
    $fieldName = $fieldName | 0;
    $field = $field | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $field$addr = 0,
      $fieldName$addr = 0,
      $getter = 0,
      $setter = 0,
      $this$addr = 0,
      $this1 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $field$addr = (sp + 8) | 0;
    $this$addr = $this;
    $fieldName$addr = $fieldName;
    HEAP32[$field$addr >> 2] = $field;
    $this1 = $this$addr;
    $getter = 325;
    $setter = 326;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet8TimeInfoEvE3getEv() | 0;
    $0 = $fieldName$addr;
    $call2 = __ZN10emscripten8internal6TypeIDIhvE3getEv() | 0;
    $1 = $getter;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $2 = $getter;
    $call4 =
      __ZN10emscripten8internal10getContextIMN6Packet8TimeInfoEhEEPT_RKS5_(
        $field$addr
      ) | 0;
    $call5 = __ZN10emscripten8internal6TypeIDIhvE3getEv() | 0;
    $3 = $setter;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $4 = $setter;
    $call7 =
      __ZN10emscripten8internal10getContextIMN6Packet8TimeInfoEhEEPT_RKS5_(
        $field$addr
      ) | 0;
    __embind_register_value_object_field(
      $call | 0,
      $0 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      $call5 | 0,
      $call$i$i9 | 0,
      $4 | 0,
      $call7 | 0
    );
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN6Packet8TimeInfoEED2Ev($this) {
    $this = $this | 0;
    var $call = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $this1 = $this$addr;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet8TimeInfoEvE3getEv() | 0;
    __embind_finalize_value_object($call | 0);
    __ZN10emscripten8internal11noncopyableD2Ev($this1);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten12value_objectIN6Packet9ErrorInfoEEC2EPKc(
    $this,
    $name
  ) {
    $this = $this | 0;
    $name = $name | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $ctor = 0,
      $dtor = 0,
      $name$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $this1 = $this$addr;
    __ZN10emscripten8internal11noncopyableC2Ev($this1);
    $ctor = 327;
    $dtor = 328;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet9ErrorInfoEvE3getEv() | 0;
    $0 = $name$addr;
    $1 = $ctor;
    $$addr$i = $1;
    $call$i$i = __ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv() | 0;
    $2 = $ctor;
    $3 = $dtor;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() | 0;
    $4 = $dtor;
    __embind_register_value_object(
      $call | 0,
      $0 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call$i$i9 | 0,
      $4 | 0
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten12value_objectIN6Packet9ErrorInfoEE5fieldIS2_tEERS3_PKcMT_T0_(
    $this,
    $fieldName,
    $field
  ) {
    $this = $this | 0;
    $fieldName = $fieldName | 0;
    $field = $field | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $field$addr = 0,
      $fieldName$addr = 0,
      $getter = 0,
      $setter = 0,
      $this$addr = 0,
      $this1 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $field$addr = (sp + 8) | 0;
    $this$addr = $this;
    $fieldName$addr = $fieldName;
    HEAP32[$field$addr >> 2] = $field;
    $this1 = $this$addr;
    $getter = 329;
    $setter = 330;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet9ErrorInfoEvE3getEv() | 0;
    $0 = $fieldName$addr;
    $call2 = __ZN10emscripten8internal6TypeIDItvE3getEv() | 0;
    $1 = $getter;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $2 = $getter;
    $call4 =
      __ZN10emscripten8internal10getContextIMN6Packet9ErrorInfoEtEEPT_RKS5_(
        $field$addr
      ) | 0;
    $call5 = __ZN10emscripten8internal6TypeIDItvE3getEv() | 0;
    $3 = $setter;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $4 = $setter;
    $call7 =
      __ZN10emscripten8internal10getContextIMN6Packet9ErrorInfoEtEEPT_RKS5_(
        $field$addr
      ) | 0;
    __embind_register_value_object_field(
      $call | 0,
      $0 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      $call5 | 0,
      $call$i$i9 | 0,
      $4 | 0,
      $call7 | 0
    );
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN6Packet9ErrorInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
    $this,
    $fieldName,
    $field
  ) {
    $this = $this | 0;
    $fieldName = $fieldName | 0;
    $field = $field | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $field$addr = 0,
      $fieldName$addr = 0,
      $getter = 0,
      $setter = 0,
      $this$addr = 0,
      $this1 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $field$addr = (sp + 8) | 0;
    $this$addr = $this;
    $fieldName$addr = $fieldName;
    HEAP32[$field$addr >> 2] = $field;
    $this1 = $this$addr;
    $getter = 331;
    $setter = 332;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet9ErrorInfoEvE3getEv() | 0;
    $0 = $fieldName$addr;
    $call2 = __ZN10emscripten8internal6TypeIDIhvE3getEv() | 0;
    $1 = $getter;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $2 = $getter;
    $call4 =
      __ZN10emscripten8internal10getContextIMN6Packet9ErrorInfoEhEEPT_RKS5_(
        $field$addr
      ) | 0;
    $call5 = __ZN10emscripten8internal6TypeIDIhvE3getEv() | 0;
    $3 = $setter;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $4 = $setter;
    $call7 =
      __ZN10emscripten8internal10getContextIMN6Packet9ErrorInfoEhEEPT_RKS5_(
        $field$addr
      ) | 0;
    __embind_register_value_object_field(
      $call | 0,
      $0 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      $call5 | 0,
      $call$i$i9 | 0,
      $4 | 0,
      $call7 | 0
    );
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN6Packet9ErrorInfoEE5fieldIS2_N10SmartDrive5ErrorEEERS3_PKcMT_T0_(
    $this,
    $fieldName,
    $field
  ) {
    $this = $this | 0;
    $fieldName = $fieldName | 0;
    $field = $field | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $field$addr = 0,
      $fieldName$addr = 0,
      $getter = 0,
      $setter = 0,
      $this$addr = 0,
      $this1 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $field$addr = (sp + 8) | 0;
    $this$addr = $this;
    $fieldName$addr = $fieldName;
    HEAP32[$field$addr >> 2] = $field;
    $this1 = $this$addr;
    $getter = 333;
    $setter = 334;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet9ErrorInfoEvE3getEv() | 0;
    $0 = $fieldName$addr;
    $call2 =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive5ErrorEvE3getEv() | 0;
    $1 = $getter;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $2 = $getter;
    $call4 =
      __ZN10emscripten8internal10getContextIMN6Packet9ErrorInfoEN10SmartDrive5ErrorEEEPT_RKS7_(
        $field$addr
      ) | 0;
    $call5 =
      __ZN10emscripten8internal6TypeIDIN10SmartDrive5ErrorEvE3getEv() | 0;
    $3 = $setter;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $4 = $setter;
    $call7 =
      __ZN10emscripten8internal10getContextIMN6Packet9ErrorInfoEN10SmartDrive5ErrorEEEPT_RKS7_(
        $field$addr
      ) | 0;
    __embind_register_value_object_field(
      $call | 0,
      $0 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      $call5 | 0,
      $call$i$i9 | 0,
      $4 | 0,
      $call7 | 0
    );
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN6Packet9ErrorInfoEED2Ev($this) {
    $this = $this | 0;
    var $call = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $this1 = $this$addr;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet9ErrorInfoEvE3getEv() | 0;
    __embind_finalize_value_object($call | 0);
    __ZN10emscripten8internal11noncopyableD2Ev($this1);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten12value_objectIN6Packet10DeviceInfoEEC2EPKc(
    $this,
    $name
  ) {
    $this = $this | 0;
    $name = $name | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $ctor = 0,
      $dtor = 0,
      $name$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $this1 = $this$addr;
    __ZN10emscripten8internal11noncopyableC2Ev($this1);
    $ctor = 335;
    $dtor = 336;
    $call =
      __ZN10emscripten8internal6TypeIDIN6Packet10DeviceInfoEvE3getEv() | 0;
    $0 = $name$addr;
    $1 = $ctor;
    $$addr$i = $1;
    $call$i$i = __ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv() | 0;
    $2 = $ctor;
    $3 = $dtor;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() | 0;
    $4 = $dtor;
    __embind_register_value_object(
      $call | 0,
      $0 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call$i$i9 | 0,
      $4 | 0
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten12value_objectIN6Packet10DeviceInfoEE5fieldIS2_NS1_6DeviceEEERS3_PKcMT_T0_(
    $this,
    $fieldName,
    $field
  ) {
    $this = $this | 0;
    $fieldName = $fieldName | 0;
    $field = $field | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $field$addr = 0,
      $fieldName$addr = 0,
      $getter = 0,
      $setter = 0,
      $this$addr = 0,
      $this1 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $field$addr = (sp + 8) | 0;
    $this$addr = $this;
    $fieldName$addr = $fieldName;
    HEAP32[$field$addr >> 2] = $field;
    $this1 = $this$addr;
    $getter = 337;
    $setter = 338;
    $call =
      __ZN10emscripten8internal6TypeIDIN6Packet10DeviceInfoEvE3getEv() | 0;
    $0 = $fieldName$addr;
    $call2 = __ZN10emscripten8internal6TypeIDIN6Packet6DeviceEvE3getEv() | 0;
    $1 = $getter;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $2 = $getter;
    $call4 =
      __ZN10emscripten8internal10getContextIMN6Packet10DeviceInfoENS2_6DeviceEEEPT_RKS6_(
        $field$addr
      ) | 0;
    $call5 = __ZN10emscripten8internal6TypeIDIN6Packet6DeviceEvE3getEv() | 0;
    $3 = $setter;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $4 = $setter;
    $call7 =
      __ZN10emscripten8internal10getContextIMN6Packet10DeviceInfoENS2_6DeviceEEEPT_RKS6_(
        $field$addr
      ) | 0;
    __embind_register_value_object_field(
      $call | 0,
      $0 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      $call5 | 0,
      $call$i$i9 | 0,
      $4 | 0,
      $call7 | 0
    );
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN6Packet10DeviceInfoEE5fieldIS2_hEERS3_PKcMT_T0_(
    $this,
    $fieldName,
    $field
  ) {
    $this = $this | 0;
    $fieldName = $fieldName | 0;
    $field = $field | 0;
    var $$addr$i = 0,
      $$addr$i8 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call = 0,
      $call$i$i = 0,
      $call$i$i9 = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $field$addr = 0,
      $fieldName$addr = 0,
      $getter = 0,
      $setter = 0,
      $this$addr = 0,
      $this1 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $field$addr = (sp + 8) | 0;
    $this$addr = $this;
    $fieldName$addr = $fieldName;
    HEAP32[$field$addr >> 2] = $field;
    $this1 = $this$addr;
    $getter = 339;
    $setter = 340;
    $call =
      __ZN10emscripten8internal6TypeIDIN6Packet10DeviceInfoEvE3getEv() | 0;
    $0 = $fieldName$addr;
    $call2 = __ZN10emscripten8internal6TypeIDIhvE3getEv() | 0;
    $1 = $getter;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $2 = $getter;
    $call4 =
      __ZN10emscripten8internal10getContextIMN6Packet10DeviceInfoEhEEPT_RKS5_(
        $field$addr
      ) | 0;
    $call5 = __ZN10emscripten8internal6TypeIDIhvE3getEv() | 0;
    $3 = $setter;
    $$addr$i8 = $3;
    $call$i$i9 =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $4 = $setter;
    $call7 =
      __ZN10emscripten8internal10getContextIMN6Packet10DeviceInfoEhEEPT_RKS5_(
        $field$addr
      ) | 0;
    __embind_register_value_object_field(
      $call | 0,
      $0 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      $call5 | 0,
      $call$i$i9 | 0,
      $4 | 0,
      $call7 | 0
    );
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten12value_objectIN6Packet10DeviceInfoEED2Ev($this) {
    $this = $this | 0;
    var $call = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $this1 = $this$addr;
    $call =
      __ZN10emscripten8internal6TypeIDIN6Packet10DeviceInfoEvE3getEv() | 0;
    __embind_finalize_value_object($call | 0);
    __ZN10emscripten8internal11noncopyableD2Ev($this1);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten5enum_IN6Packet7CommandEEC2EPKc($this, $name) {
    $this = $this | 0;
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $name$addr = 0,
      $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet7CommandEvE3getEv() | 0;
    $0 = $name$addr;
    __embind_register_enum($call | 0, $0 | 0, 1, 0);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten5enum_IN6Packet7CommandEE5valueEPKcS2_(
    $this,
    $name,
    $value
  ) {
    $this = $this | 0;
    $name = $name | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $conv = 0,
      $name$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $value$addr = $value;
    $this1 = $this$addr;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet7CommandEvE3getEv() | 0;
    $0 = $name$addr;
    $1 = $value$addr;
    $conv = $1 & 255;
    __embind_register_enum_value($call | 0, $0 | 0, $conv | 0);
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten5enum_IN6Packet3OTAEEC2EPKc($this, $name) {
    $this = $this | 0;
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $name$addr = 0,
      $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet3OTAEvE3getEv() | 0;
    $0 = $name$addr;
    __embind_register_enum($call | 0, $0 | 0, 1, 0);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten5enum_IN6Packet3OTAEE5valueEPKcS2_(
    $this,
    $name,
    $value
  ) {
    $this = $this | 0;
    $name = $name | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $conv = 0,
      $name$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $value$addr = $value;
    $this1 = $this$addr;
    $call = __ZN10emscripten8internal6TypeIDIN6Packet3OTAEvE3getEv() | 0;
    $0 = $name$addr;
    $1 = $value$addr;
    $conv = $1 & 255;
    __embind_register_enum_value($call | 0, $0 | 0, $conv | 0);
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN10emscripten5enum_IN10SmartDrive5ErrorEEC2EPKc($this, $name) {
    $this = $this | 0;
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $name$addr = 0,
      $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDIN10SmartDrive5ErrorEvE3getEv() | 0;
    $0 = $name$addr;
    __embind_register_enum($call | 0, $0 | 0, 1, 0);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten5enum_IN10SmartDrive5ErrorEE5valueEPKcS2_(
    $this,
    $name,
    $value
  ) {
    $this = $this | 0;
    $name = $name | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $conv = 0,
      $name$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $name$addr = $name;
    $value$addr = $value;
    $this1 = $this$addr;
    $call = __ZN10emscripten8internal6TypeIDIN10SmartDrive5ErrorEvE3getEv() | 0;
    $0 = $name$addr;
    $1 = $value$addr;
    $conv = $1 & 255;
    __embind_register_enum_value($call | 0, $0 | 0, $conv | 0);
    STACKTOP = sp;
    return $this1 | 0;
  }
  function __ZN6Packet5validEv($this) {
    $this = $this | 0;
    var $0 = 0,
      $_valid = 0,
      $this$addr = 0,
      $this1 = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $this1 = $this$addr;
    $_valid = ($this1 + 24) | 0;
    $0 = HEAP8[$_valid >> 0] | 0;
    $tobool = $0 & 1;
    STACKTOP = sp;
    return $tobool | 0;
  }
  function __ZN6Packet13processPacketENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(
    $this,
    $rawData
  ) {
    $this = $this | 0;
    $rawData = $rawData | 0;
    var $$expand_i1_val = 0,
      $$expand_i1_val2 = 0,
      $$expand_i1_val4 = 0,
      $$pre_trunc = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0;
    var $23 = 0,
      $24 = 0,
      $25 = 0,
      $26 = 0,
      $27 = 0,
      $28 = 0,
      $29 = 0,
      $3 = 0,
      $30 = 0,
      $31 = 0,
      $32 = 0,
      $33 = 0,
      $34 = 0,
      $35 = 0,
      $36 = 0,
      $37 = 0,
      $38 = 0,
      $39 = 0,
      $4 = 0,
      $40 = 0;
    var $41 = 0,
      $42 = 0,
      $43 = 0,
      $44 = 0,
      $45 = 0,
      $46 = 0,
      $47 = 0,
      $48 = 0,
      $49 = 0,
      $5 = 0,
      $50 = 0,
      $51 = 0,
      $52 = 0,
      $53 = 0,
      $54 = 0,
      $55 = 0,
      $56 = 0,
      $57 = 0,
      $58 = 0,
      $6 = 0;
    var $7 = 0,
      $8 = 0,
      $9 = 0,
      $__pos$addr$i = 0,
      $__pos$addr$i127 = 0,
      $__pos$addr$i173 = 0,
      $__pos$addr$i35 = 0,
      $__pos$addr$i81 = 0,
      $__r$addr$i$i$i$i = 0,
      $__r$addr$i$i$i$i118 = 0,
      $__r$addr$i$i$i$i164 = 0,
      $__r$addr$i$i$i$i26 = 0,
      $__r$addr$i$i$i$i72 = 0,
      $__size_$i23$i = 0,
      $__x$addr$i$i$i$i$i = 0,
      $__x$addr$i$i$i$i$i117 = 0,
      $__x$addr$i$i$i$i$i163 = 0,
      $__x$addr$i$i$i$i$i25 = 0,
      $__x$addr$i$i$i$i$i71 = 0,
      $add = 0;
    var $add$ptr$i = 0,
      $add$ptr$i112 = 0,
      $add$ptr$i158 = 0,
      $add$ptr$i204 = 0,
      $add$ptr$i66 = 0,
      $and$i$i = 0,
      $and$i$i$i = 0,
      $and$i$i$i138 = 0,
      $and$i$i$i184 = 0,
      $and$i$i$i46 = 0,
      $and$i$i$i92 = 0,
      $arrayidx = 0,
      $cmp = 0,
      $cmp12 = 0,
      $cmp2 = 0,
      $cond$i = 0,
      $cond$i$i = 0,
      $cond$i$i111 = 0,
      $cond$i$i157 = 0,
      $cond$i$i203 = 0;
    var $cond$i$i65 = 0,
      $conv$i$i = 0,
      $conv$i$i$i = 0,
      $conv$i$i$i137 = 0,
      $conv$i$i$i183 = 0,
      $conv$i$i$i45 = 0,
      $conv$i$i$i91 = 0,
      $conv$i14$i = 0,
      $dataIndex = 0,
      $i = 0,
      $inc = 0,
      $or$cond = 0,
      $retval = 0,
      $size = 0,
      $sub = 0,
      $subTypeIndex = 0,
      $this$addr = 0,
      $this$addr$i = 0,
      $this$addr$i$i = 0,
      $this$addr$i$i$i = 0;
    var $this$addr$i$i$i$i = 0,
      $this$addr$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i122 = 0,
      $this$addr$i$i$i$i$i168 = 0,
      $this$addr$i$i$i$i$i30 = 0,
      $this$addr$i$i$i$i$i76 = 0,
      $this$addr$i$i$i$i123 = 0,
      $this$addr$i$i$i$i14 = 0,
      $this$addr$i$i$i$i169 = 0,
      $this$addr$i$i$i$i31 = 0,
      $this$addr$i$i$i$i77 = 0,
      $this$addr$i$i$i124 = 0,
      $this$addr$i$i$i13$i$i = 0,
      $this$addr$i$i$i13$i$i114 = 0,
      $this$addr$i$i$i13$i$i160 = 0,
      $this$addr$i$i$i13$i$i22 = 0,
      $this$addr$i$i$i13$i$i68 = 0,
      $this$addr$i$i$i15 = 0,
      $this$addr$i$i$i15$i = 0,
      $this$addr$i$i$i170 = 0;
    var $this$addr$i$i$i32 = 0,
      $this$addr$i$i$i4$i = 0,
      $this$addr$i$i$i4$i$i = 0,
      $this$addr$i$i$i4$i$i119 = 0,
      $this$addr$i$i$i4$i$i165 = 0,
      $this$addr$i$i$i4$i$i27 = 0,
      $this$addr$i$i$i4$i$i73 = 0,
      $this$addr$i$i$i78 = 0,
      $this$addr$i$i125 = 0,
      $this$addr$i$i14$i$i = 0,
      $this$addr$i$i14$i$i115 = 0,
      $this$addr$i$i14$i$i161 = 0,
      $this$addr$i$i14$i$i23 = 0,
      $this$addr$i$i14$i$i69 = 0,
      $this$addr$i$i16 = 0,
      $this$addr$i$i16$i = 0,
      $this$addr$i$i171 = 0,
      $this$addr$i$i33 = 0,
      $this$addr$i$i5$i = 0,
      $this$addr$i$i5$i$i = 0;
    var $this$addr$i$i5$i$i120 = 0,
      $this$addr$i$i5$i$i166 = 0,
      $this$addr$i$i5$i$i28 = 0,
      $this$addr$i$i5$i$i74 = 0,
      $this$addr$i$i79 = 0,
      $this$addr$i126 = 0,
      $this$addr$i15$i$i = 0,
      $this$addr$i15$i$i116 = 0,
      $this$addr$i15$i$i162 = 0,
      $this$addr$i15$i$i24 = 0,
      $this$addr$i15$i$i70 = 0,
      $this$addr$i17 = 0,
      $this$addr$i17$i = 0,
      $this$addr$i172 = 0,
      $this$addr$i34 = 0,
      $this$addr$i6$i = 0,
      $this$addr$i6$i$i = 0,
      $this$addr$i6$i$i121 = 0,
      $this$addr$i6$i$i167 = 0,
      $this$addr$i6$i$i29 = 0;
    var $this$addr$i6$i$i75 = 0,
      $this$addr$i80 = 0,
      $this1 = 0,
      $this1$i = 0,
      $this1$i$i = 0,
      $this1$i$i$i = 0,
      $this1$i$i$i$i = 0,
      $this1$i$i$i$i$i = 0,
      $this1$i$i$i$i$i133 = 0,
      $this1$i$i$i$i$i179 = 0,
      $this1$i$i$i$i$i41 = 0,
      $this1$i$i$i$i$i87 = 0,
      $this1$i$i$i$i132 = 0,
      $this1$i$i$i$i178 = 0,
      $this1$i$i$i$i21 = 0,
      $this1$i$i$i$i40 = 0,
      $this1$i$i$i$i86 = 0,
      $this1$i$i$i10$i = 0,
      $this1$i$i$i10$i$i = 0,
      $this1$i$i$i10$i$i105 = 0;
    var $this1$i$i$i10$i$i151 = 0,
      $this1$i$i$i10$i$i197 = 0,
      $this1$i$i$i10$i$i59 = 0,
      $this1$i$i$i130 = 0,
      $this1$i$i$i176 = 0,
      $this1$i$i$i19$i$i = 0,
      $this1$i$i$i19$i$i143 = 0,
      $this1$i$i$i19$i$i189 = 0,
      $this1$i$i$i19$i$i51 = 0,
      $this1$i$i$i19$i$i97 = 0,
      $this1$i$i$i20 = 0,
      $this1$i$i$i21$i = 0,
      $this1$i$i$i38 = 0,
      $this1$i$i$i84 = 0,
      $this1$i$i129 = 0,
      $this1$i$i175 = 0,
      $this1$i$i18$i$i = 0,
      $this1$i$i18$i$i142 = 0,
      $this1$i$i18$i$i188 = 0,
      $this1$i$i18$i$i50 = 0;
    var $this1$i$i18$i$i96 = 0,
      $this1$i$i19 = 0,
      $this1$i$i20$i = 0,
      $this1$i$i37 = 0,
      $this1$i$i83 = 0,
      $this1$i$i9$i = 0,
      $this1$i$i9$i$i = 0,
      $this1$i$i9$i$i104 = 0,
      $this1$i$i9$i$i150 = 0,
      $this1$i$i9$i$i196 = 0,
      $this1$i$i9$i$i58 = 0,
      $this1$i128 = 0,
      $this1$i16$i$i = 0,
      $this1$i16$i$i140 = 0,
      $this1$i16$i$i186 = 0,
      $this1$i16$i$i48 = 0,
      $this1$i16$i$i94 = 0,
      $this1$i174 = 0,
      $this1$i18 = 0,
      $this1$i18$i = 0;
    var $this1$i36 = 0,
      $this1$i7$i = 0,
      $this1$i7$i$i = 0,
      $this1$i7$i$i102 = 0,
      $this1$i7$i$i148 = 0,
      $this1$i7$i$i194 = 0,
      $this1$i7$i$i56 = 0,
      $this1$i82 = 0,
      $tobool$i$i = 0,
      $tobool$i$i$i = 0,
      $tobool$i$i$i139 = 0,
      $tobool$i$i$i185 = 0,
      $tobool$i$i$i47 = 0,
      $tobool$i$i$i93 = 0,
      $type = 0,
      $type4 = 0,
      $typeIndex = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 352) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352 | 0);
    $retval = (sp + 344) | 0;
    $this$addr = $this;
    $this1 = $this$addr;
    $this$addr$i = $rawData;
    $this1$i = $this$addr$i;
    $this$addr$i$i = $this1$i;
    $this1$i$i = $this$addr$i$i;
    $this$addr$i$i$i = $this1$i$i;
    $this1$i$i$i = $this$addr$i$i$i;
    $this$addr$i$i$i$i = $this1$i$i$i;
    $this1$i$i$i$i = $this$addr$i$i$i$i;
    $0 = ($this1$i$i$i$i + 11) | 0;
    $1 = HEAP8[$0 >> 0] | 0;
    $conv$i$i = $1 & 255;
    $and$i$i = $conv$i$i & 128;
    $tobool$i$i = ($and$i$i | 0) != 0;
    if ($tobool$i$i) {
      $this$addr$i17$i = $this1$i;
      $this1$i18$i = $this$addr$i17$i;
      $this$addr$i$i16$i = $this1$i18$i;
      $this1$i$i20$i = $this$addr$i$i16$i;
      $this$addr$i$i$i15$i = $this1$i$i20$i;
      $this1$i$i$i21$i = $this$addr$i$i$i15$i;
      $__size_$i23$i = ($this1$i$i$i21$i + 4) | 0;
      $2 = HEAP32[$__size_$i23$i >> 2] | 0;
      $cond$i = $2;
    } else {
      $this$addr$i6$i = $this1$i;
      $this1$i7$i = $this$addr$i6$i;
      $this$addr$i$i5$i = $this1$i7$i;
      $this1$i$i9$i = $this$addr$i$i5$i;
      $this$addr$i$i$i4$i = $this1$i$i9$i;
      $this1$i$i$i10$i = $this$addr$i$i$i4$i;
      $3 = ($this1$i$i$i10$i + 11) | 0;
      $4 = HEAP8[$3 >> 0] | 0;
      $conv$i14$i = $4 & 255;
      $cond$i = $conv$i14$i;
    }
    $size = $cond$i;
    $5 = $size;
    $cmp = ($5 | 0) < 2;
    $6 = $size;
    $cmp2 = ($6 | 0) > 18;
    $or$cond = $cmp | $cmp2;
    if ($or$cond) {
      $$expand_i1_val = 0;
      HEAP8[$retval >> 0] = $$expand_i1_val;
      $$pre_trunc = HEAP8[$retval >> 0] | 0;
      $58 = $$pre_trunc & 1;
      STACKTOP = sp;
      return $58 | 0;
    }
    $dataIndex = 2;
    $subTypeIndex = 1;
    $typeIndex = 0;
    $7 = $typeIndex;
    $this$addr$i172 = $rawData;
    $__pos$addr$i173 = $7;
    $this1$i174 = $this$addr$i172;
    $this$addr$i$i171 = $this1$i174;
    $this1$i$i175 = $this$addr$i$i171;
    $this$addr$i$i$i170 = $this1$i$i175;
    $this1$i$i$i176 = $this$addr$i$i$i170;
    $this$addr$i$i$i$i169 = $this1$i$i$i176;
    $this1$i$i$i$i178 = $this$addr$i$i$i$i169;
    $this$addr$i$i$i$i$i168 = $this1$i$i$i$i178;
    $this1$i$i$i$i$i179 = $this$addr$i$i$i$i$i168;
    $8 = ($this1$i$i$i$i$i179 + 11) | 0;
    $9 = HEAP8[$8 >> 0] | 0;
    $conv$i$i$i183 = $9 & 255;
    $and$i$i$i184 = $conv$i$i$i183 & 128;
    $tobool$i$i$i185 = ($and$i$i$i184 | 0) != 0;
    if ($tobool$i$i$i185) {
      $this$addr$i15$i$i162 = $this1$i$i175;
      $this1$i16$i$i186 = $this$addr$i15$i$i162;
      $this$addr$i$i14$i$i161 = $this1$i16$i$i186;
      $this1$i$i18$i$i188 = $this$addr$i$i14$i$i161;
      $this$addr$i$i$i13$i$i160 = $this1$i$i18$i$i188;
      $this1$i$i$i19$i$i189 = $this$addr$i$i$i13$i$i160;
      $10 = HEAP32[$this1$i$i$i19$i$i189 >> 2] | 0;
      $cond$i$i203 = $10;
    } else {
      $this$addr$i6$i$i167 = $this1$i$i175;
      $this1$i7$i$i194 = $this$addr$i6$i$i167;
      $this$addr$i$i5$i$i166 = $this1$i7$i$i194;
      $this1$i$i9$i$i196 = $this$addr$i$i5$i$i166;
      $this$addr$i$i$i4$i$i165 = $this1$i$i9$i$i196;
      $this1$i$i$i10$i$i197 = $this$addr$i$i$i4$i$i165;
      $__r$addr$i$i$i$i164 = $this1$i$i$i10$i$i197;
      $11 = $__r$addr$i$i$i$i164;
      $__x$addr$i$i$i$i$i163 = $11;
      $12 = $__x$addr$i$i$i$i$i163;
      $cond$i$i203 = $12;
    }
    $13 = $__pos$addr$i173;
    $add$ptr$i204 = ($cond$i$i203 + $13) | 0;
    $14 = HEAP8[$add$ptr$i204 >> 0] | 0;
    $type = ($this1 + 4) | 0;
    HEAP8[$type >> 0] = $14;
    $type4 = ($this1 + 4) | 0;
    $15 = HEAP8[$type4 >> 0] | 0;
    switch (($15 << 24) >> 24) {
      case 1: {
        $16 = $subTypeIndex;
        $this$addr$i126 = $rawData;
        $__pos$addr$i127 = $16;
        $this1$i128 = $this$addr$i126;
        $this$addr$i$i125 = $this1$i128;
        $this1$i$i129 = $this$addr$i$i125;
        $this$addr$i$i$i124 = $this1$i$i129;
        $this1$i$i$i130 = $this$addr$i$i$i124;
        $this$addr$i$i$i$i123 = $this1$i$i$i130;
        $this1$i$i$i$i132 = $this$addr$i$i$i$i123;
        $this$addr$i$i$i$i$i122 = $this1$i$i$i$i132;
        $this1$i$i$i$i$i133 = $this$addr$i$i$i$i$i122;
        $17 = ($this1$i$i$i$i$i133 + 11) | 0;
        $18 = HEAP8[$17 >> 0] | 0;
        $conv$i$i$i137 = $18 & 255;
        $and$i$i$i138 = $conv$i$i$i137 & 128;
        $tobool$i$i$i139 = ($and$i$i$i138 | 0) != 0;
        if ($tobool$i$i$i139) {
          $this$addr$i15$i$i116 = $this1$i$i129;
          $this1$i16$i$i140 = $this$addr$i15$i$i116;
          $this$addr$i$i14$i$i115 = $this1$i16$i$i140;
          $this1$i$i18$i$i142 = $this$addr$i$i14$i$i115;
          $this$addr$i$i$i13$i$i114 = $this1$i$i18$i$i142;
          $this1$i$i$i19$i$i143 = $this$addr$i$i$i13$i$i114;
          $19 = HEAP32[$this1$i$i$i19$i$i143 >> 2] | 0;
          $cond$i$i157 = $19;
        } else {
          $this$addr$i6$i$i121 = $this1$i$i129;
          $this1$i7$i$i148 = $this$addr$i6$i$i121;
          $this$addr$i$i5$i$i120 = $this1$i7$i$i148;
          $this1$i$i9$i$i150 = $this$addr$i$i5$i$i120;
          $this$addr$i$i$i4$i$i119 = $this1$i$i9$i$i150;
          $this1$i$i$i10$i$i151 = $this$addr$i$i$i4$i$i119;
          $__r$addr$i$i$i$i118 = $this1$i$i$i10$i$i151;
          $20 = $__r$addr$i$i$i$i118;
          $__x$addr$i$i$i$i$i117 = $20;
          $21 = $__x$addr$i$i$i$i$i117;
          $cond$i$i157 = $21;
        }
        $22 = $__pos$addr$i127;
        $add$ptr$i158 = ($cond$i$i157 + $22) | 0;
        $23 = HEAP8[$add$ptr$i158 >> 0] | 0;
        $24 = ($this1 + 5) | 0;
        HEAP8[$24 >> 0] = $23;
        break;
      }
      case 2: {
        $25 = $subTypeIndex;
        $this$addr$i80 = $rawData;
        $__pos$addr$i81 = $25;
        $this1$i82 = $this$addr$i80;
        $this$addr$i$i79 = $this1$i82;
        $this1$i$i83 = $this$addr$i$i79;
        $this$addr$i$i$i78 = $this1$i$i83;
        $this1$i$i$i84 = $this$addr$i$i$i78;
        $this$addr$i$i$i$i77 = $this1$i$i$i84;
        $this1$i$i$i$i86 = $this$addr$i$i$i$i77;
        $this$addr$i$i$i$i$i76 = $this1$i$i$i$i86;
        $this1$i$i$i$i$i87 = $this$addr$i$i$i$i$i76;
        $26 = ($this1$i$i$i$i$i87 + 11) | 0;
        $27 = HEAP8[$26 >> 0] | 0;
        $conv$i$i$i91 = $27 & 255;
        $and$i$i$i92 = $conv$i$i$i91 & 128;
        $tobool$i$i$i93 = ($and$i$i$i92 | 0) != 0;
        if ($tobool$i$i$i93) {
          $this$addr$i15$i$i70 = $this1$i$i83;
          $this1$i16$i$i94 = $this$addr$i15$i$i70;
          $this$addr$i$i14$i$i69 = $this1$i16$i$i94;
          $this1$i$i18$i$i96 = $this$addr$i$i14$i$i69;
          $this$addr$i$i$i13$i$i68 = $this1$i$i18$i$i96;
          $this1$i$i$i19$i$i97 = $this$addr$i$i$i13$i$i68;
          $28 = HEAP32[$this1$i$i$i19$i$i97 >> 2] | 0;
          $cond$i$i111 = $28;
        } else {
          $this$addr$i6$i$i75 = $this1$i$i83;
          $this1$i7$i$i102 = $this$addr$i6$i$i75;
          $this$addr$i$i5$i$i74 = $this1$i7$i$i102;
          $this1$i$i9$i$i104 = $this$addr$i$i5$i$i74;
          $this$addr$i$i$i4$i$i73 = $this1$i$i9$i$i104;
          $this1$i$i$i10$i$i105 = $this$addr$i$i$i4$i$i73;
          $__r$addr$i$i$i$i72 = $this1$i$i$i10$i$i105;
          $29 = $__r$addr$i$i$i$i72;
          $__x$addr$i$i$i$i$i71 = $29;
          $30 = $__x$addr$i$i$i$i$i71;
          $cond$i$i111 = $30;
        }
        $31 = $__pos$addr$i81;
        $add$ptr$i112 = ($cond$i$i111 + $31) | 0;
        $32 = HEAP8[$add$ptr$i112 >> 0] | 0;
        $33 = ($this1 + 5) | 0;
        HEAP8[$33 >> 0] = $32;
        break;
      }
      case 3: {
        $34 = $subTypeIndex;
        $this$addr$i34 = $rawData;
        $__pos$addr$i35 = $34;
        $this1$i36 = $this$addr$i34;
        $this$addr$i$i33 = $this1$i36;
        $this1$i$i37 = $this$addr$i$i33;
        $this$addr$i$i$i32 = $this1$i$i37;
        $this1$i$i$i38 = $this$addr$i$i$i32;
        $this$addr$i$i$i$i31 = $this1$i$i$i38;
        $this1$i$i$i$i40 = $this$addr$i$i$i$i31;
        $this$addr$i$i$i$i$i30 = $this1$i$i$i$i40;
        $this1$i$i$i$i$i41 = $this$addr$i$i$i$i$i30;
        $35 = ($this1$i$i$i$i$i41 + 11) | 0;
        $36 = HEAP8[$35 >> 0] | 0;
        $conv$i$i$i45 = $36 & 255;
        $and$i$i$i46 = $conv$i$i$i45 & 128;
        $tobool$i$i$i47 = ($and$i$i$i46 | 0) != 0;
        if ($tobool$i$i$i47) {
          $this$addr$i15$i$i24 = $this1$i$i37;
          $this1$i16$i$i48 = $this$addr$i15$i$i24;
          $this$addr$i$i14$i$i23 = $this1$i16$i$i48;
          $this1$i$i18$i$i50 = $this$addr$i$i14$i$i23;
          $this$addr$i$i$i13$i$i22 = $this1$i$i18$i$i50;
          $this1$i$i$i19$i$i51 = $this$addr$i$i$i13$i$i22;
          $37 = HEAP32[$this1$i$i$i19$i$i51 >> 2] | 0;
          $cond$i$i65 = $37;
        } else {
          $this$addr$i6$i$i29 = $this1$i$i37;
          $this1$i7$i$i56 = $this$addr$i6$i$i29;
          $this$addr$i$i5$i$i28 = $this1$i7$i$i56;
          $this1$i$i9$i$i58 = $this$addr$i$i5$i$i28;
          $this$addr$i$i$i4$i$i27 = $this1$i$i9$i$i58;
          $this1$i$i$i10$i$i59 = $this$addr$i$i$i4$i$i27;
          $__r$addr$i$i$i$i26 = $this1$i$i$i10$i$i59;
          $38 = $__r$addr$i$i$i$i26;
          $__x$addr$i$i$i$i$i25 = $38;
          $39 = $__x$addr$i$i$i$i$i25;
          $cond$i$i65 = $39;
        }
        $40 = $__pos$addr$i35;
        $add$ptr$i66 = ($cond$i$i65 + $40) | 0;
        $41 = HEAP8[$add$ptr$i66 >> 0] | 0;
        $42 = ($this1 + 5) | 0;
        HEAP8[$42 >> 0] = $41;
        break;
      }
      case 4: {
        break;
      }
      default: {
        $$expand_i1_val2 = 0;
        HEAP8[$retval >> 0] = $$expand_i1_val2;
        $$pre_trunc = HEAP8[$retval >> 0] | 0;
        $58 = $$pre_trunc & 1;
        STACKTOP = sp;
        return $58 | 0;
      }
    }
    $43 = $size;
    $sub = ($43 - 2) | 0;
    HEAP32[$this1 >> 2] = $sub;
    $i = 0;
    while (1) {
      $44 = $i;
      $45 = HEAP32[$this1 >> 2] | 0;
      $cmp12 = ($44 | 0) < ($45 | 0);
      if (!$cmp12) {
        break;
      }
      $46 = $dataIndex;
      $47 = $i;
      $add = ($46 + $47) | 0;
      $this$addr$i17 = $rawData;
      $__pos$addr$i = $add;
      $this1$i18 = $this$addr$i17;
      $this$addr$i$i16 = $this1$i18;
      $this1$i$i19 = $this$addr$i$i16;
      $this$addr$i$i$i15 = $this1$i$i19;
      $this1$i$i$i20 = $this$addr$i$i$i15;
      $this$addr$i$i$i$i14 = $this1$i$i$i20;
      $this1$i$i$i$i21 = $this$addr$i$i$i$i14;
      $this$addr$i$i$i$i$i = $this1$i$i$i$i21;
      $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
      $48 = ($this1$i$i$i$i$i + 11) | 0;
      $49 = HEAP8[$48 >> 0] | 0;
      $conv$i$i$i = $49 & 255;
      $and$i$i$i = $conv$i$i$i & 128;
      $tobool$i$i$i = ($and$i$i$i | 0) != 0;
      if ($tobool$i$i$i) {
        $this$addr$i15$i$i = $this1$i$i19;
        $this1$i16$i$i = $this$addr$i15$i$i;
        $this$addr$i$i14$i$i = $this1$i16$i$i;
        $this1$i$i18$i$i = $this$addr$i$i14$i$i;
        $this$addr$i$i$i13$i$i = $this1$i$i18$i$i;
        $this1$i$i$i19$i$i = $this$addr$i$i$i13$i$i;
        $50 = HEAP32[$this1$i$i$i19$i$i >> 2] | 0;
        $cond$i$i = $50;
      } else {
        $this$addr$i6$i$i = $this1$i$i19;
        $this1$i7$i$i = $this$addr$i6$i$i;
        $this$addr$i$i5$i$i = $this1$i7$i$i;
        $this1$i$i9$i$i = $this$addr$i$i5$i$i;
        $this$addr$i$i$i4$i$i = $this1$i$i9$i$i;
        $this1$i$i$i10$i$i = $this$addr$i$i$i4$i$i;
        $__r$addr$i$i$i$i = $this1$i$i$i10$i$i;
        $51 = $__r$addr$i$i$i$i;
        $__x$addr$i$i$i$i$i = $51;
        $52 = $__x$addr$i$i$i$i$i;
        $cond$i$i = $52;
      }
      $53 = $__pos$addr$i;
      $add$ptr$i = ($cond$i$i + $53) | 0;
      $54 = HEAP8[$add$ptr$i >> 0] | 0;
      $55 = ($this1 + 8) | 0;
      $56 = $i;
      $arrayidx = ($55 + $56) | 0;
      HEAP8[$arrayidx >> 0] = $54;
      $57 = $i;
      $inc = ($57 + 1) | 0;
      $i = $inc;
    }
    $$expand_i1_val4 = 1;
    HEAP8[$retval >> 0] = $$expand_i1_val4;
    $$pre_trunc = HEAP8[$retval >> 0] | 0;
    $58 = $$pre_trunc & 1;
    STACKTOP = sp;
    return $58 | 0;
  }
  function __ZN6Packet9newPacketEv($this) {
    $this = $this | 0;
    var $_valid = 0,
      $this$addr = 0,
      $this1 = 0,
      $type = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $this1 = $this$addr;
    HEAP32[$this1 >> 2] = 0;
    $_valid = ($this1 + 24) | 0;
    HEAP8[$_valid >> 0] = 0;
    $type = ($this1 + 4) | 0;
    HEAP8[$type >> 0] = 0;
    STACKTOP = sp;
    return;
  }
  function __ZN6Packet6formatEv($agg$result, $this) {
    $agg$result = $agg$result | 0;
    $this = $this | 0;
    var $$addr$i$i = 0,
      $$addr$i$i$i = 0,
      $$addr$i$i174 = 0,
      $$addr$i$i227 = 0,
      $$addr$i$i280 = 0,
      $$addr$i$i333 = 0,
      $$addr$i$i377 = 0,
      $$addr1$i$i = 0,
      $$addr1$i$i$i = 0,
      $$addr1$i$i175 = 0,
      $$addr1$i$i228 = 0,
      $$addr1$i$i281 = 0,
      $$addr1$i$i334 = 0,
      $$addr1$i$i378 = 0,
      $$addr2$i$i$i = 0,
      $$addr3$i$i$i = 0,
      $$expand_i1_val = 0,
      $$expand_i1_val2 = 0,
      $0 = 0,
      $1 = 0;
    var $10 = 0,
      $100 = 0,
      $101 = 0,
      $102 = 0,
      $103 = 0,
      $104 = 0,
      $105 = 0,
      $106 = 0,
      $107 = 0,
      $108 = 0,
      $109 = 0,
      $11 = 0,
      $110 = 0,
      $111 = 0,
      $112 = 0,
      $113 = 0,
      $114 = 0,
      $115 = 0,
      $116 = 0,
      $117 = 0;
    var $118 = 0,
      $119 = 0,
      $12 = 0,
      $120 = 0,
      $121 = 0,
      $122 = 0,
      $123 = 0,
      $124 = 0,
      $125 = 0,
      $126 = 0,
      $127 = 0,
      $128 = 0,
      $129 = 0,
      $13 = 0,
      $130 = 0,
      $131 = 0,
      $132 = 0,
      $133 = 0,
      $134 = 0,
      $135 = 0;
    var $136 = 0,
      $137 = 0,
      $138 = 0,
      $139 = 0,
      $14 = 0,
      $140 = 0,
      $141 = 0,
      $142 = 0,
      $143 = 0,
      $144 = 0,
      $145 = 0,
      $146 = 0,
      $147 = 0,
      $148 = 0,
      $149 = 0,
      $15 = 0,
      $150 = 0,
      $151 = 0,
      $152 = 0,
      $153 = 0;
    var $154 = 0,
      $155 = 0,
      $156 = 0,
      $157 = 0,
      $158 = 0,
      $159 = 0,
      $16 = 0,
      $160 = 0,
      $161 = 0,
      $162 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0,
      $23 = 0,
      $24 = 0,
      $25 = 0;
    var $26 = 0,
      $27 = 0,
      $28 = 0,
      $29 = 0,
      $3 = 0,
      $30 = 0,
      $31 = 0,
      $32 = 0,
      $33 = 0,
      $34 = 0,
      $35 = 0,
      $36 = 0,
      $37 = 0,
      $38 = 0,
      $39 = 0,
      $4 = 0,
      $40 = 0,
      $41 = 0,
      $42 = 0,
      $43 = 0;
    var $44 = 0,
      $45 = 0,
      $46 = 0,
      $47 = 0,
      $48 = 0,
      $49 = 0,
      $5 = 0,
      $50 = 0,
      $51 = 0,
      $52 = 0,
      $53 = 0,
      $54 = 0,
      $55 = 0,
      $56 = 0,
      $57 = 0,
      $58 = 0,
      $59 = 0,
      $6 = 0,
      $60 = 0,
      $61 = 0;
    var $62 = 0,
      $63 = 0,
      $64 = 0,
      $65 = 0,
      $66 = 0,
      $67 = 0,
      $68 = 0,
      $69 = 0,
      $7 = 0,
      $70 = 0,
      $71 = 0,
      $72 = 0,
      $73 = 0,
      $74 = 0,
      $75 = 0,
      $76 = 0,
      $77 = 0,
      $78 = 0,
      $79 = 0,
      $8 = 0;
    var $80 = 0,
      $81 = 0,
      $82 = 0,
      $83 = 0,
      $84 = 0,
      $85 = 0,
      $86 = 0,
      $87 = 0,
      $88 = 0,
      $89 = 0,
      $9 = 0,
      $90 = 0,
      $91 = 0,
      $92 = 0,
      $93 = 0,
      $94 = 0,
      $95 = 0,
      $96 = 0,
      $97 = 0,
      $98 = 0;
    var $99 = 0,
      $__a$addr$i$i = 0,
      $__a$addr$i$i$i = 0,
      $__a$addr$i$i$i161 = 0,
      $__a$addr$i$i$i214 = 0,
      $__a$addr$i$i$i267 = 0,
      $__a$addr$i$i$i320 = 0,
      $__a$addr$i$i$i367 = 0,
      $__a$addr$i$i166 = 0,
      $__a$addr$i$i219 = 0,
      $__a$addr$i$i272 = 0,
      $__a$addr$i$i325 = 0,
      $__a$addr$i$i372 = 0,
      $__annotator$i = 0,
      $__annotator$i181 = 0,
      $__annotator$i234 = 0,
      $__annotator$i287 = 0,
      $__annotator$i340 = 0,
      $__annotator$i384 = 0,
      $__args$addr$i$i = 0;
    var $__args$addr$i$i$i = 0,
      $__args$addr$i$i$i$i = 0,
      $__args$addr$i$i$i$i159 = 0,
      $__args$addr$i$i$i$i212 = 0,
      $__args$addr$i$i$i$i265 = 0,
      $__args$addr$i$i$i$i318 = 0,
      $__args$addr$i$i$i$i365 = 0,
      $__args$addr$i$i$i163 = 0,
      $__args$addr$i$i$i216 = 0,
      $__args$addr$i$i$i269 = 0,
      $__args$addr$i$i$i322 = 0,
      $__args$addr$i$i$i369 = 0,
      $__args$addr$i$i168 = 0,
      $__args$addr$i$i221 = 0,
      $__args$addr$i$i274 = 0,
      $__args$addr$i$i327 = 0,
      $__args$addr$i$i374 = 0,
      $__end_$i = 0,
      $__end_$i$i = 0,
      $__end_$i$i$i = 0;
    var $__end_$i183 = 0,
      $__end_$i236 = 0,
      $__end_$i289 = 0,
      $__end_$i342 = 0,
      $__end_$i386 = 0,
      $__end_3$i = 0,
      $__end_3$i195 = 0,
      $__end_3$i248 = 0,
      $__end_3$i301 = 0,
      $__end_3$i354 = 0,
      $__end_3$i394 = 0,
      $__end_5$i = 0,
      $__end_6$i = 0,
      $__end_6$i198 = 0,
      $__end_6$i251 = 0,
      $__end_6$i304 = 0,
      $__end_6$i357 = 0,
      $__end_cap_$i$i = 0,
      $__end_cap_$i$i$i$i$i = 0,
      $__end_cap_$i$i$i32$i$i = 0;
    var $__end_cap_$i$i185 = 0,
      $__end_cap_$i$i238 = 0,
      $__end_cap_$i$i291 = 0,
      $__end_cap_$i$i344 = 0,
      $__end_cap_$i$i388 = 0,
      $__end_cap_$i$i77 = 0,
      $__end_cap_$i16$i = 0,
      $__end_cap_$i19$i = 0,
      $__end_cap_$i19$i192 = 0,
      $__end_cap_$i19$i245 = 0,
      $__end_cap_$i19$i298 = 0,
      $__end_cap_$i19$i351 = 0,
      $__p$addr$i$i = 0,
      $__p$addr$i$i$i = 0,
      $__p$addr$i$i$i$i = 0,
      $__p$addr$i$i$i$i158 = 0,
      $__p$addr$i$i$i$i211 = 0,
      $__p$addr$i$i$i$i264 = 0,
      $__p$addr$i$i$i$i317 = 0,
      $__p$addr$i$i$i$i364 = 0;
    var $__p$addr$i$i$i$i67 = 0,
      $__p$addr$i$i$i162 = 0,
      $__p$addr$i$i$i215 = 0,
      $__p$addr$i$i$i268 = 0,
      $__p$addr$i$i$i321 = 0,
      $__p$addr$i$i$i368 = 0,
      $__p$addr$i$i13$i$i = 0,
      $__p$addr$i$i167 = 0,
      $__p$addr$i$i20$i$i = 0,
      $__p$addr$i$i220 = 0,
      $__p$addr$i$i273 = 0,
      $__p$addr$i$i326 = 0,
      $__p$addr$i$i373 = 0,
      $__p$addr$i$i40$i$i = 0,
      $__p$addr$i11$i = 0,
      $__p$addr$i14$i = 0,
      $__p$addr$i14$i154 = 0,
      $__p$addr$i14$i207 = 0,
      $__p$addr$i14$i260 = 0,
      $__p$addr$i14$i313 = 0;
    var $__t$addr$i$i = 0,
      $__t$addr$i$i$i = 0,
      $__t$addr$i$i$i$i = 0,
      $__t$addr$i$i$i$i$i = 0,
      $__t$addr$i$i$i$i$i156 = 0,
      $__t$addr$i$i$i$i$i209 = 0,
      $__t$addr$i$i$i$i$i262 = 0,
      $__t$addr$i$i$i$i$i315 = 0,
      $__t$addr$i$i$i$i$i363 = 0,
      $__t$addr$i$i$i$i$i66 = 0,
      $__t$addr$i$i$i$i160 = 0,
      $__t$addr$i$i$i$i213 = 0,
      $__t$addr$i$i$i$i266 = 0,
      $__t$addr$i$i$i$i319 = 0,
      $__t$addr$i$i$i$i366 = 0,
      $__t$addr$i$i$i$i68 = 0,
      $__t$addr$i$i$i165 = 0,
      $__t$addr$i$i$i218 = 0,
      $__t$addr$i$i$i271 = 0,
      $__t$addr$i$i$i324 = 0;
    var $__t$addr$i$i$i371 = 0,
      $__t$addr$i$i$i69 = 0,
      $__t$addr$i$i172 = 0,
      $__t$addr$i$i225 = 0,
      $__t$addr$i$i278 = 0,
      $__t$addr$i$i331 = 0,
      $__t$addr$i13$i = 0,
      $__t$addr$i13$i155 = 0,
      $__t$addr$i13$i208 = 0,
      $__t$addr$i13$i261 = 0,
      $__t$addr$i13$i314 = 0,
      $__u$addr$i$i$i$i = 0,
      $__x$addr$i = 0,
      $__x$addr$i180 = 0,
      $__x$addr$i233 = 0,
      $__x$addr$i286 = 0,
      $__x$addr$i339 = 0,
      $__x$addr$i383 = 0,
      $add = 0,
      $add$ptr$i$i = 0;
    var $add$ptr6$i$i = 0,
      $add$ptr9$i$i = 0,
      $agg$tmp$i$i = 0,
      $agg$tmp$i$i169 = 0,
      $agg$tmp$i$i222 = 0,
      $agg$tmp$i$i275 = 0,
      $agg$tmp$i$i328 = 0,
      $agg$tmp$i$i375 = 0,
      $agg$tmp1$i$i = 0,
      $agg$tmp1$i$i164 = 0,
      $agg$tmp1$i$i217 = 0,
      $agg$tmp1$i$i270 = 0,
      $agg$tmp1$i$i323 = 0,
      $agg$tmp1$i$i370 = 0,
      $arrayidx = 0,
      $cmp = 0,
      $cmp$i = 0,
      $cmp$i189 = 0,
      $cmp$i242 = 0,
      $cmp$i295 = 0;
    var $cmp$i348 = 0,
      $cmp$i392 = 0,
      $dataLen = 0,
      $i = 0,
      $inc = 0,
      $incdec$ptr$i = 0,
      $incdec$ptr$i199 = 0,
      $incdec$ptr$i252 = 0,
      $incdec$ptr$i305 = 0,
      $incdec$ptr$i358 = 0,
      $incdec$ptr$i395 = 0,
      $nrvo = 0,
      $nrvo$val = 0,
      $nrvo$val$pre_trunc = 0,
      $numBytes = 0,
      $ref$tmp = 0,
      $ref$tmp$i$i = 0,
      $ref$tmp21 = 0,
      $ref$tmp3 = 0,
      $ref$tmp47 = 0;
    var $ref$tmp50 = 0,
      $sub$ptr$lhs$cast$i$i$i = 0,
      $sub$ptr$lhs$cast$i$i$i$i = 0,
      $sub$ptr$lhs$cast$i$i37$i$i = 0,
      $sub$ptr$rhs$cast$i$i$i = 0,
      $sub$ptr$rhs$cast$i$i$i$i = 0,
      $sub$ptr$rhs$cast$i$i38$i$i = 0,
      $sub$ptr$sub$i$i$i = 0,
      $sub$ptr$sub$i$i$i$i = 0,
      $sub$ptr$sub$i$i39$i$i = 0,
      $this$addr = 0,
      $this$addr$i = 0,
      $this$addr$i$i = 0,
      $this$addr$i$i$i = 0,
      $this$addr$i$i$i$i = 0,
      $this$addr$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i24$i$i = 0,
      $this$addr$i$i$i$i$i56 = 0;
    var $this$addr$i$i$i$i176 = 0,
      $this$addr$i$i$i$i229 = 0,
      $this$addr$i$i$i$i25$i$i = 0,
      $this$addr$i$i$i$i282 = 0,
      $this$addr$i$i$i$i335 = 0,
      $this$addr$i$i$i$i379 = 0,
      $this$addr$i$i$i$i57 = 0,
      $this$addr$i$i$i$i71 = 0,
      $this$addr$i$i$i11$i = 0,
      $this$addr$i$i$i11$i157 = 0,
      $this$addr$i$i$i11$i210 = 0,
      $this$addr$i$i$i11$i263 = 0,
      $this$addr$i$i$i11$i316 = 0,
      $this$addr$i$i$i12$i = 0,
      $this$addr$i$i$i15$i = 0,
      $this$addr$i$i$i15$i151 = 0,
      $this$addr$i$i$i15$i204 = 0,
      $this$addr$i$i$i15$i257 = 0,
      $this$addr$i$i$i15$i310 = 0,
      $this$addr$i$i$i177 = 0;
    var $this$addr$i$i$i230 = 0,
      $this$addr$i$i$i26$i$i = 0,
      $this$addr$i$i$i283 = 0,
      $this$addr$i$i$i336 = 0,
      $this$addr$i$i$i380 = 0,
      $this$addr$i$i$i58 = 0,
      $this$addr$i$i$i72 = 0,
      $this$addr$i$i$i9$i = 0,
      $this$addr$i$i13$i = 0,
      $this$addr$i$i16$i = 0,
      $this$addr$i$i16$i152 = 0,
      $this$addr$i$i16$i205 = 0,
      $this$addr$i$i16$i258 = 0,
      $this$addr$i$i16$i311 = 0,
      $this$addr$i$i178 = 0,
      $this$addr$i$i231 = 0,
      $this$addr$i$i27$i$i = 0,
      $this$addr$i$i284 = 0,
      $this$addr$i$i337 = 0,
      $this$addr$i$i381 = 0;
    var $this$addr$i$i59 = 0,
      $this$addr$i$i73 = 0,
      $this$addr$i10$i$i = 0,
      $this$addr$i11$i$i = 0,
      $this$addr$i14$i = 0,
      $this$addr$i14$i$i = 0,
      $this$addr$i17$i = 0,
      $this$addr$i17$i$i = 0,
      $this$addr$i17$i153 = 0,
      $this$addr$i17$i206 = 0,
      $this$addr$i17$i259 = 0,
      $this$addr$i17$i312 = 0,
      $this$addr$i179 = 0,
      $this$addr$i2$i$i$i = 0,
      $this$addr$i21$i$i = 0,
      $this$addr$i232 = 0,
      $this$addr$i28$i$i = 0,
      $this$addr$i285 = 0,
      $this$addr$i3$i$i = 0,
      $this$addr$i338 = 0;
    var $this$addr$i382 = 0,
      $this$addr$i41$i$i = 0,
      $this$addr$i6$i = 0,
      $this$addr$i60 = 0,
      $this$addr$i7$i = 0,
      $this$addr$i74 = 0,
      $this$addr$i8$i = 0,
      $this$addr$i8$i173 = 0,
      $this$addr$i8$i226 = 0,
      $this$addr$i8$i279 = 0,
      $this$addr$i8$i332 = 0,
      $this$addr$i9$i = 0,
      $this$addr$i9$i171 = 0,
      $this$addr$i9$i224 = 0,
      $this$addr$i9$i277 = 0,
      $this$addr$i9$i330 = 0,
      $this1 = 0,
      $this1$i = 0,
      $this1$i$i = 0,
      $this1$i$i$i$i = 0;
    var $this1$i$i$i$i$i$i = 0,
      $this1$i$i$i$i$i$i$i = 0,
      $this1$i$i$i$i$i34$i$i = 0,
      $this1$i$i$i$i$i65 = 0,
      $this1$i$i$i$i187 = 0,
      $this1$i$i$i$i240 = 0,
      $this1$i$i$i$i293 = 0,
      $this1$i$i$i$i33$i$i = 0,
      $this1$i$i$i$i346 = 0,
      $this1$i$i$i$i390 = 0,
      $this1$i$i$i$i64 = 0,
      $this1$i$i$i$i79 = 0,
      $this1$i$i$i18$i = 0,
      $this1$i$i$i186 = 0,
      $this1$i$i$i21$i = 0,
      $this1$i$i$i21$i194 = 0,
      $this1$i$i$i21$i247 = 0,
      $this1$i$i$i21$i300 = 0,
      $this1$i$i$i21$i353 = 0,
      $this1$i$i$i239 = 0;
    var $this1$i$i$i292 = 0,
      $this1$i$i$i31$i$i = 0,
      $this1$i$i$i345 = 0,
      $this1$i$i$i389 = 0,
      $this1$i$i$i63 = 0,
      $this1$i$i$i78 = 0,
      $this1$i$i17$i = 0,
      $this1$i$i184 = 0,
      $this1$i$i20$i = 0,
      $this1$i$i20$i193 = 0,
      $this1$i$i20$i246 = 0,
      $this1$i$i20$i299 = 0,
      $this1$i$i20$i352 = 0,
      $this1$i$i237 = 0,
      $this1$i$i290 = 0,
      $this1$i$i30$i$i = 0,
      $this1$i$i343 = 0,
      $this1$i$i387 = 0,
      $this1$i$i62 = 0,
      $this1$i$i76 = 0;
    var $this1$i12$i$i = 0,
      $this1$i15$i = 0,
      $this1$i15$i$i = 0,
      $this1$i18$i = 0,
      $this1$i18$i$i = 0,
      $this1$i18$i191 = 0,
      $this1$i18$i244 = 0,
      $this1$i18$i297 = 0,
      $this1$i18$i350 = 0,
      $this1$i182 = 0,
      $this1$i22$i$i = 0,
      $this1$i235 = 0,
      $this1$i288 = 0,
      $this1$i29$i$i = 0,
      $this1$i3$i$i$i = 0,
      $this1$i341 = 0,
      $this1$i385 = 0,
      $this1$i4$i$i = 0,
      $this1$i42$i$i = 0,
      $this1$i61 = 0;
    var $this1$i75 = 0,
      $type = 0,
      $type2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 880) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(880 | 0);
    $agg$tmp1$i$i370 = (sp + 40) | 0;
    $agg$tmp$i$i375 = (sp + 869) | 0;
    $__annotator$i384 = (sp + 868) | 0;
    $agg$tmp1$i$i323 = (sp + 32) | 0;
    $agg$tmp$i$i328 = (sp + 867) | 0;
    $__annotator$i340 = (sp + 866) | 0;
    $agg$tmp1$i$i270 = (sp + 24) | 0;
    $agg$tmp$i$i275 = (sp + 865) | 0;
    $__annotator$i287 = (sp + 864) | 0;
    $agg$tmp1$i$i217 = (sp + 16) | 0;
    $agg$tmp$i$i222 = (sp + 863) | 0;
    $__annotator$i234 = (sp + 862) | 0;
    $agg$tmp1$i$i164 = (sp + 8) | 0;
    $agg$tmp$i$i169 = (sp + 861) | 0;
    $__annotator$i181 = (sp + 860) | 0;
    $agg$tmp1$i$i = sp;
    $agg$tmp$i$i = (sp + 859) | 0;
    $__annotator$i = (sp + 858) | 0;
    $ref$tmp$i$i = (sp + 64) | 0;
    $nrvo = (sp + 857) | 0;
    $ref$tmp = (sp + 856) | 0;
    $ref$tmp3 = (sp + 855) | 0;
    $ref$tmp21 = (sp + 854) | 0;
    $ref$tmp47 = (sp + 853) | 0;
    $ref$tmp50 = (sp + 852) | 0;
    $this$addr = $this;
    $this1 = $this$addr;
    $$expand_i1_val = 0;
    HEAP8[$nrvo >> 0] = $$expand_i1_val;
    $this$addr$i = $agg$result;
    $this1$i = $this$addr$i;
    $this$addr$i$i = $this1$i;
    $this1$i$i = $this$addr$i$i;
    $this$addr$i$i$i = $this1$i$i;
    HEAP32[$this1$i$i >> 2] = 0;
    $__end_$i$i = ($this1$i$i + 4) | 0;
    HEAP32[$__end_$i$i >> 2] = 0;
    $__end_cap_$i$i = ($this1$i$i + 8) | 0;
    HEAP32[$ref$tmp$i$i >> 2] = 0;
    $this$addr$i3$i$i = $__end_cap_$i$i;
    $__t$addr$i$i$i = $ref$tmp$i$i;
    $this1$i4$i$i = $this$addr$i3$i$i;
    $0 = $__t$addr$i$i$i;
    $__t$addr$i$i$i$i = $0;
    $1 = $__t$addr$i$i$i$i;
    $this$addr$i2$i$i$i = $this1$i4$i$i;
    $__u$addr$i$i$i$i = $1;
    $this1$i3$i$i$i = $this$addr$i2$i$i$i;
    $2 = $__u$addr$i$i$i$i;
    $__t$addr$i$i$i$i$i = $2;
    HEAP32[$this1$i3$i$i$i >> 2] = 0;
    $this$addr$i$i$i$i = $this1$i4$i$i;
    $this1$i$i$i$i = $this$addr$i$i$i$i;
    $this$addr$i$i$i$i$i = $this1$i$i$i$i;
    $numBytes = 2;
    $type = ($this1 + 4) | 0;
    $3 = HEAP8[$type >> 0] | 0;
    HEAP8[$ref$tmp >> 0] = $3;
    $this$addr$i74 = $agg$result;
    $__x$addr$i = $ref$tmp;
    $this1$i75 = $this$addr$i74;
    $__end_$i = ($this1$i75 + 4) | 0;
    $4 = HEAP32[$__end_$i >> 2] | 0;
    $this$addr$i$i73 = $this1$i75;
    $this1$i$i76 = $this$addr$i$i73;
    $__end_cap_$i$i77 = ($this1$i$i76 + 8) | 0;
    $this$addr$i$i$i72 = $__end_cap_$i$i77;
    $this1$i$i$i78 = $this$addr$i$i$i72;
    $this$addr$i$i$i$i71 = $this1$i$i$i78;
    $this1$i$i$i$i79 = $this$addr$i$i$i$i71;
    $5 = HEAP32[$this1$i$i$i$i79 >> 2] | 0;
    $cmp$i = $4 >>> 0 < $5 >>> 0;
    if ($cmp$i) {
      $this$addr$i8$i = $__annotator$i;
      $$addr$i$i = $this1$i75;
      $$addr1$i$i = 1;
      $this$addr$i17$i = $this1$i75;
      $this1$i18$i = $this$addr$i17$i;
      $__end_cap_$i19$i = ($this1$i18$i + 8) | 0;
      $this$addr$i$i16$i = $__end_cap_$i19$i;
      $this1$i$i20$i = $this$addr$i$i16$i;
      $this$addr$i$i$i15$i = $this1$i$i20$i;
      $this1$i$i$i21$i = $this$addr$i$i$i15$i;
      $__end_3$i = ($this1$i75 + 4) | 0;
      $6 = HEAP32[$__end_3$i >> 2] | 0;
      $__p$addr$i14$i = $6;
      $7 = $__p$addr$i14$i;
      $8 = $__x$addr$i;
      $__t$addr$i13$i = $8;
      $9 = $__t$addr$i13$i;
      $__a$addr$i$i = $this1$i$i$i21$i;
      $__p$addr$i$i = $7;
      $__args$addr$i$i = $9;
      $10 = $__a$addr$i$i;
      $11 = $__p$addr$i$i;
      $12 = $__args$addr$i$i;
      $__t$addr$i$i$i69 = $12;
      $13 = $__t$addr$i$i$i69;
      HEAP8[$agg$tmp1$i$i >> 0] = HEAP8[$agg$tmp$i$i >> 0] | 0;
      $__a$addr$i$i$i = $10;
      $__p$addr$i$i$i = $11;
      $__args$addr$i$i$i = $13;
      $14 = $__a$addr$i$i$i;
      $15 = $__p$addr$i$i$i;
      $16 = $__args$addr$i$i$i;
      $__t$addr$i$i$i$i68 = $16;
      $17 = $__t$addr$i$i$i$i68;
      $this$addr$i$i$i11$i = $14;
      $__p$addr$i$i$i$i67 = $15;
      $__args$addr$i$i$i$i = $17;
      $18 = $__p$addr$i$i$i$i67;
      $19 = $__args$addr$i$i$i$i;
      $__t$addr$i$i$i$i$i66 = $19;
      $20 = $__t$addr$i$i$i$i$i66;
      $21 = HEAP8[$20 >> 0] | 0;
      HEAP8[$18 >> 0] = $21;
      $this$addr$i9$i = $__annotator$i;
      $__end_6$i = ($this1$i75 + 4) | 0;
      $22 = HEAP32[$__end_6$i >> 2] | 0;
      $incdec$ptr$i = ($22 + 1) | 0;
      HEAP32[$__end_6$i >> 2] = $incdec$ptr$i;
    } else {
      $23 = $__x$addr$i;
      $__t$addr$i$i = $23;
      $24 = $__t$addr$i$i;
      __ZNSt3__26vectorIhNS_9allocatorIhEEE21__push_back_slow_pathIhEEvOT_(
        $this1$i75,
        $24
      );
    }
    $dataLen = 0;
    $type2 = ($this1 + 4) | 0;
    $25 = HEAP8[$type2 >> 0] | 0;
    L5: do {
      switch (($25 << 24) >> 24) {
        case 1: {
          $26 = ($this1 + 5) | 0;
          $27 = HEAP8[$26 >> 0] | 0;
          HEAP8[$ref$tmp3 >> 0] = $27;
          $this$addr$i179 = $agg$result;
          $__x$addr$i180 = $ref$tmp3;
          $this1$i182 = $this$addr$i179;
          $__end_$i183 = ($this1$i182 + 4) | 0;
          $28 = HEAP32[$__end_$i183 >> 2] | 0;
          $this$addr$i$i178 = $this1$i182;
          $this1$i$i184 = $this$addr$i$i178;
          $__end_cap_$i$i185 = ($this1$i$i184 + 8) | 0;
          $this$addr$i$i$i177 = $__end_cap_$i$i185;
          $this1$i$i$i186 = $this$addr$i$i$i177;
          $this$addr$i$i$i$i176 = $this1$i$i$i186;
          $this1$i$i$i$i187 = $this$addr$i$i$i$i176;
          $29 = HEAP32[$this1$i$i$i$i187 >> 2] | 0;
          $cmp$i189 = $28 >>> 0 < $29 >>> 0;
          if ($cmp$i189) {
            $this$addr$i8$i173 = $__annotator$i181;
            $$addr$i$i174 = $this1$i182;
            $$addr1$i$i175 = 1;
            $this$addr$i17$i153 = $this1$i182;
            $this1$i18$i191 = $this$addr$i17$i153;
            $__end_cap_$i19$i192 = ($this1$i18$i191 + 8) | 0;
            $this$addr$i$i16$i152 = $__end_cap_$i19$i192;
            $this1$i$i20$i193 = $this$addr$i$i16$i152;
            $this$addr$i$i$i15$i151 = $this1$i$i20$i193;
            $this1$i$i$i21$i194 = $this$addr$i$i$i15$i151;
            $__end_3$i195 = ($this1$i182 + 4) | 0;
            $30 = HEAP32[$__end_3$i195 >> 2] | 0;
            $__p$addr$i14$i154 = $30;
            $31 = $__p$addr$i14$i154;
            $32 = $__x$addr$i180;
            $__t$addr$i13$i155 = $32;
            $33 = $__t$addr$i13$i155;
            $__a$addr$i$i166 = $this1$i$i$i21$i194;
            $__p$addr$i$i167 = $31;
            $__args$addr$i$i168 = $33;
            $34 = $__a$addr$i$i166;
            $35 = $__p$addr$i$i167;
            $36 = $__args$addr$i$i168;
            $__t$addr$i$i$i165 = $36;
            $37 = $__t$addr$i$i$i165;
            HEAP8[$agg$tmp1$i$i164 >> 0] = HEAP8[$agg$tmp$i$i169 >> 0] | 0;
            $__a$addr$i$i$i161 = $34;
            $__p$addr$i$i$i162 = $35;
            $__args$addr$i$i$i163 = $37;
            $38 = $__a$addr$i$i$i161;
            $39 = $__p$addr$i$i$i162;
            $40 = $__args$addr$i$i$i163;
            $__t$addr$i$i$i$i160 = $40;
            $41 = $__t$addr$i$i$i$i160;
            $this$addr$i$i$i11$i157 = $38;
            $__p$addr$i$i$i$i158 = $39;
            $__args$addr$i$i$i$i159 = $41;
            $42 = $__p$addr$i$i$i$i158;
            $43 = $__args$addr$i$i$i$i159;
            $__t$addr$i$i$i$i$i156 = $43;
            $44 = $__t$addr$i$i$i$i$i156;
            $45 = HEAP8[$44 >> 0] | 0;
            HEAP8[$42 >> 0] = $45;
            $this$addr$i9$i171 = $__annotator$i181;
            $__end_6$i198 = ($this1$i182 + 4) | 0;
            $46 = HEAP32[$__end_6$i198 >> 2] | 0;
            $incdec$ptr$i199 = ($46 + 1) | 0;
            HEAP32[$__end_6$i198 >> 2] = $incdec$ptr$i199;
          } else {
            $47 = $__x$addr$i180;
            $__t$addr$i$i172 = $47;
            $48 = $__t$addr$i$i172;
            __ZNSt3__26vectorIhNS_9allocatorIhEEE21__push_back_slow_pathIhEEvOT_(
              $this1$i182,
              $48
            );
          }
          $49 = ($this1 + 5) | 0;
          $50 = HEAP8[$49 >> 0] | 0;
          do {
            switch (($50 << 24) >> 24) {
              case 0: {
                $dataLen = 16;
                break L5;
                break;
              }
              case 1: {
                $dataLen = 4;
                break L5;
                break;
              }
              case 2: {
                $dataLen = 4;
                break L5;
                break;
              }
              case 3: {
                $dataLen = 2;
                break L5;
                break;
              }
              case 4: {
                $dataLen = 1;
                break L5;
                break;
              }
              case 5: {
                $dataLen = 1;
                break L5;
                break;
              }
              case 6: {
                $dataLen = 3;
                break L5;
                break;
              }
              case 7: {
                $dataLen = 16;
                break L5;
                break;
              }
              case 8: {
                $dataLen = 4;
                break L5;
                break;
              }
              case 9: {
                $dataLen = 16;
                break L5;
                break;
              }
              case 10: {
                $dataLen = 2;
                break L5;
                break;
              }
              case 11: {
                $dataLen = 0;
                break L5;
                break;
              }
              case 12: {
                $dataLen = 14;
                break L5;
                break;
              }
              case 13: {
                $dataLen = 3;
                break L5;
                break;
              }
              default: {
                break L5;
              }
            }
          } while (0);
          break;
        }
        case 2: {
          $51 = ($this1 + 5) | 0;
          $52 = HEAP8[$51 >> 0] | 0;
          HEAP8[$ref$tmp21 >> 0] = $52;
          $this$addr$i232 = $agg$result;
          $__x$addr$i233 = $ref$tmp21;
          $this1$i235 = $this$addr$i232;
          $__end_$i236 = ($this1$i235 + 4) | 0;
          $53 = HEAP32[$__end_$i236 >> 2] | 0;
          $this$addr$i$i231 = $this1$i235;
          $this1$i$i237 = $this$addr$i$i231;
          $__end_cap_$i$i238 = ($this1$i$i237 + 8) | 0;
          $this$addr$i$i$i230 = $__end_cap_$i$i238;
          $this1$i$i$i239 = $this$addr$i$i$i230;
          $this$addr$i$i$i$i229 = $this1$i$i$i239;
          $this1$i$i$i$i240 = $this$addr$i$i$i$i229;
          $54 = HEAP32[$this1$i$i$i$i240 >> 2] | 0;
          $cmp$i242 = $53 >>> 0 < $54 >>> 0;
          if ($cmp$i242) {
            $this$addr$i8$i226 = $__annotator$i234;
            $$addr$i$i227 = $this1$i235;
            $$addr1$i$i228 = 1;
            $this$addr$i17$i206 = $this1$i235;
            $this1$i18$i244 = $this$addr$i17$i206;
            $__end_cap_$i19$i245 = ($this1$i18$i244 + 8) | 0;
            $this$addr$i$i16$i205 = $__end_cap_$i19$i245;
            $this1$i$i20$i246 = $this$addr$i$i16$i205;
            $this$addr$i$i$i15$i204 = $this1$i$i20$i246;
            $this1$i$i$i21$i247 = $this$addr$i$i$i15$i204;
            $__end_3$i248 = ($this1$i235 + 4) | 0;
            $55 = HEAP32[$__end_3$i248 >> 2] | 0;
            $__p$addr$i14$i207 = $55;
            $56 = $__p$addr$i14$i207;
            $57 = $__x$addr$i233;
            $__t$addr$i13$i208 = $57;
            $58 = $__t$addr$i13$i208;
            $__a$addr$i$i219 = $this1$i$i$i21$i247;
            $__p$addr$i$i220 = $56;
            $__args$addr$i$i221 = $58;
            $59 = $__a$addr$i$i219;
            $60 = $__p$addr$i$i220;
            $61 = $__args$addr$i$i221;
            $__t$addr$i$i$i218 = $61;
            $62 = $__t$addr$i$i$i218;
            HEAP8[$agg$tmp1$i$i217 >> 0] = HEAP8[$agg$tmp$i$i222 >> 0] | 0;
            $__a$addr$i$i$i214 = $59;
            $__p$addr$i$i$i215 = $60;
            $__args$addr$i$i$i216 = $62;
            $63 = $__a$addr$i$i$i214;
            $64 = $__p$addr$i$i$i215;
            $65 = $__args$addr$i$i$i216;
            $__t$addr$i$i$i$i213 = $65;
            $66 = $__t$addr$i$i$i$i213;
            $this$addr$i$i$i11$i210 = $63;
            $__p$addr$i$i$i$i211 = $64;
            $__args$addr$i$i$i$i212 = $66;
            $67 = $__p$addr$i$i$i$i211;
            $68 = $__args$addr$i$i$i$i212;
            $__t$addr$i$i$i$i$i209 = $68;
            $69 = $__t$addr$i$i$i$i$i209;
            $70 = HEAP8[$69 >> 0] | 0;
            HEAP8[$67 >> 0] = $70;
            $this$addr$i9$i224 = $__annotator$i234;
            $__end_6$i251 = ($this1$i235 + 4) | 0;
            $71 = HEAP32[$__end_6$i251 >> 2] | 0;
            $incdec$ptr$i252 = ($71 + 1) | 0;
            HEAP32[$__end_6$i251 >> 2] = $incdec$ptr$i252;
          } else {
            $72 = $__x$addr$i233;
            $__t$addr$i$i225 = $72;
            $73 = $__t$addr$i$i225;
            __ZNSt3__26vectorIhNS_9allocatorIhEEE21__push_back_slow_pathIhEEvOT_(
              $this1$i235,
              $73
            );
          }
          $74 = ($this1 + 5) | 0;
          $75 = HEAP8[$74 >> 0] | 0;
          switch (($75 << 24) >> 24) {
            case 0: {
              $dataLen = 4;
              break L5;
              break;
            }
            case 1: {
              $dataLen = 4;
              break L5;
              break;
            }
            case 23: {
              $dataLen = 8;
              break L5;
              break;
            }
            case 21: {
              $dataLen = 3;
              break L5;
              break;
            }
            case 4: {
              $dataLen = 1;
              break L5;
              break;
            }
            case 5: {
              $dataLen = 16;
              break L5;
              break;
            }
            case 12: {
              $dataLen = 1;
              break L5;
              break;
            }
            case 11: {
              $dataLen = 1;
              break L5;
              break;
            }
            case 10: {
              $dataLen = 8;
              break L5;
              break;
            }
            default: {
              break L5;
            }
          }
          break;
        }
        case 3: {
          $76 = ($this1 + 5) | 0;
          $77 = HEAP8[$76 >> 0] | 0;
          HEAP8[$ref$tmp47 >> 0] = $77;
          $this$addr$i285 = $agg$result;
          $__x$addr$i286 = $ref$tmp47;
          $this1$i288 = $this$addr$i285;
          $__end_$i289 = ($this1$i288 + 4) | 0;
          $78 = HEAP32[$__end_$i289 >> 2] | 0;
          $this$addr$i$i284 = $this1$i288;
          $this1$i$i290 = $this$addr$i$i284;
          $__end_cap_$i$i291 = ($this1$i$i290 + 8) | 0;
          $this$addr$i$i$i283 = $__end_cap_$i$i291;
          $this1$i$i$i292 = $this$addr$i$i$i283;
          $this$addr$i$i$i$i282 = $this1$i$i$i292;
          $this1$i$i$i$i293 = $this$addr$i$i$i$i282;
          $79 = HEAP32[$this1$i$i$i$i293 >> 2] | 0;
          $cmp$i295 = $78 >>> 0 < $79 >>> 0;
          if ($cmp$i295) {
            $this$addr$i8$i279 = $__annotator$i287;
            $$addr$i$i280 = $this1$i288;
            $$addr1$i$i281 = 1;
            $this$addr$i17$i259 = $this1$i288;
            $this1$i18$i297 = $this$addr$i17$i259;
            $__end_cap_$i19$i298 = ($this1$i18$i297 + 8) | 0;
            $this$addr$i$i16$i258 = $__end_cap_$i19$i298;
            $this1$i$i20$i299 = $this$addr$i$i16$i258;
            $this$addr$i$i$i15$i257 = $this1$i$i20$i299;
            $this1$i$i$i21$i300 = $this$addr$i$i$i15$i257;
            $__end_3$i301 = ($this1$i288 + 4) | 0;
            $80 = HEAP32[$__end_3$i301 >> 2] | 0;
            $__p$addr$i14$i260 = $80;
            $81 = $__p$addr$i14$i260;
            $82 = $__x$addr$i286;
            $__t$addr$i13$i261 = $82;
            $83 = $__t$addr$i13$i261;
            $__a$addr$i$i272 = $this1$i$i$i21$i300;
            $__p$addr$i$i273 = $81;
            $__args$addr$i$i274 = $83;
            $84 = $__a$addr$i$i272;
            $85 = $__p$addr$i$i273;
            $86 = $__args$addr$i$i274;
            $__t$addr$i$i$i271 = $86;
            $87 = $__t$addr$i$i$i271;
            HEAP8[$agg$tmp1$i$i270 >> 0] = HEAP8[$agg$tmp$i$i275 >> 0] | 0;
            $__a$addr$i$i$i267 = $84;
            $__p$addr$i$i$i268 = $85;
            $__args$addr$i$i$i269 = $87;
            $88 = $__a$addr$i$i$i267;
            $89 = $__p$addr$i$i$i268;
            $90 = $__args$addr$i$i$i269;
            $__t$addr$i$i$i$i266 = $90;
            $91 = $__t$addr$i$i$i$i266;
            $this$addr$i$i$i11$i263 = $88;
            $__p$addr$i$i$i$i264 = $89;
            $__args$addr$i$i$i$i265 = $91;
            $92 = $__p$addr$i$i$i$i264;
            $93 = $__args$addr$i$i$i$i265;
            $__t$addr$i$i$i$i$i262 = $93;
            $94 = $__t$addr$i$i$i$i$i262;
            $95 = HEAP8[$94 >> 0] | 0;
            HEAP8[$92 >> 0] = $95;
            $this$addr$i9$i277 = $__annotator$i287;
            $__end_6$i304 = ($this1$i288 + 4) | 0;
            $96 = HEAP32[$__end_6$i304 >> 2] | 0;
            $incdec$ptr$i305 = ($96 + 1) | 0;
            HEAP32[$__end_6$i304 >> 2] = $incdec$ptr$i305;
          } else {
            $97 = $__x$addr$i286;
            $__t$addr$i$i278 = $97;
            $98 = $__t$addr$i$i278;
            __ZNSt3__26vectorIhNS_9allocatorIhEEE21__push_back_slow_pathIhEEvOT_(
              $this1$i288,
              $98
            );
          }
          $dataLen = 8;
          break;
        }
        case 4: {
          $99 = ($this1 + 5) | 0;
          $100 = HEAP8[$99 >> 0] | 0;
          HEAP8[$ref$tmp50 >> 0] = $100;
          $this$addr$i338 = $agg$result;
          $__x$addr$i339 = $ref$tmp50;
          $this1$i341 = $this$addr$i338;
          $__end_$i342 = ($this1$i341 + 4) | 0;
          $101 = HEAP32[$__end_$i342 >> 2] | 0;
          $this$addr$i$i337 = $this1$i341;
          $this1$i$i343 = $this$addr$i$i337;
          $__end_cap_$i$i344 = ($this1$i$i343 + 8) | 0;
          $this$addr$i$i$i336 = $__end_cap_$i$i344;
          $this1$i$i$i345 = $this$addr$i$i$i336;
          $this$addr$i$i$i$i335 = $this1$i$i$i345;
          $this1$i$i$i$i346 = $this$addr$i$i$i$i335;
          $102 = HEAP32[$this1$i$i$i$i346 >> 2] | 0;
          $cmp$i348 = $101 >>> 0 < $102 >>> 0;
          if ($cmp$i348) {
            $this$addr$i8$i332 = $__annotator$i340;
            $$addr$i$i333 = $this1$i341;
            $$addr1$i$i334 = 1;
            $this$addr$i17$i312 = $this1$i341;
            $this1$i18$i350 = $this$addr$i17$i312;
            $__end_cap_$i19$i351 = ($this1$i18$i350 + 8) | 0;
            $this$addr$i$i16$i311 = $__end_cap_$i19$i351;
            $this1$i$i20$i352 = $this$addr$i$i16$i311;
            $this$addr$i$i$i15$i310 = $this1$i$i20$i352;
            $this1$i$i$i21$i353 = $this$addr$i$i$i15$i310;
            $__end_3$i354 = ($this1$i341 + 4) | 0;
            $103 = HEAP32[$__end_3$i354 >> 2] | 0;
            $__p$addr$i14$i313 = $103;
            $104 = $__p$addr$i14$i313;
            $105 = $__x$addr$i339;
            $__t$addr$i13$i314 = $105;
            $106 = $__t$addr$i13$i314;
            $__a$addr$i$i325 = $this1$i$i$i21$i353;
            $__p$addr$i$i326 = $104;
            $__args$addr$i$i327 = $106;
            $107 = $__a$addr$i$i325;
            $108 = $__p$addr$i$i326;
            $109 = $__args$addr$i$i327;
            $__t$addr$i$i$i324 = $109;
            $110 = $__t$addr$i$i$i324;
            HEAP8[$agg$tmp1$i$i323 >> 0] = HEAP8[$agg$tmp$i$i328 >> 0] | 0;
            $__a$addr$i$i$i320 = $107;
            $__p$addr$i$i$i321 = $108;
            $__args$addr$i$i$i322 = $110;
            $111 = $__a$addr$i$i$i320;
            $112 = $__p$addr$i$i$i321;
            $113 = $__args$addr$i$i$i322;
            $__t$addr$i$i$i$i319 = $113;
            $114 = $__t$addr$i$i$i$i319;
            $this$addr$i$i$i11$i316 = $111;
            $__p$addr$i$i$i$i317 = $112;
            $__args$addr$i$i$i$i318 = $114;
            $115 = $__p$addr$i$i$i$i317;
            $116 = $__args$addr$i$i$i$i318;
            $__t$addr$i$i$i$i$i315 = $116;
            $117 = $__t$addr$i$i$i$i$i315;
            $118 = HEAP8[$117 >> 0] | 0;
            HEAP8[$115 >> 0] = $118;
            $this$addr$i9$i330 = $__annotator$i340;
            $__end_6$i357 = ($this1$i341 + 4) | 0;
            $119 = HEAP32[$__end_6$i357 >> 2] | 0;
            $incdec$ptr$i358 = ($119 + 1) | 0;
            HEAP32[$__end_6$i357 >> 2] = $incdec$ptr$i358;
          } else {
            $120 = $__x$addr$i339;
            $__t$addr$i$i331 = $120;
            $121 = $__t$addr$i$i331;
            __ZNSt3__26vectorIhNS_9allocatorIhEEE21__push_back_slow_pathIhEEvOT_(
              $this1$i341,
              $121
            );
          }
          $122 = HEAP32[$this1 >> 2] | 0;
          $dataLen = $122;
          break;
        }
        default: {
        }
      }
    } while (0);
    $i = 0;
    while (1) {
      $123 = $i;
      $124 = $dataLen;
      $cmp = ($123 | 0) < ($124 | 0);
      if (!$cmp) {
        break;
      }
      $125 = ($this1 + 8) | 0;
      $126 = $i;
      $arrayidx = ($125 + $126) | 0;
      $this$addr$i382 = $agg$result;
      $__x$addr$i383 = $arrayidx;
      $this1$i385 = $this$addr$i382;
      $__end_$i386 = ($this1$i385 + 4) | 0;
      $127 = HEAP32[$__end_$i386 >> 2] | 0;
      $this$addr$i$i381 = $this1$i385;
      $this1$i$i387 = $this$addr$i$i381;
      $__end_cap_$i$i388 = ($this1$i$i387 + 8) | 0;
      $this$addr$i$i$i380 = $__end_cap_$i$i388;
      $this1$i$i$i389 = $this$addr$i$i$i380;
      $this$addr$i$i$i$i379 = $this1$i$i$i389;
      $this1$i$i$i$i390 = $this$addr$i$i$i$i379;
      $128 = HEAP32[$this1$i$i$i$i390 >> 2] | 0;
      $cmp$i392 = ($127 | 0) != ($128 | 0);
      if ($cmp$i392) {
        $this$addr$i6$i = $__annotator$i384;
        $$addr$i$i377 = $this1$i385;
        $$addr1$i$i378 = 1;
        $this$addr$i14$i = $this1$i385;
        $this1$i15$i = $this$addr$i14$i;
        $__end_cap_$i16$i = ($this1$i15$i + 8) | 0;
        $this$addr$i$i13$i = $__end_cap_$i16$i;
        $this1$i$i17$i = $this$addr$i$i13$i;
        $this$addr$i$i$i12$i = $this1$i$i17$i;
        $this1$i$i$i18$i = $this$addr$i$i$i12$i;
        $__end_3$i394 = ($this1$i385 + 4) | 0;
        $129 = HEAP32[$__end_3$i394 >> 2] | 0;
        $__p$addr$i11$i = $129;
        $130 = $__p$addr$i11$i;
        $131 = $__x$addr$i383;
        $__a$addr$i$i372 = $this1$i$i$i18$i;
        $__p$addr$i$i373 = $130;
        $__args$addr$i$i374 = $131;
        $132 = $__a$addr$i$i372;
        $133 = $__p$addr$i$i373;
        $134 = $__args$addr$i$i374;
        $__t$addr$i$i$i371 = $134;
        $135 = $__t$addr$i$i$i371;
        HEAP8[$agg$tmp1$i$i370 >> 0] = HEAP8[$agg$tmp$i$i375 >> 0] | 0;
        $__a$addr$i$i$i367 = $132;
        $__p$addr$i$i$i368 = $133;
        $__args$addr$i$i$i369 = $135;
        $136 = $__a$addr$i$i$i367;
        $137 = $__p$addr$i$i$i368;
        $138 = $__args$addr$i$i$i369;
        $__t$addr$i$i$i$i366 = $138;
        $139 = $__t$addr$i$i$i$i366;
        $this$addr$i$i$i9$i = $136;
        $__p$addr$i$i$i$i364 = $137;
        $__args$addr$i$i$i$i365 = $139;
        $140 = $__p$addr$i$i$i$i364;
        $141 = $__args$addr$i$i$i$i365;
        $__t$addr$i$i$i$i$i363 = $141;
        $142 = $__t$addr$i$i$i$i$i363;
        $143 = HEAP8[$142 >> 0] | 0;
        HEAP8[$140 >> 0] = $143;
        $this$addr$i7$i = $__annotator$i384;
        $__end_5$i = ($this1$i385 + 4) | 0;
        $144 = HEAP32[$__end_5$i >> 2] | 0;
        $incdec$ptr$i395 = ($144 + 1) | 0;
        HEAP32[$__end_5$i >> 2] = $incdec$ptr$i395;
      } else {
        $145 = $__x$addr$i383;
        __ZNSt3__26vectorIhNS_9allocatorIhEEE21__push_back_slow_pathIRKhEEvOT_(
          $this1$i385,
          $145
        );
      }
      $146 = $i;
      $inc = ($146 + 1) | 0;
      $i = $inc;
    }
    $147 = $dataLen;
    $148 = $numBytes;
    $add = ($148 + $147) | 0;
    $numBytes = $add;
    __ZNSt3__26vectorIhNS_9allocatorIhEEE13shrink_to_fitEv($agg$result);
    $$expand_i1_val2 = 1;
    HEAP8[$nrvo >> 0] = $$expand_i1_val2;
    $nrvo$val$pre_trunc = HEAP8[$nrvo >> 0] | 0;
    $nrvo$val = $nrvo$val$pre_trunc & 1;
    if ($nrvo$val) {
      STACKTOP = sp;
      return;
    }
    $this$addr$i60 = $agg$result;
    $this1$i61 = $this$addr$i60;
    $this$addr$i$i59 = $this1$i61;
    $this1$i$i62 = $this$addr$i$i59;
    $this$addr$i$i$i58 = $this1$i$i62;
    $this1$i$i$i63 = $this$addr$i$i$i58;
    $149 = HEAP32[$this1$i$i$i63 >> 2] | 0;
    $__p$addr$i$i$i$i = $149;
    $150 = $__p$addr$i$i$i$i;
    $this$addr$i41$i$i = $this1$i$i62;
    $this1$i42$i$i = $this$addr$i41$i$i;
    $151 = HEAP32[$this1$i42$i$i >> 2] | 0;
    $__p$addr$i$i40$i$i = $151;
    $152 = $__p$addr$i$i40$i$i;
    $this$addr$i28$i$i = $this1$i$i62;
    $this1$i29$i$i = $this$addr$i28$i$i;
    $this$addr$i$i27$i$i = $this1$i29$i$i;
    $this1$i$i30$i$i = $this$addr$i$i27$i$i;
    $this$addr$i$i$i26$i$i = $this1$i$i30$i$i;
    $this1$i$i$i31$i$i = $this$addr$i$i$i26$i$i;
    $__end_cap_$i$i$i32$i$i = ($this1$i$i$i31$i$i + 8) | 0;
    $this$addr$i$i$i$i25$i$i = $__end_cap_$i$i$i32$i$i;
    $this1$i$i$i$i33$i$i = $this$addr$i$i$i$i25$i$i;
    $this$addr$i$i$i$i$i24$i$i = $this1$i$i$i$i33$i$i;
    $this1$i$i$i$i$i34$i$i = $this$addr$i$i$i$i$i24$i$i;
    $153 = HEAP32[$this1$i$i$i$i$i34$i$i >> 2] | 0;
    $154 = HEAP32[$this1$i$i30$i$i >> 2] | 0;
    $sub$ptr$lhs$cast$i$i37$i$i = $153;
    $sub$ptr$rhs$cast$i$i38$i$i = $154;
    $sub$ptr$sub$i$i39$i$i =
      ($sub$ptr$lhs$cast$i$i37$i$i - $sub$ptr$rhs$cast$i$i38$i$i) | 0;
    $add$ptr$i$i = ($152 + $sub$ptr$sub$i$i39$i$i) | 0;
    $this$addr$i21$i$i = $this1$i$i62;
    $this1$i22$i$i = $this$addr$i21$i$i;
    $155 = HEAP32[$this1$i22$i$i >> 2] | 0;
    $__p$addr$i$i20$i$i = $155;
    $156 = $__p$addr$i$i20$i$i;
    $this$addr$i17$i$i = $this1$i$i62;
    $this1$i18$i$i = $this$addr$i17$i$i;
    $__end_$i$i$i = ($this1$i18$i$i + 4) | 0;
    $157 = HEAP32[$__end_$i$i$i >> 2] | 0;
    $158 = HEAP32[$this1$i18$i$i >> 2] | 0;
    $sub$ptr$lhs$cast$i$i$i = $157;
    $sub$ptr$rhs$cast$i$i$i = $158;
    $sub$ptr$sub$i$i$i =
      ($sub$ptr$lhs$cast$i$i$i - $sub$ptr$rhs$cast$i$i$i) | 0;
    $add$ptr6$i$i = ($156 + $sub$ptr$sub$i$i$i) | 0;
    $this$addr$i14$i$i = $this1$i$i62;
    $this1$i15$i$i = $this$addr$i14$i$i;
    $159 = HEAP32[$this1$i15$i$i >> 2] | 0;
    $__p$addr$i$i13$i$i = $159;
    $160 = $__p$addr$i$i13$i$i;
    $this$addr$i11$i$i = $this1$i$i62;
    $this1$i12$i$i = $this$addr$i11$i$i;
    $this$addr$i$i$i$i57 = $this1$i12$i$i;
    $this1$i$i$i$i64 = $this$addr$i$i$i$i57;
    $this$addr$i$i$i$i$i56 = $this1$i$i$i$i64;
    $this1$i$i$i$i$i65 = $this$addr$i$i$i$i$i56;
    $__end_cap_$i$i$i$i$i = ($this1$i$i$i$i$i65 + 8) | 0;
    $this$addr$i$i$i$i$i$i = $__end_cap_$i$i$i$i$i;
    $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
    $this$addr$i$i$i$i$i$i$i = $this1$i$i$i$i$i$i;
    $this1$i$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i$i;
    $161 = HEAP32[$this1$i$i$i$i$i$i$i >> 2] | 0;
    $162 = HEAP32[$this1$i$i$i$i64 >> 2] | 0;
    $sub$ptr$lhs$cast$i$i$i$i = $161;
    $sub$ptr$rhs$cast$i$i$i$i = $162;
    $sub$ptr$sub$i$i$i$i =
      ($sub$ptr$lhs$cast$i$i$i$i - $sub$ptr$rhs$cast$i$i$i$i) | 0;
    $add$ptr9$i$i = ($160 + $sub$ptr$sub$i$i$i$i) | 0;
    $this$addr$i10$i$i = $this1$i$i62;
    $$addr$i$i$i = $150;
    $$addr1$i$i$i = $add$ptr$i$i;
    $$addr2$i$i$i = $add$ptr6$i$i;
    $$addr3$i$i$i = $add$ptr9$i$i;
    __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($this1$i61);
    STACKTOP = sp;
    return;
  }
  function __ZNK6Packet10getErrorIdEv($this) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $this1 = $this$addr;
    $0 = ($this1 + 8) | 0;
    $1 = $0;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    STACKTOP = sp;
    return $3 | 0;
  }
  function __ZN6Packet10setErrorIdEi($this, $e) {
    $this = $this | 0;
    $e = $e | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $e$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $e$addr = $e;
    $this1 = $this$addr;
    $0 = $e$addr;
    $1 = ($0 | 0) < 0;
    $2 = ($1 << 31) >> 31;
    $3 = ($this1 + 8) | 0;
    $4 = $3;
    $5 = $4;
    HEAP32[$5 >> 2] = $0;
    $6 = ($4 + 4) | 0;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    STACKTOP = sp;
    return;
  }
  function __ZNK6Packet16getMotorDistanceEv($this) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $this1 = $this$addr;
    $0 = ($this1 + 8) | 0;
    $1 = $0;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    STACKTOP = sp;
    return $3 | 0;
  }
  function __ZN6Packet16setMotorDistanceEi($this, $d) {
    $this = $this | 0;
    $d = $d | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $d$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $d$addr = $d;
    $this1 = $this$addr;
    $0 = $d$addr;
    $1 = ($0 | 0) < 0;
    $2 = ($1 << 31) >> 31;
    $3 = ($this1 + 8) | 0;
    $4 = $3;
    $5 = $4;
    HEAP32[$5 >> 2] = $0;
    $6 = ($4 + 4) | 0;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    STACKTOP = sp;
    return;
  }
  function __ZNK6Packet15getCaseDistanceEv($this) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $caseDistance = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $this1 = $this$addr;
    $0 = ($this1 + 8) | 0;
    $caseDistance = ($0 + 8) | 0;
    $1 = $caseDistance;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    STACKTOP = sp;
    return $3 | 0;
  }
  function __ZN6Packet15setCaseDistanceEi($this, $d) {
    $this = $this | 0;
    $d = $d | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $caseDistance = 0,
      $d$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $d$addr = $d;
    $this1 = $this$addr;
    $0 = $d$addr;
    $1 = ($0 | 0) < 0;
    $2 = ($1 << 31) >> 31;
    $3 = ($this1 + 8) | 0;
    $caseDistance = ($3 + 8) | 0;
    $4 = $caseDistance;
    $5 = $4;
    HEAP32[$5 >> 2] = $0;
    $6 = ($4 + 4) | 0;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    STACKTOP = sp;
    return;
  }
  function __ZNK6Packet8getBytesEv($agg$result, $this) {
    $agg$result = $agg$result | 0;
    $this = $this | 0;
    var $$addr$i$i = 0,
      $$addr$i$i$i = 0,
      $$addr1$i$i = 0,
      $$addr1$i$i$i = 0,
      $$addr2$i$i$i = 0,
      $$addr3$i$i$i = 0,
      $$expand_i1_val = 0,
      $$expand_i1_val2 = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0;
    var $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0,
      $23 = 0,
      $24 = 0,
      $25 = 0,
      $26 = 0,
      $27 = 0,
      $28 = 0,
      $29 = 0,
      $3 = 0,
      $30 = 0,
      $31 = 0,
      $32 = 0,
      $33 = 0,
      $34 = 0,
      $35 = 0,
      $36 = 0,
      $37 = 0;
    var $38 = 0,
      $39 = 0,
      $4 = 0,
      $40 = 0,
      $41 = 0,
      $42 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $__a$addr$i$i = 0,
      $__a$addr$i$i$i = 0,
      $__annotator$i = 0,
      $__args$addr$i$i = 0,
      $__args$addr$i$i$i = 0,
      $__args$addr$i$i$i$i = 0,
      $__end_$i = 0,
      $__end_$i$i = 0,
      $__end_$i$i$i = 0;
    var $__end_3$i = 0,
      $__end_6$i = 0,
      $__end_cap_$i$i = 0,
      $__end_cap_$i$i$i$i$i = 0,
      $__end_cap_$i$i$i32$i$i = 0,
      $__end_cap_$i$i24 = 0,
      $__end_cap_$i19$i = 0,
      $__p$addr$i$i = 0,
      $__p$addr$i$i$i = 0,
      $__p$addr$i$i$i$i = 0,
      $__p$addr$i$i$i$i14 = 0,
      $__p$addr$i$i13$i$i = 0,
      $__p$addr$i$i20$i$i = 0,
      $__p$addr$i$i40$i$i = 0,
      $__p$addr$i14$i = 0,
      $__t$addr$i$i = 0,
      $__t$addr$i$i$i = 0,
      $__t$addr$i$i$i$i = 0,
      $__t$addr$i$i$i$i$i = 0,
      $__t$addr$i$i$i$i$i13 = 0;
    var $__t$addr$i$i$i$i15 = 0,
      $__t$addr$i$i$i16 = 0,
      $__t$addr$i13$i = 0,
      $__u$addr$i$i$i$i = 0,
      $__x$addr$i = 0,
      $add$ptr$i$i = 0,
      $add$ptr6$i$i = 0,
      $add$ptr9$i$i = 0,
      $agg$tmp$i$i = 0,
      $agg$tmp1$i$i = 0,
      $arrayidx = 0,
      $cmp = 0,
      $cmp$i = 0,
      $i = 0,
      $inc = 0,
      $incdec$ptr$i = 0,
      $nrvo = 0,
      $nrvo$val = 0,
      $nrvo$val$pre_trunc = 0,
      $ref$tmp = 0;
    var $ref$tmp$i$i = 0,
      $sub$ptr$lhs$cast$i$i$i = 0,
      $sub$ptr$lhs$cast$i$i$i$i = 0,
      $sub$ptr$lhs$cast$i$i37$i$i = 0,
      $sub$ptr$rhs$cast$i$i$i = 0,
      $sub$ptr$rhs$cast$i$i$i$i = 0,
      $sub$ptr$rhs$cast$i$i38$i$i = 0,
      $sub$ptr$sub$i$i$i = 0,
      $sub$ptr$sub$i$i$i$i = 0,
      $sub$ptr$sub$i$i39$i$i = 0,
      $this$addr = 0,
      $this$addr$i = 0,
      $this$addr$i$i = 0,
      $this$addr$i$i$i = 0,
      $this$addr$i$i$i$i = 0,
      $this$addr$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i24$i$i = 0,
      $this$addr$i$i$i$i$i3 = 0;
    var $this$addr$i$i$i$i18 = 0,
      $this$addr$i$i$i$i25$i$i = 0,
      $this$addr$i$i$i$i4 = 0,
      $this$addr$i$i$i11$i = 0,
      $this$addr$i$i$i15$i = 0,
      $this$addr$i$i$i19 = 0,
      $this$addr$i$i$i26$i$i = 0,
      $this$addr$i$i$i5 = 0,
      $this$addr$i$i16$i = 0,
      $this$addr$i$i20 = 0,
      $this$addr$i$i27$i$i = 0,
      $this$addr$i$i6 = 0,
      $this$addr$i10$i$i = 0,
      $this$addr$i11$i$i = 0,
      $this$addr$i14$i$i = 0,
      $this$addr$i17$i = 0,
      $this$addr$i17$i$i = 0,
      $this$addr$i2$i$i$i = 0,
      $this$addr$i21 = 0,
      $this$addr$i21$i$i = 0;
    var $this$addr$i28$i$i = 0,
      $this$addr$i3$i$i = 0,
      $this$addr$i41$i$i = 0,
      $this$addr$i7 = 0,
      $this$addr$i8$i = 0,
      $this$addr$i9$i = 0,
      $this1 = 0,
      $this1$i = 0,
      $this1$i$i = 0,
      $this1$i$i$i$i = 0,
      $this1$i$i$i$i$i$i = 0,
      $this1$i$i$i$i$i$i$i = 0,
      $this1$i$i$i$i$i12 = 0,
      $this1$i$i$i$i$i34$i$i = 0,
      $this1$i$i$i$i11 = 0,
      $this1$i$i$i$i26 = 0,
      $this1$i$i$i$i33$i$i = 0,
      $this1$i$i$i10 = 0,
      $this1$i$i$i21$i = 0,
      $this1$i$i$i25 = 0;
    var $this1$i$i$i31$i$i = 0,
      $this1$i$i20$i = 0,
      $this1$i$i23 = 0,
      $this1$i$i30$i$i = 0,
      $this1$i$i9 = 0,
      $this1$i12$i$i = 0,
      $this1$i15$i$i = 0,
      $this1$i18$i = 0,
      $this1$i18$i$i = 0,
      $this1$i22 = 0,
      $this1$i22$i$i = 0,
      $this1$i29$i$i = 0,
      $this1$i3$i$i$i = 0,
      $this1$i4$i$i = 0,
      $this1$i42$i$i = 0,
      $this1$i8 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 288) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288 | 0);
    $agg$tmp1$i$i = sp;
    $agg$tmp$i$i = (sp + 275) | 0;
    $__annotator$i = (sp + 274) | 0;
    $ref$tmp$i$i = (sp + 16) | 0;
    $nrvo = (sp + 273) | 0;
    $ref$tmp = (sp + 272) | 0;
    $this$addr = $this;
    $this1 = $this$addr;
    $$expand_i1_val = 0;
    HEAP8[$nrvo >> 0] = $$expand_i1_val;
    $this$addr$i = $agg$result;
    $this1$i = $this$addr$i;
    $this$addr$i$i = $this1$i;
    $this1$i$i = $this$addr$i$i;
    $this$addr$i$i$i = $this1$i$i;
    HEAP32[$this1$i$i >> 2] = 0;
    $__end_$i$i = ($this1$i$i + 4) | 0;
    HEAP32[$__end_$i$i >> 2] = 0;
    $__end_cap_$i$i = ($this1$i$i + 8) | 0;
    HEAP32[$ref$tmp$i$i >> 2] = 0;
    $this$addr$i3$i$i = $__end_cap_$i$i;
    $__t$addr$i$i$i = $ref$tmp$i$i;
    $this1$i4$i$i = $this$addr$i3$i$i;
    $0 = $__t$addr$i$i$i;
    $__t$addr$i$i$i$i = $0;
    $1 = $__t$addr$i$i$i$i;
    $this$addr$i2$i$i$i = $this1$i4$i$i;
    $__u$addr$i$i$i$i = $1;
    $this1$i3$i$i$i = $this$addr$i2$i$i$i;
    $2 = $__u$addr$i$i$i$i;
    $__t$addr$i$i$i$i$i = $2;
    HEAP32[$this1$i3$i$i$i >> 2] = 0;
    $this$addr$i$i$i$i = $this1$i4$i$i;
    $this1$i$i$i$i = $this$addr$i$i$i$i;
    $this$addr$i$i$i$i$i = $this1$i$i$i$i;
    $i = 0;
    while (1) {
      $3 = $i;
      $cmp = ($3 | 0) < 16;
      if (!$cmp) {
        break;
      }
      $4 = ($this1 + 8) | 0;
      $5 = $i;
      $arrayidx = ($4 + $5) | 0;
      $6 = HEAP8[$arrayidx >> 0] | 0;
      HEAP8[$ref$tmp >> 0] = $6;
      $this$addr$i21 = $agg$result;
      $__x$addr$i = $ref$tmp;
      $this1$i22 = $this$addr$i21;
      $__end_$i = ($this1$i22 + 4) | 0;
      $7 = HEAP32[$__end_$i >> 2] | 0;
      $this$addr$i$i20 = $this1$i22;
      $this1$i$i23 = $this$addr$i$i20;
      $__end_cap_$i$i24 = ($this1$i$i23 + 8) | 0;
      $this$addr$i$i$i19 = $__end_cap_$i$i24;
      $this1$i$i$i25 = $this$addr$i$i$i19;
      $this$addr$i$i$i$i18 = $this1$i$i$i25;
      $this1$i$i$i$i26 = $this$addr$i$i$i$i18;
      $8 = HEAP32[$this1$i$i$i$i26 >> 2] | 0;
      $cmp$i = $7 >>> 0 < $8 >>> 0;
      if ($cmp$i) {
        $this$addr$i8$i = $__annotator$i;
        $$addr$i$i = $this1$i22;
        $$addr1$i$i = 1;
        $this$addr$i17$i = $this1$i22;
        $this1$i18$i = $this$addr$i17$i;
        $__end_cap_$i19$i = ($this1$i18$i + 8) | 0;
        $this$addr$i$i16$i = $__end_cap_$i19$i;
        $this1$i$i20$i = $this$addr$i$i16$i;
        $this$addr$i$i$i15$i = $this1$i$i20$i;
        $this1$i$i$i21$i = $this$addr$i$i$i15$i;
        $__end_3$i = ($this1$i22 + 4) | 0;
        $9 = HEAP32[$__end_3$i >> 2] | 0;
        $__p$addr$i14$i = $9;
        $10 = $__p$addr$i14$i;
        $11 = $__x$addr$i;
        $__t$addr$i13$i = $11;
        $12 = $__t$addr$i13$i;
        $__a$addr$i$i = $this1$i$i$i21$i;
        $__p$addr$i$i = $10;
        $__args$addr$i$i = $12;
        $13 = $__a$addr$i$i;
        $14 = $__p$addr$i$i;
        $15 = $__args$addr$i$i;
        $__t$addr$i$i$i16 = $15;
        $16 = $__t$addr$i$i$i16;
        HEAP8[$agg$tmp1$i$i >> 0] = HEAP8[$agg$tmp$i$i >> 0] | 0;
        $__a$addr$i$i$i = $13;
        $__p$addr$i$i$i = $14;
        $__args$addr$i$i$i = $16;
        $17 = $__a$addr$i$i$i;
        $18 = $__p$addr$i$i$i;
        $19 = $__args$addr$i$i$i;
        $__t$addr$i$i$i$i15 = $19;
        $20 = $__t$addr$i$i$i$i15;
        $this$addr$i$i$i11$i = $17;
        $__p$addr$i$i$i$i14 = $18;
        $__args$addr$i$i$i$i = $20;
        $21 = $__p$addr$i$i$i$i14;
        $22 = $__args$addr$i$i$i$i;
        $__t$addr$i$i$i$i$i13 = $22;
        $23 = $__t$addr$i$i$i$i$i13;
        $24 = HEAP8[$23 >> 0] | 0;
        HEAP8[$21 >> 0] = $24;
        $this$addr$i9$i = $__annotator$i;
        $__end_6$i = ($this1$i22 + 4) | 0;
        $25 = HEAP32[$__end_6$i >> 2] | 0;
        $incdec$ptr$i = ($25 + 1) | 0;
        HEAP32[$__end_6$i >> 2] = $incdec$ptr$i;
      } else {
        $26 = $__x$addr$i;
        $__t$addr$i$i = $26;
        $27 = $__t$addr$i$i;
        __ZNSt3__26vectorIhNS_9allocatorIhEEE21__push_back_slow_pathIhEEvOT_(
          $this1$i22,
          $27
        );
      }
      $28 = $i;
      $inc = ($28 + 1) | 0;
      $i = $inc;
    }
    $$expand_i1_val2 = 1;
    HEAP8[$nrvo >> 0] = $$expand_i1_val2;
    $nrvo$val$pre_trunc = HEAP8[$nrvo >> 0] | 0;
    $nrvo$val = $nrvo$val$pre_trunc & 1;
    if ($nrvo$val) {
      STACKTOP = sp;
      return;
    }
    $this$addr$i7 = $agg$result;
    $this1$i8 = $this$addr$i7;
    $this$addr$i$i6 = $this1$i8;
    $this1$i$i9 = $this$addr$i$i6;
    $this$addr$i$i$i5 = $this1$i$i9;
    $this1$i$i$i10 = $this$addr$i$i$i5;
    $29 = HEAP32[$this1$i$i$i10 >> 2] | 0;
    $__p$addr$i$i$i$i = $29;
    $30 = $__p$addr$i$i$i$i;
    $this$addr$i41$i$i = $this1$i$i9;
    $this1$i42$i$i = $this$addr$i41$i$i;
    $31 = HEAP32[$this1$i42$i$i >> 2] | 0;
    $__p$addr$i$i40$i$i = $31;
    $32 = $__p$addr$i$i40$i$i;
    $this$addr$i28$i$i = $this1$i$i9;
    $this1$i29$i$i = $this$addr$i28$i$i;
    $this$addr$i$i27$i$i = $this1$i29$i$i;
    $this1$i$i30$i$i = $this$addr$i$i27$i$i;
    $this$addr$i$i$i26$i$i = $this1$i$i30$i$i;
    $this1$i$i$i31$i$i = $this$addr$i$i$i26$i$i;
    $__end_cap_$i$i$i32$i$i = ($this1$i$i$i31$i$i + 8) | 0;
    $this$addr$i$i$i$i25$i$i = $__end_cap_$i$i$i32$i$i;
    $this1$i$i$i$i33$i$i = $this$addr$i$i$i$i25$i$i;
    $this$addr$i$i$i$i$i24$i$i = $this1$i$i$i$i33$i$i;
    $this1$i$i$i$i$i34$i$i = $this$addr$i$i$i$i$i24$i$i;
    $33 = HEAP32[$this1$i$i$i$i$i34$i$i >> 2] | 0;
    $34 = HEAP32[$this1$i$i30$i$i >> 2] | 0;
    $sub$ptr$lhs$cast$i$i37$i$i = $33;
    $sub$ptr$rhs$cast$i$i38$i$i = $34;
    $sub$ptr$sub$i$i39$i$i =
      ($sub$ptr$lhs$cast$i$i37$i$i - $sub$ptr$rhs$cast$i$i38$i$i) | 0;
    $add$ptr$i$i = ($32 + $sub$ptr$sub$i$i39$i$i) | 0;
    $this$addr$i21$i$i = $this1$i$i9;
    $this1$i22$i$i = $this$addr$i21$i$i;
    $35 = HEAP32[$this1$i22$i$i >> 2] | 0;
    $__p$addr$i$i20$i$i = $35;
    $36 = $__p$addr$i$i20$i$i;
    $this$addr$i17$i$i = $this1$i$i9;
    $this1$i18$i$i = $this$addr$i17$i$i;
    $__end_$i$i$i = ($this1$i18$i$i + 4) | 0;
    $37 = HEAP32[$__end_$i$i$i >> 2] | 0;
    $38 = HEAP32[$this1$i18$i$i >> 2] | 0;
    $sub$ptr$lhs$cast$i$i$i = $37;
    $sub$ptr$rhs$cast$i$i$i = $38;
    $sub$ptr$sub$i$i$i =
      ($sub$ptr$lhs$cast$i$i$i - $sub$ptr$rhs$cast$i$i$i) | 0;
    $add$ptr6$i$i = ($36 + $sub$ptr$sub$i$i$i) | 0;
    $this$addr$i14$i$i = $this1$i$i9;
    $this1$i15$i$i = $this$addr$i14$i$i;
    $39 = HEAP32[$this1$i15$i$i >> 2] | 0;
    $__p$addr$i$i13$i$i = $39;
    $40 = $__p$addr$i$i13$i$i;
    $this$addr$i11$i$i = $this1$i$i9;
    $this1$i12$i$i = $this$addr$i11$i$i;
    $this$addr$i$i$i$i4 = $this1$i12$i$i;
    $this1$i$i$i$i11 = $this$addr$i$i$i$i4;
    $this$addr$i$i$i$i$i3 = $this1$i$i$i$i11;
    $this1$i$i$i$i$i12 = $this$addr$i$i$i$i$i3;
    $__end_cap_$i$i$i$i$i = ($this1$i$i$i$i$i12 + 8) | 0;
    $this$addr$i$i$i$i$i$i = $__end_cap_$i$i$i$i$i;
    $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
    $this$addr$i$i$i$i$i$i$i = $this1$i$i$i$i$i$i;
    $this1$i$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i$i;
    $41 = HEAP32[$this1$i$i$i$i$i$i$i >> 2] | 0;
    $42 = HEAP32[$this1$i$i$i$i11 >> 2] | 0;
    $sub$ptr$lhs$cast$i$i$i$i = $41;
    $sub$ptr$rhs$cast$i$i$i$i = $42;
    $sub$ptr$sub$i$i$i$i =
      ($sub$ptr$lhs$cast$i$i$i$i - $sub$ptr$rhs$cast$i$i$i$i) | 0;
    $add$ptr9$i$i = ($40 + $sub$ptr$sub$i$i$i$i) | 0;
    $this$addr$i10$i$i = $this1$i$i9;
    $$addr$i$i$i = $30;
    $$addr1$i$i$i = $add$ptr$i$i;
    $$addr2$i$i$i = $add$ptr6$i$i;
    $$addr3$i$i$i = $add$ptr9$i$i;
    __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($this1$i8);
    STACKTOP = sp;
    return;
  }
  function __ZN6Packet8setBytesENSt3__26vectorIhNS0_9allocatorIhEEEE(
    $this,
    $b
  ) {
    $this = $this | 0;
    $b = $b | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $__end_$i = 0,
      $__n$addr$i = 0,
      $arrayidx = 0,
      $arrayidx$i = 0,
      $cmp = 0,
      $i = 0,
      $inc = 0,
      $sub$ptr$lhs$cast$i = 0,
      $sub$ptr$rhs$cast$i = 0,
      $sub$ptr$sub$i = 0;
    var $this$addr = 0,
      $this$addr$i = 0,
      $this$addr$i3 = 0,
      $this1 = 0,
      $this1$i = 0,
      $this1$i4 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $this$addr = $this;
    $this1 = $this$addr;
    $i = 0;
    while (1) {
      $0 = $i;
      $this$addr$i = $b;
      $this1$i = $this$addr$i;
      $__end_$i = ($this1$i + 4) | 0;
      $1 = HEAP32[$__end_$i >> 2] | 0;
      $2 = HEAP32[$this1$i >> 2] | 0;
      $sub$ptr$lhs$cast$i = $1;
      $sub$ptr$rhs$cast$i = $2;
      $sub$ptr$sub$i = ($sub$ptr$lhs$cast$i - $sub$ptr$rhs$cast$i) | 0;
      $cmp = $0 >>> 0 < $sub$ptr$sub$i >>> 0;
      if (!$cmp) {
        break;
      }
      $3 = $i;
      $this$addr$i3 = $b;
      $__n$addr$i = $3;
      $this1$i4 = $this$addr$i3;
      $4 = HEAP32[$this1$i4 >> 2] | 0;
      $5 = $__n$addr$i;
      $arrayidx$i = ($4 + $5) | 0;
      $6 = HEAP8[$arrayidx$i >> 0] | 0;
      $7 = ($this1 + 8) | 0;
      $8 = $i;
      $arrayidx = ($7 + $8) | 0;
      HEAP8[$arrayidx >> 0] = $6;
      $9 = $i;
      $inc = ($9 + 1) | 0;
      $i = $inc;
    }
    STACKTOP = sp;
    return;
  }
  function __ZNSt3__26vectorIhNS_9allocatorIhEEE9push_backERKh($this, $__x) {
    $this = $this | 0;
    $__x = $__x | 0;
    var $$addr$i = 0,
      $$addr1$i = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0;
    var $9 = 0,
      $__a$addr$i = 0,
      $__a$addr$i$i = 0,
      $__annotator = 0,
      $__args$addr$i = 0,
      $__args$addr$i$i = 0,
      $__args$addr$i$i$i = 0,
      $__end_ = 0,
      $__end_3 = 0,
      $__end_5 = 0,
      $__end_cap_$i = 0,
      $__end_cap_$i16 = 0,
      $__p$addr$i = 0,
      $__p$addr$i$i = 0,
      $__p$addr$i$i$i = 0,
      $__p$addr$i11 = 0,
      $__t$addr$i$i = 0,
      $__t$addr$i$i$i = 0,
      $__t$addr$i$i$i$i = 0,
      $__x$addr = 0;
    var $agg$tmp$i = 0,
      $agg$tmp1$i = 0,
      $cmp = 0,
      $incdec$ptr = 0,
      $this$addr = 0,
      $this$addr$i = 0,
      $this$addr$i$i = 0,
      $this$addr$i$i$i = 0,
      $this$addr$i$i$i12 = 0,
      $this$addr$i$i$i9 = 0,
      $this$addr$i$i13 = 0,
      $this$addr$i14 = 0,
      $this$addr$i6 = 0,
      $this$addr$i7 = 0,
      $this1 = 0,
      $this1$i = 0,
      $this1$i$i = 0,
      $this1$i$i$i = 0,
      $this1$i$i$i18 = 0,
      $this1$i$i17 = 0;
    var $this1$i15 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 112) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112 | 0);
    $agg$tmp1$i = sp;
    $agg$tmp$i = (sp + 105) | 0;
    $__annotator = (sp + 104) | 0;
    $this$addr = $this;
    $__x$addr = $__x;
    $this1 = $this$addr;
    $__end_ = ($this1 + 4) | 0;
    $0 = HEAP32[$__end_ >> 2] | 0;
    $this$addr$i = $this1;
    $this1$i = $this$addr$i;
    $__end_cap_$i = ($this1$i + 8) | 0;
    $this$addr$i$i = $__end_cap_$i;
    $this1$i$i = $this$addr$i$i;
    $this$addr$i$i$i = $this1$i$i;
    $this1$i$i$i = $this$addr$i$i$i;
    $1 = HEAP32[$this1$i$i$i >> 2] | 0;
    $cmp = ($0 | 0) != ($1 | 0);
    if ($cmp) {
      $this$addr$i6 = $__annotator;
      $$addr$i = $this1;
      $$addr1$i = 1;
      $this$addr$i14 = $this1;
      $this1$i15 = $this$addr$i14;
      $__end_cap_$i16 = ($this1$i15 + 8) | 0;
      $this$addr$i$i13 = $__end_cap_$i16;
      $this1$i$i17 = $this$addr$i$i13;
      $this$addr$i$i$i12 = $this1$i$i17;
      $this1$i$i$i18 = $this$addr$i$i$i12;
      $__end_3 = ($this1 + 4) | 0;
      $2 = HEAP32[$__end_3 >> 2] | 0;
      $__p$addr$i11 = $2;
      $3 = $__p$addr$i11;
      $4 = $__x$addr;
      $__a$addr$i = $this1$i$i$i18;
      $__p$addr$i = $3;
      $__args$addr$i = $4;
      $5 = $__a$addr$i;
      $6 = $__p$addr$i;
      $7 = $__args$addr$i;
      $__t$addr$i$i = $7;
      $8 = $__t$addr$i$i;
      HEAP8[$agg$tmp1$i >> 0] = HEAP8[$agg$tmp$i >> 0] | 0;
      $__a$addr$i$i = $5;
      $__p$addr$i$i = $6;
      $__args$addr$i$i = $8;
      $9 = $__a$addr$i$i;
      $10 = $__p$addr$i$i;
      $11 = $__args$addr$i$i;
      $__t$addr$i$i$i = $11;
      $12 = $__t$addr$i$i$i;
      $this$addr$i$i$i9 = $9;
      $__p$addr$i$i$i = $10;
      $__args$addr$i$i$i = $12;
      $13 = $__p$addr$i$i$i;
      $14 = $__args$addr$i$i$i;
      $__t$addr$i$i$i$i = $14;
      $15 = $__t$addr$i$i$i$i;
      $16 = HEAP8[$15 >> 0] | 0;
      HEAP8[$13 >> 0] = $16;
      $this$addr$i7 = $__annotator;
      $__end_5 = ($this1 + 4) | 0;
      $17 = HEAP32[$__end_5 >> 2] | 0;
      $incdec$ptr = ($17 + 1) | 0;
      HEAP32[$__end_5 >> 2] = $incdec$ptr;
      STACKTOP = sp;
      return;
    } else {
      $18 = $__x$addr;
      __ZNSt3__26vectorIhNS_9allocatorIhEEE21__push_back_slow_pathIRKhEEvOT_(
        $this1,
        $18
      );
      STACKTOP = sp;
      return;
    }
  }
  function __ZNSt3__26vectorIhNS_9allocatorIhEEE13shrink_to_fitEv($this) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $__a = 0,
      $__end_$i = 0,
      $__end_$i19 = 0,
      $__end_$i26 = 0,
      $__end_cap_$i = 0,
      $__end_cap_$i$i$i = 0,
      $__v = 0,
      $cmp = 0,
      $sub$ptr$lhs$cast$i = 0,
      $sub$ptr$lhs$cast$i$i = 0,
      $sub$ptr$lhs$cast$i21 = 0;
    var $sub$ptr$lhs$cast$i28 = 0,
      $sub$ptr$rhs$cast$i = 0,
      $sub$ptr$rhs$cast$i$i = 0,
      $sub$ptr$rhs$cast$i22 = 0,
      $sub$ptr$rhs$cast$i29 = 0,
      $sub$ptr$sub$i = 0,
      $sub$ptr$sub$i$i = 0,
      $sub$ptr$sub$i23 = 0,
      $sub$ptr$sub$i30 = 0,
      $this$addr = 0,
      $this$addr$i = 0,
      $this$addr$i$i = 0,
      $this$addr$i$i$i = 0,
      $this$addr$i$i$i$i = 0,
      $this$addr$i$i$i$i$i = 0,
      $this$addr$i$i$i11 = 0,
      $this$addr$i$i12 = 0,
      $this$addr$i13 = 0,
      $this$addr$i17 = 0,
      $this$addr$i24 = 0;
    var $this$addr$i9 = 0,
      $this1 = 0,
      $this1$i = 0,
      $this1$i$i = 0,
      $this1$i$i$i = 0,
      $this1$i$i$i$i = 0,
      $this1$i$i$i$i$i = 0,
      $this1$i$i$i16 = 0,
      $this1$i$i15 = 0,
      $this1$i10 = 0,
      $this1$i14 = 0,
      $this1$i18 = 0,
      $this1$i25 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 80) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
    $__v = sp;
    $this$addr = $this;
    $this1 = $this$addr;
    $this$addr$i = $this1;
    $this1$i = $this$addr$i;
    $this$addr$i$i = $this1$i;
    $this1$i$i = $this$addr$i$i;
    $this$addr$i$i$i = $this1$i$i;
    $this1$i$i$i = $this$addr$i$i$i;
    $__end_cap_$i$i$i = ($this1$i$i$i + 8) | 0;
    $this$addr$i$i$i$i = $__end_cap_$i$i$i;
    $this1$i$i$i$i = $this$addr$i$i$i$i;
    $this$addr$i$i$i$i$i = $this1$i$i$i$i;
    $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
    $0 = HEAP32[$this1$i$i$i$i$i >> 2] | 0;
    $1 = HEAP32[$this1$i$i >> 2] | 0;
    $sub$ptr$lhs$cast$i$i = $0;
    $sub$ptr$rhs$cast$i$i = $1;
    $sub$ptr$sub$i$i = ($sub$ptr$lhs$cast$i$i - $sub$ptr$rhs$cast$i$i) | 0;
    $this$addr$i9 = $this1;
    $this1$i10 = $this$addr$i9;
    $__end_$i = ($this1$i10 + 4) | 0;
    $2 = HEAP32[$__end_$i >> 2] | 0;
    $3 = HEAP32[$this1$i10 >> 2] | 0;
    $sub$ptr$lhs$cast$i = $2;
    $sub$ptr$rhs$cast$i = $3;
    $sub$ptr$sub$i = ($sub$ptr$lhs$cast$i - $sub$ptr$rhs$cast$i) | 0;
    $cmp = $sub$ptr$sub$i$i >>> 0 > $sub$ptr$sub$i >>> 0;
    if (!$cmp) {
      STACKTOP = sp;
      return;
    }
    $this$addr$i13 = $this1;
    $this1$i14 = $this$addr$i13;
    $__end_cap_$i = ($this1$i14 + 8) | 0;
    $this$addr$i$i12 = $__end_cap_$i;
    $this1$i$i15 = $this$addr$i$i12;
    $this$addr$i$i$i11 = $this1$i$i15;
    $this1$i$i$i16 = $this$addr$i$i$i11;
    $__a = $this1$i$i$i16;
    $this$addr$i17 = $this1;
    $this1$i18 = $this$addr$i17;
    $__end_$i19 = ($this1$i18 + 4) | 0;
    $4 = HEAP32[$__end_$i19 >> 2] | 0;
    $5 = HEAP32[$this1$i18 >> 2] | 0;
    $sub$ptr$lhs$cast$i21 = $4;
    $sub$ptr$rhs$cast$i22 = $5;
    $sub$ptr$sub$i23 = ($sub$ptr$lhs$cast$i21 - $sub$ptr$rhs$cast$i22) | 0;
    $this$addr$i24 = $this1;
    $this1$i25 = $this$addr$i24;
    $__end_$i26 = ($this1$i25 + 4) | 0;
    $6 = HEAP32[$__end_$i26 >> 2] | 0;
    $7 = HEAP32[$this1$i25 >> 2] | 0;
    $sub$ptr$lhs$cast$i28 = $6;
    $sub$ptr$rhs$cast$i29 = $7;
    $sub$ptr$sub$i30 = ($sub$ptr$lhs$cast$i28 - $sub$ptr$rhs$cast$i29) | 0;
    $8 = $__a;
    __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEEC2EmmS3_(
      $__v,
      $sub$ptr$sub$i23,
      $sub$ptr$sub$i30,
      $8
    );
    __ZNSt3__26vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EE(
      $this1,
      $__v
    );
    __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEED2Ev($__v);
    STACKTOP = sp;
    return;
  }
  function ___clang_call_terminate($0) {
    $0 = $0 | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    ___cxa_begin_catch($0 | 0) | 0;
    __ZSt9terminatev();
    // unreachable;
  }
  function __ZNSt3__26vectorIhNS_9allocatorIhEEE21__push_back_slow_pathIhEEvOT_(
    $this,
    $__x
  ) {
    $this = $this | 0;
    $__x = $__x | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0,
      $23 = 0,
      $24 = 0,
      $25 = 0,
      $26 = 0;
    var $27 = 0,
      $28 = 0,
      $29 = 0,
      $3 = 0,
      $30 = 0,
      $31 = 0,
      $32 = 0,
      $33 = 0,
      $34 = 0,
      $35 = 0,
      $36 = 0,
      $37 = 0,
      $38 = 0,
      $39 = 0,
      $4 = 0,
      $40 = 0,
      $41 = 0,
      $42 = 0,
      $5 = 0,
      $6 = 0;
    var $7 = 0,
      $8 = 0,
      $9 = 0,
      $__a = 0,
      $__a$addr$i = 0,
      $__a$addr$i$i = 0,
      $__a$addr$i$i$i = 0,
      $__a$addr$i$i26 = 0,
      $__args$addr$i = 0,
      $__args$addr$i$i = 0,
      $__args$addr$i$i$i = 0,
      $__b$addr$i$i = 0,
      $__b$addr$i$i$i = 0,
      $__cap$i = 0,
      $__end_ = 0,
      $__end_$i = 0,
      $__end_$i20 = 0,
      $__end_7 = 0,
      $__end_cap_$i = 0,
      $__end_cap_$i$i$i$i = 0;
    var $__ms$i = 0,
      $__new_size$addr$i = 0,
      $__p$addr$i = 0,
      $__p$addr$i$i = 0,
      $__p$addr$i$i$i = 0,
      $__p$addr$i27 = 0,
      $__t$addr$i = 0,
      $__t$addr$i$i = 0,
      $__t$addr$i$i$i = 0,
      $__t$addr$i$i$i$i = 0,
      $__v = 0,
      $__x$addr = 0,
      $__x$addr$i$i$i$i = 0,
      $__y$addr$i$i$i$i = 0,
      $add = 0,
      $agg$tmp$i = 0,
      $agg$tmp$i$i = 0,
      $agg$tmp1$i = 0,
      $agg$tmp1$i$i = 0,
      $call$i = 0;
    var $cmp$i = 0,
      $cmp$i$i$i$i = 0,
      $cmp3$i = 0,
      $cond$lvalue$i$i$i2D = 0,
      $div$i = 0,
      $incdec$ptr = 0,
      $mul$i = 0,
      $ref$tmp$i = 0,
      $retval$i = 0,
      $sub$ptr$lhs$cast$i = 0,
      $sub$ptr$lhs$cast$i$i$i = 0,
      $sub$ptr$lhs$cast$i22 = 0,
      $sub$ptr$rhs$cast$i = 0,
      $sub$ptr$rhs$cast$i$i$i = 0,
      $sub$ptr$rhs$cast$i23 = 0,
      $sub$ptr$sub$i = 0,
      $sub$ptr$sub$i$i$i = 0,
      $sub$ptr$sub$i24 = 0,
      $this$addr = 0,
      $this$addr$i = 0;
    var $this$addr$i$i = 0,
      $this$addr$i$i$i = 0,
      $this$addr$i$i$i$i = 0,
      $this$addr$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i$i = 0,
      $this$addr$i$i$i12 = 0,
      $this$addr$i$i$i25 = 0,
      $this$addr$i$i$i7$i = 0,
      $this$addr$i$i13 = 0,
      $this$addr$i10 = 0,
      $this$addr$i14 = 0,
      $this$addr$i18 = 0,
      $this1 = 0,
      $this1$i = 0,
      $this1$i$i = 0,
      $this1$i$i$i = 0,
      $this1$i$i$i$i = 0,
      $this1$i$i$i$i$i = 0,
      $this1$i$i$i$i$i$i = 0,
      $this1$i$i$i17 = 0;
    var $this1$i$i16 = 0,
      $this1$i11 = 0,
      $this1$i15 = 0,
      $this1$i19 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 208) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208 | 0);
    $agg$tmp1$i = (sp + 8) | 0;
    $agg$tmp$i = (sp + 193) | 0;
    $agg$tmp1$i$i = sp;
    $agg$tmp$i$i = (sp + 192) | 0;
    $__new_size$addr$i = (sp + 72) | 0;
    $ref$tmp$i = (sp + 60) | 0;
    $__v = (sp + 12) | 0;
    $this$addr = $this;
    $__x$addr = $__x;
    $this1 = $this$addr;
    $this$addr$i = $this1;
    $this1$i = $this$addr$i;
    $__end_cap_$i = ($this1$i + 8) | 0;
    $this$addr$i$i = $__end_cap_$i;
    $this1$i$i = $this$addr$i$i;
    $this$addr$i$i$i = $this1$i$i;
    $this1$i$i$i = $this$addr$i$i$i;
    $__a = $this1$i$i$i;
    $this$addr$i10 = $this1;
    $this1$i11 = $this$addr$i10;
    $__end_$i = ($this1$i11 + 4) | 0;
    $0 = HEAP32[$__end_$i >> 2] | 0;
    $1 = HEAP32[$this1$i11 >> 2] | 0;
    $sub$ptr$lhs$cast$i = $0;
    $sub$ptr$rhs$cast$i = $1;
    $sub$ptr$sub$i = ($sub$ptr$lhs$cast$i - $sub$ptr$rhs$cast$i) | 0;
    $add = ($sub$ptr$sub$i + 1) | 0;
    $this$addr$i14 = $this1;
    HEAP32[$__new_size$addr$i >> 2] = $add;
    $this1$i15 = $this$addr$i14;
    $call$i = __ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($this1$i15) | 0;
    $__ms$i = $call$i;
    $2 = HEAP32[$__new_size$addr$i >> 2] | 0;
    $3 = $__ms$i;
    $cmp$i = $2 >>> 0 > $3 >>> 0;
    if ($cmp$i) {
      __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(
        $this1$i15
      );
      // unreachable;
    }
    $this$addr$i$i13 = $this1$i15;
    $this1$i$i16 = $this$addr$i$i13;
    $this$addr$i$i$i12 = $this1$i$i16;
    $this1$i$i$i17 = $this$addr$i$i$i12;
    $this$addr$i$i$i$i = $this1$i$i$i17;
    $this1$i$i$i$i = $this$addr$i$i$i$i;
    $__end_cap_$i$i$i$i = ($this1$i$i$i$i + 8) | 0;
    $this$addr$i$i$i$i$i = $__end_cap_$i$i$i$i;
    $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
    $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
    $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
    $4 = HEAP32[$this1$i$i$i$i$i$i >> 2] | 0;
    $5 = HEAP32[$this1$i$i$i17 >> 2] | 0;
    $sub$ptr$lhs$cast$i$i$i = $4;
    $sub$ptr$rhs$cast$i$i$i = $5;
    $sub$ptr$sub$i$i$i =
      ($sub$ptr$lhs$cast$i$i$i - $sub$ptr$rhs$cast$i$i$i) | 0;
    $__cap$i = $sub$ptr$sub$i$i$i;
    $6 = $__cap$i;
    $7 = $__ms$i;
    $div$i = (($7 >>> 0) / 2) & -1;
    $cmp3$i = $6 >>> 0 >= $div$i >>> 0;
    if ($cmp3$i) {
      $8 = $__ms$i;
      $retval$i = $8;
    } else {
      $9 = $__cap$i;
      $mul$i = $9 << 1;
      HEAP32[$ref$tmp$i >> 2] = $mul$i;
      $__a$addr$i$i = $ref$tmp$i;
      $__b$addr$i$i = $__new_size$addr$i;
      $10 = $__a$addr$i$i;
      $11 = $__b$addr$i$i;
      HEAP8[$agg$tmp1$i$i >> 0] = HEAP8[$agg$tmp$i$i >> 0] | 0;
      $__a$addr$i$i$i = $10;
      $__b$addr$i$i$i = $11;
      $12 = $__a$addr$i$i$i;
      $13 = $__b$addr$i$i$i;
      $this$addr$i$i$i7$i = $agg$tmp1$i$i;
      $__x$addr$i$i$i$i = $12;
      $__y$addr$i$i$i$i = $13;
      $14 = $__x$addr$i$i$i$i;
      $15 = HEAP32[$14 >> 2] | 0;
      $16 = $__y$addr$i$i$i$i;
      $17 = HEAP32[$16 >> 2] | 0;
      $cmp$i$i$i$i = $15 >>> 0 < $17 >>> 0;
      $18 = $__b$addr$i$i$i;
      $19 = $__a$addr$i$i$i;
      $cond$lvalue$i$i$i2D = $cmp$i$i$i$i ? $18 : $19;
      $20 = HEAP32[$cond$lvalue$i$i$i2D >> 2] | 0;
      $retval$i = $20;
    }
    $21 = $retval$i;
    $this$addr$i18 = $this1;
    $this1$i19 = $this$addr$i18;
    $__end_$i20 = ($this1$i19 + 4) | 0;
    $22 = HEAP32[$__end_$i20 >> 2] | 0;
    $23 = HEAP32[$this1$i19 >> 2] | 0;
    $sub$ptr$lhs$cast$i22 = $22;
    $sub$ptr$rhs$cast$i23 = $23;
    $sub$ptr$sub$i24 = ($sub$ptr$lhs$cast$i22 - $sub$ptr$rhs$cast$i23) | 0;
    $24 = $__a;
    __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEEC2EmmS3_(
      $__v,
      $21,
      $sub$ptr$sub$i24,
      $24
    );
    $25 = $__a;
    $__end_ = ($__v + 8) | 0;
    $26 = HEAP32[$__end_ >> 2] | 0;
    $__p$addr$i = $26;
    $27 = $__p$addr$i;
    $28 = $__x$addr;
    $__t$addr$i = $28;
    $29 = $__t$addr$i;
    $__a$addr$i = $25;
    $__p$addr$i27 = $27;
    $__args$addr$i = $29;
    $30 = $__a$addr$i;
    $31 = $__p$addr$i27;
    $32 = $__args$addr$i;
    $__t$addr$i$i = $32;
    $33 = $__t$addr$i$i;
    HEAP8[$agg$tmp1$i >> 0] = HEAP8[$agg$tmp$i >> 0] | 0;
    $__a$addr$i$i26 = $30;
    $__p$addr$i$i = $31;
    $__args$addr$i$i = $33;
    $34 = $__a$addr$i$i26;
    $35 = $__p$addr$i$i;
    $36 = $__args$addr$i$i;
    $__t$addr$i$i$i = $36;
    $37 = $__t$addr$i$i$i;
    $this$addr$i$i$i25 = $34;
    $__p$addr$i$i$i = $35;
    $__args$addr$i$i$i = $37;
    $38 = $__p$addr$i$i$i;
    $39 = $__args$addr$i$i$i;
    $__t$addr$i$i$i$i = $39;
    $40 = $__t$addr$i$i$i$i;
    $41 = HEAP8[$40 >> 0] | 0;
    HEAP8[$38 >> 0] = $41;
    $__end_7 = ($__v + 8) | 0;
    $42 = HEAP32[$__end_7 >> 2] | 0;
    $incdec$ptr = ($42 + 1) | 0;
    HEAP32[$__end_7 >> 2] = $incdec$ptr;
    __ZNSt3__26vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EE(
      $this1,
      $__v
    );
    __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEED2Ev($__v);
    STACKTOP = sp;
    return;
  }
  function __ZNKSt3__26vectorIhNS_9allocatorIhEEE4sizeEv($this) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $__end_ = 0,
      $sub$ptr$lhs$cast = 0,
      $sub$ptr$rhs$cast = 0,
      $sub$ptr$sub = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $this1 = $this$addr;
    $__end_ = ($this1 + 4) | 0;
    $0 = HEAP32[$__end_ >> 2] | 0;
    $1 = HEAP32[$this1 >> 2] | 0;
    $sub$ptr$lhs$cast = $0;
    $sub$ptr$rhs$cast = $1;
    $sub$ptr$sub = ($sub$ptr$lhs$cast - $sub$ptr$rhs$cast) | 0;
    STACKTOP = sp;
    return $sub$ptr$sub | 0;
  }
  function __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEEC2EmmS3_(
    $this,
    $__cap,
    $__start,
    $__a
  ) {
    $this = $this | 0;
    $__cap = $__cap | 0;
    $__start = $__start | 0;
    $__a = $__a | 0;
    var $$addr$i$i = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0;
    var $9 = 0,
      $__a$addr = 0,
      $__a$addr$i = 0,
      $__align$addr$i$i$i = 0,
      $__begin_ = 0,
      $__cap$addr = 0,
      $__end_ = 0,
      $__end_cap_ = 0,
      $__end_cap_$i = 0,
      $__end_cap_$i19 = 0,
      $__n$addr$i = 0,
      $__n$addr$i$i = 0,
      $__size$addr$i$i$i = 0,
      $__start$addr = 0,
      $__t$addr$i$i = 0,
      $__t$addr$i$i$i = 0,
      $__t$addr$i$i4$i = 0,
      $__t$addr$i3$i = 0,
      $__t1$addr$i = 0,
      $__t2$addr$i = 0;
    var $__u$addr$i$i = 0,
      $__u$addr$i6$i = 0,
      $add$ptr = 0,
      $add$ptr$i$i = 0,
      $add$ptr5 = 0,
      $call$i$i$i = 0,
      $cmp = 0,
      $cond = 0,
      $ref$tmp = 0,
      $this$addr = 0,
      $this$addr$i = 0,
      $this$addr$i$i = 0,
      $this$addr$i$i$i = 0,
      $this$addr$i$i$i11 = 0,
      $this$addr$i$i$i15 = 0,
      $this$addr$i$i12 = 0,
      $this$addr$i$i16 = 0,
      $this$addr$i$i7 = 0,
      $this$addr$i17 = 0,
      $this$addr$i5$i = 0;
    var $this$addr$i8 = 0,
      $this1 = 0,
      $this1$i = 0,
      $this1$i$i = 0,
      $this1$i$i$i = 0,
      $this1$i$i$i21 = 0,
      $this1$i$i10 = 0,
      $this1$i$i13 = 0,
      $this1$i$i20 = 0,
      $this1$i18 = 0,
      $this1$i7$i = 0,
      $this1$i9 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 128) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
    $ref$tmp = sp;
    $this$addr = $this;
    $__cap$addr = $__cap;
    $__start$addr = $__start;
    $__a$addr = $__a;
    $this1 = $this$addr;
    $__end_cap_ = ($this1 + 12) | 0;
    HEAP32[$ref$tmp >> 2] = 0;
    $0 = $__a$addr;
    $this$addr$i = $__end_cap_;
    $__t1$addr$i = $ref$tmp;
    $__t2$addr$i = $0;
    $this1$i = $this$addr$i;
    $1 = $__t1$addr$i;
    $__t$addr$i$i = $1;
    $2 = $__t$addr$i$i;
    $this$addr$i5$i = $this1$i;
    $__u$addr$i6$i = $2;
    $this1$i7$i = $this$addr$i5$i;
    $3 = $__u$addr$i6$i;
    $__t$addr$i$i4$i = $3;
    HEAP32[$this1$i7$i >> 2] = 0;
    $4 = ($this1$i + 4) | 0;
    $5 = $__t2$addr$i;
    $__t$addr$i3$i = $5;
    $6 = $__t$addr$i3$i;
    $this$addr$i$i = $4;
    $__u$addr$i$i = $6;
    $this1$i$i = $this$addr$i$i;
    $7 = $__u$addr$i$i;
    $__t$addr$i$i$i = $7;
    $8 = $__t$addr$i$i$i;
    HEAP32[$this1$i$i >> 2] = $8;
    $9 = $__cap$addr;
    $cmp = ($9 | 0) != 0;
    if ($cmp) {
      $this$addr$i17 = $this1;
      $this1$i18 = $this$addr$i17;
      $__end_cap_$i19 = ($this1$i18 + 12) | 0;
      $this$addr$i$i16 = $__end_cap_$i19;
      $this1$i$i20 = $this$addr$i$i16;
      $add$ptr$i$i = ($this1$i$i20 + 4) | 0;
      $this$addr$i$i$i15 = $add$ptr$i$i;
      $this1$i$i$i21 = $this$addr$i$i$i15;
      $10 = HEAP32[$this1$i$i$i21 >> 2] | 0;
      $11 = $__cap$addr;
      $__a$addr$i = $10;
      $__n$addr$i = $11;
      $12 = $__a$addr$i;
      $13 = $__n$addr$i;
      $this$addr$i$i12 = $12;
      $__n$addr$i$i = $13;
      $$addr$i$i = 0;
      $this1$i$i13 = $this$addr$i$i12;
      $this$addr$i$i$i11 = $this1$i$i13;
      $14 = $__n$addr$i$i;
      $__size$addr$i$i$i = $14;
      $__align$addr$i$i$i = 1;
      $15 = $__size$addr$i$i$i;
      $call$i$i$i = __Znwm($15) | 0;
      $cond = $call$i$i$i;
    } else {
      $cond = 0;
    }
    HEAP32[$this1 >> 2] = $cond;
    $16 = HEAP32[$this1 >> 2] | 0;
    $17 = $__start$addr;
    $add$ptr = ($16 + $17) | 0;
    $__end_ = ($this1 + 8) | 0;
    HEAP32[$__end_ >> 2] = $add$ptr;
    $__begin_ = ($this1 + 4) | 0;
    HEAP32[$__begin_ >> 2] = $add$ptr;
    $18 = HEAP32[$this1 >> 2] | 0;
    $19 = $__cap$addr;
    $add$ptr5 = ($18 + $19) | 0;
    $this$addr$i8 = $this1;
    $this1$i9 = $this$addr$i8;
    $__end_cap_$i = ($this1$i9 + 12) | 0;
    $this$addr$i$i7 = $__end_cap_$i;
    $this1$i$i10 = $this$addr$i$i7;
    $this$addr$i$i$i = $this1$i$i10;
    $this1$i$i$i = $this$addr$i$i$i;
    HEAP32[$this1$i$i$i >> 2] = $add$ptr5;
    STACKTOP = sp;
    return;
  }
  function __ZNSt3__26vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EE(
    $this,
    $__v
  ) {
    $this = $this | 0;
    $__v = $__v | 0;
    var $$addr$i = 0,
      $$addr$i$i = 0,
      $$addr$i$i20 = 0,
      $$addr1$i$i = 0,
      $$addr1$i$i21 = 0,
      $$addr2$i$i = 0,
      $$addr2$i$i22 = 0,
      $$addr3$i$i = 0,
      $$addr3$i$i23 = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0;
    var $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0,
      $23 = 0,
      $24 = 0,
      $25 = 0,
      $26 = 0,
      $27 = 0,
      $28 = 0,
      $29 = 0,
      $3 = 0,
      $30 = 0,
      $31 = 0,
      $32 = 0,
      $33 = 0,
      $34 = 0,
      $35 = 0,
      $36 = 0;
    var $37 = 0,
      $38 = 0,
      $39 = 0,
      $4 = 0,
      $40 = 0,
      $41 = 0,
      $42 = 0,
      $43 = 0,
      $44 = 0,
      $45 = 0,
      $46 = 0,
      $47 = 0,
      $48 = 0,
      $49 = 0,
      $5 = 0,
      $50 = 0,
      $51 = 0,
      $52 = 0,
      $53 = 0,
      $54 = 0;
    var $55 = 0,
      $56 = 0,
      $57 = 0,
      $58 = 0,
      $59 = 0,
      $6 = 0,
      $60 = 0,
      $61 = 0,
      $62 = 0,
      $63 = 0,
      $64 = 0,
      $65 = 0,
      $66 = 0,
      $67 = 0,
      $68 = 0,
      $69 = 0,
      $7 = 0,
      $70 = 0,
      $71 = 0,
      $72 = 0;
    var $73 = 0,
      $74 = 0,
      $75 = 0,
      $76 = 0,
      $77 = 0,
      $8 = 0,
      $9 = 0,
      $_Np$i = 0,
      $__begin1$addr$i = 0,
      $__begin_2 = 0,
      $__begin_4 = 0,
      $__begin_9 = 0,
      $__current_size$addr$i = 0,
      $__end1$addr$i = 0,
      $__end2$addr$i = 0,
      $__end_ = 0,
      $__end_$i = 0,
      $__end_$i$i = 0,
      $__end_5 = 0,
      $__end_6 = 0;
    var $__end_cap_$i = 0,
      $__end_cap_$i$i$i$i = 0,
      $__end_cap_$i$i$i$i36 = 0,
      $__end_cap_$i$i$i28$i = 0,
      $__end_cap_$i$i$i32$i = 0,
      $__end_cap_$i59 = 0,
      $__end_cap_$i83 = 0,
      $__p$addr$i$i$i = 0,
      $__p$addr$i$i$i24 = 0,
      $__p$addr$i$i10$i = 0,
      $__p$addr$i$i13$i = 0,
      $__p$addr$i$i16$i = 0,
      $__p$addr$i$i20$i = 0,
      $__p$addr$i$i36$i = 0,
      $__p$addr$i$i40$i = 0,
      $__t$addr$i$i = 0,
      $__t$addr$i$i65 = 0,
      $__t$addr$i$i71 = 0,
      $__t$addr$i3$i = 0,
      $__t$addr$i3$i64 = 0;
    var $__t$addr$i3$i70 = 0,
      $__t$addr$i4$i = 0,
      $__t$addr$i4$i63 = 0,
      $__t$addr$i4$i69 = 0,
      $__t$i = 0,
      $__t$i68 = 0,
      $__t$i74 = 0,
      $__v$addr = 0,
      $__x$addr$i = 0,
      $__x$addr$i66 = 0,
      $__x$addr$i72 = 0,
      $__y$addr$i = 0,
      $__y$addr$i67 = 0,
      $__y$addr$i73 = 0,
      $add$ptr$i = 0,
      $add$ptr$i30 = 0,
      $add$ptr$i78 = 0,
      $add$ptr6$i = 0,
      $add$ptr6$i44 = 0,
      $add$ptr8$i = 0;
    var $add$ptr9$i = 0,
      $cmp$i = 0,
      $idx$neg$i = 0,
      $sub$ptr$lhs$cast$i = 0,
      $sub$ptr$lhs$cast$i$i = 0,
      $sub$ptr$lhs$cast$i$i$i = 0,
      $sub$ptr$lhs$cast$i$i$i41 = 0,
      $sub$ptr$lhs$cast$i$i33$i = 0,
      $sub$ptr$lhs$cast$i$i37$i = 0,
      $sub$ptr$lhs$cast$i75 = 0,
      $sub$ptr$rhs$cast$i = 0,
      $sub$ptr$rhs$cast$i$i = 0,
      $sub$ptr$rhs$cast$i$i$i = 0,
      $sub$ptr$rhs$cast$i$i$i42 = 0,
      $sub$ptr$rhs$cast$i$i34$i = 0,
      $sub$ptr$rhs$cast$i$i38$i = 0,
      $sub$ptr$rhs$cast$i76 = 0,
      $sub$ptr$sub$i = 0,
      $sub$ptr$sub$i$i = 0,
      $sub$ptr$sub$i$i$i = 0;
    var $sub$ptr$sub$i$i$i43 = 0,
      $sub$ptr$sub$i$i35$i = 0,
      $sub$ptr$sub$i$i39$i = 0,
      $sub$ptr$sub$i77 = 0,
      $this$addr = 0,
      $this$addr$i = 0,
      $this$addr$i$i = 0,
      $this$addr$i$i$i = 0,
      $this$addr$i$i$i$i = 0,
      $this$addr$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i$i14 = 0,
      $this$addr$i$i$i$i$i15 = 0,
      $this$addr$i$i$i$i$i20$i = 0,
      $this$addr$i$i$i$i$i24$i = 0,
      $this$addr$i$i$i$i16 = 0,
      $this$addr$i$i$i$i21$i = 0,
      $this$addr$i$i$i$i25$i = 0,
      $this$addr$i$i$i17 = 0,
      $this$addr$i$i$i22$i = 0;
    var $this$addr$i$i$i26$i = 0,
      $this$addr$i$i$i49 = 0,
      $this$addr$i$i$i55 = 0,
      $this$addr$i$i$i79 = 0,
      $this$addr$i$i23$i = 0,
      $this$addr$i$i25 = 0,
      $this$addr$i$i27$i = 0,
      $this$addr$i$i50 = 0,
      $this$addr$i$i56 = 0,
      $this$addr$i$i80 = 0,
      $this$addr$i10$i = 0,
      $this$addr$i11 = 0,
      $this$addr$i11$i = 0,
      $this$addr$i11$i19 = 0,
      $this$addr$i14$i = 0,
      $this$addr$i14$i18 = 0,
      $this$addr$i17$i = 0,
      $this$addr$i17$i13 = 0,
      $this$addr$i21$i = 0,
      $this$addr$i24$i = 0;
    var $this$addr$i26 = 0,
      $this$addr$i28$i = 0,
      $this$addr$i37$i = 0,
      $this$addr$i41$i = 0,
      $this$addr$i47 = 0,
      $this$addr$i51 = 0,
      $this$addr$i57 = 0,
      $this$addr$i81 = 0,
      $this$addr$i9$i = 0,
      $this1 = 0,
      $this1$i = 0,
      $this1$i$i = 0,
      $this1$i$i$i = 0,
      $this1$i$i$i$i = 0,
      $this1$i$i$i$i$i = 0,
      $this1$i$i$i$i$i$i = 0,
      $this1$i$i$i$i$i$i38 = 0,
      $this1$i$i$i$i$i30$i = 0,
      $this1$i$i$i$i$i34$i = 0,
      $this1$i$i$i$i$i37 = 0;
    var $this1$i$i$i$i29$i = 0,
      $this1$i$i$i$i33$i = 0,
      $this1$i$i$i$i35 = 0,
      $this1$i$i$i27$i = 0,
      $this1$i$i$i31$i = 0,
      $this1$i$i$i34 = 0,
      $this1$i$i$i54 = 0,
      $this1$i$i$i61 = 0,
      $this1$i$i$i85 = 0,
      $this1$i$i26$i = 0,
      $this1$i$i28 = 0,
      $this1$i$i30$i = 0,
      $this1$i$i53 = 0,
      $this1$i$i60 = 0,
      $this1$i$i84 = 0,
      $this1$i12$i = 0,
      $this1$i12$i45 = 0,
      $this1$i15$i = 0,
      $this1$i15$i33 = 0,
      $this1$i18$i = 0;
    var $this1$i18$i31 = 0,
      $this1$i22$i = 0,
      $this1$i25$i = 0,
      $this1$i27 = 0,
      $this1$i29$i = 0,
      $this1$i38$i = 0,
      $this1$i42$i = 0,
      $this1$i48 = 0,
      $this1$i52 = 0,
      $this1$i58 = 0,
      $this1$i82 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 352) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352 | 0);
    $__t$i74 = (sp + 288) | 0;
    $__t$i68 = (sp + 264) | 0;
    $__t$i = (sp + 216) | 0;
    $this$addr = $this;
    $__v$addr = $__v;
    $this1 = $this$addr;
    $this$addr$i = $this1;
    $this1$i = $this$addr$i;
    $this$addr$i$i = $this1$i;
    $this1$i$i = $this$addr$i$i;
    $0 = HEAP32[$this1$i$i >> 2] | 0;
    $__p$addr$i$i$i = $0;
    $1 = $__p$addr$i$i$i;
    $this$addr$i41$i = $this1$i;
    $this1$i42$i = $this$addr$i41$i;
    $2 = HEAP32[$this1$i42$i >> 2] | 0;
    $__p$addr$i$i40$i = $2;
    $3 = $__p$addr$i$i40$i;
    $this$addr$i28$i = $this1$i;
    $this1$i29$i = $this$addr$i28$i;
    $this$addr$i$i27$i = $this1$i29$i;
    $this1$i$i30$i = $this$addr$i$i27$i;
    $this$addr$i$i$i26$i = $this1$i$i30$i;
    $this1$i$i$i31$i = $this$addr$i$i$i26$i;
    $__end_cap_$i$i$i32$i = ($this1$i$i$i31$i + 8) | 0;
    $this$addr$i$i$i$i25$i = $__end_cap_$i$i$i32$i;
    $this1$i$i$i$i33$i = $this$addr$i$i$i$i25$i;
    $this$addr$i$i$i$i$i24$i = $this1$i$i$i$i33$i;
    $this1$i$i$i$i$i34$i = $this$addr$i$i$i$i$i24$i;
    $4 = HEAP32[$this1$i$i$i$i$i34$i >> 2] | 0;
    $5 = HEAP32[$this1$i$i30$i >> 2] | 0;
    $sub$ptr$lhs$cast$i$i37$i = $4;
    $sub$ptr$rhs$cast$i$i38$i = $5;
    $sub$ptr$sub$i$i39$i =
      ($sub$ptr$lhs$cast$i$i37$i - $sub$ptr$rhs$cast$i$i38$i) | 0;
    $add$ptr$i = ($3 + $sub$ptr$sub$i$i39$i) | 0;
    $this$addr$i21$i = $this1$i;
    $this1$i22$i = $this$addr$i21$i;
    $6 = HEAP32[$this1$i22$i >> 2] | 0;
    $__p$addr$i$i20$i = $6;
    $7 = $__p$addr$i$i20$i;
    $this$addr$i17$i = $this1$i;
    $this1$i18$i = $this$addr$i17$i;
    $__end_$i$i = ($this1$i18$i + 4) | 0;
    $8 = HEAP32[$__end_$i$i >> 2] | 0;
    $9 = HEAP32[$this1$i18$i >> 2] | 0;
    $sub$ptr$lhs$cast$i$i = $8;
    $sub$ptr$rhs$cast$i$i = $9;
    $sub$ptr$sub$i$i = ($sub$ptr$lhs$cast$i$i - $sub$ptr$rhs$cast$i$i) | 0;
    $add$ptr6$i = ($7 + $sub$ptr$sub$i$i) | 0;
    $this$addr$i14$i = $this1$i;
    $this1$i15$i = $this$addr$i14$i;
    $10 = HEAP32[$this1$i15$i >> 2] | 0;
    $__p$addr$i$i13$i = $10;
    $11 = $__p$addr$i$i13$i;
    $this$addr$i11$i = $this1$i;
    $this1$i12$i = $this$addr$i11$i;
    $this$addr$i$i$i = $this1$i12$i;
    $this1$i$i$i = $this$addr$i$i$i;
    $this$addr$i$i$i$i = $this1$i$i$i;
    $this1$i$i$i$i = $this$addr$i$i$i$i;
    $__end_cap_$i$i$i$i = ($this1$i$i$i$i + 8) | 0;
    $this$addr$i$i$i$i$i = $__end_cap_$i$i$i$i;
    $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
    $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
    $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
    $12 = HEAP32[$this1$i$i$i$i$i$i >> 2] | 0;
    $13 = HEAP32[$this1$i$i$i >> 2] | 0;
    $sub$ptr$lhs$cast$i$i$i = $12;
    $sub$ptr$rhs$cast$i$i$i = $13;
    $sub$ptr$sub$i$i$i =
      ($sub$ptr$lhs$cast$i$i$i - $sub$ptr$rhs$cast$i$i$i) | 0;
    $add$ptr9$i = ($11 + $sub$ptr$sub$i$i$i) | 0;
    $this$addr$i10$i = $this1$i;
    $$addr$i$i = $1;
    $$addr1$i$i = $add$ptr$i;
    $$addr2$i$i = $add$ptr6$i;
    $$addr3$i$i = $add$ptr9$i;
    $this$addr$i81 = $this1;
    $this1$i82 = $this$addr$i81;
    $__end_cap_$i83 = ($this1$i82 + 8) | 0;
    $this$addr$i$i80 = $__end_cap_$i83;
    $this1$i$i84 = $this$addr$i$i80;
    $this$addr$i$i$i79 = $this1$i$i84;
    $this1$i$i$i85 = $this$addr$i$i$i79;
    $14 = HEAP32[$this1 >> 2] | 0;
    $__end_ = ($this1 + 4) | 0;
    $15 = HEAP32[$__end_ >> 2] | 0;
    $16 = $__v$addr;
    $__begin_2 = ($16 + 4) | 0;
    $$addr$i = $this1$i$i$i85;
    $__begin1$addr$i = $14;
    $__end1$addr$i = $15;
    $__end2$addr$i = $__begin_2;
    $17 = $__end1$addr$i;
    $18 = $__begin1$addr$i;
    $sub$ptr$lhs$cast$i75 = $17;
    $sub$ptr$rhs$cast$i76 = $18;
    $sub$ptr$sub$i77 = ($sub$ptr$lhs$cast$i75 - $sub$ptr$rhs$cast$i76) | 0;
    $_Np$i = $sub$ptr$sub$i77;
    $19 = $_Np$i;
    $20 = $__end2$addr$i;
    $21 = HEAP32[$20 >> 2] | 0;
    $idx$neg$i = (0 - $19) | 0;
    $add$ptr$i78 = ($21 + $idx$neg$i) | 0;
    HEAP32[$20 >> 2] = $add$ptr$i78;
    $22 = $_Np$i;
    $cmp$i = ($22 | 0) > 0;
    if ($cmp$i) {
      $23 = $__end2$addr$i;
      $24 = HEAP32[$23 >> 2] | 0;
      $25 = $__begin1$addr$i;
      $26 = $_Np$i;
      _memcpy($24 | 0, $25 | 0, $26 | 0) | 0;
    }
    $27 = $__v$addr;
    $__begin_4 = ($27 + 4) | 0;
    $__x$addr$i72 = $this1;
    $__y$addr$i73 = $__begin_4;
    $28 = $__x$addr$i72;
    $__t$addr$i$i71 = $28;
    $29 = $__t$addr$i$i71;
    $30 = HEAP32[$29 >> 2] | 0;
    HEAP32[$__t$i74 >> 2] = $30;
    $31 = $__y$addr$i73;
    $__t$addr$i4$i69 = $31;
    $32 = $__t$addr$i4$i69;
    $33 = HEAP32[$32 >> 2] | 0;
    $34 = $__x$addr$i72;
    HEAP32[$34 >> 2] = $33;
    $__t$addr$i3$i70 = $__t$i74;
    $35 = $__t$addr$i3$i70;
    $36 = HEAP32[$35 >> 2] | 0;
    $37 = $__y$addr$i73;
    HEAP32[$37 >> 2] = $36;
    $__end_5 = ($this1 + 4) | 0;
    $38 = $__v$addr;
    $__end_6 = ($38 + 8) | 0;
    $__x$addr$i66 = $__end_5;
    $__y$addr$i67 = $__end_6;
    $39 = $__x$addr$i66;
    $__t$addr$i$i65 = $39;
    $40 = $__t$addr$i$i65;
    $41 = HEAP32[$40 >> 2] | 0;
    HEAP32[$__t$i68 >> 2] = $41;
    $42 = $__y$addr$i67;
    $__t$addr$i4$i63 = $42;
    $43 = $__t$addr$i4$i63;
    $44 = HEAP32[$43 >> 2] | 0;
    $45 = $__x$addr$i66;
    HEAP32[$45 >> 2] = $44;
    $__t$addr$i3$i64 = $__t$i68;
    $46 = $__t$addr$i3$i64;
    $47 = HEAP32[$46 >> 2] | 0;
    $48 = $__y$addr$i67;
    HEAP32[$48 >> 2] = $47;
    $this$addr$i57 = $this1;
    $this1$i58 = $this$addr$i57;
    $__end_cap_$i59 = ($this1$i58 + 8) | 0;
    $this$addr$i$i56 = $__end_cap_$i59;
    $this1$i$i60 = $this$addr$i$i56;
    $this$addr$i$i$i55 = $this1$i$i60;
    $this1$i$i$i61 = $this$addr$i$i$i55;
    $49 = $__v$addr;
    $this$addr$i51 = $49;
    $this1$i52 = $this$addr$i51;
    $__end_cap_$i = ($this1$i52 + 12) | 0;
    $this$addr$i$i50 = $__end_cap_$i;
    $this1$i$i53 = $this$addr$i$i50;
    $this$addr$i$i$i49 = $this1$i$i53;
    $this1$i$i$i54 = $this$addr$i$i$i49;
    $__x$addr$i = $this1$i$i$i61;
    $__y$addr$i = $this1$i$i$i54;
    $50 = $__x$addr$i;
    $__t$addr$i$i = $50;
    $51 = $__t$addr$i$i;
    $52 = HEAP32[$51 >> 2] | 0;
    HEAP32[$__t$i >> 2] = $52;
    $53 = $__y$addr$i;
    $__t$addr$i4$i = $53;
    $54 = $__t$addr$i4$i;
    $55 = HEAP32[$54 >> 2] | 0;
    $56 = $__x$addr$i;
    HEAP32[$56 >> 2] = $55;
    $__t$addr$i3$i = $__t$i;
    $57 = $__t$addr$i3$i;
    $58 = HEAP32[$57 >> 2] | 0;
    $59 = $__y$addr$i;
    HEAP32[$59 >> 2] = $58;
    $60 = $__v$addr;
    $__begin_9 = ($60 + 4) | 0;
    $61 = HEAP32[$__begin_9 >> 2] | 0;
    $62 = $__v$addr;
    HEAP32[$62 >> 2] = $61;
    $this$addr$i47 = $this1;
    $this1$i48 = $this$addr$i47;
    $__end_$i = ($this1$i48 + 4) | 0;
    $63 = HEAP32[$__end_$i >> 2] | 0;
    $64 = HEAP32[$this1$i48 >> 2] | 0;
    $sub$ptr$lhs$cast$i = $63;
    $sub$ptr$rhs$cast$i = $64;
    $sub$ptr$sub$i = ($sub$ptr$lhs$cast$i - $sub$ptr$rhs$cast$i) | 0;
    $this$addr$i26 = $this1;
    $__current_size$addr$i = $sub$ptr$sub$i;
    $this1$i27 = $this$addr$i26;
    $this$addr$i$i25 = $this1$i27;
    $this1$i$i28 = $this$addr$i$i25;
    $65 = HEAP32[$this1$i$i28 >> 2] | 0;
    $__p$addr$i$i$i24 = $65;
    $66 = $__p$addr$i$i$i24;
    $this$addr$i37$i = $this1$i27;
    $this1$i38$i = $this$addr$i37$i;
    $67 = HEAP32[$this1$i38$i >> 2] | 0;
    $__p$addr$i$i36$i = $67;
    $68 = $__p$addr$i$i36$i;
    $this$addr$i24$i = $this1$i27;
    $this1$i25$i = $this$addr$i24$i;
    $this$addr$i$i23$i = $this1$i25$i;
    $this1$i$i26$i = $this$addr$i$i23$i;
    $this$addr$i$i$i22$i = $this1$i$i26$i;
    $this1$i$i$i27$i = $this$addr$i$i$i22$i;
    $__end_cap_$i$i$i28$i = ($this1$i$i$i27$i + 8) | 0;
    $this$addr$i$i$i$i21$i = $__end_cap_$i$i$i28$i;
    $this1$i$i$i$i29$i = $this$addr$i$i$i$i21$i;
    $this$addr$i$i$i$i$i20$i = $this1$i$i$i$i29$i;
    $this1$i$i$i$i$i30$i = $this$addr$i$i$i$i$i20$i;
    $69 = HEAP32[$this1$i$i$i$i$i30$i >> 2] | 0;
    $70 = HEAP32[$this1$i$i26$i >> 2] | 0;
    $sub$ptr$lhs$cast$i$i33$i = $69;
    $sub$ptr$rhs$cast$i$i34$i = $70;
    $sub$ptr$sub$i$i35$i =
      ($sub$ptr$lhs$cast$i$i33$i - $sub$ptr$rhs$cast$i$i34$i) | 0;
    $add$ptr$i30 = ($68 + $sub$ptr$sub$i$i35$i) | 0;
    $this$addr$i17$i13 = $this1$i27;
    $this1$i18$i31 = $this$addr$i17$i13;
    $71 = HEAP32[$this1$i18$i31 >> 2] | 0;
    $__p$addr$i$i16$i = $71;
    $72 = $__p$addr$i$i16$i;
    $this$addr$i14$i18 = $this1$i27;
    $this1$i15$i33 = $this$addr$i14$i18;
    $this$addr$i$i$i17 = $this1$i15$i33;
    $this1$i$i$i34 = $this$addr$i$i$i17;
    $this$addr$i$i$i$i16 = $this1$i$i$i34;
    $this1$i$i$i$i35 = $this$addr$i$i$i$i16;
    $__end_cap_$i$i$i$i36 = ($this1$i$i$i$i35 + 8) | 0;
    $this$addr$i$i$i$i$i15 = $__end_cap_$i$i$i$i36;
    $this1$i$i$i$i$i37 = $this$addr$i$i$i$i$i15;
    $this$addr$i$i$i$i$i$i14 = $this1$i$i$i$i$i37;
    $this1$i$i$i$i$i$i38 = $this$addr$i$i$i$i$i$i14;
    $73 = HEAP32[$this1$i$i$i$i$i$i38 >> 2] | 0;
    $74 = HEAP32[$this1$i$i$i34 >> 2] | 0;
    $sub$ptr$lhs$cast$i$i$i41 = $73;
    $sub$ptr$rhs$cast$i$i$i42 = $74;
    $sub$ptr$sub$i$i$i43 =
      ($sub$ptr$lhs$cast$i$i$i41 - $sub$ptr$rhs$cast$i$i$i42) | 0;
    $add$ptr6$i44 = ($72 + $sub$ptr$sub$i$i$i43) | 0;
    $this$addr$i11$i19 = $this1$i27;
    $this1$i12$i45 = $this$addr$i11$i19;
    $75 = HEAP32[$this1$i12$i45 >> 2] | 0;
    $__p$addr$i$i10$i = $75;
    $76 = $__p$addr$i$i10$i;
    $77 = $__current_size$addr$i;
    $add$ptr8$i = ($76 + $77) | 0;
    $this$addr$i9$i = $this1$i27;
    $$addr$i$i20 = $66;
    $$addr1$i$i21 = $add$ptr$i30;
    $$addr2$i$i22 = $add$ptr6$i44;
    $$addr3$i$i23 = $add$ptr8$i;
    $this$addr$i11 = $this1;
    STACKTOP = sp;
    return;
  }
  function __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEED2Ev($this) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0,
      $23 = 0,
      $24 = 0,
      $25 = 0,
      $3 = 0;
    var $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $__a$addr$i = 0,
      $__a$addr$i$i$i$i = 0,
      $__a$addr$i$i$i$i$i = 0,
      $__align$addr$i$i$i = 0,
      $__align$addr$i$i$i$i = 0,
      $__begin_$i = 0,
      $__end_$i$i$i = 0,
      $__end_2$i$i$i = 0,
      $__end_cap_$i = 0,
      $__end_cap_$i$i = 0,
      $__end_cap_$i$i$i$i = 0,
      $__n$addr$i = 0,
      $__n$addr$i$i = 0,
      $__new_last$addr$i$i = 0;
    var $__new_last$addr$i$i$i = 0,
      $__p$addr$i = 0,
      $__p$addr$i$i = 0,
      $__p$addr$i$i$i$i = 0,
      $__p$addr$i$i$i$i$i = 0,
      $__p$addr$i$i$i$i$i$i = 0,
      $__p$addr$i5$i$i$i = 0,
      $__ptr$addr$i$i$i = 0,
      $__ptr$addr$i$i$i$i = 0,
      $__size$addr$i$i$i = 0,
      $__size$addr$i$i$i$i = 0,
      $add$ptr$i$i = 0,
      $add$ptr$i$i$i$i$i = 0,
      $agg$tmp$i$i = 0,
      $agg$tmp$i$i$i$i = 0,
      $agg$tmp1$i$i$i$i = 0,
      $agg$tmp2$i$i = 0,
      $cmp$i$i$i = 0,
      $incdec$ptr$i$i$i = 0,
      $sub$ptr$lhs$cast$i = 0;
    var $sub$ptr$rhs$cast$i = 0,
      $sub$ptr$sub$i = 0,
      $this$addr = 0,
      $this$addr$i = 0,
      $this$addr$i$i = 0,
      $this$addr$i$i$i = 0,
      $this$addr$i$i$i$i = 0,
      $this$addr$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i$i = 0,
      $this$addr$i$i$i$i12 = 0,
      $this$addr$i$i$i13 = 0,
      $this$addr$i$i$i4 = 0,
      $this$addr$i$i$i4$i$i$i = 0,
      $this$addr$i$i10 = 0,
      $this$addr$i$i14 = 0,
      $this$addr$i$i5 = 0,
      $this$addr$i15 = 0,
      $this$addr$i6 = 0,
      $this1 = 0,
      $this1$i = 0;
    var $this1$i$i = 0,
      $this1$i$i$i = 0,
      $this1$i$i$i$i = 0,
      $this1$i$i$i$i$i = 0,
      $this1$i$i$i$i$i$i = 0,
      $this1$i$i$i$i19 = 0,
      $this1$i$i$i18 = 0,
      $this1$i$i$i9 = 0,
      $this1$i$i17 = 0,
      $this1$i$i8 = 0,
      $this1$i16 = 0,
      $this1$i7 = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 160) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160 | 0);
    $agg$tmp1$i$i$i$i = (sp + 8) | 0;
    $agg$tmp$i$i$i$i = (sp + 153) | 0;
    $agg$tmp2$i$i = sp;
    $agg$tmp$i$i = (sp + 152) | 0;
    $this$addr = $this;
    $this1 = $this$addr;
    $this$addr$i = $this1;
    $this1$i = $this$addr$i;
    $__begin_$i = ($this1$i + 4) | 0;
    $0 = HEAP32[$__begin_$i >> 2] | 0;
    $this$addr$i$i = $this1$i;
    $__new_last$addr$i$i = $0;
    $this1$i$i = $this$addr$i$i;
    $1 = $__new_last$addr$i$i;
    HEAP8[$agg$tmp2$i$i >> 0] = HEAP8[$agg$tmp$i$i >> 0] | 0;
    $this$addr$i$i$i = $this1$i$i;
    $__new_last$addr$i$i$i = $1;
    $this1$i$i$i = $this$addr$i$i$i;
    while (1) {
      $2 = $__new_last$addr$i$i$i;
      $__end_$i$i$i = ($this1$i$i$i + 8) | 0;
      $3 = HEAP32[$__end_$i$i$i >> 2] | 0;
      $cmp$i$i$i = ($2 | 0) != ($3 | 0);
      if (!$cmp$i$i$i) {
        break;
      }
      $this$addr$i$i$i$i = $this1$i$i$i;
      $this1$i$i$i$i = $this$addr$i$i$i$i;
      $__end_cap_$i$i$i$i = ($this1$i$i$i$i + 12) | 0;
      $this$addr$i$i$i$i$i = $__end_cap_$i$i$i$i;
      $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
      $add$ptr$i$i$i$i$i = ($this1$i$i$i$i$i + 4) | 0;
      $this$addr$i$i$i$i$i$i = $add$ptr$i$i$i$i$i;
      $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
      $4 = HEAP32[$this1$i$i$i$i$i$i >> 2] | 0;
      $__end_2$i$i$i = ($this1$i$i$i + 8) | 0;
      $5 = HEAP32[$__end_2$i$i$i >> 2] | 0;
      $incdec$ptr$i$i$i = ($5 + -1) | 0;
      HEAP32[$__end_2$i$i$i >> 2] = $incdec$ptr$i$i$i;
      $__p$addr$i$i$i$i = $incdec$ptr$i$i$i;
      $6 = $__p$addr$i$i$i$i;
      $__a$addr$i$i$i$i = $4;
      $__p$addr$i5$i$i$i = $6;
      $7 = $__a$addr$i$i$i$i;
      $8 = $__p$addr$i5$i$i$i;
      HEAP8[$agg$tmp1$i$i$i$i >> 0] = HEAP8[$agg$tmp$i$i$i$i >> 0] | 0;
      $__a$addr$i$i$i$i$i = $7;
      $__p$addr$i$i$i$i$i = $8;
      $9 = $__a$addr$i$i$i$i$i;
      $10 = $__p$addr$i$i$i$i$i;
      $this$addr$i$i$i4$i$i$i = $9;
      $__p$addr$i$i$i$i$i$i = $10;
    }
    $11 = HEAP32[$this1 >> 2] | 0;
    $tobool = ($11 | 0) != (0 | 0);
    if (!$tobool) {
      STACKTOP = sp;
      return;
    }
    $this$addr$i6 = $this1;
    $this1$i7 = $this$addr$i6;
    $__end_cap_$i = ($this1$i7 + 12) | 0;
    $this$addr$i$i5 = $__end_cap_$i;
    $this1$i$i8 = $this$addr$i$i5;
    $add$ptr$i$i = ($this1$i$i8 + 4) | 0;
    $this$addr$i$i$i4 = $add$ptr$i$i;
    $this1$i$i$i9 = $this$addr$i$i$i4;
    $12 = HEAP32[$this1$i$i$i9 >> 2] | 0;
    $13 = HEAP32[$this1 >> 2] | 0;
    $this$addr$i15 = $this1;
    $this1$i16 = $this$addr$i15;
    $this$addr$i$i14 = $this1$i16;
    $this1$i$i17 = $this$addr$i$i14;
    $__end_cap_$i$i = ($this1$i$i17 + 12) | 0;
    $this$addr$i$i$i13 = $__end_cap_$i$i;
    $this1$i$i$i18 = $this$addr$i$i$i13;
    $this$addr$i$i$i$i12 = $this1$i$i$i18;
    $this1$i$i$i$i19 = $this$addr$i$i$i$i12;
    $14 = HEAP32[$this1$i$i$i$i19 >> 2] | 0;
    $15 = HEAP32[$this1$i16 >> 2] | 0;
    $sub$ptr$lhs$cast$i = $14;
    $sub$ptr$rhs$cast$i = $15;
    $sub$ptr$sub$i = ($sub$ptr$lhs$cast$i - $sub$ptr$rhs$cast$i) | 0;
    $__a$addr$i = $12;
    $__p$addr$i = $13;
    $__n$addr$i = $sub$ptr$sub$i;
    $16 = $__a$addr$i;
    $17 = $__p$addr$i;
    $18 = $__n$addr$i;
    $this$addr$i$i10 = $16;
    $__p$addr$i$i = $17;
    $__n$addr$i$i = $18;
    $19 = $__p$addr$i$i;
    $20 = $__n$addr$i$i;
    $__ptr$addr$i$i$i = $19;
    $__size$addr$i$i$i = $20;
    $__align$addr$i$i$i = 1;
    $21 = $__ptr$addr$i$i$i;
    $22 = $__size$addr$i$i$i;
    $23 = $__align$addr$i$i$i;
    $__ptr$addr$i$i$i$i = $21;
    $__size$addr$i$i$i$i = $22;
    $__align$addr$i$i$i$i = $23;
    $24 = $__ptr$addr$i$i$i$i;
    $25 = $__size$addr$i$i$i$i;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($24, $25);
    STACKTOP = sp;
    return;
  }
  function __ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($this) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $__a$addr$i = 0,
      $__a$addr$i$i = 0,
      $__a$addr$i$i9 = 0,
      $__a$addr$i11 = 0,
      $__b$addr$i = 0,
      $__b$addr$i$i = 0,
      $__end_cap_$i = 0;
    var $__x$addr$i$i$i = 0,
      $__y$addr$i$i$i = 0,
      $agg$tmp$i = 0,
      $agg$tmp$i12 = 0,
      $agg$tmp1$i = 0,
      $agg$tmp1$i10 = 0,
      $cmp$i$i$i = 0,
      $cond$lvalue$i$i2D = 0,
      $ref$tmp = 0,
      $ref$tmp3 = 0,
      $this$addr = 0,
      $this$addr$i = 0,
      $this$addr$i$i = 0,
      $this$addr$i$i$i = 0,
      $this$addr$i$i$i6 = 0,
      $this$addr$i$i$i8 = 0,
      $this1 = 0,
      $this1$i = 0,
      $this1$i$i = 0,
      $this1$i$i$i = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 80) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
    $agg$tmp1$i10 = (sp + 8) | 0;
    $agg$tmp$i12 = (sp + 77) | 0;
    $agg$tmp1$i = sp;
    $agg$tmp$i = (sp + 76) | 0;
    $ref$tmp = (sp + 16) | 0;
    $ref$tmp3 = (sp + 12) | 0;
    $this$addr = $this;
    $this1 = $this$addr;
    $this$addr$i = $this1;
    $this1$i = $this$addr$i;
    $__end_cap_$i = ($this1$i + 8) | 0;
    $this$addr$i$i = $__end_cap_$i;
    $this1$i$i = $this$addr$i$i;
    $this$addr$i$i$i = $this1$i$i;
    $this1$i$i$i = $this$addr$i$i$i;
    $__a$addr$i = $this1$i$i$i;
    $0 = $__a$addr$i;
    HEAP8[$agg$tmp1$i >> 0] = HEAP8[$agg$tmp$i >> 0] | 0;
    $__a$addr$i$i = $0;
    $1 = $__a$addr$i$i;
    $this$addr$i$i$i6 = $1;
    HEAP32[$ref$tmp >> 2] = -1;
    HEAP32[$ref$tmp3 >> 2] = 2147483647;
    $__a$addr$i11 = $ref$tmp;
    $__b$addr$i = $ref$tmp3;
    $2 = $__a$addr$i11;
    $3 = $__b$addr$i;
    HEAP8[$agg$tmp1$i10 >> 0] = HEAP8[$agg$tmp$i12 >> 0] | 0;
    $__a$addr$i$i9 = $2;
    $__b$addr$i$i = $3;
    $4 = $__b$addr$i$i;
    $5 = $__a$addr$i$i9;
    $this$addr$i$i$i8 = $agg$tmp1$i10;
    $__x$addr$i$i$i = $4;
    $__y$addr$i$i$i = $5;
    $6 = $__x$addr$i$i$i;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $__y$addr$i$i$i;
    $9 = HEAP32[$8 >> 2] | 0;
    $cmp$i$i$i = $7 >>> 0 < $9 >>> 0;
    $10 = $__b$addr$i$i;
    $11 = $__a$addr$i$i9;
    $cond$lvalue$i$i2D = $cmp$i$i$i ? $10 : $11;
    $12 = HEAP32[$cond$lvalue$i$i2D >> 2] | 0;
    STACKTOP = sp;
    return $12 | 0;
  }
  function __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(
    $__ptr,
    $__size
  ) {
    $__ptr = $__ptr | 0;
    $__size = $__size | 0;
    var $0 = 0,
      $__ptr$addr = 0,
      $__size$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $__ptr$addr = $__ptr;
    $__size$addr = $__size;
    $0 = $__ptr$addr;
    __ZNSt3__217_DeallocateCaller9__do_callEPv($0);
    STACKTOP = sp;
    return;
  }
  function __ZNSt3__217_DeallocateCaller9__do_callEPv($__ptr) {
    $__ptr = $__ptr | 0;
    var $0 = 0,
      $__ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $__ptr$addr = $__ptr;
    $0 = $__ptr$addr;
    __ZdlPv($0);
    STACKTOP = sp;
    return;
  }
  function __ZNSt3__26vectorIhNS_9allocatorIhEEE21__push_back_slow_pathIRKhEEvOT_(
    $this,
    $__x
  ) {
    $this = $this | 0;
    $__x = $__x | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0,
      $23 = 0,
      $24 = 0,
      $25 = 0,
      $26 = 0;
    var $27 = 0,
      $28 = 0,
      $29 = 0,
      $3 = 0,
      $30 = 0,
      $31 = 0,
      $32 = 0,
      $33 = 0,
      $34 = 0,
      $35 = 0,
      $36 = 0,
      $37 = 0,
      $38 = 0,
      $39 = 0,
      $4 = 0,
      $40 = 0,
      $41 = 0,
      $42 = 0,
      $5 = 0,
      $6 = 0;
    var $7 = 0,
      $8 = 0,
      $9 = 0,
      $__a = 0,
      $__a$addr$i = 0,
      $__a$addr$i$i = 0,
      $__a$addr$i$i$i = 0,
      $__a$addr$i$i26 = 0,
      $__args$addr$i = 0,
      $__args$addr$i$i = 0,
      $__args$addr$i$i$i = 0,
      $__b$addr$i$i = 0,
      $__b$addr$i$i$i = 0,
      $__cap$i = 0,
      $__end_ = 0,
      $__end_$i = 0,
      $__end_$i20 = 0,
      $__end_7 = 0,
      $__end_cap_$i = 0,
      $__end_cap_$i$i$i$i = 0;
    var $__ms$i = 0,
      $__new_size$addr$i = 0,
      $__p$addr$i = 0,
      $__p$addr$i$i = 0,
      $__p$addr$i$i$i = 0,
      $__p$addr$i27 = 0,
      $__t$addr$i = 0,
      $__t$addr$i$i = 0,
      $__t$addr$i$i$i = 0,
      $__t$addr$i$i$i$i = 0,
      $__v = 0,
      $__x$addr = 0,
      $__x$addr$i$i$i$i = 0,
      $__y$addr$i$i$i$i = 0,
      $add = 0,
      $agg$tmp$i = 0,
      $agg$tmp$i$i = 0,
      $agg$tmp1$i = 0,
      $agg$tmp1$i$i = 0,
      $call$i = 0;
    var $cmp$i = 0,
      $cmp$i$i$i$i = 0,
      $cmp3$i = 0,
      $cond$lvalue$i$i$i2D = 0,
      $div$i = 0,
      $incdec$ptr = 0,
      $mul$i = 0,
      $ref$tmp$i = 0,
      $retval$i = 0,
      $sub$ptr$lhs$cast$i = 0,
      $sub$ptr$lhs$cast$i$i$i = 0,
      $sub$ptr$lhs$cast$i22 = 0,
      $sub$ptr$rhs$cast$i = 0,
      $sub$ptr$rhs$cast$i$i$i = 0,
      $sub$ptr$rhs$cast$i23 = 0,
      $sub$ptr$sub$i = 0,
      $sub$ptr$sub$i$i$i = 0,
      $sub$ptr$sub$i24 = 0,
      $this$addr = 0,
      $this$addr$i = 0;
    var $this$addr$i$i = 0,
      $this$addr$i$i$i = 0,
      $this$addr$i$i$i$i = 0,
      $this$addr$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i$i = 0,
      $this$addr$i$i$i12 = 0,
      $this$addr$i$i$i25 = 0,
      $this$addr$i$i$i7$i = 0,
      $this$addr$i$i13 = 0,
      $this$addr$i10 = 0,
      $this$addr$i14 = 0,
      $this$addr$i18 = 0,
      $this1 = 0,
      $this1$i = 0,
      $this1$i$i = 0,
      $this1$i$i$i = 0,
      $this1$i$i$i$i = 0,
      $this1$i$i$i$i$i = 0,
      $this1$i$i$i$i$i$i = 0,
      $this1$i$i$i17 = 0;
    var $this1$i$i16 = 0,
      $this1$i11 = 0,
      $this1$i15 = 0,
      $this1$i19 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 208) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208 | 0);
    $agg$tmp1$i = (sp + 8) | 0;
    $agg$tmp$i = (sp + 193) | 0;
    $agg$tmp1$i$i = sp;
    $agg$tmp$i$i = (sp + 192) | 0;
    $__new_size$addr$i = (sp + 72) | 0;
    $ref$tmp$i = (sp + 60) | 0;
    $__v = (sp + 12) | 0;
    $this$addr = $this;
    $__x$addr = $__x;
    $this1 = $this$addr;
    $this$addr$i = $this1;
    $this1$i = $this$addr$i;
    $__end_cap_$i = ($this1$i + 8) | 0;
    $this$addr$i$i = $__end_cap_$i;
    $this1$i$i = $this$addr$i$i;
    $this$addr$i$i$i = $this1$i$i;
    $this1$i$i$i = $this$addr$i$i$i;
    $__a = $this1$i$i$i;
    $this$addr$i10 = $this1;
    $this1$i11 = $this$addr$i10;
    $__end_$i = ($this1$i11 + 4) | 0;
    $0 = HEAP32[$__end_$i >> 2] | 0;
    $1 = HEAP32[$this1$i11 >> 2] | 0;
    $sub$ptr$lhs$cast$i = $0;
    $sub$ptr$rhs$cast$i = $1;
    $sub$ptr$sub$i = ($sub$ptr$lhs$cast$i - $sub$ptr$rhs$cast$i) | 0;
    $add = ($sub$ptr$sub$i + 1) | 0;
    $this$addr$i14 = $this1;
    HEAP32[$__new_size$addr$i >> 2] = $add;
    $this1$i15 = $this$addr$i14;
    $call$i = __ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($this1$i15) | 0;
    $__ms$i = $call$i;
    $2 = HEAP32[$__new_size$addr$i >> 2] | 0;
    $3 = $__ms$i;
    $cmp$i = $2 >>> 0 > $3 >>> 0;
    if ($cmp$i) {
      __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(
        $this1$i15
      );
      // unreachable;
    }
    $this$addr$i$i13 = $this1$i15;
    $this1$i$i16 = $this$addr$i$i13;
    $this$addr$i$i$i12 = $this1$i$i16;
    $this1$i$i$i17 = $this$addr$i$i$i12;
    $this$addr$i$i$i$i = $this1$i$i$i17;
    $this1$i$i$i$i = $this$addr$i$i$i$i;
    $__end_cap_$i$i$i$i = ($this1$i$i$i$i + 8) | 0;
    $this$addr$i$i$i$i$i = $__end_cap_$i$i$i$i;
    $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
    $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
    $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
    $4 = HEAP32[$this1$i$i$i$i$i$i >> 2] | 0;
    $5 = HEAP32[$this1$i$i$i17 >> 2] | 0;
    $sub$ptr$lhs$cast$i$i$i = $4;
    $sub$ptr$rhs$cast$i$i$i = $5;
    $sub$ptr$sub$i$i$i =
      ($sub$ptr$lhs$cast$i$i$i - $sub$ptr$rhs$cast$i$i$i) | 0;
    $__cap$i = $sub$ptr$sub$i$i$i;
    $6 = $__cap$i;
    $7 = $__ms$i;
    $div$i = (($7 >>> 0) / 2) & -1;
    $cmp3$i = $6 >>> 0 >= $div$i >>> 0;
    if ($cmp3$i) {
      $8 = $__ms$i;
      $retval$i = $8;
    } else {
      $9 = $__cap$i;
      $mul$i = $9 << 1;
      HEAP32[$ref$tmp$i >> 2] = $mul$i;
      $__a$addr$i$i = $ref$tmp$i;
      $__b$addr$i$i = $__new_size$addr$i;
      $10 = $__a$addr$i$i;
      $11 = $__b$addr$i$i;
      HEAP8[$agg$tmp1$i$i >> 0] = HEAP8[$agg$tmp$i$i >> 0] | 0;
      $__a$addr$i$i$i = $10;
      $__b$addr$i$i$i = $11;
      $12 = $__a$addr$i$i$i;
      $13 = $__b$addr$i$i$i;
      $this$addr$i$i$i7$i = $agg$tmp1$i$i;
      $__x$addr$i$i$i$i = $12;
      $__y$addr$i$i$i$i = $13;
      $14 = $__x$addr$i$i$i$i;
      $15 = HEAP32[$14 >> 2] | 0;
      $16 = $__y$addr$i$i$i$i;
      $17 = HEAP32[$16 >> 2] | 0;
      $cmp$i$i$i$i = $15 >>> 0 < $17 >>> 0;
      $18 = $__b$addr$i$i$i;
      $19 = $__a$addr$i$i$i;
      $cond$lvalue$i$i$i2D = $cmp$i$i$i$i ? $18 : $19;
      $20 = HEAP32[$cond$lvalue$i$i$i2D >> 2] | 0;
      $retval$i = $20;
    }
    $21 = $retval$i;
    $this$addr$i18 = $this1;
    $this1$i19 = $this$addr$i18;
    $__end_$i20 = ($this1$i19 + 4) | 0;
    $22 = HEAP32[$__end_$i20 >> 2] | 0;
    $23 = HEAP32[$this1$i19 >> 2] | 0;
    $sub$ptr$lhs$cast$i22 = $22;
    $sub$ptr$rhs$cast$i23 = $23;
    $sub$ptr$sub$i24 = ($sub$ptr$lhs$cast$i22 - $sub$ptr$rhs$cast$i23) | 0;
    $24 = $__a;
    __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEEC2EmmS3_(
      $__v,
      $21,
      $sub$ptr$sub$i24,
      $24
    );
    $25 = $__a;
    $__end_ = ($__v + 8) | 0;
    $26 = HEAP32[$__end_ >> 2] | 0;
    $__p$addr$i = $26;
    $27 = $__p$addr$i;
    $28 = $__x$addr;
    $__t$addr$i = $28;
    $29 = $__t$addr$i;
    $__a$addr$i = $25;
    $__p$addr$i27 = $27;
    $__args$addr$i = $29;
    $30 = $__a$addr$i;
    $31 = $__p$addr$i27;
    $32 = $__args$addr$i;
    $__t$addr$i$i = $32;
    $33 = $__t$addr$i$i;
    HEAP8[$agg$tmp1$i >> 0] = HEAP8[$agg$tmp$i >> 0] | 0;
    $__a$addr$i$i26 = $30;
    $__p$addr$i$i = $31;
    $__args$addr$i$i = $33;
    $34 = $__a$addr$i$i26;
    $35 = $__p$addr$i$i;
    $36 = $__args$addr$i$i;
    $__t$addr$i$i$i = $36;
    $37 = $__t$addr$i$i$i;
    $this$addr$i$i$i25 = $34;
    $__p$addr$i$i$i = $35;
    $__args$addr$i$i$i = $37;
    $38 = $__p$addr$i$i$i;
    $39 = $__args$addr$i$i$i;
    $__t$addr$i$i$i$i = $39;
    $40 = $__t$addr$i$i$i$i;
    $41 = HEAP8[$40 >> 0] | 0;
    HEAP8[$38 >> 0] = $41;
    $__end_7 = ($__v + 8) | 0;
    $42 = HEAP32[$__end_7 >> 2] | 0;
    $incdec$ptr = ($42 + 1) | 0;
    HEAP32[$__end_7 >> 2] = $incdec$ptr;
    __ZNSt3__26vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EE(
      $this1,
      $__v
    );
    __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEED2Ev($__v);
    STACKTOP = sp;
    return;
  }
  function __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($this) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0,
      $23 = 0,
      $24 = 0,
      $3 = 0,
      $4 = 0;
    var $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $__a$addr$i = 0,
      $__a$addr$i$i$i = 0,
      $__a$addr$i$i$i$i = 0,
      $__align$addr$i$i$i = 0,
      $__align$addr$i$i$i$i = 0,
      $__end_$i$i = 0,
      $__end_3$i$i = 0,
      $__end_cap_$i = 0,
      $__end_cap_$i$i = 0,
      $__end_cap_$i$i$i = 0,
      $__n$addr$i = 0,
      $__n$addr$i$i = 0,
      $__new_last$addr$i$i = 0,
      $__p$addr$i = 0,
      $__p$addr$i$i = 0;
    var $__p$addr$i$i$i = 0,
      $__p$addr$i$i$i$i = 0,
      $__p$addr$i$i$i$i$i = 0,
      $__p$addr$i5$i$i = 0,
      $__ptr$addr$i$i$i = 0,
      $__ptr$addr$i$i$i$i = 0,
      $__size$addr$i$i$i = 0,
      $__size$addr$i$i$i$i = 0,
      $__soon_to_be_end$i$i = 0,
      $agg$tmp$i$i$i = 0,
      $agg$tmp1$i$i$i = 0,
      $cmp = 0,
      $cmp$i$i = 0,
      $incdec$ptr$i$i = 0,
      $sub$ptr$lhs$cast$i = 0,
      $sub$ptr$rhs$cast$i = 0,
      $sub$ptr$sub$i = 0,
      $this$addr = 0,
      $this$addr$i = 0,
      $this$addr$i$i = 0;
    var $this$addr$i$i$i = 0,
      $this$addr$i$i$i$i = 0,
      $this$addr$i$i$i$i$i = 0,
      $this$addr$i$i$i$i12 = 0,
      $this$addr$i$i$i13 = 0,
      $this$addr$i$i$i4$i$i = 0,
      $this$addr$i$i$i6 = 0,
      $this$addr$i$i14 = 0,
      $this$addr$i$i4 = 0,
      $this$addr$i$i7 = 0,
      $this$addr$i15 = 0,
      $this$addr$i8 = 0,
      $this1 = 0,
      $this1$i = 0,
      $this1$i$i = 0,
      $this1$i$i$i = 0,
      $this1$i$i$i$i = 0,
      $this1$i$i$i$i$i = 0,
      $this1$i$i$i$i19 = 0,
      $this1$i$i$i11 = 0;
    var $this1$i$i$i18 = 0,
      $this1$i$i10 = 0,
      $this1$i$i17 = 0,
      $this1$i16 = 0,
      $this1$i9 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 144) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144 | 0);
    $agg$tmp1$i$i$i = sp;
    $agg$tmp$i$i$i = (sp + 140) | 0;
    $this$addr = $this;
    $this1 = $this$addr;
    $0 = HEAP32[$this1 >> 2] | 0;
    $cmp = ($0 | 0) != (0 | 0);
    if (!$cmp) {
      STACKTOP = sp;
      return;
    }
    $this$addr$i = $this1;
    $this1$i = $this$addr$i;
    $1 = HEAP32[$this1$i >> 2] | 0;
    $this$addr$i$i = $this1$i;
    $__new_last$addr$i$i = $1;
    $this1$i$i = $this$addr$i$i;
    $__end_$i$i = ($this1$i$i + 4) | 0;
    $2 = HEAP32[$__end_$i$i >> 2] | 0;
    $__soon_to_be_end$i$i = $2;
    while (1) {
      $3 = $__new_last$addr$i$i;
      $4 = $__soon_to_be_end$i$i;
      $cmp$i$i = ($3 | 0) != ($4 | 0);
      if (!$cmp$i$i) {
        break;
      }
      $this$addr$i$i$i = $this1$i$i;
      $this1$i$i$i = $this$addr$i$i$i;
      $__end_cap_$i$i$i = ($this1$i$i$i + 8) | 0;
      $this$addr$i$i$i$i = $__end_cap_$i$i$i;
      $this1$i$i$i$i = $this$addr$i$i$i$i;
      $this$addr$i$i$i$i$i = $this1$i$i$i$i;
      $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
      $5 = $__soon_to_be_end$i$i;
      $incdec$ptr$i$i = ($5 + -1) | 0;
      $__soon_to_be_end$i$i = $incdec$ptr$i$i;
      $__p$addr$i$i$i = $incdec$ptr$i$i;
      $6 = $__p$addr$i$i$i;
      $__a$addr$i$i$i = $this1$i$i$i$i$i;
      $__p$addr$i5$i$i = $6;
      $7 = $__a$addr$i$i$i;
      $8 = $__p$addr$i5$i$i;
      HEAP8[$agg$tmp1$i$i$i >> 0] = HEAP8[$agg$tmp$i$i$i >> 0] | 0;
      $__a$addr$i$i$i$i = $7;
      $__p$addr$i$i$i$i = $8;
      $9 = $__a$addr$i$i$i$i;
      $10 = $__p$addr$i$i$i$i;
      $this$addr$i$i$i4$i$i = $9;
      $__p$addr$i$i$i$i$i = $10;
    }
    $11 = $__new_last$addr$i$i;
    $__end_3$i$i = ($this1$i$i + 4) | 0;
    HEAP32[$__end_3$i$i >> 2] = $11;
    $this$addr$i8 = $this1;
    $this1$i9 = $this$addr$i8;
    $__end_cap_$i = ($this1$i9 + 8) | 0;
    $this$addr$i$i7 = $__end_cap_$i;
    $this1$i$i10 = $this$addr$i$i7;
    $this$addr$i$i$i6 = $this1$i$i10;
    $this1$i$i$i11 = $this$addr$i$i$i6;
    $12 = HEAP32[$this1 >> 2] | 0;
    $this$addr$i15 = $this1;
    $this1$i16 = $this$addr$i15;
    $this$addr$i$i14 = $this1$i16;
    $this1$i$i17 = $this$addr$i$i14;
    $__end_cap_$i$i = ($this1$i$i17 + 8) | 0;
    $this$addr$i$i$i13 = $__end_cap_$i$i;
    $this1$i$i$i18 = $this$addr$i$i$i13;
    $this$addr$i$i$i$i12 = $this1$i$i$i18;
    $this1$i$i$i$i19 = $this$addr$i$i$i$i12;
    $13 = HEAP32[$this1$i$i$i$i19 >> 2] | 0;
    $14 = HEAP32[$this1$i16 >> 2] | 0;
    $sub$ptr$lhs$cast$i = $13;
    $sub$ptr$rhs$cast$i = $14;
    $sub$ptr$sub$i = ($sub$ptr$lhs$cast$i - $sub$ptr$rhs$cast$i) | 0;
    $__a$addr$i = $this1$i$i$i11;
    $__p$addr$i = $12;
    $__n$addr$i = $sub$ptr$sub$i;
    $15 = $__a$addr$i;
    $16 = $__p$addr$i;
    $17 = $__n$addr$i;
    $this$addr$i$i4 = $15;
    $__p$addr$i$i = $16;
    $__n$addr$i$i = $17;
    $18 = $__p$addr$i$i;
    $19 = $__n$addr$i$i;
    $__ptr$addr$i$i$i = $18;
    $__size$addr$i$i$i = $19;
    $__align$addr$i$i$i = 1;
    $20 = $__ptr$addr$i$i$i;
    $21 = $__size$addr$i$i$i;
    $22 = $__align$addr$i$i$i;
    $__ptr$addr$i$i$i$i = $20;
    $__size$addr$i$i$i$i = $21;
    $__align$addr$i$i$i$i = $22;
    $23 = $__ptr$addr$i$i$i$i;
    $24 = $__size$addr$i$i$i$i;
    __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($23, $24);
    STACKTOP = sp;
    return;
  }
  function __ZNSt3__26vectorIhNS_9allocatorIhEEE6resizeEmRKh(
    $this,
    $__sz,
    $__x
  ) {
    $this = $this | 0;
    $__sz = $__sz | 0;
    $__x = $__x | 0;
    var $$addr$i$i$i = 0,
      $$addr1$i$i$i = 0,
      $$addr2$i$i$i = 0,
      $$addr3$i$i$i = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0;
    var $23 = 0,
      $24 = 0,
      $25 = 0,
      $26 = 0,
      $27 = 0,
      $28 = 0,
      $29 = 0,
      $3 = 0,
      $30 = 0,
      $31 = 0,
      $32 = 0,
      $33 = 0,
      $34 = 0,
      $35 = 0,
      $36 = 0,
      $37 = 0,
      $38 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0;
    var $7 = 0,
      $8 = 0,
      $9 = 0,
      $__a$addr$i$i$i = 0,
      $__a$addr$i$i$i$i = 0,
      $__cs = 0,
      $__end_$i = 0,
      $__end_$i$i = 0,
      $__end_$i$i$i = 0,
      $__end_$i14$i = 0,
      $__end_3$i$i = 0,
      $__end_cap_$i$i$i = 0,
      $__end_cap_$i$i$i$i$i = 0,
      $__new_last$addr$i = 0,
      $__new_last$addr$i$i = 0,
      $__new_last$addr$i12$i = 0,
      $__old_size$addr$i$i = 0,
      $__old_size$i = 0,
      $__p$addr$i$i$i = 0,
      $__p$addr$i$i$i$i = 0;
    var $__p$addr$i$i$i$i$i = 0,
      $__p$addr$i$i$i7$i = 0,
      $__p$addr$i$i13$i$i = 0,
      $__p$addr$i$i17$i$i = 0,
      $__p$addr$i$i23$i$i = 0,
      $__p$addr$i5$i$i = 0,
      $__soon_to_be_end$i$i = 0,
      $__sz$addr = 0,
      $__x$addr = 0,
      $add$ptr = 0,
      $add$ptr$i$i = 0,
      $add$ptr5$i$i = 0,
      $add$ptr8$i$i = 0,
      $agg$tmp$i$i$i = 0,
      $agg$tmp1$i$i$i = 0,
      $cmp = 0,
      $cmp$i$i = 0,
      $cmp2 = 0,
      $incdec$ptr$i$i = 0,
      $sub = 0;
    var $sub$ptr$lhs$cast$i = 0,
      $sub$ptr$lhs$cast$i$i = 0,
      $sub$ptr$lhs$cast$i$i$i = 0,
      $sub$ptr$lhs$cast$i$i$i$i = 0,
      $sub$ptr$rhs$cast$i = 0,
      $sub$ptr$rhs$cast$i$i = 0,
      $sub$ptr$rhs$cast$i$i$i = 0,
      $sub$ptr$rhs$cast$i$i$i$i = 0,
      $sub$ptr$sub$i = 0,
      $sub$ptr$sub$i$i = 0,
      $sub$ptr$sub$i$i$i = 0,
      $sub$ptr$sub$i$i$i$i = 0,
      $this$addr = 0,
      $this$addr$i = 0,
      $this$addr$i$i = 0,
      $this$addr$i$i$i = 0,
      $this$addr$i$i$i$i = 0,
      $this$addr$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i$i$i = 0;
    var $this$addr$i$i$i$i8$i = 0,
      $this$addr$i$i$i4$i$i = 0,
      $this$addr$i$i$i9$i = 0,
      $this$addr$i$i10$i = 0,
      $this$addr$i10$i$i = 0,
      $this$addr$i11$i = 0,
      $this$addr$i14$i$i = 0,
      $this$addr$i18$i$i = 0,
      $this$addr$i21$i$i = 0,
      $this$addr$i24$i$i = 0,
      $this$addr$i3$i = 0,
      $this$addr$i5 = 0,
      $this$addr$i5$i = 0,
      $this$addr$i9$i$i = 0,
      $this1 = 0,
      $this1$i = 0,
      $this1$i$i$i = 0,
      $this1$i$i$i$i = 0,
      $this1$i$i$i$i$i = 0,
      $this1$i$i$i$i$i$i = 0;
    var $this1$i$i$i$i$i$i$i = 0,
      $this1$i$i$i$i17$i = 0,
      $this1$i$i$i16$i = 0,
      $this1$i$i15$i = 0,
      $this1$i11$i$i = 0,
      $this1$i13$i = 0,
      $this1$i15$i$i = 0,
      $this1$i19$i$i = 0,
      $this1$i22$i$i = 0,
      $this1$i25$i$i = 0,
      $this1$i4$i = 0,
      $this1$i6 = 0,
      $this1$i6$i = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 192) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192 | 0);
    $agg$tmp1$i$i$i = sp;
    $agg$tmp$i$i$i = (sp + 184) | 0;
    $this$addr = $this;
    $__sz$addr = $__sz;
    $__x$addr = $__x;
    $this1 = $this$addr;
    $this$addr$i = $this1;
    $this1$i = $this$addr$i;
    $__end_$i = ($this1$i + 4) | 0;
    $0 = HEAP32[$__end_$i >> 2] | 0;
    $1 = HEAP32[$this1$i >> 2] | 0;
    $sub$ptr$lhs$cast$i = $0;
    $sub$ptr$rhs$cast$i = $1;
    $sub$ptr$sub$i = ($sub$ptr$lhs$cast$i - $sub$ptr$rhs$cast$i) | 0;
    $__cs = $sub$ptr$sub$i;
    $2 = $__cs;
    $3 = $__sz$addr;
    $cmp = $2 >>> 0 < $3 >>> 0;
    if ($cmp) {
      $4 = $__sz$addr;
      $5 = $__cs;
      $sub = ($4 - $5) | 0;
      $6 = $__x$addr;
      __ZNSt3__26vectorIhNS_9allocatorIhEEE8__appendEmRKh($this1, $sub, $6);
      STACKTOP = sp;
      return;
    }
    $7 = $__cs;
    $8 = $__sz$addr;
    $cmp2 = $7 >>> 0 > $8 >>> 0;
    if (!$cmp2) {
      STACKTOP = sp;
      return;
    }
    $9 = HEAP32[$this1 >> 2] | 0;
    $10 = $__sz$addr;
    $add$ptr = ($9 + $10) | 0;
    $this$addr$i5 = $this1;
    $__new_last$addr$i = $add$ptr;
    $this1$i6 = $this$addr$i5;
    $11 = $__new_last$addr$i;
    $this$addr$i$i = $this1$i6;
    $__new_last$addr$i$i = $11;
    $this$addr$i3$i = $this1$i6;
    $this1$i4$i = $this$addr$i3$i;
    $__end_$i$i = ($this1$i4$i + 4) | 0;
    $12 = HEAP32[$__end_$i$i >> 2] | 0;
    $13 = HEAP32[$this1$i4$i >> 2] | 0;
    $sub$ptr$lhs$cast$i$i = $12;
    $sub$ptr$rhs$cast$i$i = $13;
    $sub$ptr$sub$i$i = ($sub$ptr$lhs$cast$i$i - $sub$ptr$rhs$cast$i$i) | 0;
    $__old_size$i = $sub$ptr$sub$i$i;
    $14 = $__new_last$addr$i;
    $this$addr$i11$i = $this1$i6;
    $__new_last$addr$i12$i = $14;
    $this1$i13$i = $this$addr$i11$i;
    $__end_$i14$i = ($this1$i13$i + 4) | 0;
    $15 = HEAP32[$__end_$i14$i >> 2] | 0;
    $__soon_to_be_end$i$i = $15;
    while (1) {
      $16 = $__new_last$addr$i12$i;
      $17 = $__soon_to_be_end$i$i;
      $cmp$i$i = ($16 | 0) != ($17 | 0);
      if (!$cmp$i$i) {
        break;
      }
      $this$addr$i$i10$i = $this1$i13$i;
      $this1$i$i15$i = $this$addr$i$i10$i;
      $__end_cap_$i$i$i = ($this1$i$i15$i + 8) | 0;
      $this$addr$i$i$i9$i = $__end_cap_$i$i$i;
      $this1$i$i$i16$i = $this$addr$i$i$i9$i;
      $this$addr$i$i$i$i8$i = $this1$i$i$i16$i;
      $this1$i$i$i$i17$i = $this$addr$i$i$i$i8$i;
      $18 = $__soon_to_be_end$i$i;
      $incdec$ptr$i$i = ($18 + -1) | 0;
      $__soon_to_be_end$i$i = $incdec$ptr$i$i;
      $__p$addr$i$i$i = $incdec$ptr$i$i;
      $19 = $__p$addr$i$i$i;
      $__a$addr$i$i$i = $this1$i$i$i$i17$i;
      $__p$addr$i5$i$i = $19;
      $20 = $__a$addr$i$i$i;
      $21 = $__p$addr$i5$i$i;
      HEAP8[$agg$tmp1$i$i$i >> 0] = HEAP8[$agg$tmp$i$i$i >> 0] | 0;
      $__a$addr$i$i$i$i = $20;
      $__p$addr$i$i$i7$i = $21;
      $22 = $__a$addr$i$i$i$i;
      $23 = $__p$addr$i$i$i7$i;
      $this$addr$i$i$i4$i$i = $22;
      $__p$addr$i$i$i$i$i = $23;
    }
    $24 = $__new_last$addr$i12$i;
    $__end_3$i$i = ($this1$i13$i + 4) | 0;
    HEAP32[$__end_3$i$i >> 2] = $24;
    $25 = $__old_size$i;
    $this$addr$i5$i = $this1$i6;
    $__old_size$addr$i$i = $25;
    $this1$i6$i = $this$addr$i5$i;
    $this$addr$i$i$i = $this1$i6$i;
    $this1$i$i$i = $this$addr$i$i$i;
    $26 = HEAP32[$this1$i$i$i >> 2] | 0;
    $__p$addr$i$i$i$i = $26;
    $27 = $__p$addr$i$i$i$i;
    $this$addr$i24$i$i = $this1$i6$i;
    $this1$i25$i$i = $this$addr$i24$i$i;
    $28 = HEAP32[$this1$i25$i$i >> 2] | 0;
    $__p$addr$i$i23$i$i = $28;
    $29 = $__p$addr$i$i23$i$i;
    $this$addr$i21$i$i = $this1$i6$i;
    $this1$i22$i$i = $this$addr$i21$i$i;
    $this$addr$i$i$i$i = $this1$i22$i$i;
    $this1$i$i$i$i = $this$addr$i$i$i$i;
    $this$addr$i$i$i$i$i = $this1$i$i$i$i;
    $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
    $__end_cap_$i$i$i$i$i = ($this1$i$i$i$i$i + 8) | 0;
    $this$addr$i$i$i$i$i$i = $__end_cap_$i$i$i$i$i;
    $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
    $this$addr$i$i$i$i$i$i$i = $this1$i$i$i$i$i$i;
    $this1$i$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i$i;
    $30 = HEAP32[$this1$i$i$i$i$i$i$i >> 2] | 0;
    $31 = HEAP32[$this1$i$i$i$i >> 2] | 0;
    $sub$ptr$lhs$cast$i$i$i$i = $30;
    $sub$ptr$rhs$cast$i$i$i$i = $31;
    $sub$ptr$sub$i$i$i$i =
      ($sub$ptr$lhs$cast$i$i$i$i - $sub$ptr$rhs$cast$i$i$i$i) | 0;
    $add$ptr$i$i = ($29 + $sub$ptr$sub$i$i$i$i) | 0;
    $this$addr$i18$i$i = $this1$i6$i;
    $this1$i19$i$i = $this$addr$i18$i$i;
    $32 = HEAP32[$this1$i19$i$i >> 2] | 0;
    $__p$addr$i$i17$i$i = $32;
    $33 = $__p$addr$i$i17$i$i;
    $34 = $__old_size$addr$i$i;
    $add$ptr5$i$i = ($33 + $34) | 0;
    $this$addr$i14$i$i = $this1$i6$i;
    $this1$i15$i$i = $this$addr$i14$i$i;
    $35 = HEAP32[$this1$i15$i$i >> 2] | 0;
    $__p$addr$i$i13$i$i = $35;
    $36 = $__p$addr$i$i13$i$i;
    $this$addr$i10$i$i = $this1$i6$i;
    $this1$i11$i$i = $this$addr$i10$i$i;
    $__end_$i$i$i = ($this1$i11$i$i + 4) | 0;
    $37 = HEAP32[$__end_$i$i$i >> 2] | 0;
    $38 = HEAP32[$this1$i11$i$i >> 2] | 0;
    $sub$ptr$lhs$cast$i$i$i = $37;
    $sub$ptr$rhs$cast$i$i$i = $38;
    $sub$ptr$sub$i$i$i =
      ($sub$ptr$lhs$cast$i$i$i - $sub$ptr$rhs$cast$i$i$i) | 0;
    $add$ptr8$i$i = ($36 + $sub$ptr$sub$i$i$i) | 0;
    $this$addr$i9$i$i = $this1$i6$i;
    $$addr$i$i$i = $27;
    $$addr1$i$i$i = $add$ptr$i$i;
    $$addr2$i$i$i = $add$ptr5$i$i;
    $$addr3$i$i$i = $add$ptr8$i$i;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIhNS2_9allocatorIhEEEEE3getERKS6_m(
    $agg$result,
    $v,
    $index
  ) {
    $agg$result = $agg$result | 0;
    $v = $v | 0;
    $index = $index | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $__end_$i = 0,
      $__n$addr$i = 0,
      $arrayidx$i = 0,
      $cmp = 0,
      $index$addr = 0,
      $sub$ptr$lhs$cast$i = 0,
      $sub$ptr$rhs$cast$i = 0,
      $sub$ptr$sub$i = 0,
      $this$addr$i = 0,
      $this$addr$i2 = 0,
      $this1$i = 0,
      $this1$i3 = 0;
    var $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $v$addr = $v;
    $index$addr = $index;
    $0 = $index$addr;
    $1 = $v$addr;
    $this$addr$i = $1;
    $this1$i = $this$addr$i;
    $__end_$i = ($this1$i + 4) | 0;
    $2 = HEAP32[$__end_$i >> 2] | 0;
    $3 = HEAP32[$this1$i >> 2] | 0;
    $sub$ptr$lhs$cast$i = $2;
    $sub$ptr$rhs$cast$i = $3;
    $sub$ptr$sub$i = ($sub$ptr$lhs$cast$i - $sub$ptr$rhs$cast$i) | 0;
    $cmp = $0 >>> 0 < $sub$ptr$sub$i >>> 0;
    if ($cmp) {
      $4 = $v$addr;
      $5 = $index$addr;
      $this$addr$i2 = $4;
      $__n$addr$i = $5;
      $this1$i3 = $this$addr$i2;
      $6 = HEAP32[$this1$i3 >> 2] | 0;
      $7 = $__n$addr$i;
      $arrayidx$i = ($6 + $7) | 0;
      __ZN10emscripten3valC2IRKhEEOT_($agg$result, $arrayidx$i);
      STACKTOP = sp;
      return;
    } else {
      __ZN10emscripten3val9undefinedEv($agg$result);
      STACKTOP = sp;
      return;
    }
  }
  function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIhNS2_9allocatorIhEEEEE3setERS6_mRKh(
    $v,
    $index,
    $value
  ) {
    $v = $v | 0;
    $index = $index | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $__n$addr$i = 0,
      $arrayidx$i = 0,
      $index$addr = 0,
      $this$addr$i = 0,
      $this1$i = 0,
      $v$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $v$addr = $v;
    $index$addr = $index;
    $value$addr = $value;
    $0 = $value$addr;
    $1 = HEAP8[$0 >> 0] | 0;
    $2 = $v$addr;
    $3 = $index$addr;
    $this$addr$i = $2;
    $__n$addr$i = $3;
    $this1$i = $this$addr$i;
    $4 = HEAP32[$this1$i >> 2] | 0;
    $5 = $__n$addr$i;
    $arrayidx$i = ($4 + $5) | 0;
    HEAP8[$arrayidx$i >> 0] = $1;
    STACKTOP = sp;
    return 1;
  }
  function __ZNSt3__26vectorIhNS_9allocatorIhEEE8__appendEmRKh(
    $this,
    $__n,
    $__x
  ) {
    $this = $this | 0;
    $__n = $__n | 0;
    $__x = $__x | 0;
    var $$addr$i$i = 0,
      $$addr1$i$i = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0,
      $23 = 0,
      $24 = 0;
    var $25 = 0,
      $26 = 0,
      $27 = 0,
      $28 = 0,
      $29 = 0,
      $3 = 0,
      $30 = 0,
      $31 = 0,
      $32 = 0,
      $33 = 0,
      $34 = 0,
      $35 = 0,
      $36 = 0,
      $37 = 0,
      $38 = 0,
      $39 = 0,
      $4 = 0,
      $40 = 0,
      $41 = 0,
      $42 = 0;
    var $43 = 0,
      $44 = 0,
      $45 = 0,
      $46 = 0,
      $47 = 0,
      $48 = 0,
      $49 = 0,
      $5 = 0,
      $50 = 0,
      $51 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $__a = 0,
      $__a$addr$i$i = 0,
      $__a$addr$i$i$i = 0,
      $__a$addr$i$i$i24 = 0,
      $__a$addr$i$i26 = 0,
      $__a$i = 0;
    var $__annotator$i = 0,
      $__args$addr$i$i = 0,
      $__args$addr$i$i$i = 0,
      $__args$addr$i$i$i$i = 0,
      $__b$addr$i$i = 0,
      $__b$addr$i$i$i = 0,
      $__cap$i = 0,
      $__end_ = 0,
      $__end_$i = 0,
      $__end_$i23 = 0,
      $__end_$i39 = 0,
      $__end_3$i = 0,
      $__end_cap_$i = 0,
      $__end_cap_$i$i = 0,
      $__end_cap_$i$i$i$i = 0,
      $__end_cap_$i18 = 0,
      $__ms$i = 0,
      $__n$addr = 0,
      $__n$addr$i = 0,
      $__new_size$addr$i = 0;
    var $__p$addr$i$i = 0,
      $__p$addr$i$i$i = 0,
      $__p$addr$i$i$i$i = 0,
      $__p$addr$i8$i = 0,
      $__t$addr$i$i$i = 0,
      $__t$addr$i$i$i$i = 0,
      $__t$addr$i$i$i$i$i = 0,
      $__v = 0,
      $__x$addr = 0,
      $__x$addr$i = 0,
      $__x$addr$i$i$i$i = 0,
      $__y$addr$i$i$i$i = 0,
      $add = 0,
      $agg$tmp$i$i = 0,
      $agg$tmp$i$i27 = 0,
      $agg$tmp1$i$i = 0,
      $agg$tmp1$i$i25 = 0,
      $call$i = 0,
      $cmp = 0,
      $cmp$i = 0;
    var $cmp$i$i$i$i = 0,
      $cmp$i33 = 0,
      $cmp3$i = 0,
      $cond$lvalue$i$i$i2D = 0,
      $dec$i = 0,
      $div$i = 0,
      $incdec$ptr$i = 0,
      $mul$i = 0,
      $ref$tmp$i = 0,
      $retval$i = 0,
      $sub$ptr$lhs$cast = 0,
      $sub$ptr$lhs$cast$i = 0,
      $sub$ptr$lhs$cast$i$i$i = 0,
      $sub$ptr$lhs$cast$i41 = 0,
      $sub$ptr$rhs$cast = 0,
      $sub$ptr$rhs$cast$i = 0,
      $sub$ptr$rhs$cast$i$i$i = 0,
      $sub$ptr$rhs$cast$i42 = 0,
      $sub$ptr$sub = 0,
      $sub$ptr$sub$i = 0;
    var $sub$ptr$sub$i$i$i = 0,
      $sub$ptr$sub$i43 = 0,
      $this$addr = 0,
      $this$addr$i = 0,
      $this$addr$i$i = 0,
      $this$addr$i$i$i = 0,
      $this$addr$i$i$i$i = 0,
      $this$addr$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i$i = 0,
      $this$addr$i$i$i$i28 = 0,
      $this$addr$i$i$i14 = 0,
      $this$addr$i$i$i29 = 0,
      $this$addr$i$i$i6$i = 0,
      $this$addr$i$i$i7$i = 0,
      $this$addr$i$i$i8 = 0,
      $this$addr$i$i15 = 0,
      $this$addr$i$i30 = 0,
      $this$addr$i$i9 = 0,
      $this$addr$i10 = 0,
      $this$addr$i16 = 0;
    var $this$addr$i21 = 0,
      $this$addr$i31 = 0,
      $this$addr$i37 = 0,
      $this$addr$i4$i = 0,
      $this$addr$i9$i = 0,
      $this1 = 0,
      $this1$i = 0,
      $this1$i$i = 0,
      $this1$i$i$i = 0,
      $this1$i$i$i$i = 0,
      $this1$i$i$i$i$i = 0,
      $this1$i$i$i$i$i$i = 0,
      $this1$i$i$i$i36 = 0,
      $this1$i$i$i13 = 0,
      $this1$i$i$i20 = 0,
      $this1$i$i$i35 = 0,
      $this1$i$i12 = 0,
      $this1$i$i19 = 0,
      $this1$i$i34 = 0,
      $this1$i11 = 0;
    var $this1$i17 = 0,
      $this1$i22 = 0,
      $this1$i32 = 0,
      $this1$i38 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 256) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256 | 0);
    $agg$tmp1$i$i25 = (sp + 8) | 0;
    $agg$tmp$i$i27 = (sp + 250) | 0;
    $__new_size$addr$i = (sp + 184) | 0;
    $ref$tmp$i = (sp + 172) | 0;
    $agg$tmp1$i$i = sp;
    $agg$tmp$i$i = (sp + 249) | 0;
    $__annotator$i = (sp + 248) | 0;
    $__v = (sp + 12) | 0;
    $this$addr = $this;
    $__n$addr = $__n;
    $__x$addr = $__x;
    $this1 = $this$addr;
    $this$addr$i = $this1;
    $this1$i = $this$addr$i;
    $__end_cap_$i = ($this1$i + 8) | 0;
    $this$addr$i$i = $__end_cap_$i;
    $this1$i$i = $this$addr$i$i;
    $this$addr$i$i$i = $this1$i$i;
    $this1$i$i$i = $this$addr$i$i$i;
    $0 = HEAP32[$this1$i$i$i >> 2] | 0;
    $__end_ = ($this1 + 4) | 0;
    $1 = HEAP32[$__end_ >> 2] | 0;
    $sub$ptr$lhs$cast = $0;
    $sub$ptr$rhs$cast = $1;
    $sub$ptr$sub = ($sub$ptr$lhs$cast - $sub$ptr$rhs$cast) | 0;
    $2 = $__n$addr;
    $cmp = $sub$ptr$sub >>> 0 >= $2 >>> 0;
    if ($cmp) {
      $3 = $__n$addr;
      $4 = $__x$addr;
      $this$addr$i10 = $this1;
      $__n$addr$i = $3;
      $__x$addr$i = $4;
      $this1$i11 = $this$addr$i10;
      $this$addr$i$i9 = $this1$i11;
      $this1$i$i12 = $this$addr$i$i9;
      $__end_cap_$i$i = ($this1$i$i12 + 8) | 0;
      $this$addr$i$i$i8 = $__end_cap_$i$i;
      $this1$i$i$i13 = $this$addr$i$i$i8;
      $this$addr$i$i$i$i = $this1$i$i$i13;
      $this1$i$i$i$i = $this$addr$i$i$i$i;
      $__a$i = $this1$i$i$i$i;
      while (1) {
        $this$addr$i9$i = $__annotator$i;
        $$addr$i$i = $this1$i11;
        $$addr1$i$i = 1;
        $5 = $__a$i;
        $__end_$i = ($this1$i11 + 4) | 0;
        $6 = HEAP32[$__end_$i >> 2] | 0;
        $__p$addr$i8$i = $6;
        $7 = $__p$addr$i8$i;
        $8 = $__x$addr$i;
        $__a$addr$i$i = $5;
        $__p$addr$i$i = $7;
        $__args$addr$i$i = $8;
        $9 = $__a$addr$i$i;
        $10 = $__p$addr$i$i;
        $11 = $__args$addr$i$i;
        $__t$addr$i$i$i = $11;
        $12 = $__t$addr$i$i$i;
        HEAP8[$agg$tmp1$i$i >> 0] = HEAP8[$agg$tmp$i$i >> 0] | 0;
        $__a$addr$i$i$i = $9;
        $__p$addr$i$i$i = $10;
        $__args$addr$i$i$i = $12;
        $13 = $__a$addr$i$i$i;
        $14 = $__p$addr$i$i$i;
        $15 = $__args$addr$i$i$i;
        $__t$addr$i$i$i$i = $15;
        $16 = $__t$addr$i$i$i$i;
        $this$addr$i$i$i6$i = $13;
        $__p$addr$i$i$i$i = $14;
        $__args$addr$i$i$i$i = $16;
        $17 = $__p$addr$i$i$i$i;
        $18 = $__args$addr$i$i$i$i;
        $__t$addr$i$i$i$i$i = $18;
        $19 = $__t$addr$i$i$i$i$i;
        $20 = HEAP8[$19 >> 0] | 0;
        HEAP8[$17 >> 0] = $20;
        $__end_3$i = ($this1$i11 + 4) | 0;
        $21 = HEAP32[$__end_3$i >> 2] | 0;
        $incdec$ptr$i = ($21 + 1) | 0;
        HEAP32[$__end_3$i >> 2] = $incdec$ptr$i;
        $22 = $__n$addr$i;
        $dec$i = ($22 + -1) | 0;
        $__n$addr$i = $dec$i;
        $this$addr$i4$i = $__annotator$i;
        $23 = $__n$addr$i;
        $cmp$i = $23 >>> 0 > 0;
        if (!$cmp$i) {
          break;
        }
      }
      STACKTOP = sp;
      return;
    }
    $this$addr$i16 = $this1;
    $this1$i17 = $this$addr$i16;
    $__end_cap_$i18 = ($this1$i17 + 8) | 0;
    $this$addr$i$i15 = $__end_cap_$i18;
    $this1$i$i19 = $this$addr$i$i15;
    $this$addr$i$i$i14 = $this1$i$i19;
    $this1$i$i$i20 = $this$addr$i$i$i14;
    $__a = $this1$i$i$i20;
    $this$addr$i21 = $this1;
    $this1$i22 = $this$addr$i21;
    $__end_$i23 = ($this1$i22 + 4) | 0;
    $24 = HEAP32[$__end_$i23 >> 2] | 0;
    $25 = HEAP32[$this1$i22 >> 2] | 0;
    $sub$ptr$lhs$cast$i = $24;
    $sub$ptr$rhs$cast$i = $25;
    $sub$ptr$sub$i = ($sub$ptr$lhs$cast$i - $sub$ptr$rhs$cast$i) | 0;
    $26 = $__n$addr;
    $add = ($sub$ptr$sub$i + $26) | 0;
    $this$addr$i31 = $this1;
    HEAP32[$__new_size$addr$i >> 2] = $add;
    $this1$i32 = $this$addr$i31;
    $call$i = __ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($this1$i32) | 0;
    $__ms$i = $call$i;
    $27 = HEAP32[$__new_size$addr$i >> 2] | 0;
    $28 = $__ms$i;
    $cmp$i33 = $27 >>> 0 > $28 >>> 0;
    if ($cmp$i33) {
      __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(
        $this1$i32
      );
      // unreachable;
    }
    $this$addr$i$i30 = $this1$i32;
    $this1$i$i34 = $this$addr$i$i30;
    $this$addr$i$i$i29 = $this1$i$i34;
    $this1$i$i$i35 = $this$addr$i$i$i29;
    $this$addr$i$i$i$i28 = $this1$i$i$i35;
    $this1$i$i$i$i36 = $this$addr$i$i$i$i28;
    $__end_cap_$i$i$i$i = ($this1$i$i$i$i36 + 8) | 0;
    $this$addr$i$i$i$i$i = $__end_cap_$i$i$i$i;
    $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
    $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
    $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
    $29 = HEAP32[$this1$i$i$i$i$i$i >> 2] | 0;
    $30 = HEAP32[$this1$i$i$i35 >> 2] | 0;
    $sub$ptr$lhs$cast$i$i$i = $29;
    $sub$ptr$rhs$cast$i$i$i = $30;
    $sub$ptr$sub$i$i$i =
      ($sub$ptr$lhs$cast$i$i$i - $sub$ptr$rhs$cast$i$i$i) | 0;
    $__cap$i = $sub$ptr$sub$i$i$i;
    $31 = $__cap$i;
    $32 = $__ms$i;
    $div$i = (($32 >>> 0) / 2) & -1;
    $cmp3$i = $31 >>> 0 >= $div$i >>> 0;
    if ($cmp3$i) {
      $33 = $__ms$i;
      $retval$i = $33;
    } else {
      $34 = $__cap$i;
      $mul$i = $34 << 1;
      HEAP32[$ref$tmp$i >> 2] = $mul$i;
      $__a$addr$i$i26 = $ref$tmp$i;
      $__b$addr$i$i = $__new_size$addr$i;
      $35 = $__a$addr$i$i26;
      $36 = $__b$addr$i$i;
      HEAP8[$agg$tmp1$i$i25 >> 0] = HEAP8[$agg$tmp$i$i27 >> 0] | 0;
      $__a$addr$i$i$i24 = $35;
      $__b$addr$i$i$i = $36;
      $37 = $__a$addr$i$i$i24;
      $38 = $__b$addr$i$i$i;
      $this$addr$i$i$i7$i = $agg$tmp1$i$i25;
      $__x$addr$i$i$i$i = $37;
      $__y$addr$i$i$i$i = $38;
      $39 = $__x$addr$i$i$i$i;
      $40 = HEAP32[$39 >> 2] | 0;
      $41 = $__y$addr$i$i$i$i;
      $42 = HEAP32[$41 >> 2] | 0;
      $cmp$i$i$i$i = $40 >>> 0 < $42 >>> 0;
      $43 = $__b$addr$i$i$i;
      $44 = $__a$addr$i$i$i24;
      $cond$lvalue$i$i$i2D = $cmp$i$i$i$i ? $43 : $44;
      $45 = HEAP32[$cond$lvalue$i$i$i2D >> 2] | 0;
      $retval$i = $45;
    }
    $46 = $retval$i;
    $this$addr$i37 = $this1;
    $this1$i38 = $this$addr$i37;
    $__end_$i39 = ($this1$i38 + 4) | 0;
    $47 = HEAP32[$__end_$i39 >> 2] | 0;
    $48 = HEAP32[$this1$i38 >> 2] | 0;
    $sub$ptr$lhs$cast$i41 = $47;
    $sub$ptr$rhs$cast$i42 = $48;
    $sub$ptr$sub$i43 = ($sub$ptr$lhs$cast$i41 - $sub$ptr$rhs$cast$i42) | 0;
    $49 = $__a;
    __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEEC2EmmS3_(
      $__v,
      $46,
      $sub$ptr$sub$i43,
      $49
    );
    $50 = $__n$addr;
    $51 = $__x$addr;
    __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEE18__construct_at_endEmRKh(
      $__v,
      $50,
      $51
    );
    __ZNSt3__26vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EE(
      $this1,
      $__v
    );
    __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEED2Ev($__v);
    STACKTOP = sp;
    return;
  }
  function __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEE18__construct_at_endEmRKh(
    $this,
    $__n,
    $__x
  ) {
    $this = $this | 0;
    $__n = $__n | 0;
    $__x = $__x | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0;
    var $__a = 0,
      $__a$addr$i = 0,
      $__a$addr$i$i = 0,
      $__args$addr$i = 0,
      $__args$addr$i$i = 0,
      $__args$addr$i$i$i = 0,
      $__end_ = 0,
      $__end_3 = 0,
      $__end_cap_$i = 0,
      $__n$addr = 0,
      $__p$addr$i = 0,
      $__p$addr$i$i = 0,
      $__p$addr$i$i$i = 0,
      $__p$addr$i6 = 0,
      $__t$addr$i$i = 0,
      $__t$addr$i$i$i = 0,
      $__t$addr$i$i$i$i = 0,
      $__x$addr = 0,
      $add$ptr$i$i = 0,
      $agg$tmp$i = 0;
    var $agg$tmp1$i = 0,
      $cmp = 0,
      $dec = 0,
      $incdec$ptr = 0,
      $this$addr = 0,
      $this$addr$i = 0,
      $this$addr$i$i = 0,
      $this$addr$i$i$i = 0,
      $this$addr$i$i$i4 = 0,
      $this1 = 0,
      $this1$i = 0,
      $this1$i$i = 0,
      $this1$i$i$i = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 96) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96 | 0);
    $agg$tmp1$i = sp;
    $agg$tmp$i = (sp + 84) | 0;
    $this$addr = $this;
    $__n$addr = $__n;
    $__x$addr = $__x;
    $this1 = $this$addr;
    $this$addr$i = $this1;
    $this1$i = $this$addr$i;
    $__end_cap_$i = ($this1$i + 12) | 0;
    $this$addr$i$i = $__end_cap_$i;
    $this1$i$i = $this$addr$i$i;
    $add$ptr$i$i = ($this1$i$i + 4) | 0;
    $this$addr$i$i$i = $add$ptr$i$i;
    $this1$i$i$i = $this$addr$i$i$i;
    $0 = HEAP32[$this1$i$i$i >> 2] | 0;
    $__a = $0;
    while (1) {
      $1 = $__a;
      $__end_ = ($this1 + 8) | 0;
      $2 = HEAP32[$__end_ >> 2] | 0;
      $__p$addr$i6 = $2;
      $3 = $__p$addr$i6;
      $4 = $__x$addr;
      $__a$addr$i = $1;
      $__p$addr$i = $3;
      $__args$addr$i = $4;
      $5 = $__a$addr$i;
      $6 = $__p$addr$i;
      $7 = $__args$addr$i;
      $__t$addr$i$i = $7;
      $8 = $__t$addr$i$i;
      HEAP8[$agg$tmp1$i >> 0] = HEAP8[$agg$tmp$i >> 0] | 0;
      $__a$addr$i$i = $5;
      $__p$addr$i$i = $6;
      $__args$addr$i$i = $8;
      $9 = $__a$addr$i$i;
      $10 = $__p$addr$i$i;
      $11 = $__args$addr$i$i;
      $__t$addr$i$i$i = $11;
      $12 = $__t$addr$i$i$i;
      $this$addr$i$i$i4 = $9;
      $__p$addr$i$i$i = $10;
      $__args$addr$i$i$i = $12;
      $13 = $__p$addr$i$i$i;
      $14 = $__args$addr$i$i$i;
      $__t$addr$i$i$i$i = $14;
      $15 = $__t$addr$i$i$i$i;
      $16 = HEAP8[$15 >> 0] | 0;
      HEAP8[$13 >> 0] = $16;
      $__end_3 = ($this1 + 8) | 0;
      $17 = HEAP32[$__end_3 >> 2] | 0;
      $incdec$ptr = ($17 + 1) | 0;
      HEAP32[$__end_3 >> 2] = $incdec$ptr;
      $18 = $__n$addr;
      $dec = ($18 + -1) | 0;
      $__n$addr = $dec;
      $19 = $__n$addr;
      $cmp = $19 >>> 0 > 0;
      if (!$cmp) {
        break;
      }
    }
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIhNS3_9allocatorIhEEEEEEvv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return;
  }
  function __ZN10emscripten8internal13getActualTypeINSt3__26vectorIhNS2_9allocatorIhEEEEEEPKvPT_(
    $ptr
  ) {
    $ptr = $ptr | 0;
    var $0 = 0,
      $call = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $call =
      __ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEEEPKvRKT_(
        $0
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIhNS3_9allocatorIhEEEEEEPFvvEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 0 | 0;
  }
  function __ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIhNS3_9allocatorIhEEEEEEPFvvEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 0 | 0;
  }
  function __ZN10emscripten8internal14raw_destructorINSt3__26vectorIhNS2_9allocatorIhEEEEEEvPT_(
    $ptr
  ) {
    $ptr = $ptr | 0;
    var $$addr$i$i$i = 0,
      $$addr1$i$i$i = 0,
      $$addr2$i$i$i = 0,
      $$addr3$i$i$i = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $__end_$i$i$i = 0;
    var $__end_cap_$i$i$i$i$i = 0,
      $__end_cap_$i$i$i32$i$i = 0,
      $__p$addr$i$i$i$i = 0,
      $__p$addr$i$i13$i$i = 0,
      $__p$addr$i$i20$i$i = 0,
      $__p$addr$i$i40$i$i = 0,
      $add$ptr$i$i = 0,
      $add$ptr6$i$i = 0,
      $add$ptr9$i$i = 0,
      $isnull = 0,
      $ptr$addr = 0,
      $sub$ptr$lhs$cast$i$i$i = 0,
      $sub$ptr$lhs$cast$i$i$i$i = 0,
      $sub$ptr$lhs$cast$i$i37$i$i = 0,
      $sub$ptr$rhs$cast$i$i$i = 0,
      $sub$ptr$rhs$cast$i$i$i$i = 0,
      $sub$ptr$rhs$cast$i$i38$i$i = 0,
      $sub$ptr$sub$i$i$i = 0,
      $sub$ptr$sub$i$i$i$i = 0,
      $sub$ptr$sub$i$i39$i$i = 0;
    var $this$addr$i = 0,
      $this$addr$i$i = 0,
      $this$addr$i$i$i = 0,
      $this$addr$i$i$i$i = 0,
      $this$addr$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i24$i$i = 0,
      $this$addr$i$i$i$i25$i$i = 0,
      $this$addr$i$i$i26$i$i = 0,
      $this$addr$i$i27$i$i = 0,
      $this$addr$i10$i$i = 0,
      $this$addr$i11$i$i = 0,
      $this$addr$i14$i$i = 0,
      $this$addr$i17$i$i = 0,
      $this$addr$i21$i$i = 0,
      $this$addr$i28$i$i = 0,
      $this$addr$i41$i$i = 0,
      $this1$i = 0,
      $this1$i$i = 0;
    var $this1$i$i$i = 0,
      $this1$i$i$i$i = 0,
      $this1$i$i$i$i$i = 0,
      $this1$i$i$i$i$i$i = 0,
      $this1$i$i$i$i$i$i$i = 0,
      $this1$i$i$i$i$i34$i$i = 0,
      $this1$i$i$i$i33$i$i = 0,
      $this1$i$i$i31$i$i = 0,
      $this1$i$i30$i$i = 0,
      $this1$i12$i$i = 0,
      $this1$i15$i$i = 0,
      $this1$i18$i$i = 0,
      $this1$i22$i$i = 0,
      $this1$i29$i$i = 0,
      $this1$i42$i$i = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 112) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112 | 0);
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $isnull = ($0 | 0) == (0 | 0);
    if ($isnull) {
      STACKTOP = sp;
      return;
    }
    $this$addr$i = $0;
    $this1$i = $this$addr$i;
    $this$addr$i$i = $this1$i;
    $this1$i$i = $this$addr$i$i;
    $this$addr$i$i$i = $this1$i$i;
    $this1$i$i$i = $this$addr$i$i$i;
    $1 = HEAP32[$this1$i$i$i >> 2] | 0;
    $__p$addr$i$i$i$i = $1;
    $2 = $__p$addr$i$i$i$i;
    $this$addr$i41$i$i = $this1$i$i;
    $this1$i42$i$i = $this$addr$i41$i$i;
    $3 = HEAP32[$this1$i42$i$i >> 2] | 0;
    $__p$addr$i$i40$i$i = $3;
    $4 = $__p$addr$i$i40$i$i;
    $this$addr$i28$i$i = $this1$i$i;
    $this1$i29$i$i = $this$addr$i28$i$i;
    $this$addr$i$i27$i$i = $this1$i29$i$i;
    $this1$i$i30$i$i = $this$addr$i$i27$i$i;
    $this$addr$i$i$i26$i$i = $this1$i$i30$i$i;
    $this1$i$i$i31$i$i = $this$addr$i$i$i26$i$i;
    $__end_cap_$i$i$i32$i$i = ($this1$i$i$i31$i$i + 8) | 0;
    $this$addr$i$i$i$i25$i$i = $__end_cap_$i$i$i32$i$i;
    $this1$i$i$i$i33$i$i = $this$addr$i$i$i$i25$i$i;
    $this$addr$i$i$i$i$i24$i$i = $this1$i$i$i$i33$i$i;
    $this1$i$i$i$i$i34$i$i = $this$addr$i$i$i$i$i24$i$i;
    $5 = HEAP32[$this1$i$i$i$i$i34$i$i >> 2] | 0;
    $6 = HEAP32[$this1$i$i30$i$i >> 2] | 0;
    $sub$ptr$lhs$cast$i$i37$i$i = $5;
    $sub$ptr$rhs$cast$i$i38$i$i = $6;
    $sub$ptr$sub$i$i39$i$i =
      ($sub$ptr$lhs$cast$i$i37$i$i - $sub$ptr$rhs$cast$i$i38$i$i) | 0;
    $add$ptr$i$i = ($4 + $sub$ptr$sub$i$i39$i$i) | 0;
    $this$addr$i21$i$i = $this1$i$i;
    $this1$i22$i$i = $this$addr$i21$i$i;
    $7 = HEAP32[$this1$i22$i$i >> 2] | 0;
    $__p$addr$i$i20$i$i = $7;
    $8 = $__p$addr$i$i20$i$i;
    $this$addr$i17$i$i = $this1$i$i;
    $this1$i18$i$i = $this$addr$i17$i$i;
    $__end_$i$i$i = ($this1$i18$i$i + 4) | 0;
    $9 = HEAP32[$__end_$i$i$i >> 2] | 0;
    $10 = HEAP32[$this1$i18$i$i >> 2] | 0;
    $sub$ptr$lhs$cast$i$i$i = $9;
    $sub$ptr$rhs$cast$i$i$i = $10;
    $sub$ptr$sub$i$i$i =
      ($sub$ptr$lhs$cast$i$i$i - $sub$ptr$rhs$cast$i$i$i) | 0;
    $add$ptr6$i$i = ($8 + $sub$ptr$sub$i$i$i) | 0;
    $this$addr$i14$i$i = $this1$i$i;
    $this1$i15$i$i = $this$addr$i14$i$i;
    $11 = HEAP32[$this1$i15$i$i >> 2] | 0;
    $__p$addr$i$i13$i$i = $11;
    $12 = $__p$addr$i$i13$i$i;
    $this$addr$i11$i$i = $this1$i$i;
    $this1$i12$i$i = $this$addr$i11$i$i;
    $this$addr$i$i$i$i = $this1$i12$i$i;
    $this1$i$i$i$i = $this$addr$i$i$i$i;
    $this$addr$i$i$i$i$i = $this1$i$i$i$i;
    $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
    $__end_cap_$i$i$i$i$i = ($this1$i$i$i$i$i + 8) | 0;
    $this$addr$i$i$i$i$i$i = $__end_cap_$i$i$i$i$i;
    $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
    $this$addr$i$i$i$i$i$i$i = $this1$i$i$i$i$i$i;
    $this1$i$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i$i;
    $13 = HEAP32[$this1$i$i$i$i$i$i$i >> 2] | 0;
    $14 = HEAP32[$this1$i$i$i$i >> 2] | 0;
    $sub$ptr$lhs$cast$i$i$i$i = $13;
    $sub$ptr$rhs$cast$i$i$i$i = $14;
    $sub$ptr$sub$i$i$i$i =
      ($sub$ptr$lhs$cast$i$i$i$i - $sub$ptr$rhs$cast$i$i$i$i) | 0;
    $add$ptr9$i$i = ($12 + $sub$ptr$sub$i$i$i$i) | 0;
    $this$addr$i10$i$i = $this1$i$i;
    $$addr$i$i$i = $2;
    $$addr1$i$i$i = $add$ptr$i$i;
    $$addr2$i$i$i = $add$ptr6$i$i;
    $$addr3$i$i$i = $add$ptr9$i$i;
    __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($this1$i);
    __ZdlPv($0);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal6TypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEE3getEv() |
      0;
    return $call | 0;
  }
  function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIhNS3_9allocatorIhEEEEEEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIhNS2_9allocatorIhEEEEE3getEv() |
      0;
    return $call | 0;
  }
  function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIhNS3_9allocatorIhEEEEEEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIhNS2_9allocatorIhEEEEE3getEv() |
      0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11NoBaseClass3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 0 | 0;
  }
  function __ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEEEPKvRKT_(
    $value
  ) {
    $value = $value | 0;
    var $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $value$addr = $value;
    STACKTOP = sp;
    return 560 | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 560 | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIhNS2_9allocatorIhEEEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 584 | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIhNS2_9allocatorIhEEEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 600 | 0;
  }
  function __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 8216 | 0;
  }
  function __ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 8219 | 0;
  }
  function __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 8221 | 0;
  }
  function __ZN10emscripten8internal12operator_newINSt3__26vectorIhNS2_9allocatorIhEEEEJEEEPT_DpOT0_() {
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $__end_$i$i = 0,
      $__end_cap_$i$i = 0,
      $__t$addr$i$i$i = 0,
      $__t$addr$i$i$i$i = 0,
      $__t$addr$i$i$i$i$i = 0,
      $__u$addr$i$i$i$i = 0,
      $call = 0,
      $ref$tmp$i$i = 0,
      $this$addr$i = 0,
      $this$addr$i$i = 0,
      $this$addr$i$i$i = 0,
      $this$addr$i$i$i$i = 0,
      $this$addr$i$i$i$i$i = 0,
      $this$addr$i2$i$i$i = 0,
      $this$addr$i3$i$i = 0,
      $this1$i = 0,
      $this1$i$i = 0;
    var $this1$i$i$i$i = 0,
      $this1$i3$i$i$i = 0,
      $this1$i4$i$i = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 48) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
    $ref$tmp$i$i = (sp + 4) | 0;
    $call = __Znwm(12) | 0;
    $this$addr$i = $call;
    $this1$i = $this$addr$i;
    $this$addr$i$i = $this1$i;
    $this1$i$i = $this$addr$i$i;
    $this$addr$i$i$i = $this1$i$i;
    HEAP32[$this1$i$i >> 2] = 0;
    $__end_$i$i = ($this1$i$i + 4) | 0;
    HEAP32[$__end_$i$i >> 2] = 0;
    $__end_cap_$i$i = ($this1$i$i + 8) | 0;
    HEAP32[$ref$tmp$i$i >> 2] = 0;
    $this$addr$i3$i$i = $__end_cap_$i$i;
    $__t$addr$i$i$i = $ref$tmp$i$i;
    $this1$i4$i$i = $this$addr$i3$i$i;
    $0 = $__t$addr$i$i$i;
    $__t$addr$i$i$i$i = $0;
    $1 = $__t$addr$i$i$i$i;
    $this$addr$i2$i$i$i = $this1$i4$i$i;
    $__u$addr$i$i$i$i = $1;
    $this1$i3$i$i$i = $this$addr$i2$i$i$i;
    $2 = $__u$addr$i$i$i$i;
    $__t$addr$i$i$i$i$i = $2;
    HEAP32[$this1$i3$i$i$i >> 2] = 0;
    $this$addr$i$i$i$i = $this1$i4$i$i;
    $this1$i$i$i$i = $this$addr$i$i$i$i;
    $this$addr$i$i$i$i$i = $this1$i$i$i$i;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal24RegisterClassConstructorIPFPNSt3__26vectorIhNS2_9allocatorIhEEEEvEE6invokeIS6_JEEEvS9_(
    $factory
  ) {
    $factory = $factory | 0;
    var $$addr$i = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $args = 0,
      $call = 0,
      $call$i$i = 0,
      $call1 = 0,
      $call2 = 0,
      $factory$addr = 0,
      $invoke = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $args = (sp + 12) | 0;
    $factory$addr = $factory;
    $invoke = 341;
    $call =
      __ZN10emscripten8internal6TypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEvE3getEv() |
      0;
    $call1 =
      __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIhNS5_9allocatorIhEEEEEE8getCountEv(
        $args
      ) | 0;
    $call2 =
      __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIhNS5_9allocatorIhEEEEEE8getTypesEv(
        $args
      ) | 0;
    $0 = $invoke;
    $$addr$i = $0;
    $call$i$i = __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() | 0;
    $1 = $invoke;
    $2 = $factory$addr;
    __embind_register_class_constructor(
      $call | 0,
      $call1 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $1 | 0,
      $2 | 0
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal7InvokerIPNSt3__26vectorIhNS2_9allocatorIhEEEEJEE6invokeEPFS7_vE(
    $fn
  ) {
    $fn = $fn | 0;
    var $0 = 0,
      $call = 0,
      $call1 = 0,
      $fn$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $fn$addr = $fn;
    $0 = $fn$addr;
    $call = FUNCTION_TABLE_i[$0 & 511]() | 0;
    $call1 =
      __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIhNS2_9allocatorIhEEEEvE10toWireTypeES7_(
        $call
      ) | 0;
    STACKTOP = sp;
    return $call1 | 0;
  }
  function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIhNS5_9allocatorIhEEEEEE8getCountEv(
    $this
  ) {
    $this = $this | 0;
    var $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    STACKTOP = sp;
    return 1;
  }
  function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIhNS5_9allocatorIhEEEEEE8getTypesEv(
    $this
  ) {
    $this = $this | 0;
    var $call = 0,
      $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $call =
      __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIhNS4_9allocatorIhEEEEEEEEEE3getEv() |
      0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIhNS2_9allocatorIhEEEEvE10toWireTypeES7_(
    $p
  ) {
    $p = $p | 0;
    var $0 = 0,
      $p$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $p$addr = $p;
    $0 = $p$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIhNS4_9allocatorIhEEEEEEEEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2824 | 0;
  }
  function __ZN10emscripten8internal19RegisterClassMethodIMNSt3__26vectorIhNS2_9allocatorIhEEEEFvRKhEE6invokeIS6_JEEEvPKcSA_(
    $methodName,
    $0
  ) {
    $methodName = $methodName | 0;
    $0 = $0 | 0;
    var $$addr$i = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $args = 0,
      $call = 0,
      $call$i$i = 0,
      $call1 = 0,
      $call2 = 0,
      $call4 = 0,
      $invoker = 0,
      $memberFunction$addr = 0,
      $memberFunction$addr$index4 = 0,
      $memberFunction$field = 0,
      $memberFunction$field2 = 0,
      $memberFunction$index1 = 0,
      $methodName$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $memberFunction$addr = (sp + 8) | 0;
    $args = (sp + 24) | 0;
    $memberFunction$field = HEAP32[$0 >> 2] | 0;
    $memberFunction$index1 = ($0 + 4) | 0;
    $memberFunction$field2 = HEAP32[$memberFunction$index1 >> 2] | 0;
    $methodName$addr = $methodName;
    HEAP32[$memberFunction$addr >> 2] = $memberFunction$field;
    $memberFunction$addr$index4 = ($memberFunction$addr + 4) | 0;
    HEAP32[$memberFunction$addr$index4 >> 2] = $memberFunction$field2;
    $invoker = 342;
    $call =
      __ZN10emscripten8internal6TypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEvE3getEv() |
      0;
    $1 = $methodName$addr;
    $call1 =
      __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIhNS5_9allocatorIhEEEEEERKhEE8getCountEv(
        $args
      ) | 0;
    $call2 =
      __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIhNS5_9allocatorIhEEEEEERKhEE8getTypesEv(
        $args
      ) | 0;
    $2 = $invoker;
    $$addr$i = $2;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0;
    $3 = $invoker;
    $call4 =
      __ZN10emscripten8internal10getContextIMNSt3__26vectorIhNS2_9allocatorIhEEEEFvRKhEEEPT_RKSB_(
        $memberFunction$addr
      ) | 0;
    __embind_register_class_function(
      $call | 0,
      $1 | 0,
      $call1 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $3 | 0,
      $call4 | 0,
      0
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIhNS2_9allocatorIhEEEEFvRKhEvPS6_JS8_EE6invokeERKSA_SB_h(
    $method,
    $wireThis,
    $args
  ) {
    $method = $method | 0;
    $wireThis = $wireThis | 0;
    $args = $args | 0;
    var $$field = 0,
      $$field2 = 0,
      $$index1 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $args$addr = 0,
      $call = 0,
      $call1 = 0,
      $memptr$adj$shifted = 0,
      $memptr$isvirtual = 0,
      $memptr$nonvirtualfn = 0,
      $memptr$virtualfn = 0,
      $method$addr = 0,
      $ref$tmp = 0,
      $vtable = 0;
    var $wireThis$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ref$tmp = (sp + 8) | 0;
    $method$addr = $method;
    $wireThis$addr = $wireThis;
    $args$addr = $args;
    $0 = $wireThis$addr;
    $call =
      __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIhNS2_9allocatorIhEEEEvE12fromWireTypeES7_(
        $0
      ) | 0;
    $1 = $method$addr;
    $$field = HEAP32[$1 >> 2] | 0;
    $$index1 = ($1 + 4) | 0;
    $$field2 = HEAP32[$$index1 >> 2] | 0;
    $memptr$adj$shifted = $$field2 >> 1;
    $2 = ($call + $memptr$adj$shifted) | 0;
    $3 = $$field2 & 1;
    $memptr$isvirtual = ($3 | 0) != 0;
    if ($memptr$isvirtual) {
      $vtable = HEAP32[$2 >> 2] | 0;
      $4 = ($vtable + $$field) | 0;
      $memptr$virtualfn = HEAP32[$4 >> 2] | 0;
      $6 = $memptr$virtualfn;
    } else {
      $memptr$nonvirtualfn = $$field;
      $6 = $memptr$nonvirtualfn;
    }
    $5 = $args$addr;
    $call1 = __ZN10emscripten8internal11BindingTypeIhvE12fromWireTypeEh($5) | 0;
    HEAP8[$ref$tmp >> 0] = $call1;
    FUNCTION_TABLE_vii[$6 & 511]($2, $ref$tmp);
    STACKTOP = sp;
    return;
  }
  function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIhNS5_9allocatorIhEEEEEERKhEE8getCountEv(
    $this
  ) {
    $this = $this | 0;
    var $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    STACKTOP = sp;
    return 3;
  }
  function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIhNS5_9allocatorIhEEEEEERKhEE8getTypesEv(
    $this
  ) {
    $this = $this | 0;
    var $call = 0,
      $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $call =
      __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIhNS4_9allocatorIhEEEEEERKhEEEE3getEv() |
      0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal10getContextIMNSt3__26vectorIhNS2_9allocatorIhEEEEFvRKhEEEPT_RKSB_(
    $t
  ) {
    $t = $t | 0;
    var $$field = 0,
      $$field2 = 0,
      $$index1 = 0,
      $$index5 = 0,
      $0 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(8) | 0;
    $0 = $t$addr;
    $$field = HEAP32[$0 >> 2] | 0;
    $$index1 = ($0 + 4) | 0;
    $$field2 = HEAP32[$$index1 >> 2] | 0;
    HEAP32[$call >> 2] = $$field;
    $$index5 = ($call + 4) | 0;
    HEAP32[$$index5 >> 2] = $$field2;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIhNS2_9allocatorIhEEEEvE12fromWireTypeES7_(
    $wt
  ) {
    $wt = $wt | 0;
    var $0 = 0,
      $wt$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $wt$addr = $wt;
    $0 = $wt$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal11BindingTypeIhvE12fromWireTypeEh($v) {
    $v = $v | 0;
    var $0 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIhNS4_9allocatorIhEEEEEERKhEEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2828 | 0;
  }
  function __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 8224 | 0;
  }
  function __ZN10emscripten8internal19RegisterClassMethodIMNSt3__26vectorIhNS2_9allocatorIhEEEEFvmRKhEE6invokeIS6_JEEEvPKcSA_(
    $methodName,
    $0
  ) {
    $methodName = $methodName | 0;
    $0 = $0 | 0;
    var $$addr$i = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $args = 0,
      $call = 0,
      $call$i$i = 0,
      $call1 = 0,
      $call2 = 0,
      $call4 = 0,
      $invoker = 0,
      $memberFunction$addr = 0,
      $memberFunction$addr$index4 = 0,
      $memberFunction$field = 0,
      $memberFunction$field2 = 0,
      $memberFunction$index1 = 0,
      $methodName$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $memberFunction$addr = (sp + 8) | 0;
    $args = (sp + 24) | 0;
    $memberFunction$field = HEAP32[$0 >> 2] | 0;
    $memberFunction$index1 = ($0 + 4) | 0;
    $memberFunction$field2 = HEAP32[$memberFunction$index1 >> 2] | 0;
    $methodName$addr = $methodName;
    HEAP32[$memberFunction$addr >> 2] = $memberFunction$field;
    $memberFunction$addr$index4 = ($memberFunction$addr + 4) | 0;
    HEAP32[$memberFunction$addr$index4 >> 2] = $memberFunction$field2;
    $invoker = 343;
    $call =
      __ZN10emscripten8internal6TypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEvE3getEv() |
      0;
    $1 = $methodName$addr;
    $call1 =
      __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIhNS5_9allocatorIhEEEEEEmRKhEE8getCountEv(
        $args
      ) | 0;
    $call2 =
      __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIhNS5_9allocatorIhEEEEEEmRKhEE8getTypesEv(
        $args
      ) | 0;
    $2 = $invoker;
    $$addr$i = $2;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv() | 0;
    $3 = $invoker;
    $call4 =
      __ZN10emscripten8internal10getContextIMNSt3__26vectorIhNS2_9allocatorIhEEEEFvmRKhEEEPT_RKSB_(
        $memberFunction$addr
      ) | 0;
    __embind_register_class_function(
      $call | 0,
      $1 | 0,
      $call1 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $3 | 0,
      $call4 | 0,
      0
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIhNS2_9allocatorIhEEEEFvmRKhEvPS6_JmS8_EE6invokeERKSA_SB_mh(
    $method,
    $wireThis,
    $args,
    $args1
  ) {
    $method = $method | 0;
    $wireThis = $wireThis | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $$field = 0,
      $$field2 = 0,
      $$index1 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $args$addr = 0,
      $args$addr2 = 0,
      $call = 0,
      $call3 = 0,
      $call4 = 0,
      $memptr$adj$shifted = 0,
      $memptr$isvirtual = 0,
      $memptr$nonvirtualfn = 0,
      $memptr$virtualfn = 0;
    var $method$addr = 0,
      $ref$tmp = 0,
      $vtable = 0,
      $wireThis$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ref$tmp = (sp + 12) | 0;
    $method$addr = $method;
    $wireThis$addr = $wireThis;
    $args$addr = $args;
    $args$addr2 = $args1;
    $0 = $wireThis$addr;
    $call =
      __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIhNS2_9allocatorIhEEEEvE12fromWireTypeES7_(
        $0
      ) | 0;
    $1 = $method$addr;
    $$field = HEAP32[$1 >> 2] | 0;
    $$index1 = ($1 + 4) | 0;
    $$field2 = HEAP32[$$index1 >> 2] | 0;
    $memptr$adj$shifted = $$field2 >> 1;
    $2 = ($call + $memptr$adj$shifted) | 0;
    $3 = $$field2 & 1;
    $memptr$isvirtual = ($3 | 0) != 0;
    if ($memptr$isvirtual) {
      $vtable = HEAP32[$2 >> 2] | 0;
      $4 = ($vtable + $$field) | 0;
      $memptr$virtualfn = HEAP32[$4 >> 2] | 0;
      $7 = $memptr$virtualfn;
    } else {
      $memptr$nonvirtualfn = $$field;
      $7 = $memptr$nonvirtualfn;
    }
    $5 = $args$addr;
    $call3 = __ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($5) | 0;
    $6 = $args$addr2;
    $call4 = __ZN10emscripten8internal11BindingTypeIhvE12fromWireTypeEh($6) | 0;
    HEAP8[$ref$tmp >> 0] = $call4;
    FUNCTION_TABLE_viii[$7 & 511]($2, $call3, $ref$tmp);
    STACKTOP = sp;
    return;
  }
  function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIhNS5_9allocatorIhEEEEEEmRKhEE8getCountEv(
    $this
  ) {
    $this = $this | 0;
    var $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    STACKTOP = sp;
    return 4;
  }
  function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIhNS5_9allocatorIhEEEEEEmRKhEE8getTypesEv(
    $this
  ) {
    $this = $this | 0;
    var $call = 0,
      $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $call =
      __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIhNS4_9allocatorIhEEEEEEmRKhEEEE3getEv() |
      0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal10getContextIMNSt3__26vectorIhNS2_9allocatorIhEEEEFvmRKhEEEPT_RKSB_(
    $t
  ) {
    $t = $t | 0;
    var $$field = 0,
      $$field2 = 0,
      $$index1 = 0,
      $$index5 = 0,
      $0 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(8) | 0;
    $0 = $t$addr;
    $$field = HEAP32[$0 >> 2] | 0;
    $$index1 = ($0 + 4) | 0;
    $$field2 = HEAP32[$$index1 >> 2] | 0;
    HEAP32[$call >> 2] = $$field;
    $$index5 = ($call + 4) | 0;
    HEAP32[$$index5 >> 2] = $$field2;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($v) {
    $v = $v | 0;
    var $0 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIhNS4_9allocatorIhEEEEEEmRKhEEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 16 | 0;
  }
  function __ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 8229 | 0;
  }
  function __ZN10emscripten8internal19RegisterClassMethodIMNSt3__26vectorIhNS2_9allocatorIhEEEEKFmvEE6invokeIS6_JEEEvPKcS8_(
    $methodName,
    $0
  ) {
    $methodName = $methodName | 0;
    $0 = $0 | 0;
    var $$addr$i = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $args = 0,
      $call = 0,
      $call$i$i = 0,
      $call1 = 0,
      $call2 = 0,
      $call4 = 0,
      $invoker = 0,
      $memberFunction$addr = 0,
      $memberFunction$addr$index4 = 0,
      $memberFunction$field = 0,
      $memberFunction$field2 = 0,
      $memberFunction$index1 = 0,
      $methodName$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $memberFunction$addr = (sp + 8) | 0;
    $args = (sp + 24) | 0;
    $memberFunction$field = HEAP32[$0 >> 2] | 0;
    $memberFunction$index1 = ($0 + 4) | 0;
    $memberFunction$field2 = HEAP32[$memberFunction$index1 >> 2] | 0;
    $methodName$addr = $methodName;
    HEAP32[$memberFunction$addr >> 2] = $memberFunction$field;
    $memberFunction$addr$index4 = ($memberFunction$addr + 4) | 0;
    HEAP32[$memberFunction$addr$index4 >> 2] = $memberFunction$field2;
    $invoker = 344;
    $call =
      __ZN10emscripten8internal6TypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEvE3getEv() |
      0;
    $1 = $methodName$addr;
    $call1 =
      __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIhNS5_9allocatorIhEEEEEEEE8getCountEv(
        $args
      ) | 0;
    $call2 =
      __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIhNS5_9allocatorIhEEEEEEEE8getTypesEv(
        $args
      ) | 0;
    $2 = $invoker;
    $$addr$i = $2;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $3 = $invoker;
    $call4 =
      __ZN10emscripten8internal10getContextIMNSt3__26vectorIhNS2_9allocatorIhEEEEKFmvEEEPT_RKS9_(
        $memberFunction$addr
      ) | 0;
    __embind_register_class_function(
      $call | 0,
      $1 | 0,
      $call1 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $3 | 0,
      $call4 | 0,
      0
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIhNS2_9allocatorIhEEEEKFmvEmPKS6_JEE6invokeERKS8_SA_(
    $method,
    $wireThis
  ) {
    $method = $method | 0;
    $wireThis = $wireThis | 0;
    var $$field = 0,
      $$field2 = 0,
      $$index1 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $call = 0,
      $call1 = 0,
      $call2 = 0,
      $memptr$adj$shifted = 0,
      $memptr$isvirtual = 0,
      $memptr$nonvirtualfn = 0,
      $memptr$virtualfn = 0,
      $method$addr = 0,
      $ref$tmp = 0,
      $vtable = 0,
      $wireThis$addr = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ref$tmp = sp;
    $method$addr = $method;
    $wireThis$addr = $wireThis;
    $0 = $wireThis$addr;
    $call =
      __ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIhNS2_9allocatorIhEEEEvE12fromWireTypeES8_(
        $0
      ) | 0;
    $1 = $method$addr;
    $$field = HEAP32[$1 >> 2] | 0;
    $$index1 = ($1 + 4) | 0;
    $$field2 = HEAP32[$$index1 >> 2] | 0;
    $memptr$adj$shifted = $$field2 >> 1;
    $2 = ($call + $memptr$adj$shifted) | 0;
    $3 = $$field2 & 1;
    $memptr$isvirtual = ($3 | 0) != 0;
    if ($memptr$isvirtual) {
      $vtable = HEAP32[$2 >> 2] | 0;
      $4 = ($vtable + $$field) | 0;
      $memptr$virtualfn = HEAP32[$4 >> 2] | 0;
      $5 = $memptr$virtualfn;
    } else {
      $memptr$nonvirtualfn = $$field;
      $5 = $memptr$nonvirtualfn;
    }
    $call1 = FUNCTION_TABLE_ii[$5 & 511]($2) | 0;
    HEAP32[$ref$tmp >> 2] = $call1;
    $call2 =
      __ZN10emscripten8internal11BindingTypeImvE10toWireTypeERKm($ref$tmp) | 0;
    STACKTOP = sp;
    return $call2 | 0;
  }
  function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIhNS5_9allocatorIhEEEEEEEE8getCountEv(
    $this
  ) {
    $this = $this | 0;
    var $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    STACKTOP = sp;
    return 2;
  }
  function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIhNS5_9allocatorIhEEEEEEEE8getTypesEv(
    $this
  ) {
    $this = $this | 0;
    var $call = 0,
      $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $call =
      __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIhNS4_9allocatorIhEEEEEEEEEE3getEv() |
      0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal10getContextIMNSt3__26vectorIhNS2_9allocatorIhEEEEKFmvEEEPT_RKS9_(
    $t
  ) {
    $t = $t | 0;
    var $$field = 0,
      $$field2 = 0,
      $$index1 = 0,
      $$index5 = 0,
      $0 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(8) | 0;
    $0 = $t$addr;
    $$field = HEAP32[$0 >> 2] | 0;
    $$index1 = ($0 + 4) | 0;
    $$field2 = HEAP32[$$index1 >> 2] | 0;
    HEAP32[$call >> 2] = $$field;
    $$index5 = ($call + 4) | 0;
    HEAP32[$$index5 >> 2] = $$field2;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal11BindingTypeImvE10toWireTypeERKm($v) {
    $v = $v | 0;
    var $0 = 0,
      $1 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $1 | 0;
  }
  function __ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIhNS2_9allocatorIhEEEEvE12fromWireTypeES8_(
    $wt
  ) {
    $wt = $wt | 0;
    var $0 = 0,
      $wt$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $wt$addr = $wt;
    $0 = $wt$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIhNS4_9allocatorIhEEEEEEEEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2840 | 0;
  }
  function __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 8235 | 0;
  }
  function __ZN10emscripten8internal19RegisterClassMethodIPFNS_3valERKNSt3__26vectorIhNS3_9allocatorIhEEEEmEE6invokeIS7_JEEEvPKcSB_(
    $methodName,
    $function
  ) {
    $methodName = $methodName | 0;
    $function = $function | 0;
    var $$addr$i = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $args = 0,
      $call = 0,
      $call$i$i = 0,
      $call1 = 0,
      $call2 = 0,
      $call4 = 0,
      $function$addr = 0,
      $invoke = 0,
      $methodName$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $function$addr = (sp + 4) | 0;
    $args = (sp + 16) | 0;
    $methodName$addr = $methodName;
    HEAP32[$function$addr >> 2] = $function;
    $invoke = 345;
    $call =
      __ZN10emscripten8internal6TypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEvE3getEv() |
      0;
    $0 = $methodName$addr;
    $call1 =
      __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIhNS5_9allocatorIhEEEEmEE8getCountEv(
        $args
      ) | 0;
    $call2 =
      __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIhNS5_9allocatorIhEEEEmEE8getTypesEv(
        $args
      ) | 0;
    $1 = $invoke;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() | 0;
    $2 = $invoke;
    $call4 =
      __ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIhNS3_9allocatorIhEEEEmEEEPT_RKSC_(
        $function$addr
      ) | 0;
    __embind_register_class_function(
      $call | 0,
      $0 | 0,
      $call1 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      0
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIhNS3_9allocatorIhEEEEmES2_S9_JmEE6invokeEPSB_PS7_m(
    $function,
    $wireThis,
    $args
  ) {
    $function = $function | 0;
    $wireThis = $wireThis | 0;
    $args = $args | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $args$addr = 0,
      $call = 0,
      $call1 = 0,
      $call2 = 0,
      $function$addr = 0,
      $ref$tmp = 0,
      $wireThis$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ref$tmp = sp;
    $function$addr = $function;
    $wireThis$addr = $wireThis;
    $args$addr = $args;
    $0 = $function$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    $2 = $wireThis$addr;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIhNS2_9allocatorIhEEEEE12fromWireTypeEPS6_(
        $2
      ) | 0;
    $3 = $args$addr;
    $call1 = __ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($3) | 0;
    FUNCTION_TABLE_viii[$1 & 511]($ref$tmp, $call, $call1);
    $call2 =
      __ZN10emscripten8internal11BindingTypeINS_3valEvE10toWireTypeERKS2_(
        $ref$tmp
      ) | 0;
    __ZN10emscripten3valD2Ev($ref$tmp);
    STACKTOP = sp;
    return $call2 | 0;
  }
  function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIhNS5_9allocatorIhEEEEmEE8getCountEv(
    $this
  ) {
    $this = $this | 0;
    var $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    STACKTOP = sp;
    return 3;
  }
  function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIhNS5_9allocatorIhEEEEmEE8getTypesEv(
    $this
  ) {
    $this = $this | 0;
    var $call = 0,
      $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $call =
      __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIhNS4_9allocatorIhEEEEmEEEE3getEv() |
      0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIhNS3_9allocatorIhEEEEmEEEPT_RKSC_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal11BindingTypeINS_3valEvE10toWireTypeERKS2_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    __emval_incref($1 | 0);
    $2 = $v$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    STACKTOP = sp;
    return $3 | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIhNS2_9allocatorIhEEEEE12fromWireTypeEPS6_(
    $p
  ) {
    $p = $p | 0;
    var $0 = 0,
      $p$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $p$addr = $p;
    $0 = $p$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten3valD2Ev($this) {
    $this = $this | 0;
    var $0 = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $this1 = $this$addr;
    $0 = HEAP32[$this1 >> 2] | 0;
    __emval_decref($0 | 0);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIhNS4_9allocatorIhEEEEmEEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2848 | 0;
  }
  function __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 8258 | 0;
  }
  function __ZN10emscripten3valC2IRKhEEOT_($this, $value) {
    $this = $this | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $__t$addr$i = 0,
      $argv = 0,
      $call2 = 0,
      $call3 = 0,
      $call4 = 0,
      $this$addr = 0,
      $this1 = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $argv = sp;
    $this$addr = $this;
    $value$addr = $value;
    $this1 = $this$addr;
    $0 = $value$addr;
    $__t$addr$i = $0;
    $1 = $__t$addr$i;
    __ZN10emscripten8internal12WireTypePackIJRKhEEC2ES3_($argv, $1);
    $call2 = __ZN10emscripten8internal6TypeIDIRKhvE3getEv() | 0;
    $call3 = __ZNK10emscripten8internal12WireTypePackIJRKhEEcvPKvEv($argv) | 0;
    $call4 = __emval_take_value($call2 | 0, $call3 | 0) | 0;
    HEAP32[$this1 >> 2] = $call4;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten3val9undefinedEv($agg$result) {
    $agg$result = $agg$result | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($agg$result, 1);
    return;
  }
  function __ZN10emscripten8internal12WireTypePackIJRKhEEC2ES3_($this, $args) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $__t$addr$i = 0,
      $__t$addr$i$i = 0,
      $args$addr = 0,
      $call1$i = 0,
      $cursor = 0,
      $cursor$addr$i = 0,
      $first$addr$i = 0,
      $this$addr = 0,
      $this$addr$i = 0,
      $this1 = 0,
      $this1$i = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $cursor = sp;
    $this$addr = $this;
    $args$addr = $args;
    $this1 = $this$addr;
    $this$addr$i = $this1;
    $this1$i = $this$addr$i;
    HEAP32[$cursor >> 2] = $this1$i;
    $0 = $args$addr;
    $__t$addr$i = $0;
    $1 = $__t$addr$i;
    $cursor$addr$i = $cursor;
    $first$addr$i = $1;
    $2 = $cursor$addr$i;
    $3 = $first$addr$i;
    $__t$addr$i$i = $3;
    $4 = $__t$addr$i$i;
    $call1$i =
      __ZN10emscripten8internal11BindingTypeIhvE10toWireTypeERKh($4) | 0;
    __ZN10emscripten8internal20writeGenericWireTypeIhEEvRPNS0_15GenericWireTypeET_(
      $2,
      $call1$i
    );
    $5 = $cursor$addr$i;
    __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE(
      $5
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal6TypeIDIRKhvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN10emscripten8internal11LightTypeIDIRKhE3getEv() | 0;
    return $call | 0;
  }
  function __ZNK10emscripten8internal12WireTypePackIJRKhEEcvPKvEv($this) {
    $this = $this | 0;
    var $this$addr = 0,
      $this$addr$i = 0,
      $this1 = 0,
      $this1$i = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $this1 = $this$addr;
    $this$addr$i = $this1;
    $this1$i = $this$addr$i;
    STACKTOP = sp;
    return $this1$i | 0;
  }
  function __ZN10emscripten8internal20writeGenericWireTypeIhEEvRPNS0_15GenericWireTypeET_(
    $cursor,
    $wt
  ) {
    $cursor = $cursor | 0;
    $wt = $wt | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $conv = 0,
      $cursor$addr = 0,
      $incdec$ptr = 0,
      $wt$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $cursor$addr = $cursor;
    $wt$addr = $wt;
    $0 = $wt$addr;
    $conv = $0 & 255;
    $1 = $cursor$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    HEAP32[$2 >> 2] = $conv;
    $3 = $cursor$addr;
    $4 = HEAP32[$3 >> 2] | 0;
    $incdec$ptr = ($4 + 8) | 0;
    HEAP32[$3 >> 2] = $incdec$ptr;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal11BindingTypeIhvE10toWireTypeERKh($v) {
    $v = $v | 0;
    var $0 = 0,
      $1 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    $1 = HEAP8[$0 >> 0] | 0;
    STACKTOP = sp;
    return $1 | 0;
  }
  function __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE(
    $0
  ) {
    $0 = $0 | 0;
    var $$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $$addr = $0;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal11LightTypeIDIRKhE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2704 | 0;
  }
  function __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($this, $handle) {
    $this = $this | 0;
    $handle = $handle | 0;
    var $0 = 0,
      $handle$addr = 0,
      $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $handle$addr = $handle;
    $this1 = $this$addr;
    $0 = $handle$addr;
    HEAP32[$this1 >> 2] = $0;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal19RegisterClassMethodIPFbRNSt3__26vectorIhNS2_9allocatorIhEEEEmRKhEE6invokeIS6_JEEEvPKcSB_(
    $methodName,
    $function
  ) {
    $methodName = $methodName | 0;
    $function = $function | 0;
    var $$addr$i = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $args = 0,
      $call = 0,
      $call$i$i = 0,
      $call1 = 0,
      $call2 = 0,
      $call4 = 0,
      $function$addr = 0,
      $invoke = 0,
      $methodName$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $function$addr = (sp + 4) | 0;
    $args = (sp + 16) | 0;
    $methodName$addr = $methodName;
    HEAP32[$function$addr >> 2] = $function;
    $invoke = 346;
    $call =
      __ZN10emscripten8internal6TypeIDINSt3__26vectorIhNS2_9allocatorIhEEEEvE3getEv() |
      0;
    $0 = $methodName$addr;
    $call1 =
      __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIhNS4_9allocatorIhEEEEmRKhEE8getCountEv(
        $args
      ) | 0;
    $call2 =
      __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIhNS4_9allocatorIhEEEEmRKhEE8getTypesEv(
        $args
      ) | 0;
    $1 = $invoke;
    $$addr$i = $1;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv() | 0;
    $2 = $invoke;
    $call4 =
      __ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIhNS2_9allocatorIhEEEEmRKhEEEPT_RKSC_(
        $function$addr
      ) | 0;
    __embind_register_class_function(
      $call | 0,
      $0 | 0,
      $call1 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $2 | 0,
      $call4 | 0,
      0
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIhNS2_9allocatorIhEEEEmRKhEbS7_JmS9_EE6invokeEPSB_PS6_mh(
    $function,
    $wireThis,
    $args,
    $args1
  ) {
    $function = $function | 0;
    $wireThis = $wireThis | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $args$addr = 0,
      $args$addr2 = 0,
      $call = 0,
      $call3 = 0,
      $call4 = 0,
      $call5 = 0,
      $call6 = 0,
      $function$addr = 0,
      $ref$tmp = 0,
      $wireThis$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ref$tmp = (sp + 12) | 0;
    $function$addr = $function;
    $wireThis$addr = $wireThis;
    $args$addr = $args;
    $args$addr2 = $args1;
    $0 = $function$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    $2 = $wireThis$addr;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIhNS2_9allocatorIhEEEEE12fromWireTypeEPS6_(
        $2
      ) | 0;
    $3 = $args$addr;
    $call3 = __ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($3) | 0;
    $4 = $args$addr2;
    $call4 = __ZN10emscripten8internal11BindingTypeIhvE12fromWireTypeEh($4) | 0;
    HEAP8[$ref$tmp >> 0] = $call4;
    $call5 = FUNCTION_TABLE_iiii[$1 & 511]($call, $call3, $ref$tmp) | 0;
    $call6 =
      __ZN10emscripten8internal11BindingTypeIbvE10toWireTypeEb($call5) | 0;
    STACKTOP = sp;
    return $call6 | 0;
  }
  function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIhNS4_9allocatorIhEEEEmRKhEE8getCountEv(
    $this
  ) {
    $this = $this | 0;
    var $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    STACKTOP = sp;
    return 4;
  }
  function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIhNS4_9allocatorIhEEEEmRKhEE8getTypesEv(
    $this
  ) {
    $this = $this | 0;
    var $call = 0,
      $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $call =
      __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIhNS3_9allocatorIhEEEEmRKhEEEE3getEv() |
      0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIhNS2_9allocatorIhEEEEmRKhEEEPT_RKSC_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal11BindingTypeIbvE10toWireTypeEb($b) {
    $b = $b | 0;
    var $0 = 0,
      $b$addr = 0,
      $frombool = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $frombool = $b & 1;
    $b$addr = $frombool;
    $0 = $b$addr;
    $tobool = $0 & 1;
    STACKTOP = sp;
    return $tobool | 0;
  }
  function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIhNS3_9allocatorIhEEEEmRKhEEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 32 | 0;
  }
  function __ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 8263 | 0;
  }
  function __ZN10emscripten8internal6TypeIDIN5Motor5StateEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN10emscripten8internal11LightTypeIDIN5Motor5StateEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIN5Motor5StateEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 624 | 0;
  }
  function __ZN10emscripten8internal6TypeIDIN10SmartDrive5UnitsEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDIN10SmartDrive5UnitsEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIN10SmartDrive5UnitsEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 632 | 0;
  }
  function __ZN10emscripten8internal6TypeIDIN10SmartDrive11ControlModeEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDIN10SmartDrive11ControlModeEE3getEv() |
      0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIN10SmartDrive11ControlModeEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 640 | 0;
  }
  function __ZN10emscripten8internal6TypeIDIN10SmartDrive17SwitchControlModeEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDIN10SmartDrive17SwitchControlModeEE3getEv() |
      0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIN10SmartDrive17SwitchControlModeEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 648 | 0;
  }
  function __ZN10emscripten8internal11noncopyableC2Ev($this) {
    $this = $this | 0;
    var $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal15raw_constructorIN10SmartDrive8SettingsEJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __Znwm(16) | 0;
    HEAP32[$call >> 2] = 0 | 0;
    HEAP32[($call + 4) >> 2] = 0 | 0;
    HEAP32[($call + 8) >> 2] = 0 | 0;
    HEAP32[($call + 12) >> 2] = 0 | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal14raw_destructorIN10SmartDrive8SettingsEEEvPT_(
    $ptr
  ) {
    $ptr = $ptr | 0;
    var $0 = 0,
      $isnull = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $isnull = ($0 | 0) == (0 | 0);
    if (!$isnull) {
      __ZdlPv($0);
    }
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal6TypeIDIN10SmartDrive8SettingsEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDIN10SmartDrive8SettingsEE3getEv() |
      0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11noncopyableD2Ev($this) {
    $this = $this | 0;
    var $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal11LightTypeIDIN10SmartDrive8SettingsEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 656 | 0;
  }
  function __ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 8391 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN10SmartDrive8SettingsENS2_11ControlModeEE7getWireIS3_EES4_RKMS3_S4_RKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $3 = HEAP8[$memptr$offset >> 0] | 0;
    $call =
      __ZN10emscripten8internal15EnumBindingTypeIN10SmartDrive11ControlModeEE10toWireTypeES3_(
        $3
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN10SmartDrive8SettingsENS2_11ControlModeEE7setWireIS3_EEvRKMS3_S4_RT_S4_(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call =
      __ZN10emscripten8internal15EnumBindingTypeIN10SmartDrive11ControlModeEE12fromWireTypeES3_(
        $0
      ) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIMN10SmartDrive8SettingsENS2_11ControlModeEEEPT_RKS6_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal15EnumBindingTypeIN10SmartDrive11ControlModeEE10toWireTypeES3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal15EnumBindingTypeIN10SmartDrive11ControlModeEE12fromWireTypeES3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN10SmartDrive8SettingsENS2_5UnitsEE7getWireIS3_EES4_RKMS3_S4_RKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $3 = HEAP8[$memptr$offset >> 0] | 0;
    $call =
      __ZN10emscripten8internal15EnumBindingTypeIN10SmartDrive5UnitsEE10toWireTypeES3_(
        $3
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN10SmartDrive8SettingsENS2_5UnitsEE7setWireIS3_EEvRKMS3_S4_RT_S4_(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call =
      __ZN10emscripten8internal15EnumBindingTypeIN10SmartDrive5UnitsEE12fromWireTypeES3_(
        $0
      ) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIMN10SmartDrive8SettingsENS2_5UnitsEEEPT_RKS6_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal15EnumBindingTypeIN10SmartDrive5UnitsEE10toWireTypeES3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal15EnumBindingTypeIN10SmartDrive5UnitsEE12fromWireTypeES3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN10SmartDrive8SettingsEhE7getWireIS3_EEhRKMS3_hRKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal11BindingTypeIhvE10toWireTypeERKh(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN10SmartDrive8SettingsEhE7setWireIS3_EEvRKMS3_hRT_h(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call = __ZN10emscripten8internal11BindingTypeIhvE12fromWireTypeEh($0) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal6TypeIDIhvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN10emscripten8internal11LightTypeIDIhE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal10getContextIMN10SmartDrive8SettingsEhEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2704 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN10SmartDrive8SettingsEfE7getWireIS3_EEfRKMS3_fRKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0.0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call = +__ZN10emscripten8internal11BindingTypeIfvE10toWireTypeERKf(
      $memptr$offset
    );
    STACKTOP = sp;
    return +$call;
  }
  function __ZN10emscripten8internal12MemberAccessIN10SmartDrive8SettingsEfE7setWireIS3_EEvRKMS3_fRT_f(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = +$value;
    var $0 = 0.0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0.0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0.0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call = +__ZN10emscripten8internal11BindingTypeIfvE12fromWireTypeEf($0);
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAPF32[$memptr$offset >> 2] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal6TypeIDIfvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN10emscripten8internal11LightTypeIDIfE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal10getContextIMN10SmartDrive8SettingsEfEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal11BindingTypeIfvE10toWireTypeERKf($v) {
    $v = $v | 0;
    var $0 = 0,
      $1 = 0.0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    $1 = +HEAPF32[$0 >> 2];
    STACKTOP = sp;
    return +$1;
  }
  function __ZN10emscripten8internal11BindingTypeIfvE12fromWireTypeEf($v) {
    $v = +$v;
    var $0 = 0.0,
      $v$addr = 0.0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return +$0;
  }
  function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2776 | 0;
  }
  function __ZN10emscripten8internal19getGenericSignatureIJfiiEEEPKcv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 8393 | 0;
  }
  function __ZN10emscripten8internal19getGenericSignatureIJviifEEEPKcv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 8397 | 0;
  }
  function __ZN10emscripten8internal15raw_constructorIN10SmartDrive21SwitchControlSettingsEJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __Znwm(8) | 0;
    HEAP32[$call >> 2] = 0 | 0;
    HEAP32[($call + 4) >> 2] = 0 | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal14raw_destructorIN10SmartDrive21SwitchControlSettingsEEEvPT_(
    $ptr
  ) {
    $ptr = $ptr | 0;
    var $0 = 0,
      $isnull = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $isnull = ($0 | 0) == (0 | 0);
    if (!$isnull) {
      __ZdlPv($0);
    }
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal6TypeIDIN10SmartDrive21SwitchControlSettingsEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDIN10SmartDrive21SwitchControlSettingsEE3getEv() |
      0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIN10SmartDrive21SwitchControlSettingsEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 664 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN10SmartDrive21SwitchControlSettingsENS2_17SwitchControlModeEE7getWireIS3_EES4_RKMS3_S4_RKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $3 = HEAP8[$memptr$offset >> 0] | 0;
    $call =
      __ZN10emscripten8internal15EnumBindingTypeIN10SmartDrive17SwitchControlModeEE10toWireTypeES3_(
        $3
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN10SmartDrive21SwitchControlSettingsENS2_17SwitchControlModeEE7setWireIS3_EEvRKMS3_S4_RT_S4_(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call =
      __ZN10emscripten8internal15EnumBindingTypeIN10SmartDrive17SwitchControlModeEE12fromWireTypeES3_(
        $0
      ) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIMN10SmartDrive21SwitchControlSettingsENS2_17SwitchControlModeEEEPT_RKS6_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal15EnumBindingTypeIN10SmartDrive17SwitchControlModeEE10toWireTypeES3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal15EnumBindingTypeIN10SmartDrive17SwitchControlModeEE12fromWireTypeES3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN10SmartDrive21SwitchControlSettingsEhE7getWireIS3_EEhRKMS3_hRKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal11BindingTypeIhvE10toWireTypeERKh(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN10SmartDrive21SwitchControlSettingsEhE7setWireIS3_EEvRKMS3_hRT_h(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call = __ZN10emscripten8internal11BindingTypeIhvE12fromWireTypeEh($0) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIMN10SmartDrive21SwitchControlSettingsEhEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN10SmartDrive21SwitchControlSettingsEfE7getWireIS3_EEfRKMS3_fRKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0.0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call = +__ZN10emscripten8internal11BindingTypeIfvE10toWireTypeERKf(
      $memptr$offset
    );
    STACKTOP = sp;
    return +$call;
  }
  function __ZN10emscripten8internal12MemberAccessIN10SmartDrive21SwitchControlSettingsEfE7setWireIS3_EEvRKMS3_fRT_f(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = +$value;
    var $0 = 0.0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0.0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0.0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call = +__ZN10emscripten8internal11BindingTypeIfvE12fromWireTypeEf($0);
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAPF32[$memptr$offset >> 2] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIMN10SmartDrive21SwitchControlSettingsEfEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal6TypeIDIN6Packet6DeviceEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDIN6Packet6DeviceEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIN6Packet6DeviceEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 672 | 0;
  }
  function __ZN10emscripten8internal6TypeIDIN6Packet4TypeEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN10emscripten8internal11LightTypeIDIN6Packet4TypeEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIN6Packet4TypeEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 680 | 0;
  }
  function __ZN10emscripten8internal6TypeIDIN6Packet4DataEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN10emscripten8internal11LightTypeIDIN6Packet4DataEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIN6Packet4DataEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 688 | 0;
  }
  function __ZN10emscripten8internal15raw_constructorIN6Packet11VersionInfoEJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __Znwm(3) | 0;
    HEAP16[$call >> 1] = 0 | 0;
    HEAP8[($call + 2) >> 0] = 0 | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal14raw_destructorIN6Packet11VersionInfoEEEvPT_(
    $ptr
  ) {
    $ptr = $ptr | 0;
    var $0 = 0,
      $isnull = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $isnull = ($0 | 0) == (0 | 0);
    if (!$isnull) {
      __ZdlPv($0);
    }
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal6TypeIDIN6Packet11VersionInfoEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDIN6Packet11VersionInfoEE3getEv() |
      0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIN6Packet11VersionInfoEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 696 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet11VersionInfoEhE7getWireIS3_EEhRKMS3_hRKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal11BindingTypeIhvE10toWireTypeERKh(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet11VersionInfoEhE7setWireIS3_EEvRKMS3_hRT_h(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call = __ZN10emscripten8internal11BindingTypeIhvE12fromWireTypeEh($0) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIMN6Packet11VersionInfoEhEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal15raw_constructorIN6Packet9DailyInfoEJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __Znwm(16) | 0;
    HEAP32[$call >> 2] = 0 | 0;
    HEAP32[($call + 4) >> 2] = 0 | 0;
    HEAP32[($call + 8) >> 2] = 0 | 0;
    HEAP32[($call + 12) >> 2] = 0 | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal14raw_destructorIN6Packet9DailyInfoEEEvPT_(
    $ptr
  ) {
    $ptr = $ptr | 0;
    var $0 = 0,
      $isnull = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $isnull = ($0 | 0) == (0 | 0);
    if (!$isnull) {
      __ZdlPv($0);
    }
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal6TypeIDIN6Packet9DailyInfoEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDIN6Packet9DailyInfoEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIN6Packet9DailyInfoEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 704 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet9DailyInfoEtE7getWireIS3_EEtRKMS3_tRKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal11BindingTypeItvE10toWireTypeERKt(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet9DailyInfoEtE7setWireIS3_EEvRKMS3_tRT_t(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call = __ZN10emscripten8internal11BindingTypeItvE12fromWireTypeEt($0) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP16[$memptr$offset >> 1] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal6TypeIDItvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN10emscripten8internal11LightTypeIDItE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal10getContextIMN6Packet9DailyInfoEtEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal11BindingTypeItvE10toWireTypeERKt($v) {
    $v = $v | 0;
    var $0 = 0,
      $1 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    $1 = HEAP16[$0 >> 1] | 0;
    STACKTOP = sp;
    return $1 | 0;
  }
  function __ZN10emscripten8internal11BindingTypeItvE12fromWireTypeEt($v) {
    $v = $v | 0;
    var $0 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2728 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet9DailyInfoEhE7getWireIS3_EEhRKMS3_hRKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal11BindingTypeIhvE10toWireTypeERKh(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet9DailyInfoEhE7setWireIS3_EEvRKMS3_hRT_h(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call = __ZN10emscripten8internal11BindingTypeIhvE12fromWireTypeEh($0) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIMN6Packet9DailyInfoEhEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal15raw_constructorIN6Packet12PushSettingsEJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __Znwm(3) | 0;
    HEAP16[$call >> 1] = 0 | 0;
    HEAP8[($call + 2) >> 0] = 0 | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal14raw_destructorIN6Packet12PushSettingsEEEvPT_(
    $ptr
  ) {
    $ptr = $ptr | 0;
    var $0 = 0,
      $isnull = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $isnull = ($0 | 0) == (0 | 0);
    if (!$isnull) {
      __ZdlPv($0);
    }
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal6TypeIDIN6Packet12PushSettingsEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDIN6Packet12PushSettingsEE3getEv() |
      0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIN6Packet12PushSettingsEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 712 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet12PushSettingsEhE7getWireIS3_EEhRKMS3_hRKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal11BindingTypeIhvE10toWireTypeERKh(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet12PushSettingsEhE7setWireIS3_EEvRKMS3_hRT_h(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call = __ZN10emscripten8internal11BindingTypeIhvE12fromWireTypeEh($0) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIMN6Packet12PushSettingsEhEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal15raw_constructorIN6Packet11JourneyInfoEJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __Znwm(4) | 0;
    HEAP32[$call >> 2] = 0 | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal14raw_destructorIN6Packet11JourneyInfoEEEvPT_(
    $ptr
  ) {
    $ptr = $ptr | 0;
    var $0 = 0,
      $isnull = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $isnull = ($0 | 0) == (0 | 0);
    if (!$isnull) {
      __ZdlPv($0);
    }
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal6TypeIDIN6Packet11JourneyInfoEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDIN6Packet11JourneyInfoEE3getEv() |
      0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIN6Packet11JourneyInfoEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 720 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet11JourneyInfoEtE7getWireIS3_EEtRKMS3_tRKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal11BindingTypeItvE10toWireTypeERKt(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet11JourneyInfoEtE7setWireIS3_EEvRKMS3_tRT_t(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call = __ZN10emscripten8internal11BindingTypeItvE12fromWireTypeEt($0) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP16[$memptr$offset >> 1] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIMN6Packet11JourneyInfoEtEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet11JourneyInfoEhE7getWireIS3_EEhRKMS3_hRKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal11BindingTypeIhvE10toWireTypeERKh(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet11JourneyInfoEhE7setWireIS3_EEvRKMS3_hRT_h(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call = __ZN10emscripten8internal11BindingTypeIhvE12fromWireTypeEh($0) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIMN6Packet11JourneyInfoEhEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal15raw_constructorIN6Packet12DistanceInfoEJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __Znwm(16) | 0;
    HEAP32[$call >> 2] = 0 | 0;
    HEAP32[($call + 4) >> 2] = 0 | 0;
    HEAP32[($call + 8) >> 2] = 0 | 0;
    HEAP32[($call + 12) >> 2] = 0 | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal14raw_destructorIN6Packet12DistanceInfoEEEvPT_(
    $ptr
  ) {
    $ptr = $ptr | 0;
    var $0 = 0,
      $isnull = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $isnull = ($0 | 0) == (0 | 0);
    if (!$isnull) {
      __ZdlPv($0);
    }
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal6TypeIDIN6Packet12DistanceInfoEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDIN6Packet12DistanceInfoEE3getEv() |
      0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIN6Packet12DistanceInfoEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 728 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet12DistanceInfoEyE7getWireIS3_EEPyRKMS3_yRKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIyE10toWireTypeERKy(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet12DistanceInfoEyE7setWireIS3_EEvRKMS3_yRT_Py(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0;
    var sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIyE12fromWireTypeEPy($0) | 0;
    $1 = $call;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $ptr$addr;
    $8 = $field$addr;
    $9 = HEAP32[$8 >> 2] | 0;
    $memptr$offset = ($7 + $9) | 0;
    $10 = $memptr$offset;
    $11 = $10;
    HEAP32[$11 >> 2] = $3;
    $12 = ($10 + 4) | 0;
    $13 = $12;
    HEAP32[$13 >> 2] = $6;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal6TypeIDIyvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN10emscripten8internal11LightTypeIDIyE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal10getContextIMN6Packet12DistanceInfoEyEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIyE10toWireTypeERKy(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $call = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $call = __Znwm(8) | 0;
    $0 = $v$addr;
    $1 = $0;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $call;
    $8 = $7;
    HEAP32[$8 >> 2] = $3;
    $9 = ($7 + 4) | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $6;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIyE12fromWireTypeEPy(
    $p
  ) {
    $p = $p | 0;
    var $0 = 0,
      $p$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $p$addr = $p;
    $0 = $p$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIyE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2768 | 0;
  }
  function __ZN10emscripten8internal15raw_constructorIN6Packet9MotorInfoEJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __Znwm(16) | 0;
    HEAP32[$call >> 2] = 0 | 0;
    HEAP32[($call + 4) >> 2] = 0 | 0;
    HEAP32[($call + 8) >> 2] = 0 | 0;
    HEAP32[($call + 12) >> 2] = 0 | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal14raw_destructorIN6Packet9MotorInfoEEEvPT_(
    $ptr
  ) {
    $ptr = $ptr | 0;
    var $0 = 0,
      $isnull = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $isnull = ($0 | 0) == (0 | 0);
    if (!$isnull) {
      __ZdlPv($0);
    }
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal6TypeIDIN6Packet9MotorInfoEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDIN6Packet9MotorInfoEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIN6Packet9MotorInfoEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 736 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet9MotorInfoEN5Motor5StateEE7getWireIS3_EES5_RKMS3_S5_RKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $3 = HEAP8[$memptr$offset >> 0] | 0;
    $call =
      __ZN10emscripten8internal15EnumBindingTypeIN5Motor5StateEE10toWireTypeES3_(
        $3
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet9MotorInfoEN5Motor5StateEE7setWireIS3_EEvRKMS3_S5_RT_S5_(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call =
      __ZN10emscripten8internal15EnumBindingTypeIN5Motor5StateEE12fromWireTypeES3_(
        $0
      ) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIMN6Packet9MotorInfoEN5Motor5StateEEEPT_RKS7_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal15EnumBindingTypeIN5Motor5StateEE10toWireTypeES3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal15EnumBindingTypeIN5Motor5StateEE12fromWireTypeES3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet9MotorInfoEhE7getWireIS3_EEhRKMS3_hRKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal11BindingTypeIhvE10toWireTypeERKh(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet9MotorInfoEhE7setWireIS3_EEvRKMS3_hRT_h(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call = __ZN10emscripten8internal11BindingTypeIhvE12fromWireTypeEh($0) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIMN6Packet9MotorInfoEhEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet9MotorInfoEfE7getWireIS3_EEfRKMS3_fRKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0.0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call = +__ZN10emscripten8internal11BindingTypeIfvE10toWireTypeERKf(
      $memptr$offset
    );
    STACKTOP = sp;
    return +$call;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet9MotorInfoEfE7setWireIS3_EEvRKMS3_fRT_f(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = +$value;
    var $0 = 0.0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0.0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0.0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call = +__ZN10emscripten8internal11BindingTypeIfvE12fromWireTypeEf($0);
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAPF32[$memptr$offset >> 2] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIMN6Packet9MotorInfoEfEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal15raw_constructorIN6Packet8TimeInfoEJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __Znwm(8) | 0;
    HEAP32[$call >> 2] = 0 | 0;
    HEAP32[($call + 4) >> 2] = 0 | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal14raw_destructorIN6Packet8TimeInfoEEEvPT_(
    $ptr
  ) {
    $ptr = $ptr | 0;
    var $0 = 0,
      $isnull = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $isnull = ($0 | 0) == (0 | 0);
    if (!$isnull) {
      __ZdlPv($0);
    }
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal6TypeIDIN6Packet8TimeInfoEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDIN6Packet8TimeInfoEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIN6Packet8TimeInfoEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 744 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet8TimeInfoEtE7getWireIS3_EEtRKMS3_tRKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal11BindingTypeItvE10toWireTypeERKt(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet8TimeInfoEtE7setWireIS3_EEvRKMS3_tRT_t(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call = __ZN10emscripten8internal11BindingTypeItvE12fromWireTypeEt($0) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP16[$memptr$offset >> 1] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIMN6Packet8TimeInfoEtEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet8TimeInfoEhE7getWireIS3_EEhRKMS3_hRKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal11BindingTypeIhvE10toWireTypeERKh(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet8TimeInfoEhE7setWireIS3_EEvRKMS3_hRT_h(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call = __ZN10emscripten8internal11BindingTypeIhvE12fromWireTypeEh($0) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIMN6Packet8TimeInfoEhEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal15raw_constructorIN6Packet9ErrorInfoEJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __Znwm(14) | 0;
    HEAP32[$call >> 2] = 0 | 0;
    HEAP32[($call + 4) >> 2] = 0 | 0;
    HEAP32[($call + 8) >> 2] = 0 | 0;
    HEAP16[($call + 12) >> 1] = 0 | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal14raw_destructorIN6Packet9ErrorInfoEEEvPT_(
    $ptr
  ) {
    $ptr = $ptr | 0;
    var $0 = 0,
      $isnull = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $isnull = ($0 | 0) == (0 | 0);
    if (!$isnull) {
      __ZdlPv($0);
    }
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal6TypeIDIN6Packet9ErrorInfoEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDIN6Packet9ErrorInfoEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIN6Packet9ErrorInfoEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 752 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet9ErrorInfoEtE7getWireIS3_EEtRKMS3_tRKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal11BindingTypeItvE10toWireTypeERKt(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet9ErrorInfoEtE7setWireIS3_EEvRKMS3_tRT_t(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call = __ZN10emscripten8internal11BindingTypeItvE12fromWireTypeEt($0) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP16[$memptr$offset >> 1] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIMN6Packet9ErrorInfoEtEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet9ErrorInfoEhE7getWireIS3_EEhRKMS3_hRKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal11BindingTypeIhvE10toWireTypeERKh(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet9ErrorInfoEhE7setWireIS3_EEvRKMS3_hRT_h(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call = __ZN10emscripten8internal11BindingTypeIhvE12fromWireTypeEh($0) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIMN6Packet9ErrorInfoEhEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet9ErrorInfoEN10SmartDrive5ErrorEE7getWireIS3_EES5_RKMS3_S5_RKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $3 = HEAP8[$memptr$offset >> 0] | 0;
    $call =
      __ZN10emscripten8internal15EnumBindingTypeIN10SmartDrive5ErrorEE10toWireTypeES3_(
        $3
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet9ErrorInfoEN10SmartDrive5ErrorEE7setWireIS3_EEvRKMS3_S5_RT_S5_(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call =
      __ZN10emscripten8internal15EnumBindingTypeIN10SmartDrive5ErrorEE12fromWireTypeES3_(
        $0
      ) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal6TypeIDIN10SmartDrive5ErrorEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDIN10SmartDrive5ErrorEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal10getContextIMN6Packet9ErrorInfoEN10SmartDrive5ErrorEEEPT_RKS7_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal15EnumBindingTypeIN10SmartDrive5ErrorEE10toWireTypeES3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal15EnumBindingTypeIN10SmartDrive5ErrorEE12fromWireTypeES3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIN10SmartDrive5ErrorEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 760 | 0;
  }
  function __ZN10emscripten8internal15raw_constructorIN6Packet10DeviceInfoEJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __Znwm(2) | 0;
    HEAP16[$call >> 1] = 0 | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal14raw_destructorIN6Packet10DeviceInfoEEEvPT_(
    $ptr
  ) {
    $ptr = $ptr | 0;
    var $0 = 0,
      $isnull = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $isnull = ($0 | 0) == (0 | 0);
    if (!$isnull) {
      __ZdlPv($0);
    }
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal6TypeIDIN6Packet10DeviceInfoEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDIN6Packet10DeviceInfoEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIN6Packet10DeviceInfoEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 768 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet10DeviceInfoENS2_6DeviceEE7getWireIS3_EES4_RKMS3_S4_RKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $3 = HEAP8[$memptr$offset >> 0] | 0;
    $call =
      __ZN10emscripten8internal15EnumBindingTypeIN6Packet6DeviceEE10toWireTypeES3_(
        $3
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet10DeviceInfoENS2_6DeviceEE7setWireIS3_EEvRKMS3_S4_RT_S4_(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call =
      __ZN10emscripten8internal15EnumBindingTypeIN6Packet6DeviceEE12fromWireTypeES3_(
        $0
      ) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIMN6Packet10DeviceInfoENS2_6DeviceEEEPT_RKS6_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal15EnumBindingTypeIN6Packet6DeviceEE10toWireTypeES3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal15EnumBindingTypeIN6Packet6DeviceEE12fromWireTypeES3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet10DeviceInfoEhE7getWireIS3_EEhRKMS3_hRKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal11BindingTypeIhvE10toWireTypeERKh(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessIN6Packet10DeviceInfoEhE7setWireIS3_EEvRKMS3_hRT_h(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call = __ZN10emscripten8internal11BindingTypeIhvE12fromWireTypeEh($0) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIMN6Packet10DeviceInfoEhEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal6TypeIDIN6Packet7CommandEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDIN6Packet7CommandEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIN6Packet7CommandEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 776 | 0;
  }
  function __ZN10emscripten8internal6TypeIDIN6Packet3OTAEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN10emscripten8internal11LightTypeIDIN6Packet3OTAEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIN6Packet3OTAEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 784 | 0;
  }
  function __ZN10emscripten8internal11NoBaseClass6verifyI6PacketEEvv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return;
  }
  function __ZN10emscripten8internal13getActualTypeI6PacketEEPKvPT_($ptr) {
    $ptr = $ptr | 0;
    var $0 = 0,
      $call = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $call = __ZN10emscripten8internal14getLightTypeIDI6PacketEEPKvRKT_($0) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal11NoBaseClass11getUpcasterI6PacketEEPFvvEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 0 | 0;
  }
  function __ZN10emscripten8internal11NoBaseClass13getDowncasterI6PacketEEPFvvEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 0 | 0;
  }
  function __ZN10emscripten8internal14raw_destructorI6PacketEEvPT_($ptr) {
    $ptr = $ptr | 0;
    var $0 = 0,
      $isnull = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $isnull = ($0 | 0) == (0 | 0);
    if ($isnull) {
      STACKTOP = sp;
      return;
    }
    __ZN6PacketD2Ev($0);
    __ZdlPv($0);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN10emscripten8internal11LightTypeIDI6PacketE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI6PacketEEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN10emscripten8internal11LightTypeIDIP6PacketE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK6PacketEEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN10emscripten8internal11LightTypeIDIPK6PacketE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal14getLightTypeIDI6PacketEEPKvRKT_($value) {
    $value = $value | 0;
    var $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $value$addr = $value;
    STACKTOP = sp;
    return 792 | 0;
  }
  function __ZN6PacketD2Ev($this) {
    $this = $this | 0;
    var $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal11LightTypeIDI6PacketE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 792 | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIP6PacketE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 800 | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIPK6PacketE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 816 | 0;
  }
  function __ZN10emscripten8internal12operator_newI6PacketJEEEPT_DpOT0_() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __Znwm(32) | 0;
    __ZN6PacketC2Ev($call);
    return $call | 0;
  }
  function __ZN10emscripten8internal24RegisterClassConstructorIPFP6PacketvEE6invokeIS2_JEEEvS5_(
    $factory
  ) {
    $factory = $factory | 0;
    var $$addr$i = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $args = 0,
      $call = 0,
      $call$i$i = 0,
      $call1 = 0,
      $call2 = 0,
      $factory$addr = 0,
      $invoke = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $args = (sp + 12) | 0;
    $factory$addr = $factory;
    $invoke = 347;
    $call = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $call1 =
      __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP6PacketEE8getCountEv(
        $args
      ) | 0;
    $call2 =
      __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP6PacketEE8getTypesEv(
        $args
      ) | 0;
    $0 = $invoke;
    $$addr$i = $0;
    $call$i$i = __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() | 0;
    $1 = $invoke;
    $2 = $factory$addr;
    __embind_register_class_constructor(
      $call | 0,
      $call1 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $1 | 0,
      $2 | 0
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal7InvokerIP6PacketJEE6invokeEPFS3_vE($fn) {
    $fn = $fn | 0;
    var $0 = 0,
      $call = 0,
      $call1 = 0,
      $fn$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $fn$addr = $fn;
    $0 = $fn$addr;
    $call = FUNCTION_TABLE_i[$0 & 511]() | 0;
    $call1 =
      __ZN10emscripten8internal11BindingTypeIP6PacketvE10toWireTypeES3_($call) |
      0;
    STACKTOP = sp;
    return $call1 | 0;
  }
  function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP6PacketEE8getCountEv(
    $this
  ) {
    $this = $this | 0;
    var $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    STACKTOP = sp;
    return 1;
  }
  function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP6PacketEE8getTypesEv(
    $this
  ) {
    $this = $this | 0;
    var $call = 0,
      $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $call =
      __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI6PacketEEEEEE3getEv() |
      0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal11BindingTypeIP6PacketvE10toWireTypeES3_(
    $p
  ) {
    $p = $p | 0;
    var $0 = 0,
      $p$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $p$addr = $p;
    $0 = $p$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI6PacketEEEEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2860 | 0;
  }
  function __ZN6PacketC2Ev($this) {
    $this = $this | 0;
    var $this$addr = 0,
      $this1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $this1 = $this$addr;
    __ZN6Packet9newPacketEv($this1);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal19RegisterClassMethodIM6PacketFbvEE6invokeIS2_JEEEvPKcS4_(
    $methodName,
    $0
  ) {
    $methodName = $methodName | 0;
    $0 = $0 | 0;
    var $$addr$i = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $args = 0,
      $call = 0,
      $call$i$i = 0,
      $call1 = 0,
      $call2 = 0,
      $call4 = 0,
      $invoker = 0,
      $memberFunction$addr = 0,
      $memberFunction$addr$index4 = 0,
      $memberFunction$field = 0,
      $memberFunction$field2 = 0,
      $memberFunction$index1 = 0,
      $methodName$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $memberFunction$addr = (sp + 8) | 0;
    $args = (sp + 24) | 0;
    $memberFunction$field = HEAP32[$0 >> 2] | 0;
    $memberFunction$index1 = ($0 + 4) | 0;
    $memberFunction$field2 = HEAP32[$memberFunction$index1 >> 2] | 0;
    $methodName$addr = $methodName;
    HEAP32[$memberFunction$addr >> 2] = $memberFunction$field;
    $memberFunction$addr$index4 = ($memberFunction$addr + 4) | 0;
    HEAP32[$memberFunction$addr$index4 >> 2] = $memberFunction$field2;
    $invoker = 348;
    $call = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $1 = $methodName$addr;
    $call1 =
      __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerI6PacketEEEE8getCountEv(
        $args
      ) | 0;
    $call2 =
      __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerI6PacketEEEE8getTypesEv(
        $args
      ) | 0;
    $2 = $invoker;
    $$addr$i = $2;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $3 = $invoker;
    $call4 =
      __ZN10emscripten8internal10getContextIM6PacketFbvEEEPT_RKS5_(
        $memberFunction$addr
      ) | 0;
    __embind_register_class_function(
      $call | 0,
      $1 | 0,
      $call1 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $3 | 0,
      $call4 | 0,
      0
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal13MethodInvokerIM6PacketFbvEbPS2_JEE6invokeERKS4_S5_(
    $method,
    $wireThis
  ) {
    $method = $method | 0;
    $wireThis = $wireThis | 0;
    var $$field = 0,
      $$field2 = 0,
      $$index1 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $call = 0,
      $call1 = 0,
      $call2 = 0,
      $memptr$adj$shifted = 0,
      $memptr$isvirtual = 0,
      $memptr$nonvirtualfn = 0,
      $memptr$virtualfn = 0,
      $method$addr = 0,
      $vtable = 0,
      $wireThis$addr = 0,
      label = 0;
    var sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $method$addr = $method;
    $wireThis$addr = $wireThis;
    $0 = $wireThis$addr;
    $call =
      __ZN10emscripten8internal11BindingTypeIP6PacketvE12fromWireTypeES3_($0) |
      0;
    $1 = $method$addr;
    $$field = HEAP32[$1 >> 2] | 0;
    $$index1 = ($1 + 4) | 0;
    $$field2 = HEAP32[$$index1 >> 2] | 0;
    $memptr$adj$shifted = $$field2 >> 1;
    $2 = ($call + $memptr$adj$shifted) | 0;
    $3 = $$field2 & 1;
    $memptr$isvirtual = ($3 | 0) != 0;
    if ($memptr$isvirtual) {
      $vtable = HEAP32[$2 >> 2] | 0;
      $4 = ($vtable + $$field) | 0;
      $memptr$virtualfn = HEAP32[$4 >> 2] | 0;
      $5 = $memptr$virtualfn;
    } else {
      $memptr$nonvirtualfn = $$field;
      $5 = $memptr$nonvirtualfn;
    }
    $call1 = FUNCTION_TABLE_ii[$5 & 511]($2) | 0;
    $call2 =
      __ZN10emscripten8internal11BindingTypeIbvE10toWireTypeEb($call1) | 0;
    STACKTOP = sp;
    return $call2 | 0;
  }
  function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerI6PacketEEEE8getCountEv(
    $this
  ) {
    $this = $this | 0;
    var $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    STACKTOP = sp;
    return 2;
  }
  function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerI6PacketEEEE8getTypesEv(
    $this
  ) {
    $this = $this | 0;
    var $call = 0,
      $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $call =
      __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbNS0_17AllowedRawPointerI6PacketEEEEEE3getEv() |
      0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal10getContextIM6PacketFbvEEEPT_RKS5_($t) {
    $t = $t | 0;
    var $$field = 0,
      $$field2 = 0,
      $$index1 = 0,
      $$index5 = 0,
      $0 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(8) | 0;
    $0 = $t$addr;
    $$field = HEAP32[$0 >> 2] | 0;
    $$index1 = ($0 + 4) | 0;
    $$field2 = HEAP32[$$index1 >> 2] | 0;
    HEAP32[$call >> 2] = $$field;
    $$index5 = ($call + 4) | 0;
    HEAP32[$$index5 >> 2] = $$field2;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal11BindingTypeIP6PacketvE12fromWireTypeES3_(
    $wt
  ) {
    $wt = $wt | 0;
    var $0 = 0,
      $wt$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $wt$addr = $wt;
    $0 = $wt$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbNS0_17AllowedRawPointerI6PacketEEEEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2864 | 0;
  }
  function __ZN10emscripten8internal19RegisterClassMethodIM6PacketFbNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeIS2_JEEEvPKcSB_(
    $methodName,
    $0
  ) {
    $methodName = $methodName | 0;
    $0 = $0 | 0;
    var $$addr$i = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $args = 0,
      $call = 0,
      $call$i$i = 0,
      $call1 = 0,
      $call2 = 0,
      $call4 = 0,
      $invoker = 0,
      $memberFunction$addr = 0,
      $memberFunction$addr$index4 = 0,
      $memberFunction$field = 0,
      $memberFunction$field2 = 0,
      $memberFunction$index1 = 0,
      $methodName$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $memberFunction$addr = (sp + 8) | 0;
    $args = (sp + 24) | 0;
    $memberFunction$field = HEAP32[$0 >> 2] | 0;
    $memberFunction$index1 = ($0 + 4) | 0;
    $memberFunction$field2 = HEAP32[$memberFunction$index1 >> 2] | 0;
    $methodName$addr = $methodName;
    HEAP32[$memberFunction$addr >> 2] = $memberFunction$field;
    $memberFunction$addr$index4 = ($memberFunction$addr + 4) | 0;
    HEAP32[$memberFunction$addr$index4 >> 2] = $memberFunction$field2;
    $invoker = 349;
    $call = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $1 = $methodName$addr;
    $call1 =
      __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerI6PacketEENSt3__212basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEE8getCountEv(
        $args
      ) | 0;
    $call2 =
      __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerI6PacketEENSt3__212basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEE8getTypesEv(
        $args
      ) | 0;
    $2 = $invoker;
    $$addr$i = $2;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() | 0;
    $3 = $invoker;
    $call4 =
      __ZN10emscripten8internal10getContextIM6PacketFbNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEPT_RKSC_(
        $memberFunction$addr
      ) | 0;
    __embind_register_class_function(
      $call | 0,
      $1 | 0,
      $call1 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $3 | 0,
      $call4 | 0,
      0
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal13MethodInvokerIM6PacketFbNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEbPS2_JS9_EE6invokeERKSB_SC_PNS0_11BindingTypeIS9_vEUt_E(
    $method,
    $wireThis,
    $args
  ) {
    $method = $method | 0;
    $wireThis = $wireThis | 0;
    $args = $args | 0;
    var $$field = 0,
      $$field2 = 0,
      $$index1 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $agg$tmp = 0,
      $args$addr = 0,
      $call = 0,
      $call1 = 0,
      $call3 = 0,
      $memptr$adj$shifted = 0,
      $memptr$isvirtual = 0,
      $memptr$nonvirtualfn = 0,
      $memptr$virtualfn = 0,
      $method$addr = 0;
    var $vtable = 0,
      $wireThis$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $agg$tmp = sp;
    $method$addr = $method;
    $wireThis$addr = $wireThis;
    $args$addr = $args;
    $0 = $wireThis$addr;
    $call =
      __ZN10emscripten8internal11BindingTypeIP6PacketvE12fromWireTypeES3_($0) |
      0;
    $1 = $method$addr;
    $$field = HEAP32[$1 >> 2] | 0;
    $$index1 = ($1 + 4) | 0;
    $$field2 = HEAP32[$$index1 >> 2] | 0;
    $memptr$adj$shifted = $$field2 >> 1;
    $2 = ($call + $memptr$adj$shifted) | 0;
    $3 = $$field2 & 1;
    $memptr$isvirtual = ($3 | 0) != 0;
    if ($memptr$isvirtual) {
      $vtable = HEAP32[$2 >> 2] | 0;
      $4 = ($vtable + $$field) | 0;
      $memptr$virtualfn = HEAP32[$4 >> 2] | 0;
      $6 = $memptr$virtualfn;
    } else {
      $memptr$nonvirtualfn = $$field;
      $6 = $memptr$nonvirtualfn;
    }
    $5 = $args$addr;
    __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E(
      $agg$tmp,
      $5
    );
    $call1 = FUNCTION_TABLE_iii[$6 & 511]($2, $agg$tmp) | 0;
    $call3 =
      __ZN10emscripten8internal11BindingTypeIbvE10toWireTypeEb($call1) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(
      $agg$tmp
    );
    STACKTOP = sp;
    return $call3 | 0;
  }
  function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerI6PacketEENSt3__212basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEE8getCountEv(
    $this
  ) {
    $this = $this | 0;
    var $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    STACKTOP = sp;
    return 3;
  }
  function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerI6PacketEENSt3__212basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEE8getTypesEv(
    $this
  ) {
    $this = $this | 0;
    var $call = 0,
      $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $call =
      __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbNS0_17AllowedRawPointerI6PacketEENSt3__212basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEE3getEv() |
      0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal10getContextIM6PacketFbNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEPT_RKSC_(
    $t
  ) {
    $t = $t | 0;
    var $$field = 0,
      $$field2 = 0,
      $$index1 = 0,
      $$index5 = 0,
      $0 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(8) | 0;
    $0 = $t$addr;
    $$field = HEAP32[$0 >> 2] | 0;
    $$index1 = ($0 + 4) | 0;
    $$field2 = HEAP32[$$index1 >> 2] | 0;
    HEAP32[$call >> 2] = $$field;
    $$index5 = ($call + 4) | 0;
    HEAP32[$$index5 >> 2] = $$field2;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E(
    $agg$result,
    $v
  ) {
    $agg$result = $agg$result | 0;
    $v = $v | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $__n$addr$i = 0,
      $__s$addr$i = 0,
      $data = 0,
      $this$addr$i = 0,
      $this$addr$i$i = 0,
      $this$addr$i$i$i = 0,
      $this$addr$i$i$i$i = 0,
      $this$addr$i2$i$i = 0,
      $this1$i = 0,
      $this1$i$i = 0,
      $this1$i$i$i = 0,
      $this1$i3$i$i = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    $data = ($0 + 4) | 0;
    $1 = $v$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $this$addr$i = $agg$result;
    $__s$addr$i = $data;
    $__n$addr$i = $2;
    $this1$i = $this$addr$i;
    $this$addr$i$i = $this1$i;
    $this1$i$i = $this$addr$i$i;
    $this$addr$i$i$i = $this1$i$i;
    $this1$i$i$i = $this$addr$i$i$i;
    HEAP32[$this1$i$i$i >> 2] = 0 | 0;
    HEAP32[($this1$i$i$i + 4) >> 2] = 0 | 0;
    HEAP32[($this1$i$i$i + 8) >> 2] = 0 | 0;
    $this$addr$i2$i$i = $this1$i$i;
    $this1$i3$i$i = $this$addr$i2$i$i;
    $this$addr$i$i$i$i = $this1$i3$i$i;
    $3 = $__s$addr$i;
    $4 = $__n$addr$i;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(
      $this1$i,
      $3,
      $4
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbNS0_17AllowedRawPointerI6PacketEENSt3__212basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2872 | 0;
  }
  function __ZN10emscripten8internal19RegisterClassMethodIM6PacketFvvEE6invokeIS2_JEEEvPKcS4_(
    $methodName,
    $0
  ) {
    $methodName = $methodName | 0;
    $0 = $0 | 0;
    var $$addr$i = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $args = 0,
      $call = 0,
      $call$i$i = 0,
      $call1 = 0,
      $call2 = 0,
      $call4 = 0,
      $invoker = 0,
      $memberFunction$addr = 0,
      $memberFunction$addr$index4 = 0,
      $memberFunction$field = 0,
      $memberFunction$field2 = 0,
      $memberFunction$index1 = 0,
      $methodName$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $memberFunction$addr = (sp + 8) | 0;
    $args = (sp + 24) | 0;
    $memberFunction$field = HEAP32[$0 >> 2] | 0;
    $memberFunction$index1 = ($0 + 4) | 0;
    $memberFunction$field2 = HEAP32[$memberFunction$index1 >> 2] | 0;
    $methodName$addr = $methodName;
    HEAP32[$memberFunction$addr >> 2] = $memberFunction$field;
    $memberFunction$addr$index4 = ($memberFunction$addr + 4) | 0;
    HEAP32[$memberFunction$addr$index4 >> 2] = $memberFunction$field2;
    $invoker = 350;
    $call = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $1 = $methodName$addr;
    $call1 =
      __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI6PacketEEEE8getCountEv(
        $args
      ) | 0;
    $call2 =
      __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI6PacketEEEE8getTypesEv(
        $args
      ) | 0;
    $2 = $invoker;
    $$addr$i = $2;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv() | 0;
    $3 = $invoker;
    $call4 =
      __ZN10emscripten8internal10getContextIM6PacketFvvEEEPT_RKS5_(
        $memberFunction$addr
      ) | 0;
    __embind_register_class_function(
      $call | 0,
      $1 | 0,
      $call1 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $3 | 0,
      $call4 | 0,
      0
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal13MethodInvokerIM6PacketFvvEvPS2_JEE6invokeERKS4_S5_(
    $method,
    $wireThis
  ) {
    $method = $method | 0;
    $wireThis = $wireThis | 0;
    var $$field = 0,
      $$field2 = 0,
      $$index1 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $call = 0,
      $memptr$adj$shifted = 0,
      $memptr$isvirtual = 0,
      $memptr$nonvirtualfn = 0,
      $memptr$virtualfn = 0,
      $method$addr = 0,
      $vtable = 0,
      $wireThis$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $method$addr = $method;
    $wireThis$addr = $wireThis;
    $0 = $wireThis$addr;
    $call =
      __ZN10emscripten8internal11BindingTypeIP6PacketvE12fromWireTypeES3_($0) |
      0;
    $1 = $method$addr;
    $$field = HEAP32[$1 >> 2] | 0;
    $$index1 = ($1 + 4) | 0;
    $$field2 = HEAP32[$$index1 >> 2] | 0;
    $memptr$adj$shifted = $$field2 >> 1;
    $2 = ($call + $memptr$adj$shifted) | 0;
    $3 = $$field2 & 1;
    $memptr$isvirtual = ($3 | 0) != 0;
    if ($memptr$isvirtual) {
      $vtable = HEAP32[$2 >> 2] | 0;
      $4 = ($vtable + $$field) | 0;
      $memptr$virtualfn = HEAP32[$4 >> 2] | 0;
      $5 = $memptr$virtualfn;
      FUNCTION_TABLE_vi[$5 & 511]($2);
      STACKTOP = sp;
      return;
    } else {
      $memptr$nonvirtualfn = $$field;
      $5 = $memptr$nonvirtualfn;
      FUNCTION_TABLE_vi[$5 & 511]($2);
      STACKTOP = sp;
      return;
    }
  }
  function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI6PacketEEEE8getCountEv(
    $this
  ) {
    $this = $this | 0;
    var $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    STACKTOP = sp;
    return 2;
  }
  function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI6PacketEEEE8getTypesEv(
    $this
  ) {
    $this = $this | 0;
    var $call = 0,
      $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $call =
      __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI6PacketEEEEEE3getEv() |
      0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal10getContextIM6PacketFvvEEEPT_RKS5_($t) {
    $t = $t | 0;
    var $$field = 0,
      $$field2 = 0,
      $$index1 = 0,
      $$index5 = 0,
      $0 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(8) | 0;
    $0 = $t$addr;
    $$field = HEAP32[$0 >> 2] | 0;
    $$index1 = ($0 + 4) | 0;
    $$field2 = HEAP32[$$index1 >> 2] | 0;
    HEAP32[$call >> 2] = $$field;
    $$index5 = ($call + 4) | 0;
    HEAP32[$$index5 >> 2] = $$field2;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI6PacketEEEEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2884 | 0;
  }
  function __ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 8863 | 0;
  }
  function __ZN10emscripten8internal19RegisterClassMethodIM6PacketFNSt3__26vectorIhNS3_9allocatorIhEEEEvEE6invokeIS2_JEEEvPKcS9_(
    $methodName,
    $0
  ) {
    $methodName = $methodName | 0;
    $0 = $0 | 0;
    var $$addr$i = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $args = 0,
      $call = 0,
      $call$i$i = 0,
      $call1 = 0,
      $call2 = 0,
      $call4 = 0,
      $invoker = 0,
      $memberFunction$addr = 0,
      $memberFunction$addr$index4 = 0,
      $memberFunction$field = 0,
      $memberFunction$field2 = 0,
      $memberFunction$index1 = 0,
      $methodName$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $memberFunction$addr = (sp + 8) | 0;
    $args = (sp + 24) | 0;
    $memberFunction$field = HEAP32[$0 >> 2] | 0;
    $memberFunction$index1 = ($0 + 4) | 0;
    $memberFunction$field2 = HEAP32[$memberFunction$index1 >> 2] | 0;
    $methodName$addr = $methodName;
    HEAP32[$memberFunction$addr >> 2] = $memberFunction$field;
    $memberFunction$addr$index4 = ($memberFunction$addr + 4) | 0;
    HEAP32[$memberFunction$addr$index4 >> 2] = $memberFunction$field2;
    $invoker = 351;
    $call = __ZN10emscripten8internal6TypeIDI6PacketvE3getEv() | 0;
    $1 = $methodName$addr;
    $call1 =
      __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__26vectorIhNS4_9allocatorIhEEEENS0_17AllowedRawPointerI6PacketEEEE8getCountEv(
        $args
      ) | 0;
    $call2 =
      __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__26vectorIhNS4_9allocatorIhEEEENS0_17AllowedRawPointerI6PacketEEEE8getTypesEv(
        $args
      ) | 0;
    $2 = $invoker;
    $$addr$i = $2;
    $call$i$i =
      __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0;
    $3 = $invoker;
    $call4 =
      __ZN10emscripten8internal10getContextIM6PacketFNSt3__26vectorIhNS3_9allocatorIhEEEEvEEEPT_RKSA_(
        $memberFunction$addr
      ) | 0;
    __embind_register_class_function(
      $call | 0,
      $1 | 0,
      $call1 | 0,
      $call2 | 0,
      $call$i$i | 0,
      $3 | 0,
      $call4 | 0,
      0
    );
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal13MethodInvokerIM6PacketFNSt3__26vectorIhNS3_9allocatorIhEEEEvES7_PS2_JEE6invokeERKS9_SA_(
    $method,
    $wireThis
  ) {
    $method = $method | 0;
    $wireThis = $wireThis | 0;
    var $$addr$i$i$i = 0,
      $$addr1$i$i$i = 0,
      $$addr2$i$i$i = 0,
      $$addr3$i$i$i = 0,
      $$field = 0,
      $$field2 = 0,
      $$index1 = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0;
    var $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $__end_$i$i$i = 0,
      $__end_cap_$i$i$i$i$i = 0,
      $__end_cap_$i$i$i32$i$i = 0,
      $__p$addr$i$i$i$i = 0,
      $__p$addr$i$i13$i$i = 0,
      $__p$addr$i$i20$i$i = 0,
      $__p$addr$i$i40$i$i = 0,
      $add$ptr$i$i = 0,
      $add$ptr6$i$i = 0,
      $add$ptr9$i$i = 0,
      $call = 0,
      $call1 = 0,
      $memptr$adj$shifted = 0;
    var $memptr$isvirtual = 0,
      $memptr$nonvirtualfn = 0,
      $memptr$virtualfn = 0,
      $method$addr = 0,
      $ref$tmp = 0,
      $sub$ptr$lhs$cast$i$i$i = 0,
      $sub$ptr$lhs$cast$i$i$i$i = 0,
      $sub$ptr$lhs$cast$i$i37$i$i = 0,
      $sub$ptr$rhs$cast$i$i$i = 0,
      $sub$ptr$rhs$cast$i$i$i$i = 0,
      $sub$ptr$rhs$cast$i$i38$i$i = 0,
      $sub$ptr$sub$i$i$i = 0,
      $sub$ptr$sub$i$i$i$i = 0,
      $sub$ptr$sub$i$i39$i$i = 0,
      $this$addr$i = 0,
      $this$addr$i$i = 0,
      $this$addr$i$i$i = 0,
      $this$addr$i$i$i$i = 0,
      $this$addr$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i$i = 0;
    var $this$addr$i$i$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i24$i$i = 0,
      $this$addr$i$i$i$i25$i$i = 0,
      $this$addr$i$i$i26$i$i = 0,
      $this$addr$i$i27$i$i = 0,
      $this$addr$i10$i$i = 0,
      $this$addr$i11$i$i = 0,
      $this$addr$i14$i$i = 0,
      $this$addr$i17$i$i = 0,
      $this$addr$i21$i$i = 0,
      $this$addr$i28$i$i = 0,
      $this$addr$i41$i$i = 0,
      $this1$i = 0,
      $this1$i$i = 0,
      $this1$i$i$i = 0,
      $this1$i$i$i$i = 0,
      $this1$i$i$i$i$i = 0,
      $this1$i$i$i$i$i$i = 0,
      $this1$i$i$i$i$i$i$i = 0,
      $this1$i$i$i$i$i34$i$i = 0;
    var $this1$i$i$i$i33$i$i = 0,
      $this1$i$i$i31$i$i = 0,
      $this1$i$i30$i$i = 0,
      $this1$i12$i$i = 0,
      $this1$i15$i$i = 0,
      $this1$i18$i$i = 0,
      $this1$i22$i$i = 0,
      $this1$i29$i$i = 0,
      $this1$i42$i$i = 0,
      $vtable = 0,
      $wireThis$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 128) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
    $ref$tmp = sp;
    $method$addr = $method;
    $wireThis$addr = $wireThis;
    $0 = $wireThis$addr;
    $call =
      __ZN10emscripten8internal11BindingTypeIP6PacketvE12fromWireTypeES3_($0) |
      0;
    $1 = $method$addr;
    $$field = HEAP32[$1 >> 2] | 0;
    $$index1 = ($1 + 4) | 0;
    $$field2 = HEAP32[$$index1 >> 2] | 0;
    $memptr$adj$shifted = $$field2 >> 1;
    $2 = ($call + $memptr$adj$shifted) | 0;
    $3 = $$field2 & 1;
    $memptr$isvirtual = ($3 | 0) != 0;
    if ($memptr$isvirtual) {
      $vtable = HEAP32[$2 >> 2] | 0;
      $4 = ($vtable + $$field) | 0;
      $memptr$virtualfn = HEAP32[$4 >> 2] | 0;
      $5 = $memptr$virtualfn;
    } else {
      $memptr$nonvirtualfn = $$field;
      $5 = $memptr$nonvirtualfn;
    }
    FUNCTION_TABLE_vii[$5 & 511]($ref$tmp, $2);
    $call1 =
      __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIhNS2_9allocatorIhEEEEE10toWireTypeEOS6_(
        $ref$tmp
      ) | 0;
    $this$addr$i = $ref$tmp;
    $this1$i = $this$addr$i;
    $this$addr$i$i = $this1$i;
    $this1$i$i = $this$addr$i$i;
    $this$addr$i$i$i = $this1$i$i;
    $this1$i$i$i = $this$addr$i$i$i;
    $6 = HEAP32[$this1$i$i$i >> 2] | 0;
    $__p$addr$i$i$i$i = $6;
    $7 = $__p$addr$i$i$i$i;
    $this$addr$i41$i$i = $this1$i$i;
    $this1$i42$i$i = $this$addr$i41$i$i;
    $8 = HEAP32[$this1$i42$i$i >> 2] | 0;
    $__p$addr$i$i40$i$i = $8;
    $9 = $__p$addr$i$i40$i$i;
    $this$addr$i28$i$i = $this1$i$i;
    $this1$i29$i$i = $this$addr$i28$i$i;
    $this$addr$i$i27$i$i = $this1$i29$i$i;
    $this1$i$i30$i$i = $this$addr$i$i27$i$i;
    $this$addr$i$i$i26$i$i = $this1$i$i30$i$i;
    $this1$i$i$i31$i$i = $this$addr$i$i$i26$i$i;
    $__end_cap_$i$i$i32$i$i = ($this1$i$i$i31$i$i + 8) | 0;
    $this$addr$i$i$i$i25$i$i = $__end_cap_$i$i$i32$i$i;
    $this1$i$i$i$i33$i$i = $this$addr$i$i$i$i25$i$i;
    $this$addr$i$i$i$i$i24$i$i = $this1$i$i$i$i33$i$i;
    $this1$i$i$i$i$i34$i$i = $this$addr$i$i$i$i$i24$i$i;
    $10 = HEAP32[$this1$i$i$i$i$i34$i$i >> 2] | 0;
    $11 = HEAP32[$this1$i$i30$i$i >> 2] | 0;
    $sub$ptr$lhs$cast$i$i37$i$i = $10;
    $sub$ptr$rhs$cast$i$i38$i$i = $11;
    $sub$ptr$sub$i$i39$i$i =
      ($sub$ptr$lhs$cast$i$i37$i$i - $sub$ptr$rhs$cast$i$i38$i$i) | 0;
    $add$ptr$i$i = ($9 + $sub$ptr$sub$i$i39$i$i) | 0;
    $this$addr$i21$i$i = $this1$i$i;
    $this1$i22$i$i = $this$addr$i21$i$i;
    $12 = HEAP32[$this1$i22$i$i >> 2] | 0;
    $__p$addr$i$i20$i$i = $12;
    $13 = $__p$addr$i$i20$i$i;
    $this$addr$i17$i$i = $this1$i$i;
    $this1$i18$i$i = $this$addr$i17$i$i;
    $__end_$i$i$i = ($this1$i18$i$i + 4) | 0;
    $14 = HEAP32[$__end_$i$i$i >> 2] | 0;
    $15 = HEAP32[$this1$i18$i$i >> 2] | 0;
    $sub$ptr$lhs$cast$i$i$i = $14;
    $sub$ptr$rhs$cast$i$i$i = $15;
    $sub$ptr$sub$i$i$i =
      ($sub$ptr$lhs$cast$i$i$i - $sub$ptr$rhs$cast$i$i$i) | 0;
    $add$ptr6$i$i = ($13 + $sub$ptr$sub$i$i$i) | 0;
    $this$addr$i14$i$i = $this1$i$i;
    $this1$i15$i$i = $this$addr$i14$i$i;
    $16 = HEAP32[$this1$i15$i$i >> 2] | 0;
    $__p$addr$i$i13$i$i = $16;
    $17 = $__p$addr$i$i13$i$i;
    $this$addr$i11$i$i = $this1$i$i;
    $this1$i12$i$i = $this$addr$i11$i$i;
    $this$addr$i$i$i$i = $this1$i12$i$i;
    $this1$i$i$i$i = $this$addr$i$i$i$i;
    $this$addr$i$i$i$i$i = $this1$i$i$i$i;
    $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
    $__end_cap_$i$i$i$i$i = ($this1$i$i$i$i$i + 8) | 0;
    $this$addr$i$i$i$i$i$i = $__end_cap_$i$i$i$i$i;
    $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
    $this$addr$i$i$i$i$i$i$i = $this1$i$i$i$i$i$i;
    $this1$i$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i$i;
    $18 = HEAP32[$this1$i$i$i$i$i$i$i >> 2] | 0;
    $19 = HEAP32[$this1$i$i$i$i >> 2] | 0;
    $sub$ptr$lhs$cast$i$i$i$i = $18;
    $sub$ptr$rhs$cast$i$i$i$i = $19;
    $sub$ptr$sub$i$i$i$i =
      ($sub$ptr$lhs$cast$i$i$i$i - $sub$ptr$rhs$cast$i$i$i$i) | 0;
    $add$ptr9$i$i = ($17 + $sub$ptr$sub$i$i$i$i) | 0;
    $this$addr$i10$i$i = $this1$i$i;
    $$addr$i$i$i = $7;
    $$addr1$i$i$i = $add$ptr$i$i;
    $$addr2$i$i$i = $add$ptr6$i$i;
    $$addr3$i$i$i = $add$ptr9$i$i;
    __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($this1$i);
    STACKTOP = sp;
    return $call1 | 0;
  }
  function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__26vectorIhNS4_9allocatorIhEEEENS0_17AllowedRawPointerI6PacketEEEE8getCountEv(
    $this
  ) {
    $this = $this | 0;
    var $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    STACKTOP = sp;
    return 2;
  }
  function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__26vectorIhNS4_9allocatorIhEEEENS0_17AllowedRawPointerI6PacketEEEE8getTypesEv(
    $this
  ) {
    $this = $this | 0;
    var $call = 0,
      $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    $call =
      __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__26vectorIhNS3_9allocatorIhEEEENS0_17AllowedRawPointerI6PacketEEEEEE3getEv() |
      0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal10getContextIM6PacketFNSt3__26vectorIhNS3_9allocatorIhEEEEvEEEPT_RKSA_(
    $t
  ) {
    $t = $t | 0;
    var $$field = 0,
      $$field2 = 0,
      $$index1 = 0,
      $$index5 = 0,
      $0 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(8) | 0;
    $0 = $t$addr;
    $$field = HEAP32[$0 >> 2] | 0;
    $$index1 = ($0 + 4) | 0;
    $$field2 = HEAP32[$$index1 >> 2] | 0;
    HEAP32[$call >> 2] = $$field;
    $$index5 = ($call + 4) | 0;
    HEAP32[$$index5 >> 2] = $$field2;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIhNS2_9allocatorIhEEEEE10toWireTypeEOS6_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0;
    var $9 = 0,
      $__a$addr$i$i = 0,
      $__end_$i = 0,
      $__end_$i$i = 0,
      $__end_4$i = 0,
      $__end_8$i = 0,
      $__end_cap_$i$i = 0,
      $__end_cap_$i14$i = 0,
      $__end_cap_$i21$i = 0,
      $__end_cap_$i29$i = 0,
      $__end_cap_$i38$i = 0,
      $__t$addr$i = 0,
      $__t$addr$i$i = 0,
      $__t$addr$i$i$i = 0,
      $__t$addr$i$i$i$i = 0,
      $__t$addr$i$i$i$i$i = 0,
      $__t$addr$i$i4$i$i$i = 0,
      $__t$addr$i3$i$i$i = 0,
      $__t1$addr$i$i$i = 0,
      $__t2$addr$i$i$i = 0;
    var $__u$addr$i$i$i$i = 0,
      $__u$addr$i6$i$i$i = 0,
      $__x$addr$i = 0,
      $call = 0,
      $ref$tmp$i$i = 0,
      $this$addr$i = 0,
      $this$addr$i$i = 0,
      $this$addr$i$i$i = 0,
      $this$addr$i$i$i$i = 0,
      $this$addr$i$i$i10$i = 0,
      $this$addr$i$i$i17$i = 0,
      $this$addr$i$i$i25$i = 0,
      $this$addr$i$i$i33$i = 0,
      $this$addr$i$i11$i = 0,
      $this$addr$i$i18$i = 0,
      $this$addr$i$i26$i = 0,
      $this$addr$i$i34$i = 0,
      $this$addr$i12$i = 0,
      $this$addr$i19$i = 0,
      $this$addr$i27$i = 0;
    var $this$addr$i3$i$i = 0,
      $this$addr$i35$i = 0,
      $this$addr$i5$i$i$i = 0,
      $this1$i = 0,
      $this1$i$i = 0,
      $this1$i$i$i = 0,
      $this1$i$i$i$i = 0,
      $this1$i$i$i16$i = 0,
      $this1$i$i$i23$i = 0,
      $this1$i$i$i31$i = 0,
      $this1$i$i15$i = 0,
      $this1$i$i22$i = 0,
      $this1$i$i30$i = 0,
      $this1$i13$i = 0,
      $this1$i20$i = 0,
      $this1$i28$i = 0,
      $this1$i36$i = 0,
      $this1$i4$i$i = 0,
      $this1$i7$i$i$i = 0,
      $v$addr = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 144) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144 | 0);
    $ref$tmp$i$i = (sp + 64) | 0;
    $v$addr = $v;
    $call = __Znwm(12) | 0;
    $0 = $v$addr;
    $__t$addr$i = $0;
    $1 = $__t$addr$i;
    $this$addr$i = $call;
    $__x$addr$i = $1;
    $this1$i = $this$addr$i;
    $2 = $__x$addr$i;
    $this$addr$i$i = $2;
    $this1$i$i = $this$addr$i$i;
    $__end_cap_$i$i = ($this1$i$i + 8) | 0;
    $this$addr$i$i$i = $__end_cap_$i$i;
    $this1$i$i$i = $this$addr$i$i$i;
    $this$addr$i$i$i$i = $this1$i$i$i;
    $this1$i$i$i$i = $this$addr$i$i$i$i;
    $__t$addr$i$i = $this1$i$i$i$i;
    $3 = $__t$addr$i$i;
    $this$addr$i35$i = $this1$i;
    $__a$addr$i$i = $3;
    $this1$i36$i = $this$addr$i35$i;
    $this$addr$i$i34$i = $this1$i36$i;
    HEAP32[$this1$i36$i >> 2] = 0;
    $__end_$i$i = ($this1$i36$i + 4) | 0;
    HEAP32[$__end_$i$i >> 2] = 0;
    $__end_cap_$i38$i = ($this1$i36$i + 8) | 0;
    HEAP32[$ref$tmp$i$i >> 2] = 0;
    $4 = $__a$addr$i$i;
    $__t$addr$i$i$i = $4;
    $5 = $__t$addr$i$i$i;
    $this$addr$i3$i$i = $__end_cap_$i38$i;
    $__t1$addr$i$i$i = $ref$tmp$i$i;
    $__t2$addr$i$i$i = $5;
    $this1$i4$i$i = $this$addr$i3$i$i;
    $6 = $__t1$addr$i$i$i;
    $__t$addr$i$i$i$i = $6;
    $7 = $__t$addr$i$i$i$i;
    $this$addr$i5$i$i$i = $this1$i4$i$i;
    $__u$addr$i6$i$i$i = $7;
    $this1$i7$i$i$i = $this$addr$i5$i$i$i;
    $8 = $__u$addr$i6$i$i$i;
    $__t$addr$i$i4$i$i$i = $8;
    HEAP32[$this1$i7$i$i$i >> 2] = 0;
    $9 = $__t2$addr$i$i$i;
    $__t$addr$i3$i$i$i = $9;
    $10 = $__t$addr$i3$i$i$i;
    $this$addr$i$i$i33$i = $this1$i4$i$i;
    $__u$addr$i$i$i$i = $10;
    $11 = $__u$addr$i$i$i$i;
    $__t$addr$i$i$i$i$i = $11;
    $12 = $__x$addr$i;
    $13 = HEAP32[$12 >> 2] | 0;
    HEAP32[$this1$i >> 2] = $13;
    $14 = $__x$addr$i;
    $__end_$i = ($14 + 4) | 0;
    $15 = HEAP32[$__end_$i >> 2] | 0;
    $__end_4$i = ($this1$i + 4) | 0;
    HEAP32[$__end_4$i >> 2] = $15;
    $16 = $__x$addr$i;
    $this$addr$i27$i = $16;
    $this1$i28$i = $this$addr$i27$i;
    $__end_cap_$i29$i = ($this1$i28$i + 8) | 0;
    $this$addr$i$i26$i = $__end_cap_$i29$i;
    $this1$i$i30$i = $this$addr$i$i26$i;
    $this$addr$i$i$i25$i = $this1$i$i30$i;
    $this1$i$i$i31$i = $this$addr$i$i$i25$i;
    $17 = HEAP32[$this1$i$i$i31$i >> 2] | 0;
    $this$addr$i19$i = $this1$i;
    $this1$i20$i = $this$addr$i19$i;
    $__end_cap_$i21$i = ($this1$i20$i + 8) | 0;
    $this$addr$i$i18$i = $__end_cap_$i21$i;
    $this1$i$i22$i = $this$addr$i$i18$i;
    $this$addr$i$i$i17$i = $this1$i$i22$i;
    $this1$i$i$i23$i = $this$addr$i$i$i17$i;
    HEAP32[$this1$i$i$i23$i >> 2] = $17;
    $18 = $__x$addr$i;
    $this$addr$i12$i = $18;
    $this1$i13$i = $this$addr$i12$i;
    $__end_cap_$i14$i = ($this1$i13$i + 8) | 0;
    $this$addr$i$i11$i = $__end_cap_$i14$i;
    $this1$i$i15$i = $this$addr$i$i11$i;
    $this$addr$i$i$i10$i = $this1$i$i15$i;
    $this1$i$i$i16$i = $this$addr$i$i$i10$i;
    HEAP32[$this1$i$i$i16$i >> 2] = 0;
    $19 = $__x$addr$i;
    $__end_8$i = ($19 + 4) | 0;
    HEAP32[$__end_8$i >> 2] = 0;
    $20 = $__x$addr$i;
    HEAP32[$20 >> 2] = 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__26vectorIhNS3_9allocatorIhEEEENS0_17AllowedRawPointerI6PacketEEEEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2892 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketiE7getWireIS2_EEiRKMS2_iRKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketiE7setWireIS2_EEvRKMS2_iRT_i(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call = __ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($0) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP32[$memptr$offset >> 2] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal6TypeIDIivE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN10emscripten8internal11LightTypeIDIiE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal10getContextIM6PacketiEEPT_RKS4_($t) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($v) {
    $v = $v | 0;
    var $0 = 0,
      $1 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    STACKTOP = sp;
    return $1 | 0;
  }
  function __ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($v) {
    $v = $v | 0;
    var $0 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2736 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_4TypeEE7getWireIS2_EES3_RKMS2_S3_RKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $3 = HEAP8[$memptr$offset >> 0] | 0;
    $call =
      __ZN10emscripten8internal15EnumBindingTypeIN6Packet4TypeEE10toWireTypeES3_(
        $3
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_4TypeEE7setWireIS2_EEvRKMS2_S3_RT_S3_(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call =
      __ZN10emscripten8internal15EnumBindingTypeIN6Packet4TypeEE12fromWireTypeES3_(
        $0
      ) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIM6PacketNS2_4TypeEEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal15EnumBindingTypeIN6Packet4TypeEE10toWireTypeES3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal15EnumBindingTypeIN6Packet4TypeEE12fromWireTypeES3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_4DataEE7getWireIS2_EES3_RKMS2_S3_RKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $3 = HEAP8[$memptr$offset >> 0] | 0;
    $call =
      __ZN10emscripten8internal15EnumBindingTypeIN6Packet4DataEE10toWireTypeES3_(
        $3
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_4DataEE7setWireIS2_EEvRKMS2_S3_RT_S3_(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call =
      __ZN10emscripten8internal15EnumBindingTypeIN6Packet4DataEE12fromWireTypeES3_(
        $0
      ) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIM6PacketNS2_4DataEEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal15EnumBindingTypeIN6Packet4DataEE10toWireTypeES3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal15EnumBindingTypeIN6Packet4DataEE12fromWireTypeES3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_7CommandEE7getWireIS2_EES3_RKMS2_S3_RKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $3 = HEAP8[$memptr$offset >> 0] | 0;
    $call =
      __ZN10emscripten8internal15EnumBindingTypeIN6Packet7CommandEE10toWireTypeES3_(
        $3
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_7CommandEE7setWireIS2_EEvRKMS2_S3_RT_S3_(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call =
      __ZN10emscripten8internal15EnumBindingTypeIN6Packet7CommandEE12fromWireTypeES3_(
        $0
      ) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIM6PacketNS2_7CommandEEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal15EnumBindingTypeIN6Packet7CommandEE10toWireTypeES3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal15EnumBindingTypeIN6Packet7CommandEE12fromWireTypeES3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketN10SmartDrive5ErrorEE7getWireIS2_EES4_RKMS2_S4_RKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $3 = HEAP8[$memptr$offset >> 0] | 0;
    $call =
      __ZN10emscripten8internal15EnumBindingTypeIN10SmartDrive5ErrorEE10toWireTypeES3_(
        $3
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketN10SmartDrive5ErrorEE7setWireIS2_EEvRKMS2_S4_RT_S4_(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call =
      __ZN10emscripten8internal15EnumBindingTypeIN10SmartDrive5ErrorEE12fromWireTypeES3_(
        $0
      ) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIM6PacketN10SmartDrive5ErrorEEEPT_RKS6_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_3OTAEE7getWireIS2_EES3_RKMS2_S3_RKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $3 = HEAP8[$memptr$offset >> 0] | 0;
    $call =
      __ZN10emscripten8internal15EnumBindingTypeIN6Packet3OTAEE10toWireTypeES3_(
        $3
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_3OTAEE7setWireIS2_EEvRKMS2_S3_RT_S3_(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call =
      __ZN10emscripten8internal15EnumBindingTypeIN6Packet3OTAEE12fromWireTypeES3_(
        $0
      ) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = $call;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIM6PacketNS2_3OTAEEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal15EnumBindingTypeIN6Packet3OTAEE10toWireTypeES3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal15EnumBindingTypeIN6Packet3OTAEE12fromWireTypeES3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $0 = $v$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketN10SmartDrive8SettingsEE7getWireIS2_EEPS4_RKMS2_S4_RKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIN10SmartDrive8SettingsEE10toWireTypeERKS3_(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketN10SmartDrive8SettingsEE7setWireIS2_EEvRKMS2_S4_RT_PS4_(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIN10SmartDrive8SettingsEE12fromWireTypeEPS3_(
        $0
      ) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP32[$memptr$offset >> 2] = HEAP32[$call >> 2] | 0;
    HEAP32[($memptr$offset + 4) >> 2] = HEAP32[($call + 4) >> 2] | 0;
    HEAP32[($memptr$offset + 8) >> 2] = HEAP32[($call + 8) >> 2] | 0;
    HEAP32[($memptr$offset + 12) >> 2] = HEAP32[($call + 12) >> 2] | 0;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIM6PacketN10SmartDrive8SettingsEEEPT_RKS6_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIN10SmartDrive8SettingsEE10toWireTypeERKS3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $call = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $call = __Znwm(16) | 0;
    $0 = $v$addr;
    HEAP32[$call >> 2] = HEAP32[$0 >> 2] | 0;
    HEAP32[($call + 4) >> 2] = HEAP32[($0 + 4) >> 2] | 0;
    HEAP32[($call + 8) >> 2] = HEAP32[($0 + 8) >> 2] | 0;
    HEAP32[($call + 12) >> 2] = HEAP32[($0 + 12) >> 2] | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIN10SmartDrive8SettingsEE12fromWireTypeEPS3_(
    $p
  ) {
    $p = $p | 0;
    var $0 = 0,
      $p$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $p$addr = $p;
    $0 = $p$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketN10SmartDrive21SwitchControlSettingsEE7getWireIS2_EEPS4_RKMS2_S4_RKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIN10SmartDrive21SwitchControlSettingsEE10toWireTypeERKS3_(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketN10SmartDrive21SwitchControlSettingsEE7setWireIS2_EEvRKMS2_S4_RT_PS4_(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIN10SmartDrive21SwitchControlSettingsEE12fromWireTypeEPS3_(
        $0
      ) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP32[$memptr$offset >> 2] = HEAP32[$call >> 2] | 0;
    HEAP32[($memptr$offset + 4) >> 2] = HEAP32[($call + 4) >> 2] | 0;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIM6PacketN10SmartDrive21SwitchControlSettingsEEEPT_RKS6_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIN10SmartDrive21SwitchControlSettingsEE10toWireTypeERKS3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $call = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $call = __Znwm(8) | 0;
    $0 = $v$addr;
    HEAP32[$call >> 2] = HEAP32[$0 >> 2] | 0;
    HEAP32[($call + 4) >> 2] = HEAP32[($0 + 4) >> 2] | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIN10SmartDrive21SwitchControlSettingsEE12fromWireTypeEPS3_(
    $p
  ) {
    $p = $p | 0;
    var $0 = 0,
      $p$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $p$addr = $p;
    $0 = $p$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_12PushSettingsEE7getWireIS2_EEPS3_RKMS2_S3_RKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIN6Packet12PushSettingsEE10toWireTypeERKS3_(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_12PushSettingsEE7setWireIS2_EEvRKMS2_S3_RT_PS3_(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIN6Packet12PushSettingsEE12fromWireTypeEPS3_(
        $0
      ) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = HEAP8[$call >> 0] | 0;
    HEAP8[($memptr$offset + 1) >> 0] = HEAP8[($call + 1) >> 0] | 0;
    HEAP8[($memptr$offset + 2) >> 0] = HEAP8[($call + 2) >> 0] | 0;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIM6PacketNS2_12PushSettingsEEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIN6Packet12PushSettingsEE10toWireTypeERKS3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $call = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $call = __Znwm(3) | 0;
    $0 = $v$addr;
    HEAP8[$call >> 0] = HEAP8[$0 >> 0] | 0;
    HEAP8[($call + 1) >> 0] = HEAP8[($0 + 1) >> 0] | 0;
    HEAP8[($call + 2) >> 0] = HEAP8[($0 + 2) >> 0] | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIN6Packet12PushSettingsEE12fromWireTypeEPS3_(
    $p
  ) {
    $p = $p | 0;
    var $0 = 0,
      $p$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $p$addr = $p;
    $0 = $p$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_11VersionInfoEE7getWireIS2_EEPS3_RKMS2_S3_RKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIN6Packet11VersionInfoEE10toWireTypeERKS3_(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_11VersionInfoEE7setWireIS2_EEvRKMS2_S3_RT_PS3_(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIN6Packet11VersionInfoEE12fromWireTypeEPS3_(
        $0
      ) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = HEAP8[$call >> 0] | 0;
    HEAP8[($memptr$offset + 1) >> 0] = HEAP8[($call + 1) >> 0] | 0;
    HEAP8[($memptr$offset + 2) >> 0] = HEAP8[($call + 2) >> 0] | 0;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIM6PacketNS2_11VersionInfoEEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIN6Packet11VersionInfoEE10toWireTypeERKS3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $call = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $call = __Znwm(3) | 0;
    $0 = $v$addr;
    HEAP8[$call >> 0] = HEAP8[$0 >> 0] | 0;
    HEAP8[($call + 1) >> 0] = HEAP8[($0 + 1) >> 0] | 0;
    HEAP8[($call + 2) >> 0] = HEAP8[($0 + 2) >> 0] | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIN6Packet11VersionInfoEE12fromWireTypeEPS3_(
    $p
  ) {
    $p = $p | 0;
    var $0 = 0,
      $p$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $p$addr = $p;
    $0 = $p$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_9DailyInfoEE7getWireIS2_EEPS3_RKMS2_S3_RKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIN6Packet9DailyInfoEE10toWireTypeERKS3_(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_9DailyInfoEE7setWireIS2_EEvRKMS2_S3_RT_PS3_(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIN6Packet9DailyInfoEE12fromWireTypeEPS3_(
        $0
      ) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP16[$memptr$offset >> 1] = HEAP16[$call >> 1] | 0;
    HEAP16[($memptr$offset + 2) >> 1] = HEAP16[($call + 2) >> 1] | 0;
    HEAP16[($memptr$offset + 4) >> 1] = HEAP16[($call + 4) >> 1] | 0;
    HEAP16[($memptr$offset + 6) >> 1] = HEAP16[($call + 6) >> 1] | 0;
    HEAP16[($memptr$offset + 8) >> 1] = HEAP16[($call + 8) >> 1] | 0;
    HEAP16[($memptr$offset + 10) >> 1] = HEAP16[($call + 10) >> 1] | 0;
    HEAP16[($memptr$offset + 12) >> 1] = HEAP16[($call + 12) >> 1] | 0;
    HEAP16[($memptr$offset + 14) >> 1] = HEAP16[($call + 14) >> 1] | 0;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIM6PacketNS2_9DailyInfoEEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIN6Packet9DailyInfoEE10toWireTypeERKS3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $call = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $call = __Znwm(16) | 0;
    $0 = $v$addr;
    HEAP16[$call >> 1] = HEAP16[$0 >> 1] | 0;
    HEAP16[($call + 2) >> 1] = HEAP16[($0 + 2) >> 1] | 0;
    HEAP16[($call + 4) >> 1] = HEAP16[($0 + 4) >> 1] | 0;
    HEAP16[($call + 6) >> 1] = HEAP16[($0 + 6) >> 1] | 0;
    HEAP16[($call + 8) >> 1] = HEAP16[($0 + 8) >> 1] | 0;
    HEAP16[($call + 10) >> 1] = HEAP16[($0 + 10) >> 1] | 0;
    HEAP16[($call + 12) >> 1] = HEAP16[($0 + 12) >> 1] | 0;
    HEAP16[($call + 14) >> 1] = HEAP16[($0 + 14) >> 1] | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIN6Packet9DailyInfoEE12fromWireTypeEPS3_(
    $p
  ) {
    $p = $p | 0;
    var $0 = 0,
      $p$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $p$addr = $p;
    $0 = $p$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_11JourneyInfoEE7getWireIS2_EEPS3_RKMS2_S3_RKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIN6Packet11JourneyInfoEE10toWireTypeERKS3_(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_11JourneyInfoEE7setWireIS2_EEvRKMS2_S3_RT_PS3_(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIN6Packet11JourneyInfoEE12fromWireTypeEPS3_(
        $0
      ) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP16[$memptr$offset >> 1] = HEAP16[$call >> 1] | 0;
    HEAP16[($memptr$offset + 2) >> 1] = HEAP16[($call + 2) >> 1] | 0;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIM6PacketNS2_11JourneyInfoEEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIN6Packet11JourneyInfoEE10toWireTypeERKS3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $call = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $call = __Znwm(4) | 0;
    $0 = $v$addr;
    HEAP16[$call >> 1] = HEAP16[$0 >> 1] | 0;
    HEAP16[($call + 2) >> 1] = HEAP16[($0 + 2) >> 1] | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIN6Packet11JourneyInfoEE12fromWireTypeEPS3_(
    $p
  ) {
    $p = $p | 0;
    var $0 = 0,
      $p$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $p$addr = $p;
    $0 = $p$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_9MotorInfoEE7getWireIS2_EEPS3_RKMS2_S3_RKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIN6Packet9MotorInfoEE10toWireTypeERKS3_(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_9MotorInfoEE7setWireIS2_EEvRKMS2_S3_RT_PS3_(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIN6Packet9MotorInfoEE12fromWireTypeEPS3_(
        $0
      ) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP32[$memptr$offset >> 2] = HEAP32[$call >> 2] | 0;
    HEAP32[($memptr$offset + 4) >> 2] = HEAP32[($call + 4) >> 2] | 0;
    HEAP32[($memptr$offset + 8) >> 2] = HEAP32[($call + 8) >> 2] | 0;
    HEAP32[($memptr$offset + 12) >> 2] = HEAP32[($call + 12) >> 2] | 0;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIM6PacketNS2_9MotorInfoEEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIN6Packet9MotorInfoEE10toWireTypeERKS3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $call = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $call = __Znwm(16) | 0;
    $0 = $v$addr;
    HEAP32[$call >> 2] = HEAP32[$0 >> 2] | 0;
    HEAP32[($call + 4) >> 2] = HEAP32[($0 + 4) >> 2] | 0;
    HEAP32[($call + 8) >> 2] = HEAP32[($0 + 8) >> 2] | 0;
    HEAP32[($call + 12) >> 2] = HEAP32[($0 + 12) >> 2] | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIN6Packet9MotorInfoEE12fromWireTypeEPS3_(
    $p
  ) {
    $p = $p | 0;
    var $0 = 0,
      $p$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $p$addr = $p;
    $0 = $p$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_8TimeInfoEE7getWireIS2_EEPS3_RKMS2_S3_RKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIN6Packet8TimeInfoEE10toWireTypeERKS3_(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_8TimeInfoEE7setWireIS2_EEvRKMS2_S3_RT_PS3_(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIN6Packet8TimeInfoEE12fromWireTypeEPS3_(
        $0
      ) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP16[$memptr$offset >> 1] = HEAP16[$call >> 1] | 0;
    HEAP16[($memptr$offset + 2) >> 1] = HEAP16[($call + 2) >> 1] | 0;
    HEAP16[($memptr$offset + 4) >> 1] = HEAP16[($call + 4) >> 1] | 0;
    HEAP16[($memptr$offset + 6) >> 1] = HEAP16[($call + 6) >> 1] | 0;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIM6PacketNS2_8TimeInfoEEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIN6Packet8TimeInfoEE10toWireTypeERKS3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $call = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $call = __Znwm(8) | 0;
    $0 = $v$addr;
    HEAP16[$call >> 1] = HEAP16[$0 >> 1] | 0;
    HEAP16[($call + 2) >> 1] = HEAP16[($0 + 2) >> 1] | 0;
    HEAP16[($call + 4) >> 1] = HEAP16[($0 + 4) >> 1] | 0;
    HEAP16[($call + 6) >> 1] = HEAP16[($0 + 6) >> 1] | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIN6Packet8TimeInfoEE12fromWireTypeEPS3_(
    $p
  ) {
    $p = $p | 0;
    var $0 = 0,
      $p$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $p$addr = $p;
    $0 = $p$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_10DeviceInfoEE7getWireIS2_EEPS3_RKMS2_S3_RKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIN6Packet10DeviceInfoEE10toWireTypeERKS3_(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_10DeviceInfoEE7setWireIS2_EEvRKMS2_S3_RT_PS3_(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIN6Packet10DeviceInfoEE12fromWireTypeEPS3_(
        $0
      ) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = HEAP8[$call >> 0] | 0;
    HEAP8[($memptr$offset + 1) >> 0] = HEAP8[($call + 1) >> 0] | 0;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIM6PacketNS2_10DeviceInfoEEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIN6Packet10DeviceInfoEE10toWireTypeERKS3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $call = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $call = __Znwm(2) | 0;
    $0 = $v$addr;
    HEAP8[$call >> 0] = HEAP8[$0 >> 0] | 0;
    HEAP8[($call + 1) >> 0] = HEAP8[($0 + 1) >> 0] | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIN6Packet10DeviceInfoEE12fromWireTypeEPS3_(
    $p
  ) {
    $p = $p | 0;
    var $0 = 0,
      $p$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $p$addr = $p;
    $0 = $p$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_9ErrorInfoEE7getWireIS2_EEPS3_RKMS2_S3_RKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIN6Packet9ErrorInfoEE10toWireTypeERKS3_(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_9ErrorInfoEE7setWireIS2_EEvRKMS2_S3_RT_PS3_(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIN6Packet9ErrorInfoEE12fromWireTypeEPS3_(
        $0
      ) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP16[$memptr$offset >> 1] = HEAP16[$call >> 1] | 0;
    HEAP16[($memptr$offset + 2) >> 1] = HEAP16[($call + 2) >> 1] | 0;
    HEAP16[($memptr$offset + 4) >> 1] = HEAP16[($call + 4) >> 1] | 0;
    HEAP16[($memptr$offset + 6) >> 1] = HEAP16[($call + 6) >> 1] | 0;
    HEAP16[($memptr$offset + 8) >> 1] = HEAP16[($call + 8) >> 1] | 0;
    HEAP16[($memptr$offset + 10) >> 1] = HEAP16[($call + 10) >> 1] | 0;
    HEAP16[($memptr$offset + 12) >> 1] = HEAP16[($call + 12) >> 1] | 0;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIM6PacketNS2_9ErrorInfoEEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIN6Packet9ErrorInfoEE10toWireTypeERKS3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $call = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $call = __Znwm(14) | 0;
    $0 = $v$addr;
    HEAP16[$call >> 1] = HEAP16[$0 >> 1] | 0;
    HEAP16[($call + 2) >> 1] = HEAP16[($0 + 2) >> 1] | 0;
    HEAP16[($call + 4) >> 1] = HEAP16[($0 + 4) >> 1] | 0;
    HEAP16[($call + 6) >> 1] = HEAP16[($0 + 6) >> 1] | 0;
    HEAP16[($call + 8) >> 1] = HEAP16[($0 + 8) >> 1] | 0;
    HEAP16[($call + 10) >> 1] = HEAP16[($0 + 10) >> 1] | 0;
    HEAP16[($call + 12) >> 1] = HEAP16[($0 + 12) >> 1] | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIN6Packet9ErrorInfoEE12fromWireTypeEPS3_(
    $p
  ) {
    $p = $p | 0;
    var $0 = 0,
      $p$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $p$addr = $p;
    $0 = $p$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_11BatteryInfoEE7getWireIS2_EEPS3_RKMS2_S3_RKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIN6Packet11BatteryInfoEE10toWireTypeERKS3_(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_11BatteryInfoEE7setWireIS2_EEvRKMS2_S3_RT_PS3_(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIN6Packet11BatteryInfoEE12fromWireTypeEPS3_(
        $0
      ) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP8[$memptr$offset >> 0] = HEAP8[$call >> 0] | 0;
    HEAP8[($memptr$offset + 1) >> 0] = HEAP8[($call + 1) >> 0] | 0;
    HEAP8[($memptr$offset + 2) >> 0] = HEAP8[($call + 2) >> 0] | 0;
    HEAP8[($memptr$offset + 3) >> 0] = HEAP8[($call + 3) >> 0] | 0;
    HEAP8[($memptr$offset + 4) >> 0] = HEAP8[($call + 4) >> 0] | 0;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal6TypeIDIN6Packet11BatteryInfoEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDIN6Packet11BatteryInfoEE3getEv() |
      0;
    return $call | 0;
  }
  function __ZN10emscripten8internal10getContextIM6PacketNS2_11BatteryInfoEEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIN6Packet11BatteryInfoEE10toWireTypeERKS3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $call = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $call = __Znwm(5) | 0;
    $0 = $v$addr;
    HEAP8[$call >> 0] = HEAP8[$0 >> 0] | 0;
    HEAP8[($call + 1) >> 0] = HEAP8[($0 + 1) >> 0] | 0;
    HEAP8[($call + 2) >> 0] = HEAP8[($0 + 2) >> 0] | 0;
    HEAP8[($call + 3) >> 0] = HEAP8[($0 + 3) >> 0] | 0;
    HEAP8[($call + 4) >> 0] = HEAP8[($0 + 4) >> 0] | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIN6Packet11BatteryInfoEE12fromWireTypeEPS3_(
    $p
  ) {
    $p = $p | 0;
    var $0 = 0,
      $p$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $p$addr = $p;
    $0 = $p$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIN6Packet11BatteryInfoEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 864 | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_12DistanceInfoEE7getWireIS2_EEPS3_RKMS2_S3_RKT_(
    $field,
    $ptr
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $field$addr;
    $2 = HEAP32[$1 >> 2] | 0;
    $memptr$offset = ($0 + $2) | 0;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIN6Packet12DistanceInfoEE10toWireTypeERKS3_(
        $memptr$offset
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12MemberAccessI6PacketNS2_12DistanceInfoEE7setWireIS2_EEvRKMS2_S3_RT_PS3_(
    $field,
    $ptr,
    $value
  ) {
    $field = $field | 0;
    $ptr = $ptr | 0;
    $value = $value | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $call = 0,
      $field$addr = 0,
      $memptr$offset = 0,
      $ptr$addr = 0,
      $value$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $field$addr = $field;
    $ptr$addr = $ptr;
    $value$addr = $value;
    $0 = $value$addr;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeIN6Packet12DistanceInfoEE12fromWireTypeEPS3_(
        $0
      ) | 0;
    $1 = $ptr$addr;
    $2 = $field$addr;
    $3 = HEAP32[$2 >> 2] | 0;
    $memptr$offset = ($1 + $3) | 0;
    HEAP32[$memptr$offset >> 2] = HEAP32[$call >> 2] | 0;
    HEAP32[($memptr$offset + 4) >> 2] = HEAP32[($call + 4) >> 2] | 0;
    HEAP32[($memptr$offset + 8) >> 2] = HEAP32[($call + 8) >> 2] | 0;
    HEAP32[($memptr$offset + 12) >> 2] = HEAP32[($call + 12) >> 2] | 0;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIM6PacketNS2_12DistanceInfoEEEPT_RKS5_(
    $t
  ) {
    $t = $t | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(4) | 0;
    $0 = $t$addr;
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[$call >> 2] = $1;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIN6Packet12DistanceInfoEE10toWireTypeERKS3_(
    $v
  ) {
    $v = $v | 0;
    var $0 = 0,
      $call = 0,
      $v$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $v$addr = $v;
    $call = __Znwm(16) | 0;
    $0 = $v$addr;
    HEAP32[$call >> 2] = HEAP32[$0 >> 2] | 0;
    HEAP32[($call + 4) >> 2] = HEAP32[($0 + 4) >> 2] | 0;
    HEAP32[($call + 8) >> 2] = HEAP32[($0 + 8) >> 2] | 0;
    HEAP32[($call + 12) >> 2] = HEAP32[($0 + 12) >> 2] | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal18GenericBindingTypeIN6Packet12DistanceInfoEE12fromWireTypeEPS3_(
    $p
  ) {
    $p = $p | 0;
    var $0 = 0,
      $p$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $p$addr = $p;
    $0 = $p$addr;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN10emscripten8internal12GetterPolicyIM6PacketKFivEE3getIS2_EEiRKS4_RKT_(
    $context,
    $ptr
  ) {
    $context = $context | 0;
    $ptr = $ptr | 0;
    var $$field = 0,
      $$field2 = 0,
      $$index1 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $call = 0,
      $call1 = 0,
      $context$addr = 0,
      $memptr$adj$shifted = 0,
      $memptr$isvirtual = 0,
      $memptr$nonvirtualfn = 0,
      $memptr$virtualfn = 0,
      $ptr$addr = 0,
      $ref$tmp = 0,
      $vtable = 0,
      label = 0;
    var sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ref$tmp = sp;
    $context$addr = $context;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $context$addr;
    $$field = HEAP32[$1 >> 2] | 0;
    $$index1 = ($1 + 4) | 0;
    $$field2 = HEAP32[$$index1 >> 2] | 0;
    $memptr$adj$shifted = $$field2 >> 1;
    $2 = ($0 + $memptr$adj$shifted) | 0;
    $3 = $$field2 & 1;
    $memptr$isvirtual = ($3 | 0) != 0;
    if ($memptr$isvirtual) {
      $vtable = HEAP32[$2 >> 2] | 0;
      $4 = ($vtable + $$field) | 0;
      $memptr$virtualfn = HEAP32[$4 >> 2] | 0;
      $5 = $memptr$virtualfn;
    } else {
      $memptr$nonvirtualfn = $$field;
      $5 = $memptr$nonvirtualfn;
    }
    $call = FUNCTION_TABLE_ii[$5 & 511]($2) | 0;
    HEAP32[$ref$tmp >> 2] = $call;
    $call1 =
      __ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($ref$tmp) | 0;
    STACKTOP = sp;
    return $call1 | 0;
  }
  function __ZN10emscripten8internal12SetterPolicyIM6PacketFviEE3setIS2_EEvRKS4_RT_i(
    $context,
    $ptr,
    $wt
  ) {
    $context = $context | 0;
    $ptr = $ptr | 0;
    $wt = $wt | 0;
    var $$field = 0,
      $$field2 = 0,
      $$index1 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $call = 0,
      $context$addr = 0,
      $memptr$adj$shifted = 0,
      $memptr$isvirtual = 0,
      $memptr$nonvirtualfn = 0,
      $memptr$virtualfn = 0,
      $ptr$addr = 0,
      $vtable = 0,
      $wt$addr = 0,
      label = 0;
    var sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $context$addr = $context;
    $ptr$addr = $ptr;
    $wt$addr = $wt;
    $0 = $ptr$addr;
    $1 = $context$addr;
    $$field = HEAP32[$1 >> 2] | 0;
    $$index1 = ($1 + 4) | 0;
    $$field2 = HEAP32[$$index1 >> 2] | 0;
    $memptr$adj$shifted = $$field2 >> 1;
    $2 = ($0 + $memptr$adj$shifted) | 0;
    $3 = $$field2 & 1;
    $memptr$isvirtual = ($3 | 0) != 0;
    if ($memptr$isvirtual) {
      $vtable = HEAP32[$2 >> 2] | 0;
      $4 = ($vtable + $$field) | 0;
      $memptr$virtualfn = HEAP32[$4 >> 2] | 0;
      $6 = $memptr$virtualfn;
    } else {
      $memptr$nonvirtualfn = $$field;
      $6 = $memptr$nonvirtualfn;
    }
    $5 = $wt$addr;
    $call = __ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($5) | 0;
    FUNCTION_TABLE_vii[$6 & 511]($2, $call);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal12GetterPolicyIM6PacketKFivEE10getContextES4_(
    $0
  ) {
    $0 = $0 | 0;
    var $call = 0,
      $context$addr = 0,
      $context$addr$index4 = 0,
      $context$field = 0,
      $context$field2 = 0,
      $context$index1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $context$addr = sp;
    $context$field = HEAP32[$0 >> 2] | 0;
    $context$index1 = ($0 + 4) | 0;
    $context$field2 = HEAP32[$context$index1 >> 2] | 0;
    HEAP32[$context$addr >> 2] = $context$field;
    $context$addr$index4 = ($context$addr + 4) | 0;
    HEAP32[$context$addr$index4 >> 2] = $context$field2;
    $call =
      __ZN10emscripten8internal10getContextIM6PacketKFivEEEPT_RKS5_(
        $context$addr
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12SetterPolicyIM6PacketFviEE10getContextES4_(
    $0
  ) {
    $0 = $0 | 0;
    var $call = 0,
      $context$addr = 0,
      $context$addr$index4 = 0,
      $context$field = 0,
      $context$field2 = 0,
      $context$index1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $context$addr = sp;
    $context$field = HEAP32[$0 >> 2] | 0;
    $context$index1 = ($0 + 4) | 0;
    $context$field2 = HEAP32[$context$index1 >> 2] | 0;
    HEAP32[$context$addr >> 2] = $context$field;
    $context$addr$index4 = ($context$addr + 4) | 0;
    HEAP32[$context$addr$index4 >> 2] = $context$field2;
    $call =
      __ZN10emscripten8internal10getContextIM6PacketFviEEEPT_RKS5_(
        $context$addr
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal10getContextIM6PacketKFivEEEPT_RKS5_($t) {
    $t = $t | 0;
    var $$field = 0,
      $$field2 = 0,
      $$index1 = 0,
      $$index5 = 0,
      $0 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(8) | 0;
    $0 = $t$addr;
    $$field = HEAP32[$0 >> 2] | 0;
    $$index1 = ($0 + 4) | 0;
    $$field2 = HEAP32[$$index1 >> 2] | 0;
    HEAP32[$call >> 2] = $$field;
    $$index5 = ($call + 4) | 0;
    HEAP32[$$index5 >> 2] = $$field2;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal10getContextIM6PacketFviEEEPT_RKS5_($t) {
    $t = $t | 0;
    var $$field = 0,
      $$field2 = 0,
      $$index1 = 0,
      $$index5 = 0,
      $0 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(8) | 0;
    $0 = $t$addr;
    $$field = HEAP32[$0 >> 2] | 0;
    $$index1 = ($0 + 4) | 0;
    $$field2 = HEAP32[$$index1 >> 2] | 0;
    HEAP32[$call >> 2] = $$field;
    $$index5 = ($call + 4) | 0;
    HEAP32[$$index5 >> 2] = $$field2;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12GetterPolicyIM6PacketKFNSt3__26vectorIhNS3_9allocatorIhEEEEvEE3getIS2_EEPS7_RKS9_RKT_(
    $context,
    $ptr
  ) {
    $context = $context | 0;
    $ptr = $ptr | 0;
    var $$addr$i$i$i = 0,
      $$addr1$i$i$i = 0,
      $$addr2$i$i$i = 0,
      $$addr3$i$i$i = 0,
      $$field = 0,
      $$field2 = 0,
      $$index1 = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0;
    var $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $__end_$i$i$i = 0,
      $__end_cap_$i$i$i$i$i = 0,
      $__end_cap_$i$i$i32$i$i = 0,
      $__p$addr$i$i$i$i = 0,
      $__p$addr$i$i13$i$i = 0,
      $__p$addr$i$i20$i$i = 0,
      $__p$addr$i$i40$i$i = 0,
      $add$ptr$i$i = 0,
      $add$ptr6$i$i = 0,
      $add$ptr9$i$i = 0,
      $call = 0,
      $context$addr = 0,
      $memptr$adj$shifted = 0;
    var $memptr$isvirtual = 0,
      $memptr$nonvirtualfn = 0,
      $memptr$virtualfn = 0,
      $ptr$addr = 0,
      $ref$tmp = 0,
      $sub$ptr$lhs$cast$i$i$i = 0,
      $sub$ptr$lhs$cast$i$i$i$i = 0,
      $sub$ptr$lhs$cast$i$i37$i$i = 0,
      $sub$ptr$rhs$cast$i$i$i = 0,
      $sub$ptr$rhs$cast$i$i$i$i = 0,
      $sub$ptr$rhs$cast$i$i38$i$i = 0,
      $sub$ptr$sub$i$i$i = 0,
      $sub$ptr$sub$i$i$i$i = 0,
      $sub$ptr$sub$i$i39$i$i = 0,
      $this$addr$i = 0,
      $this$addr$i$i = 0,
      $this$addr$i$i$i = 0,
      $this$addr$i$i$i$i = 0,
      $this$addr$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i$i = 0;
    var $this$addr$i$i$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i24$i$i = 0,
      $this$addr$i$i$i$i25$i$i = 0,
      $this$addr$i$i$i26$i$i = 0,
      $this$addr$i$i27$i$i = 0,
      $this$addr$i10$i$i = 0,
      $this$addr$i11$i$i = 0,
      $this$addr$i14$i$i = 0,
      $this$addr$i17$i$i = 0,
      $this$addr$i21$i$i = 0,
      $this$addr$i28$i$i = 0,
      $this$addr$i41$i$i = 0,
      $this1$i = 0,
      $this1$i$i = 0,
      $this1$i$i$i = 0,
      $this1$i$i$i$i = 0,
      $this1$i$i$i$i$i = 0,
      $this1$i$i$i$i$i$i = 0,
      $this1$i$i$i$i$i$i$i = 0,
      $this1$i$i$i$i$i34$i$i = 0;
    var $this1$i$i$i$i33$i$i = 0,
      $this1$i$i$i31$i$i = 0,
      $this1$i$i30$i$i = 0,
      $this1$i12$i$i = 0,
      $this1$i15$i$i = 0,
      $this1$i18$i$i = 0,
      $this1$i22$i$i = 0,
      $this1$i29$i$i = 0,
      $this1$i42$i$i = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 128) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
    $ref$tmp = sp;
    $context$addr = $context;
    $ptr$addr = $ptr;
    $0 = $ptr$addr;
    $1 = $context$addr;
    $$field = HEAP32[$1 >> 2] | 0;
    $$index1 = ($1 + 4) | 0;
    $$field2 = HEAP32[$$index1 >> 2] | 0;
    $memptr$adj$shifted = $$field2 >> 1;
    $2 = ($0 + $memptr$adj$shifted) | 0;
    $3 = $$field2 & 1;
    $memptr$isvirtual = ($3 | 0) != 0;
    if ($memptr$isvirtual) {
      $vtable = HEAP32[$2 >> 2] | 0;
      $4 = ($vtable + $$field) | 0;
      $memptr$virtualfn = HEAP32[$4 >> 2] | 0;
      $5 = $memptr$virtualfn;
    } else {
      $memptr$nonvirtualfn = $$field;
      $5 = $memptr$nonvirtualfn;
    }
    FUNCTION_TABLE_vii[$5 & 511]($ref$tmp, $2);
    $call =
      __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIhNS2_9allocatorIhEEEEE10toWireTypeEOS6_(
        $ref$tmp
      ) | 0;
    $this$addr$i = $ref$tmp;
    $this1$i = $this$addr$i;
    $this$addr$i$i = $this1$i;
    $this1$i$i = $this$addr$i$i;
    $this$addr$i$i$i = $this1$i$i;
    $this1$i$i$i = $this$addr$i$i$i;
    $6 = HEAP32[$this1$i$i$i >> 2] | 0;
    $__p$addr$i$i$i$i = $6;
    $7 = $__p$addr$i$i$i$i;
    $this$addr$i41$i$i = $this1$i$i;
    $this1$i42$i$i = $this$addr$i41$i$i;
    $8 = HEAP32[$this1$i42$i$i >> 2] | 0;
    $__p$addr$i$i40$i$i = $8;
    $9 = $__p$addr$i$i40$i$i;
    $this$addr$i28$i$i = $this1$i$i;
    $this1$i29$i$i = $this$addr$i28$i$i;
    $this$addr$i$i27$i$i = $this1$i29$i$i;
    $this1$i$i30$i$i = $this$addr$i$i27$i$i;
    $this$addr$i$i$i26$i$i = $this1$i$i30$i$i;
    $this1$i$i$i31$i$i = $this$addr$i$i$i26$i$i;
    $__end_cap_$i$i$i32$i$i = ($this1$i$i$i31$i$i + 8) | 0;
    $this$addr$i$i$i$i25$i$i = $__end_cap_$i$i$i32$i$i;
    $this1$i$i$i$i33$i$i = $this$addr$i$i$i$i25$i$i;
    $this$addr$i$i$i$i$i24$i$i = $this1$i$i$i$i33$i$i;
    $this1$i$i$i$i$i34$i$i = $this$addr$i$i$i$i$i24$i$i;
    $10 = HEAP32[$this1$i$i$i$i$i34$i$i >> 2] | 0;
    $11 = HEAP32[$this1$i$i30$i$i >> 2] | 0;
    $sub$ptr$lhs$cast$i$i37$i$i = $10;
    $sub$ptr$rhs$cast$i$i38$i$i = $11;
    $sub$ptr$sub$i$i39$i$i =
      ($sub$ptr$lhs$cast$i$i37$i$i - $sub$ptr$rhs$cast$i$i38$i$i) | 0;
    $add$ptr$i$i = ($9 + $sub$ptr$sub$i$i39$i$i) | 0;
    $this$addr$i21$i$i = $this1$i$i;
    $this1$i22$i$i = $this$addr$i21$i$i;
    $12 = HEAP32[$this1$i22$i$i >> 2] | 0;
    $__p$addr$i$i20$i$i = $12;
    $13 = $__p$addr$i$i20$i$i;
    $this$addr$i17$i$i = $this1$i$i;
    $this1$i18$i$i = $this$addr$i17$i$i;
    $__end_$i$i$i = ($this1$i18$i$i + 4) | 0;
    $14 = HEAP32[$__end_$i$i$i >> 2] | 0;
    $15 = HEAP32[$this1$i18$i$i >> 2] | 0;
    $sub$ptr$lhs$cast$i$i$i = $14;
    $sub$ptr$rhs$cast$i$i$i = $15;
    $sub$ptr$sub$i$i$i =
      ($sub$ptr$lhs$cast$i$i$i - $sub$ptr$rhs$cast$i$i$i) | 0;
    $add$ptr6$i$i = ($13 + $sub$ptr$sub$i$i$i) | 0;
    $this$addr$i14$i$i = $this1$i$i;
    $this1$i15$i$i = $this$addr$i14$i$i;
    $16 = HEAP32[$this1$i15$i$i >> 2] | 0;
    $__p$addr$i$i13$i$i = $16;
    $17 = $__p$addr$i$i13$i$i;
    $this$addr$i11$i$i = $this1$i$i;
    $this1$i12$i$i = $this$addr$i11$i$i;
    $this$addr$i$i$i$i = $this1$i12$i$i;
    $this1$i$i$i$i = $this$addr$i$i$i$i;
    $this$addr$i$i$i$i$i = $this1$i$i$i$i;
    $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
    $__end_cap_$i$i$i$i$i = ($this1$i$i$i$i$i + 8) | 0;
    $this$addr$i$i$i$i$i$i = $__end_cap_$i$i$i$i$i;
    $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
    $this$addr$i$i$i$i$i$i$i = $this1$i$i$i$i$i$i;
    $this1$i$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i$i;
    $18 = HEAP32[$this1$i$i$i$i$i$i$i >> 2] | 0;
    $19 = HEAP32[$this1$i$i$i$i >> 2] | 0;
    $sub$ptr$lhs$cast$i$i$i$i = $18;
    $sub$ptr$rhs$cast$i$i$i$i = $19;
    $sub$ptr$sub$i$i$i$i =
      ($sub$ptr$lhs$cast$i$i$i$i - $sub$ptr$rhs$cast$i$i$i$i) | 0;
    $add$ptr9$i$i = ($17 + $sub$ptr$sub$i$i$i$i) | 0;
    $this$addr$i10$i$i = $this1$i$i;
    $$addr$i$i$i = $7;
    $$addr1$i$i$i = $add$ptr$i$i;
    $$addr2$i$i$i = $add$ptr6$i$i;
    $$addr3$i$i$i = $add$ptr9$i$i;
    __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($this1$i);
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12SetterPolicyIM6PacketFvNSt3__26vectorIhNS3_9allocatorIhEEEEEE3setIS2_EEvRKS9_RT_PS7_(
    $context,
    $ptr,
    $wt
  ) {
    $context = $context | 0;
    $ptr = $ptr | 0;
    $wt = $wt | 0;
    var $$addr$i$i$i = 0,
      $$addr1$i$i$i = 0,
      $$addr2$i$i$i = 0,
      $$addr3$i$i$i = 0,
      $$field = 0,
      $$field2 = 0,
      $$index1 = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0;
    var $20 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $__end_$i$i$i = 0,
      $__end_cap_$i$i$i$i$i = 0,
      $__end_cap_$i$i$i32$i$i = 0,
      $__p$addr$i$i$i$i = 0,
      $__p$addr$i$i13$i$i = 0,
      $__p$addr$i$i20$i$i = 0,
      $__p$addr$i$i40$i$i = 0,
      $add$ptr$i$i = 0,
      $add$ptr6$i$i = 0,
      $add$ptr9$i$i = 0,
      $agg$tmp = 0,
      $call = 0;
    var $context$addr = 0,
      $memptr$adj$shifted = 0,
      $memptr$isvirtual = 0,
      $memptr$nonvirtualfn = 0,
      $memptr$virtualfn = 0,
      $ptr$addr = 0,
      $sub$ptr$lhs$cast$i$i$i = 0,
      $sub$ptr$lhs$cast$i$i$i$i = 0,
      $sub$ptr$lhs$cast$i$i37$i$i = 0,
      $sub$ptr$rhs$cast$i$i$i = 0,
      $sub$ptr$rhs$cast$i$i$i$i = 0,
      $sub$ptr$rhs$cast$i$i38$i$i = 0,
      $sub$ptr$sub$i$i$i = 0,
      $sub$ptr$sub$i$i$i$i = 0,
      $sub$ptr$sub$i$i39$i$i = 0,
      $this$addr$i = 0,
      $this$addr$i$i = 0,
      $this$addr$i$i$i = 0,
      $this$addr$i$i$i$i = 0,
      $this$addr$i$i$i$i$i = 0;
    var $this$addr$i$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i24$i$i = 0,
      $this$addr$i$i$i$i25$i$i = 0,
      $this$addr$i$i$i26$i$i = 0,
      $this$addr$i$i27$i$i = 0,
      $this$addr$i10$i$i = 0,
      $this$addr$i11$i$i = 0,
      $this$addr$i14$i$i = 0,
      $this$addr$i17$i$i = 0,
      $this$addr$i21$i$i = 0,
      $this$addr$i28$i$i = 0,
      $this$addr$i41$i$i = 0,
      $this1$i = 0,
      $this1$i$i = 0,
      $this1$i$i$i = 0,
      $this1$i$i$i$i = 0,
      $this1$i$i$i$i$i = 0,
      $this1$i$i$i$i$i$i = 0,
      $this1$i$i$i$i$i$i$i = 0;
    var $this1$i$i$i$i$i34$i$i = 0,
      $this1$i$i$i$i33$i$i = 0,
      $this1$i$i$i31$i$i = 0,
      $this1$i$i30$i$i = 0,
      $this1$i12$i$i = 0,
      $this1$i15$i$i = 0,
      $this1$i18$i$i = 0,
      $this1$i22$i$i = 0,
      $this1$i29$i$i = 0,
      $this1$i42$i$i = 0,
      $vtable = 0,
      $wt$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 128) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
    $agg$tmp = sp;
    $context$addr = $context;
    $ptr$addr = $ptr;
    $wt$addr = $wt;
    $0 = $ptr$addr;
    $1 = $context$addr;
    $$field = HEAP32[$1 >> 2] | 0;
    $$index1 = ($1 + 4) | 0;
    $$field2 = HEAP32[$$index1 >> 2] | 0;
    $memptr$adj$shifted = $$field2 >> 1;
    $2 = ($0 + $memptr$adj$shifted) | 0;
    $3 = $$field2 & 1;
    $memptr$isvirtual = ($3 | 0) != 0;
    if ($memptr$isvirtual) {
      $vtable = HEAP32[$2 >> 2] | 0;
      $4 = ($vtable + $$field) | 0;
      $memptr$virtualfn = HEAP32[$4 >> 2] | 0;
      $6 = $memptr$virtualfn;
    } else {
      $memptr$nonvirtualfn = $$field;
      $6 = $memptr$nonvirtualfn;
    }
    $5 = $wt$addr;
    $call =
      __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIhNS2_9allocatorIhEEEEE12fromWireTypeEPS6_(
        $5
      ) | 0;
    __ZNSt3__26vectorIhNS_9allocatorIhEEEC2ERKS3_($agg$tmp, $call);
    FUNCTION_TABLE_vii[$6 & 511]($2, $agg$tmp);
    $this$addr$i = $agg$tmp;
    $this1$i = $this$addr$i;
    $this$addr$i$i = $this1$i;
    $this1$i$i = $this$addr$i$i;
    $this$addr$i$i$i = $this1$i$i;
    $this1$i$i$i = $this$addr$i$i$i;
    $7 = HEAP32[$this1$i$i$i >> 2] | 0;
    $__p$addr$i$i$i$i = $7;
    $8 = $__p$addr$i$i$i$i;
    $this$addr$i41$i$i = $this1$i$i;
    $this1$i42$i$i = $this$addr$i41$i$i;
    $9 = HEAP32[$this1$i42$i$i >> 2] | 0;
    $__p$addr$i$i40$i$i = $9;
    $10 = $__p$addr$i$i40$i$i;
    $this$addr$i28$i$i = $this1$i$i;
    $this1$i29$i$i = $this$addr$i28$i$i;
    $this$addr$i$i27$i$i = $this1$i29$i$i;
    $this1$i$i30$i$i = $this$addr$i$i27$i$i;
    $this$addr$i$i$i26$i$i = $this1$i$i30$i$i;
    $this1$i$i$i31$i$i = $this$addr$i$i$i26$i$i;
    $__end_cap_$i$i$i32$i$i = ($this1$i$i$i31$i$i + 8) | 0;
    $this$addr$i$i$i$i25$i$i = $__end_cap_$i$i$i32$i$i;
    $this1$i$i$i$i33$i$i = $this$addr$i$i$i$i25$i$i;
    $this$addr$i$i$i$i$i24$i$i = $this1$i$i$i$i33$i$i;
    $this1$i$i$i$i$i34$i$i = $this$addr$i$i$i$i$i24$i$i;
    $11 = HEAP32[$this1$i$i$i$i$i34$i$i >> 2] | 0;
    $12 = HEAP32[$this1$i$i30$i$i >> 2] | 0;
    $sub$ptr$lhs$cast$i$i37$i$i = $11;
    $sub$ptr$rhs$cast$i$i38$i$i = $12;
    $sub$ptr$sub$i$i39$i$i =
      ($sub$ptr$lhs$cast$i$i37$i$i - $sub$ptr$rhs$cast$i$i38$i$i) | 0;
    $add$ptr$i$i = ($10 + $sub$ptr$sub$i$i39$i$i) | 0;
    $this$addr$i21$i$i = $this1$i$i;
    $this1$i22$i$i = $this$addr$i21$i$i;
    $13 = HEAP32[$this1$i22$i$i >> 2] | 0;
    $__p$addr$i$i20$i$i = $13;
    $14 = $__p$addr$i$i20$i$i;
    $this$addr$i17$i$i = $this1$i$i;
    $this1$i18$i$i = $this$addr$i17$i$i;
    $__end_$i$i$i = ($this1$i18$i$i + 4) | 0;
    $15 = HEAP32[$__end_$i$i$i >> 2] | 0;
    $16 = HEAP32[$this1$i18$i$i >> 2] | 0;
    $sub$ptr$lhs$cast$i$i$i = $15;
    $sub$ptr$rhs$cast$i$i$i = $16;
    $sub$ptr$sub$i$i$i =
      ($sub$ptr$lhs$cast$i$i$i - $sub$ptr$rhs$cast$i$i$i) | 0;
    $add$ptr6$i$i = ($14 + $sub$ptr$sub$i$i$i) | 0;
    $this$addr$i14$i$i = $this1$i$i;
    $this1$i15$i$i = $this$addr$i14$i$i;
    $17 = HEAP32[$this1$i15$i$i >> 2] | 0;
    $__p$addr$i$i13$i$i = $17;
    $18 = $__p$addr$i$i13$i$i;
    $this$addr$i11$i$i = $this1$i$i;
    $this1$i12$i$i = $this$addr$i11$i$i;
    $this$addr$i$i$i$i = $this1$i12$i$i;
    $this1$i$i$i$i = $this$addr$i$i$i$i;
    $this$addr$i$i$i$i$i = $this1$i$i$i$i;
    $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
    $__end_cap_$i$i$i$i$i = ($this1$i$i$i$i$i + 8) | 0;
    $this$addr$i$i$i$i$i$i = $__end_cap_$i$i$i$i$i;
    $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
    $this$addr$i$i$i$i$i$i$i = $this1$i$i$i$i$i$i;
    $this1$i$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i$i;
    $19 = HEAP32[$this1$i$i$i$i$i$i$i >> 2] | 0;
    $20 = HEAP32[$this1$i$i$i$i >> 2] | 0;
    $sub$ptr$lhs$cast$i$i$i$i = $19;
    $sub$ptr$rhs$cast$i$i$i$i = $20;
    $sub$ptr$sub$i$i$i$i =
      ($sub$ptr$lhs$cast$i$i$i$i - $sub$ptr$rhs$cast$i$i$i$i) | 0;
    $add$ptr9$i$i = ($18 + $sub$ptr$sub$i$i$i$i) | 0;
    $this$addr$i10$i$i = $this1$i$i;
    $$addr$i$i$i = $8;
    $$addr1$i$i$i = $add$ptr$i$i;
    $$addr2$i$i$i = $add$ptr6$i$i;
    $$addr3$i$i$i = $add$ptr9$i$i;
    __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($this1$i);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal12GetterPolicyIM6PacketKFNSt3__26vectorIhNS3_9allocatorIhEEEEvEE10getContextES9_(
    $0
  ) {
    $0 = $0 | 0;
    var $call = 0,
      $context$addr = 0,
      $context$addr$index4 = 0,
      $context$field = 0,
      $context$field2 = 0,
      $context$index1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $context$addr = sp;
    $context$field = HEAP32[$0 >> 2] | 0;
    $context$index1 = ($0 + 4) | 0;
    $context$field2 = HEAP32[$context$index1 >> 2] | 0;
    HEAP32[$context$addr >> 2] = $context$field;
    $context$addr$index4 = ($context$addr + 4) | 0;
    HEAP32[$context$addr$index4 >> 2] = $context$field2;
    $call =
      __ZN10emscripten8internal10getContextIM6PacketKFNSt3__26vectorIhNS3_9allocatorIhEEEEvEEEPT_RKSA_(
        $context$addr
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal12SetterPolicyIM6PacketFvNSt3__26vectorIhNS3_9allocatorIhEEEEEE10getContextES9_(
    $0
  ) {
    $0 = $0 | 0;
    var $call = 0,
      $context$addr = 0,
      $context$addr$index4 = 0,
      $context$field = 0,
      $context$field2 = 0,
      $context$index1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $context$addr = sp;
    $context$field = HEAP32[$0 >> 2] | 0;
    $context$index1 = ($0 + 4) | 0;
    $context$field2 = HEAP32[$context$index1 >> 2] | 0;
    HEAP32[$context$addr >> 2] = $context$field;
    $context$addr$index4 = ($context$addr + 4) | 0;
    HEAP32[$context$addr$index4 >> 2] = $context$field2;
    $call =
      __ZN10emscripten8internal10getContextIM6PacketFvNSt3__26vectorIhNS3_9allocatorIhEEEEEEEPT_RKSA_(
        $context$addr
      ) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZNSt3__26vectorIhNS_9allocatorIhEEEC2ERKS3_($this, $__x) {
    $this = $this | 0;
    $__x = $__x | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0;
    var $__a$addr$i = 0,
      $__a$addr$i$i = 0,
      $__a$addr$i8 = 0,
      $__end_ = 0,
      $__end_$i = 0,
      $__end_$i16 = 0,
      $__end_cap_$i = 0,
      $__end_cap_$i12 = 0,
      $__n = 0,
      $__t$addr$i$i = 0,
      $__t$addr$i$i$i = 0,
      $__t$addr$i$i$i$i = 0,
      $__t$addr$i$i4$i$i = 0,
      $__t$addr$i3$i$i = 0,
      $__t1$addr$i$i = 0,
      $__t2$addr$i$i = 0,
      $__u$addr$i$i$i = 0,
      $__u$addr$i6$i$i = 0,
      $__x$addr = 0,
      $agg$tmp$i = 0;
    var $agg$tmp1$i = 0,
      $cmp = 0,
      $ref$tmp = 0,
      $ref$tmp$i9 = 0,
      $sub$ptr$lhs$cast$i = 0,
      $sub$ptr$rhs$cast$i = 0,
      $sub$ptr$sub$i = 0,
      $this$addr = 0,
      $this$addr$i = 0,
      $this$addr$i$i = 0,
      $this$addr$i$i$i = 0,
      $this$addr$i$i$i5 = 0,
      $this$addr$i$i6 = 0,
      $this$addr$i14 = 0,
      $this$addr$i3$i = 0,
      $this$addr$i5$i$i = 0,
      $this$addr$i7 = 0,
      $this1 = 0,
      $this1$i = 0,
      $this1$i$i = 0;
    var $this1$i$i$i = 0,
      $this1$i10 = 0,
      $this1$i15 = 0,
      $this1$i4$i = 0,
      $this1$i7$i$i = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 112) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112 | 0);
    $ref$tmp$i9 = (sp + 36) | 0;
    $agg$tmp1$i = sp;
    $agg$tmp$i = (sp + 105) | 0;
    $ref$tmp = (sp + 104) | 0;
    $this$addr = $this;
    $__x$addr = $__x;
    $this1 = $this$addr;
    $0 = $__x$addr;
    $this$addr$i = $0;
    $this1$i = $this$addr$i;
    $__end_cap_$i = ($this1$i + 8) | 0;
    $this$addr$i$i = $__end_cap_$i;
    $this1$i$i = $this$addr$i$i;
    $this$addr$i$i$i = $this1$i$i;
    $this1$i$i$i = $this$addr$i$i$i;
    $__a$addr$i = $this1$i$i$i;
    $1 = $__a$addr$i;
    HEAP8[$agg$tmp1$i >> 0] = HEAP8[$agg$tmp$i >> 0] | 0;
    $__a$addr$i$i = $1;
    $this$addr$i7 = $this1;
    $__a$addr$i8 = $ref$tmp;
    $this1$i10 = $this$addr$i7;
    $this$addr$i$i6 = $this1$i10;
    HEAP32[$this1$i10 >> 2] = 0;
    $__end_$i = ($this1$i10 + 4) | 0;
    HEAP32[$__end_$i >> 2] = 0;
    $__end_cap_$i12 = ($this1$i10 + 8) | 0;
    HEAP32[$ref$tmp$i9 >> 2] = 0;
    $2 = $__a$addr$i8;
    $__t$addr$i$i = $2;
    $3 = $__t$addr$i$i;
    $this$addr$i3$i = $__end_cap_$i12;
    $__t1$addr$i$i = $ref$tmp$i9;
    $__t2$addr$i$i = $3;
    $this1$i4$i = $this$addr$i3$i;
    $4 = $__t1$addr$i$i;
    $__t$addr$i$i$i = $4;
    $5 = $__t$addr$i$i$i;
    $this$addr$i5$i$i = $this1$i4$i;
    $__u$addr$i6$i$i = $5;
    $this1$i7$i$i = $this$addr$i5$i$i;
    $6 = $__u$addr$i6$i$i;
    $__t$addr$i$i4$i$i = $6;
    HEAP32[$this1$i7$i$i >> 2] = 0;
    $7 = $__t2$addr$i$i;
    $__t$addr$i3$i$i = $7;
    $8 = $__t$addr$i3$i$i;
    $this$addr$i$i$i5 = $this1$i4$i;
    $__u$addr$i$i$i = $8;
    $9 = $__u$addr$i$i$i;
    $__t$addr$i$i$i$i = $9;
    $10 = $__x$addr;
    $this$addr$i14 = $10;
    $this1$i15 = $this$addr$i14;
    $__end_$i16 = ($this1$i15 + 4) | 0;
    $11 = HEAP32[$__end_$i16 >> 2] | 0;
    $12 = HEAP32[$this1$i15 >> 2] | 0;
    $sub$ptr$lhs$cast$i = $11;
    $sub$ptr$rhs$cast$i = $12;
    $sub$ptr$sub$i = ($sub$ptr$lhs$cast$i - $sub$ptr$rhs$cast$i) | 0;
    $__n = $sub$ptr$sub$i;
    $13 = $__n;
    $cmp = $13 >>> 0 > 0;
    if (!$cmp) {
      STACKTOP = sp;
      return;
    }
    $14 = $__n;
    __ZNSt3__26vectorIhNS_9allocatorIhEEE11__vallocateEm($this1, $14);
    $15 = $__x$addr;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $__x$addr;
    $__end_ = ($17 + 4) | 0;
    $18 = HEAP32[$__end_ >> 2] | 0;
    $19 = $__n;
    __ZNSt3__26vectorIhNS_9allocatorIhEEE18__construct_at_endIPhEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_m(
      $this1,
      $16,
      $18,
      $19
    );
    STACKTOP = sp;
    return;
  }
  function __ZNSt3__26vectorIhNS_9allocatorIhEEE11__vallocateEm($this, $__n) {
    $this = $this | 0;
    $__n = $__n | 0;
    var $$addr$i$i = 0,
      $$addr$i$i21 = 0,
      $$addr1$i$i = 0,
      $$addr2$i$i = 0,
      $$addr3$i$i = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $3 = 0;
    var $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $__a$addr$i = 0,
      $__align$addr$i$i$i = 0,
      $__current_size$addr$i = 0,
      $__end_ = 0,
      $__end_cap_$i = 0,
      $__end_cap_$i$i$i$i = 0,
      $__end_cap_$i$i$i28$i = 0,
      $__end_cap_$i16 = 0,
      $__n$addr = 0,
      $__n$addr$i = 0,
      $__n$addr$i$i = 0,
      $__p$addr$i$i$i = 0,
      $__p$addr$i$i10$i = 0,
      $__p$addr$i$i16$i = 0;
    var $__p$addr$i$i36$i = 0,
      $__size$addr$i$i$i = 0,
      $add$ptr = 0,
      $add$ptr$i = 0,
      $add$ptr6$i = 0,
      $add$ptr8$i = 0,
      $call = 0,
      $call$i$i$i = 0,
      $cmp = 0,
      $sub$ptr$lhs$cast$i$i$i = 0,
      $sub$ptr$lhs$cast$i$i33$i = 0,
      $sub$ptr$rhs$cast$i$i$i = 0,
      $sub$ptr$rhs$cast$i$i34$i = 0,
      $sub$ptr$sub$i$i$i = 0,
      $sub$ptr$sub$i$i35$i = 0,
      $this$addr = 0,
      $this$addr$i = 0,
      $this$addr$i$i = 0,
      $this$addr$i$i$i = 0,
      $this$addr$i$i$i$i = 0;
    var $this$addr$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i$i = 0,
      $this$addr$i$i$i$i$i20$i = 0,
      $this$addr$i$i$i$i21$i = 0,
      $this$addr$i$i$i12 = 0,
      $this$addr$i$i$i19 = 0,
      $this$addr$i$i$i22$i = 0,
      $this$addr$i$i$i6 = 0,
      $this$addr$i$i13 = 0,
      $this$addr$i$i20 = 0,
      $this$addr$i$i23$i = 0,
      $this$addr$i$i7 = 0,
      $this$addr$i11$i = 0,
      $this$addr$i14 = 0,
      $this$addr$i14$i = 0,
      $this$addr$i17$i = 0,
      $this$addr$i24$i = 0,
      $this$addr$i37$i = 0,
      $this$addr$i8 = 0,
      $this$addr$i9$i = 0;
    var $this1 = 0,
      $this1$i = 0,
      $this1$i$i = 0,
      $this1$i$i$i = 0,
      $this1$i$i$i$i = 0,
      $this1$i$i$i$i$i = 0,
      $this1$i$i$i$i$i$i = 0,
      $this1$i$i$i$i$i30$i = 0,
      $this1$i$i$i$i29$i = 0,
      $this1$i$i$i11 = 0,
      $this1$i$i$i18 = 0,
      $this1$i$i$i27$i = 0,
      $this1$i$i10 = 0,
      $this1$i$i17 = 0,
      $this1$i$i22 = 0,
      $this1$i$i26$i = 0,
      $this1$i12$i = 0,
      $this1$i15 = 0,
      $this1$i15$i = 0,
      $this1$i18$i = 0;
    var $this1$i25$i = 0,
      $this1$i38$i = 0,
      $this1$i9 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 176) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176 | 0);
    $this$addr = $this;
    $__n$addr = $__n;
    $this1 = $this$addr;
    $0 = $__n$addr;
    $call = __ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($this1) | 0;
    $cmp = $0 >>> 0 > $call >>> 0;
    if ($cmp) {
      __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this1);
      // unreachable;
    } else {
      $this$addr$i = $this1;
      $this1$i = $this$addr$i;
      $__end_cap_$i = ($this1$i + 8) | 0;
      $this$addr$i$i = $__end_cap_$i;
      $this1$i$i = $this$addr$i$i;
      $this$addr$i$i$i = $this1$i$i;
      $this1$i$i$i = $this$addr$i$i$i;
      $1 = $__n$addr;
      $__a$addr$i = $this1$i$i$i;
      $__n$addr$i = $1;
      $2 = $__a$addr$i;
      $3 = $__n$addr$i;
      $this$addr$i$i20 = $2;
      $__n$addr$i$i = $3;
      $$addr$i$i21 = 0;
      $this1$i$i22 = $this$addr$i$i20;
      $this$addr$i$i$i19 = $this1$i$i22;
      $4 = $__n$addr$i$i;
      $__size$addr$i$i$i = $4;
      $__align$addr$i$i$i = 1;
      $5 = $__size$addr$i$i$i;
      $call$i$i$i = __Znwm($5) | 0;
      $__end_ = ($this1 + 4) | 0;
      HEAP32[$__end_ >> 2] = $call$i$i$i;
      HEAP32[$this1 >> 2] = $call$i$i$i;
      $6 = HEAP32[$this1 >> 2] | 0;
      $7 = $__n$addr;
      $add$ptr = ($6 + $7) | 0;
      $this$addr$i14 = $this1;
      $this1$i15 = $this$addr$i14;
      $__end_cap_$i16 = ($this1$i15 + 8) | 0;
      $this$addr$i$i13 = $__end_cap_$i16;
      $this1$i$i17 = $this$addr$i$i13;
      $this$addr$i$i$i12 = $this1$i$i17;
      $this1$i$i$i18 = $this$addr$i$i$i12;
      HEAP32[$this1$i$i$i18 >> 2] = $add$ptr;
      $this$addr$i8 = $this1;
      $__current_size$addr$i = 0;
      $this1$i9 = $this$addr$i8;
      $this$addr$i$i7 = $this1$i9;
      $this1$i$i10 = $this$addr$i$i7;
      $8 = HEAP32[$this1$i$i10 >> 2] | 0;
      $__p$addr$i$i$i = $8;
      $9 = $__p$addr$i$i$i;
      $this$addr$i37$i = $this1$i9;
      $this1$i38$i = $this$addr$i37$i;
      $10 = HEAP32[$this1$i38$i >> 2] | 0;
      $__p$addr$i$i36$i = $10;
      $11 = $__p$addr$i$i36$i;
      $this$addr$i24$i = $this1$i9;
      $this1$i25$i = $this$addr$i24$i;
      $this$addr$i$i23$i = $this1$i25$i;
      $this1$i$i26$i = $this$addr$i$i23$i;
      $this$addr$i$i$i22$i = $this1$i$i26$i;
      $this1$i$i$i27$i = $this$addr$i$i$i22$i;
      $__end_cap_$i$i$i28$i = ($this1$i$i$i27$i + 8) | 0;
      $this$addr$i$i$i$i21$i = $__end_cap_$i$i$i28$i;
      $this1$i$i$i$i29$i = $this$addr$i$i$i$i21$i;
      $this$addr$i$i$i$i$i20$i = $this1$i$i$i$i29$i;
      $this1$i$i$i$i$i30$i = $this$addr$i$i$i$i$i20$i;
      $12 = HEAP32[$this1$i$i$i$i$i30$i >> 2] | 0;
      $13 = HEAP32[$this1$i$i26$i >> 2] | 0;
      $sub$ptr$lhs$cast$i$i33$i = $12;
      $sub$ptr$rhs$cast$i$i34$i = $13;
      $sub$ptr$sub$i$i35$i =
        ($sub$ptr$lhs$cast$i$i33$i - $sub$ptr$rhs$cast$i$i34$i) | 0;
      $add$ptr$i = ($11 + $sub$ptr$sub$i$i35$i) | 0;
      $this$addr$i17$i = $this1$i9;
      $this1$i18$i = $this$addr$i17$i;
      $14 = HEAP32[$this1$i18$i >> 2] | 0;
      $__p$addr$i$i16$i = $14;
      $15 = $__p$addr$i$i16$i;
      $this$addr$i14$i = $this1$i9;
      $this1$i15$i = $this$addr$i14$i;
      $this$addr$i$i$i6 = $this1$i15$i;
      $this1$i$i$i11 = $this$addr$i$i$i6;
      $this$addr$i$i$i$i = $this1$i$i$i11;
      $this1$i$i$i$i = $this$addr$i$i$i$i;
      $__end_cap_$i$i$i$i = ($this1$i$i$i$i + 8) | 0;
      $this$addr$i$i$i$i$i = $__end_cap_$i$i$i$i;
      $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
      $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
      $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
      $16 = HEAP32[$this1$i$i$i$i$i$i >> 2] | 0;
      $17 = HEAP32[$this1$i$i$i11 >> 2] | 0;
      $sub$ptr$lhs$cast$i$i$i = $16;
      $sub$ptr$rhs$cast$i$i$i = $17;
      $sub$ptr$sub$i$i$i =
        ($sub$ptr$lhs$cast$i$i$i - $sub$ptr$rhs$cast$i$i$i) | 0;
      $add$ptr6$i = ($15 + $sub$ptr$sub$i$i$i) | 0;
      $this$addr$i11$i = $this1$i9;
      $this1$i12$i = $this$addr$i11$i;
      $18 = HEAP32[$this1$i12$i >> 2] | 0;
      $__p$addr$i$i10$i = $18;
      $19 = $__p$addr$i$i10$i;
      $20 = $__current_size$addr$i;
      $add$ptr8$i = ($19 + $20) | 0;
      $this$addr$i9$i = $this1$i9;
      $$addr$i$i = $9;
      $$addr1$i$i = $add$ptr$i;
      $$addr2$i$i = $add$ptr6$i;
      $$addr3$i$i = $add$ptr8$i;
      STACKTOP = sp;
      return;
    }
  }
  function __ZNSt3__26vectorIhNS_9allocatorIhEEE18__construct_at_endIPhEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_m(
    $this,
    $__first,
    $__last,
    $__n
  ) {
    $this = $this | 0;
    $__first = $__first | 0;
    $__last = $__last | 0;
    $__n = $__n | 0;
    var $$addr$i = 0,
      $$addr$i5 = 0,
      $$addr1$i = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $_Np$i = 0,
      $__a = 0,
      $__annotator = 0;
    var $__begin1$addr$i = 0,
      $__begin2$addr$i = 0,
      $__end1$addr$i = 0,
      $__end_ = 0,
      $__end_cap_$i = 0,
      $__first$addr = 0,
      $__last$addr = 0,
      $__n$addr = 0,
      $add$ptr$i = 0,
      $cmp$i = 0,
      $sub$ptr$lhs$cast$i = 0,
      $sub$ptr$rhs$cast$i = 0,
      $sub$ptr$sub$i = 0,
      $this$addr = 0,
      $this$addr$i = 0,
      $this$addr$i$i = 0,
      $this$addr$i$i$i = 0,
      $this$addr$i2 = 0,
      $this$addr$i4 = 0,
      $this1 = 0;
    var $this1$i = 0,
      $this1$i$i = 0,
      $this1$i$i$i = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 80) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
    $__annotator = (sp + 68) | 0;
    $this$addr = $this;
    $__first$addr = $__first;
    $__last$addr = $__last;
    $__n$addr = $__n;
    $this1 = $this$addr;
    $this$addr$i = $this1;
    $this1$i = $this$addr$i;
    $__end_cap_$i = ($this1$i + 8) | 0;
    $this$addr$i$i = $__end_cap_$i;
    $this1$i$i = $this$addr$i$i;
    $this$addr$i$i$i = $this1$i$i;
    $this1$i$i$i = $this$addr$i$i$i;
    $__a = $this1$i$i$i;
    $0 = $__n$addr;
    $this$addr$i4 = $__annotator;
    $$addr$i5 = $this1;
    $$addr1$i = $0;
    $1 = $__a;
    $2 = $__first$addr;
    $3 = $__last$addr;
    $__end_ = ($this1 + 4) | 0;
    $$addr$i = $1;
    $__begin1$addr$i = $2;
    $__end1$addr$i = $3;
    $__begin2$addr$i = $__end_;
    $4 = $__end1$addr$i;
    $5 = $__begin1$addr$i;
    $sub$ptr$lhs$cast$i = $4;
    $sub$ptr$rhs$cast$i = $5;
    $sub$ptr$sub$i = ($sub$ptr$lhs$cast$i - $sub$ptr$rhs$cast$i) | 0;
    $_Np$i = $sub$ptr$sub$i;
    $6 = $_Np$i;
    $cmp$i = ($6 | 0) > 0;
    if (!$cmp$i) {
      $this$addr$i2 = $__annotator;
      STACKTOP = sp;
      return;
    }
    $7 = $__begin2$addr$i;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = $__begin1$addr$i;
    $10 = $_Np$i;
    _memcpy($8 | 0, $9 | 0, $10 | 0) | 0;
    $11 = $_Np$i;
    $12 = $__begin2$addr$i;
    $13 = HEAP32[$12 >> 2] | 0;
    $add$ptr$i = ($13 + $11) | 0;
    HEAP32[$12 >> 2] = $add$ptr$i;
    $this$addr$i2 = $__annotator;
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal10getContextIM6PacketKFNSt3__26vectorIhNS3_9allocatorIhEEEEvEEEPT_RKSA_(
    $t
  ) {
    $t = $t | 0;
    var $$field = 0,
      $$field2 = 0,
      $$index1 = 0,
      $$index5 = 0,
      $0 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(8) | 0;
    $0 = $t$addr;
    $$field = HEAP32[$0 >> 2] | 0;
    $$index1 = ($0 + 4) | 0;
    $$field2 = HEAP32[$$index1 >> 2] | 0;
    HEAP32[$call >> 2] = $$field;
    $$index5 = ($call + 4) | 0;
    HEAP32[$$index5 >> 2] = $$field2;
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN10emscripten8internal10getContextIM6PacketFvNSt3__26vectorIhNS3_9allocatorIhEEEEEEEPT_RKSA_(
    $t
  ) {
    $t = $t | 0;
    var $$field = 0,
      $$field2 = 0,
      $$index1 = 0,
      $$index5 = 0,
      $0 = 0,
      $call = 0,
      $t$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $t$addr = $t;
    $call = __Znwm(8) | 0;
    $0 = $t$addr;
    $$field = HEAP32[$0 >> 2] | 0;
    $$index1 = ($0 + 4) | 0;
    $$field2 = HEAP32[$$index1 >> 2] | 0;
    HEAP32[$call >> 2] = $$field;
    $$index5 = ($call + 4) | 0;
    HEAP32[$$index5 >> 2] = $$field2;
    STACKTOP = sp;
    return $call | 0;
  }
  function __GLOBAL__sub_I_packet_cpp() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    ___cxx_global_var_init();
    return;
  }
  function ___stdio_close($f) {
    $f = $f | 0;
    var $0 = 0,
      $call = 0,
      $call1 = 0,
      $call2 = 0,
      $fd = 0,
      $vararg_buffer = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $vararg_buffer = sp;
    $fd = ($f + 60) | 0;
    $0 = HEAP32[$fd >> 2] | 0;
    $call = _dummy_282($0) | 0;
    HEAP32[$vararg_buffer >> 2] = $call;
    $call1 = ___syscall6(6, $vararg_buffer | 0) | 0;
    $call2 = ___syscall_ret($call1) | 0;
    STACKTOP = sp;
    return $call2 | 0;
  }
  function ___stdout_write($f, $buf, $len) {
    $f = $f | 0;
    $buf = $buf | 0;
    $len = $len | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $and = 0,
      $call = 0,
      $call3 = 0,
      $fd = 0,
      $lbf = 0,
      $tobool = 0,
      $tobool2 = 0,
      $vararg_buffer = 0,
      $vararg_ptr1 = 0,
      $vararg_ptr2 = 0,
      $write = 0,
      $wsz = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $vararg_buffer = sp;
    $wsz = (sp + 16) | 0;
    $write = ($f + 36) | 0;
    HEAP32[$write >> 2] = 4;
    $0 = HEAP32[$f >> 2] | 0;
    $and = $0 & 64;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      $fd = ($f + 60) | 0;
      $1 = HEAP32[$fd >> 2] | 0;
      $2 = $wsz;
      HEAP32[$vararg_buffer >> 2] = $1;
      $vararg_ptr1 = ($vararg_buffer + 4) | 0;
      HEAP32[$vararg_ptr1 >> 2] = 21523;
      $vararg_ptr2 = ($vararg_buffer + 8) | 0;
      HEAP32[$vararg_ptr2 >> 2] = $2;
      $call = ___syscall54(54, $vararg_buffer | 0) | 0;
      $tobool2 = ($call | 0) == 0;
      if (!$tobool2) {
        $lbf = ($f + 75) | 0;
        HEAP8[$lbf >> 0] = -1;
      }
    }
    $call3 = ___stdio_write($f, $buf, $len) | 0;
    STACKTOP = sp;
    return $call3 | 0;
  }
  function ___stdio_seek($f, $0, $1, $whence) {
    $f = $f | 0;
    $0 = $0 | 0;
    $1 = $1 | 0;
    $whence = $whence | 0;
    var $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $call = 0,
      $call2 = 0,
      $cmp = 0,
      $fd = 0,
      $ret = 0,
      $vararg_buffer = 0;
    var $vararg_ptr1 = 0,
      $vararg_ptr2 = 0,
      $vararg_ptr3 = 0,
      $vararg_ptr4 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $vararg_buffer = (sp + 8) | 0;
    $ret = sp;
    $fd = ($f + 60) | 0;
    $2 = HEAP32[$fd >> 2] | 0;
    $3 = $ret;
    HEAP32[$vararg_buffer >> 2] = $2;
    $vararg_ptr1 = ($vararg_buffer + 4) | 0;
    HEAP32[$vararg_ptr1 >> 2] = $1;
    $vararg_ptr2 = ($vararg_buffer + 8) | 0;
    HEAP32[$vararg_ptr2 >> 2] = $0;
    $vararg_ptr3 = ($vararg_buffer + 12) | 0;
    HEAP32[$vararg_ptr3 >> 2] = $3;
    $vararg_ptr4 = ($vararg_buffer + 16) | 0;
    HEAP32[$vararg_ptr4 >> 2] = $whence;
    $call = ___syscall140(140, $vararg_buffer | 0) | 0;
    $call2 = ___syscall_ret($call) | 0;
    $cmp = ($call2 | 0) < 0;
    if ($cmp) {
      $10 = $ret;
      $11 = $10;
      HEAP32[$11 >> 2] = -1;
      $12 = ($10 + 4) | 0;
      $13 = $12;
      HEAP32[$13 >> 2] = -1;
      $14 = -1;
      $15 = -1;
    } else {
      $4 = $ret;
      $5 = $4;
      $6 = HEAP32[$5 >> 2] | 0;
      $7 = ($4 + 4) | 0;
      $8 = $7;
      $9 = HEAP32[$8 >> 2] | 0;
      $14 = $9;
      $15 = $6;
    }
    setTempRet0($14 | 0);
    STACKTOP = sp;
    return $15 | 0;
  }
  function ___syscall_ret($r) {
    $r = $r | 0;
    var $call = 0,
      $cmp = 0,
      $retval$0 = 0,
      $sub = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $cmp = $r >>> 0 > 4294963200;
    if ($cmp) {
      $sub = (0 - $r) | 0;
      $call = ___errno_location() | 0;
      HEAP32[$call >> 2] = $sub;
      $retval$0 = -1;
    } else {
      $retval$0 = $r;
    }
    return $retval$0 | 0;
  }
  function ___errno_location() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 17648 | 0;
  }
  function ___stdio_write($f, $buf, $len) {
    $f = $f | 0;
    $buf = $buf | 0;
    $len = $len | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $add = 0,
      $add$ptr = 0,
      $add$ptr32 = 0,
      $buf8 = 0,
      $buf_size = 0,
      $call = 0;
    var $call40 = 0,
      $call7 = 0,
      $call741 = 0,
      $call746 = 0,
      $cmp = 0,
      $cmp12 = 0,
      $cmp17 = 0,
      $cmp24 = 0,
      $cmp42 = 0,
      $cnt$0 = 0,
      $dec = 0,
      $fd = 0,
      $incdec$ptr = 0,
      $iov$043 = 0,
      $iov$1 = 0,
      $iov_base2 = 0,
      $iov_len = 0,
      $iov_len19 = 0,
      $iov_len23 = 0,
      $iov_len3 = 0;
    var $iov_len36 = 0,
      $iovcnt$045 = 0,
      $iovcnt$1 = 0,
      $iovs = 0,
      $or = 0,
      $rem$044 = 0,
      $retval$0 = 0,
      $sub = 0,
      $sub$ptr$sub = 0,
      $sub21 = 0,
      $sub28 = 0,
      $sub37 = 0,
      $vararg_buffer = 0,
      $vararg_buffer3 = 0,
      $vararg_ptr1 = 0,
      $vararg_ptr2 = 0,
      $vararg_ptr6 = 0,
      $vararg_ptr7 = 0,
      $wbase = 0,
      $wend = 0;
    var $wend14 = 0,
      $wpos = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 48) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
    $vararg_buffer3 = (sp + 32) | 0;
    $vararg_buffer = (sp + 16) | 0;
    $iovs = sp;
    $wbase = ($f + 28) | 0;
    $0 = HEAP32[$wbase >> 2] | 0;
    HEAP32[$iovs >> 2] = $0;
    $iov_len = ($iovs + 4) | 0;
    $wpos = ($f + 20) | 0;
    $1 = HEAP32[$wpos >> 2] | 0;
    $sub$ptr$sub = ($1 - $0) | 0;
    HEAP32[$iov_len >> 2] = $sub$ptr$sub;
    $iov_base2 = ($iovs + 8) | 0;
    HEAP32[$iov_base2 >> 2] = $buf;
    $iov_len3 = ($iovs + 12) | 0;
    HEAP32[$iov_len3 >> 2] = $len;
    $add = ($sub$ptr$sub + $len) | 0;
    $fd = ($f + 60) | 0;
    $2 = HEAP32[$fd >> 2] | 0;
    $3 = $iovs;
    HEAP32[$vararg_buffer >> 2] = $2;
    $vararg_ptr1 = ($vararg_buffer + 4) | 0;
    HEAP32[$vararg_ptr1 >> 2] = $3;
    $vararg_ptr2 = ($vararg_buffer + 8) | 0;
    HEAP32[$vararg_ptr2 >> 2] = 2;
    $call40 = ___syscall146(146, $vararg_buffer | 0) | 0;
    $call741 = ___syscall_ret($call40) | 0;
    $cmp42 = ($add | 0) == ($call741 | 0);
    L1: do {
      if ($cmp42) {
        label = 3;
      } else {
        $call746 = $call741;
        $iov$043 = $iovs;
        $iovcnt$045 = 2;
        $rem$044 = $add;
        while (1) {
          $cmp12 = ($call746 | 0) < 0;
          if ($cmp12) {
            break;
          }
          $sub21 = ($rem$044 - $call746) | 0;
          $iov_len23 = ($iov$043 + 4) | 0;
          $9 = HEAP32[$iov_len23 >> 2] | 0;
          $cmp24 = $call746 >>> 0 > $9 >>> 0;
          $incdec$ptr = ($iov$043 + 8) | 0;
          $iov$1 = $cmp24 ? $incdec$ptr : $iov$043;
          $dec = ($cmp24 << 31) >> 31;
          $iovcnt$1 = ($iovcnt$045 + $dec) | 0;
          $sub28 = $cmp24 ? $9 : 0;
          $cnt$0 = ($call746 - $sub28) | 0;
          $10 = HEAP32[$iov$1 >> 2] | 0;
          $add$ptr32 = ($10 + $cnt$0) | 0;
          HEAP32[$iov$1 >> 2] = $add$ptr32;
          $iov_len36 = ($iov$1 + 4) | 0;
          $11 = HEAP32[$iov_len36 >> 2] | 0;
          $sub37 = ($11 - $cnt$0) | 0;
          HEAP32[$iov_len36 >> 2] = $sub37;
          $12 = HEAP32[$fd >> 2] | 0;
          $13 = $iov$1;
          HEAP32[$vararg_buffer3 >> 2] = $12;
          $vararg_ptr6 = ($vararg_buffer3 + 4) | 0;
          HEAP32[$vararg_ptr6 >> 2] = $13;
          $vararg_ptr7 = ($vararg_buffer3 + 8) | 0;
          HEAP32[$vararg_ptr7 >> 2] = $iovcnt$1;
          $call = ___syscall146(146, $vararg_buffer3 | 0) | 0;
          $call7 = ___syscall_ret($call) | 0;
          $cmp = ($sub21 | 0) == ($call7 | 0);
          if ($cmp) {
            label = 3;
            break L1;
          } else {
            $call746 = $call7;
            $iov$043 = $iov$1;
            $iovcnt$045 = $iovcnt$1;
            $rem$044 = $sub21;
          }
        }
        $wend14 = ($f + 16) | 0;
        HEAP32[$wend14 >> 2] = 0;
        HEAP32[$wbase >> 2] = 0;
        HEAP32[$wpos >> 2] = 0;
        $7 = HEAP32[$f >> 2] | 0;
        $or = $7 | 32;
        HEAP32[$f >> 2] = $or;
        $cmp17 = ($iovcnt$045 | 0) == 2;
        if ($cmp17) {
          $retval$0 = 0;
        } else {
          $iov_len19 = ($iov$043 + 4) | 0;
          $8 = HEAP32[$iov_len19 >> 2] | 0;
          $sub = ($len - $8) | 0;
          $retval$0 = $sub;
        }
      }
    } while (0);
    if ((label | 0) == 3) {
      $buf8 = ($f + 44) | 0;
      $4 = HEAP32[$buf8 >> 2] | 0;
      $buf_size = ($f + 48) | 0;
      $5 = HEAP32[$buf_size >> 2] | 0;
      $add$ptr = ($4 + $5) | 0;
      $wend = ($f + 16) | 0;
      HEAP32[$wend >> 2] = $add$ptr;
      $6 = $4;
      HEAP32[$wbase >> 2] = $6;
      HEAP32[$wpos >> 2] = $6;
      $retval$0 = $len;
    }
    STACKTOP = sp;
    return $retval$0 | 0;
  }
  function _dummy_282($fd) {
    $fd = $fd | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return $fd | 0;
  }
  function _islower($c) {
    $c = $c | 0;
    var $cmp = 0,
      $conv = 0,
      $sub = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $sub = ($c + -97) | 0;
    $cmp = $sub >>> 0 < 26;
    $conv = $cmp & 1;
    return $conv | 0;
  }
  function _strlen($s) {
    $s = $s | 0;
    var $$pn = 0,
      $$pn24 = 0,
      $$pre = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $and = 0,
      $and3 = 0,
      $incdec$ptr = 0,
      $incdec$ptr1323 = 0,
      $incdec$ptr7 = 0,
      $neg = 0,
      $rem = 0,
      $rem13 = 0,
      $retval$0 = 0,
      $s$addr$0$lcssa = 0,
      $s$addr$015 = 0;
    var $s$addr$1$lcssa = 0,
      $sub = 0,
      $sub$ptr$lhs$cast15 = 0,
      $tobool = 0,
      $tobool1 = 0,
      $tobool10 = 0,
      $tobool1021 = 0,
      $tobool14 = 0,
      $tobool4 = 0,
      $w$0 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = $s;
    $rem13 = $0 & 3;
    $tobool14 = ($rem13 | 0) == 0;
    L1: do {
      if ($tobool14) {
        $s$addr$0$lcssa = $s;
        label = 5;
      } else {
        $5 = $0;
        $s$addr$015 = $s;
        while (1) {
          $1 = HEAP8[$s$addr$015 >> 0] | 0;
          $tobool1 = ($1 << 24) >> 24 == 0;
          if ($tobool1) {
            $$pn = $5;
            break L1;
          }
          $incdec$ptr = ($s$addr$015 + 1) | 0;
          $2 = $incdec$ptr;
          $rem = $2 & 3;
          $tobool = ($rem | 0) == 0;
          if ($tobool) {
            $s$addr$0$lcssa = $incdec$ptr;
            label = 5;
            break;
          } else {
            $5 = $2;
            $s$addr$015 = $incdec$ptr;
          }
        }
      }
    } while (0);
    if ((label | 0) == 5) {
      $w$0 = $s$addr$0$lcssa;
      while (1) {
        $3 = HEAP32[$w$0 >> 2] | 0;
        $sub = ($3 + -16843009) | 0;
        $neg = $3 & -2139062144;
        $and = $neg ^ -2139062144;
        $and3 = $and & $sub;
        $tobool4 = ($and3 | 0) == 0;
        $incdec$ptr7 = ($w$0 + 4) | 0;
        if ($tobool4) {
          $w$0 = $incdec$ptr7;
        } else {
          break;
        }
      }
      $4 = $3 & 255;
      $tobool1021 = ($4 << 24) >> 24 == 0;
      if ($tobool1021) {
        $s$addr$1$lcssa = $w$0;
      } else {
        $$pn24 = $w$0;
        while (1) {
          $incdec$ptr1323 = ($$pn24 + 1) | 0;
          $$pre = HEAP8[$incdec$ptr1323 >> 0] | 0;
          $tobool10 = ($$pre << 24) >> 24 == 0;
          if ($tobool10) {
            $s$addr$1$lcssa = $incdec$ptr1323;
            break;
          } else {
            $$pn24 = $incdec$ptr1323;
          }
        }
      }
      $sub$ptr$lhs$cast15 = $s$addr$1$lcssa;
      $$pn = $sub$ptr$lhs$cast15;
    }
    $retval$0 = ($$pn - $0) | 0;
    return $retval$0 | 0;
  }
  function _frexp($x, $e) {
    $x = +$x;
    $e = $e | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0.0,
      $call = 0.0,
      $conv = 0,
      $mul = 0.0,
      $retval$0 = 0.0,
      $storemerge = 0,
      $sub = 0,
      $sub8 = 0,
      $tobool1 = 0,
      $trunc$clear = 0,
      $x$addr$0 = 0.0,
      label = 0;
    var sp = 0;
    sp = STACKTOP;
    HEAPF64[tempDoublePtr >> 3] = $x;
    $0 = HEAP32[tempDoublePtr >> 2] | 0;
    $1 = HEAP32[(tempDoublePtr + 4) >> 2] | 0;
    $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
    $3 = getTempRet0() | 0;
    $4 = $2 & 65535;
    $trunc$clear = $4 & 2047;
    switch (($trunc$clear << 16) >> 16) {
      case 0: {
        $tobool1 = $x != 0.0;
        if ($tobool1) {
          $mul = $x * 1.8446744073709552e19;
          $call = +_frexp($mul, $e);
          $5 = HEAP32[$e >> 2] | 0;
          $sub = ($5 + -64) | 0;
          $storemerge = $sub;
          $x$addr$0 = $call;
        } else {
          $storemerge = 0;
          $x$addr$0 = $x;
        }
        HEAP32[$e >> 2] = $storemerge;
        $retval$0 = $x$addr$0;
        break;
      }
      case 2047: {
        $retval$0 = $x;
        break;
      }
      default: {
        $conv = $2 & 2047;
        $sub8 = ($conv + -1022) | 0;
        HEAP32[$e >> 2] = $sub8;
        $6 = $1 & -2146435073;
        $7 = $6 | 1071644672;
        HEAP32[tempDoublePtr >> 2] = $0;
        HEAP32[(tempDoublePtr + 4) >> 2] = $7;
        $8 = +HEAPF64[tempDoublePtr >> 3];
        $retval$0 = $8;
      }
    }
    return +$retval$0;
  }
  function _strcmp($l, $r) {
    $l = $l | 0;
    $r = $r | 0;
    var $$lcssa = 0,
      $$lcssa6 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $cmp = 0,
      $cmp7 = 0,
      $conv5 = 0,
      $conv6 = 0,
      $incdec$ptr = 0,
      $incdec$ptr4 = 0,
      $l$addr$010 = 0,
      $or$cond = 0,
      $or$cond9 = 0,
      $r$addr$011 = 0,
      $sub = 0,
      $tobool = 0,
      $tobool8 = 0,
      label = 0;
    var sp = 0;
    sp = STACKTOP;
    $0 = HEAP8[$l >> 0] | 0;
    $1 = HEAP8[$r >> 0] | 0;
    $cmp7 = ($0 << 24) >> 24 != ($1 << 24) >> 24;
    $tobool8 = ($0 << 24) >> 24 == 0;
    $or$cond9 = $tobool8 | $cmp7;
    if ($or$cond9) {
      $$lcssa = $1;
      $$lcssa6 = $0;
    } else {
      $l$addr$010 = $l;
      $r$addr$011 = $r;
      while (1) {
        $incdec$ptr = ($l$addr$010 + 1) | 0;
        $incdec$ptr4 = ($r$addr$011 + 1) | 0;
        $2 = HEAP8[$incdec$ptr >> 0] | 0;
        $3 = HEAP8[$incdec$ptr4 >> 0] | 0;
        $cmp = ($2 << 24) >> 24 != ($3 << 24) >> 24;
        $tobool = ($2 << 24) >> 24 == 0;
        $or$cond = $tobool | $cmp;
        if ($or$cond) {
          $$lcssa = $3;
          $$lcssa6 = $2;
          break;
        } else {
          $l$addr$010 = $incdec$ptr;
          $r$addr$011 = $incdec$ptr4;
        }
      }
    }
    $conv5 = $$lcssa6 & 255;
    $conv6 = $$lcssa & 255;
    $sub = ($conv5 - $conv6) | 0;
    return $sub | 0;
  }
  function _pthread_self() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2908 | 0;
  }
  function _memchr($src, $c, $n) {
    $src = $src | 0;
    $c = $c | 0;
    $n = $n | 0;
    var $$in = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $and = 0,
      $and15 = 0,
      $and16 = 0,
      $and39 = 0,
      $cmp = 0,
      $cmp11 = 0,
      $cmp1132 = 0,
      $cmp28 = 0,
      $cmp8 = 0,
      $conv1 = 0;
    var $dec = 0,
      $dec34 = 0,
      $incdec$ptr = 0,
      $incdec$ptr21 = 0,
      $incdec$ptr33 = 0,
      $mul = 0,
      $n$addr$0$lcssa = 0,
      $n$addr$0$lcssa52 = 0,
      $n$addr$043 = 0,
      $n$addr$1$lcssa = 0,
      $n$addr$1$lcssa55 = 0,
      $n$addr$133 = 0,
      $n$addr$227 = 0,
      $neg = 0,
      $or$cond = 0,
      $or$cond42 = 0,
      $s$0$lcssa = 0,
      $s$0$lcssa53 = 0,
      $s$044 = 0,
      $s$128 = 0;
    var $sub = 0,
      $sub22 = 0,
      $tobool = 0,
      $tobool17 = 0,
      $tobool2 = 0,
      $tobool2$lcssa = 0,
      $tobool241 = 0,
      $tobool25 = 0,
      $tobool2526 = 0,
      $tobool36 = 0,
      $tobool40 = 0,
      $w$0$lcssa = 0,
      $w$034 = 0,
      $xor = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $conv1 = $c & 255;
    $0 = $src;
    $and39 = $0 & 3;
    $tobool40 = ($and39 | 0) != 0;
    $tobool241 = ($n | 0) != 0;
    $or$cond42 = $tobool241 & $tobool40;
    L1: do {
      if ($or$cond42) {
        $1 = $c & 255;
        $n$addr$043 = $n;
        $s$044 = $src;
        while (1) {
          $2 = HEAP8[$s$044 >> 0] | 0;
          $cmp = ($2 << 24) >> 24 == ($1 << 24) >> 24;
          if ($cmp) {
            $n$addr$0$lcssa52 = $n$addr$043;
            $s$0$lcssa53 = $s$044;
            label = 6;
            break L1;
          }
          $incdec$ptr = ($s$044 + 1) | 0;
          $dec = ($n$addr$043 + -1) | 0;
          $3 = $incdec$ptr;
          $and = $3 & 3;
          $tobool = ($and | 0) != 0;
          $tobool2 = ($dec | 0) != 0;
          $or$cond = $tobool2 & $tobool;
          if ($or$cond) {
            $n$addr$043 = $dec;
            $s$044 = $incdec$ptr;
          } else {
            $n$addr$0$lcssa = $dec;
            $s$0$lcssa = $incdec$ptr;
            $tobool2$lcssa = $tobool2;
            label = 5;
            break;
          }
        }
      } else {
        $n$addr$0$lcssa = $n;
        $s$0$lcssa = $src;
        $tobool2$lcssa = $tobool241;
        label = 5;
      }
    } while (0);
    if ((label | 0) == 5) {
      if ($tobool2$lcssa) {
        $n$addr$0$lcssa52 = $n$addr$0$lcssa;
        $s$0$lcssa53 = $s$0$lcssa;
        label = 6;
      } else {
        label = 16;
      }
    }
    L8: do {
      if ((label | 0) == 6) {
        $4 = HEAP8[$s$0$lcssa53 >> 0] | 0;
        $5 = $c & 255;
        $cmp8 = ($4 << 24) >> 24 == ($5 << 24) >> 24;
        if ($cmp8) {
          $tobool36 = ($n$addr$0$lcssa52 | 0) == 0;
          if ($tobool36) {
            label = 16;
            break;
          } else {
            $8 = $s$0$lcssa53;
            break;
          }
        }
        $mul = Math_imul($conv1, 16843009) | 0;
        $cmp1132 = $n$addr$0$lcssa52 >>> 0 > 3;
        L13: do {
          if ($cmp1132) {
            $n$addr$133 = $n$addr$0$lcssa52;
            $w$034 = $s$0$lcssa53;
            while (1) {
              $6 = HEAP32[$w$034 >> 2] | 0;
              $xor = $6 ^ $mul;
              $sub = ($xor + -16843009) | 0;
              $neg = $xor & -2139062144;
              $and15 = $neg ^ -2139062144;
              $and16 = $and15 & $sub;
              $tobool17 = ($and16 | 0) == 0;
              if (!$tobool17) {
                $$in = $w$034;
                $n$addr$1$lcssa55 = $n$addr$133;
                break L13;
              }
              $incdec$ptr21 = ($w$034 + 4) | 0;
              $sub22 = ($n$addr$133 + -4) | 0;
              $cmp11 = $sub22 >>> 0 > 3;
              if ($cmp11) {
                $n$addr$133 = $sub22;
                $w$034 = $incdec$ptr21;
              } else {
                $n$addr$1$lcssa = $sub22;
                $w$0$lcssa = $incdec$ptr21;
                label = 11;
                break;
              }
            }
          } else {
            $n$addr$1$lcssa = $n$addr$0$lcssa52;
            $w$0$lcssa = $s$0$lcssa53;
            label = 11;
          }
        } while (0);
        if ((label | 0) == 11) {
          $tobool2526 = ($n$addr$1$lcssa | 0) == 0;
          if ($tobool2526) {
            label = 16;
            break;
          } else {
            $$in = $w$0$lcssa;
            $n$addr$1$lcssa55 = $n$addr$1$lcssa;
          }
        }
        $n$addr$227 = $n$addr$1$lcssa55;
        $s$128 = $$in;
        while (1) {
          $7 = HEAP8[$s$128 >> 0] | 0;
          $cmp28 = ($7 << 24) >> 24 == ($5 << 24) >> 24;
          if ($cmp28) {
            $8 = $s$128;
            break L8;
          }
          $incdec$ptr33 = ($s$128 + 1) | 0;
          $dec34 = ($n$addr$227 + -1) | 0;
          $tobool25 = ($dec34 | 0) == 0;
          if ($tobool25) {
            label = 16;
            break;
          } else {
            $n$addr$227 = $dec34;
            $s$128 = $incdec$ptr33;
          }
        }
      }
    } while (0);
    if ((label | 0) == 16) {
      $8 = 0;
    }
    return $8 | 0;
  }
  function _snprintf($s, $n, $fmt, $varargs) {
    $s = $s | 0;
    $n = $n | 0;
    $fmt = $fmt | 0;
    $varargs = $varargs | 0;
    var $ap = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ap = sp;
    HEAP32[$ap >> 2] = $varargs;
    $call = _vsnprintf($s, $n, $fmt, $ap) | 0;
    STACKTOP = sp;
    return $call | 0;
  }
  function _vsnprintf($s, $n, $fmt, $ap) {
    $s = $s | 0;
    $n = $n | 0;
    $fmt = $fmt | 0;
    $ap = $ap | 0;
    var $0 = 0,
      $1 = 0,
      $add$ptr = 0,
      $arrayidx = 0,
      $b = 0,
      $buf = 0,
      $buf_size = 0,
      $call = 0,
      $call10 = 0,
      $cmp = 0,
      $cmp16 = 0,
      $cmp4 = 0,
      $f = 0,
      $n$addr$0 = 0,
      $retval$0 = 0,
      $s$addr$0 = 0,
      $spec$select = 0,
      $sub = 0,
      $sub$ptr$rhs$cast = 0,
      $sub17 = 0;
    var $sub3 = 0,
      $tobool = 0,
      $tobool11 = 0,
      $wbase = 0,
      $wend = 0,
      $wpos = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 160) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160 | 0);
    $b = (sp + 144) | 0;
    $f = sp;
    _memcpy($f | 0, 1160 | 0, 144) | 0;
    $sub = ($n + -1) | 0;
    $cmp = $sub >>> 0 > 2147483646;
    if ($cmp) {
      $tobool = ($n | 0) == 0;
      if ($tobool) {
        $n$addr$0 = 1;
        $s$addr$0 = $b;
        label = 4;
      } else {
        $call = ___errno_location() | 0;
        HEAP32[$call >> 2] = 75;
        $retval$0 = -1;
      }
    } else {
      $n$addr$0 = $n;
      $s$addr$0 = $s;
      label = 4;
    }
    if ((label | 0) == 4) {
      $sub$ptr$rhs$cast = $s$addr$0;
      $sub3 = (-2 - $sub$ptr$rhs$cast) | 0;
      $cmp4 = $n$addr$0 >>> 0 > $sub3 >>> 0;
      $spec$select = $cmp4 ? $sub3 : $n$addr$0;
      $buf_size = ($f + 48) | 0;
      HEAP32[$buf_size >> 2] = $spec$select;
      $wpos = ($f + 20) | 0;
      HEAP32[$wpos >> 2] = $s$addr$0;
      $buf = ($f + 44) | 0;
      HEAP32[$buf >> 2] = $s$addr$0;
      $add$ptr = ($s$addr$0 + $spec$select) | 0;
      $wend = ($f + 16) | 0;
      HEAP32[$wend >> 2] = $add$ptr;
      $wbase = ($f + 28) | 0;
      HEAP32[$wbase >> 2] = $add$ptr;
      $call10 = _vfprintf($f, $fmt, $ap) | 0;
      $tobool11 = ($spec$select | 0) == 0;
      if ($tobool11) {
        $retval$0 = $call10;
      } else {
        $0 = HEAP32[$wpos >> 2] | 0;
        $1 = HEAP32[$wend >> 2] | 0;
        $cmp16 = ($0 | 0) == ($1 | 0);
        $sub17 = ($cmp16 << 31) >> 31;
        $arrayidx = ($0 + $sub17) | 0;
        HEAP8[$arrayidx >> 0] = 0;
        $retval$0 = $call10;
      }
    }
    STACKTOP = sp;
    return $retval$0 | 0;
  }
  function _vfprintf($f, $fmt, $ap) {
    $f = $f | 0;
    $fmt = $fmt | 0;
    $ap = $ap | 0;
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = ___vfprintf_internal($f, $fmt, $ap, 352, 353) | 0;
    return $call | 0;
  }
  function _fmt_fp($f, $y, $w, $p, $fl, $t) {
    $f = $f | 0;
    $y = +$y;
    $w = $w | 0;
    $p = $p | 0;
    $fl = $fl | 0;
    $t = $t | 0;
    var $$ = 0,
      $$pr = 0,
      $$pr415 = 0,
      $$pre = 0,
      $$pre517 = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0;
    var $22 = 0,
      $23 = 0,
      $24 = 0,
      $25 = 0,
      $26 = 0,
      $27 = 0,
      $28 = 0,
      $29 = 0,
      $3 = 0,
      $30 = 0,
      $31 = 0,
      $32 = 0,
      $33 = 0,
      $34 = 0,
      $35 = 0,
      $36 = 0,
      $37 = 0,
      $38 = 0,
      $39 = 0,
      $4 = 0;
    var $40 = 0,
      $41 = 0,
      $42 = 0,
      $43 = 0,
      $44 = 0,
      $45 = 0,
      $46 = 0,
      $47 = 0,
      $48 = 0,
      $49 = 0,
      $5 = 0,
      $50 = 0,
      $51 = 0,
      $52 = 0,
      $53 = 0,
      $54 = 0,
      $55 = 0,
      $56 = 0,
      $57 = 0,
      $58 = 0;
    var $59 = 0,
      $6 = 0,
      $60 = 0,
      $61 = 0,
      $62 = 0,
      $63 = 0,
      $64 = 0,
      $65 = 0,
      $66 = 0,
      $67 = 0,
      $68 = 0,
      $69 = 0,
      $7 = 0,
      $70 = 0,
      $71 = 0,
      $72 = 0,
      $73 = 0,
      $74 = 0,
      $75 = 0,
      $76 = 0;
    var $77 = 0,
      $78 = 0,
      $79 = 0,
      $8 = 0,
      $80 = 0,
      $81 = 0,
      $82 = 0,
      $83 = 0,
      $84 = 0,
      $85 = 0,
      $9 = 0,
      $a$1$lcssa = 0,
      $a$1502 = 0,
      $a$2 = 0,
      $a$3$lcssa = 0,
      $a$3488 = 0,
      $a$5$lcssa = 0,
      $a$5471 = 0,
      $a$6 = 0,
      $a$8 = 0;
    var $a$9 = 0,
      $add = 0,
      $add$ptr213 = 0,
      $add$ptr311 = 0,
      $add$ptr354 = 0,
      $add$ptr358 = 0,
      $add$ptr373 = 0,
      $add$ptr442 = 0,
      $add$ptr65 = 0,
      $add$ptr671 = 0,
      $add$ptr742 = 0,
      $add$ptr756 = 0,
      $add113 = 0,
      $add150 = 0,
      $add154 = 0,
      $add163 = 0,
      $add165 = 0,
      $add273 = 0,
      $add275 = 0,
      $add284 = 0;
    var $add313 = 0,
      $add355 = 0,
      $add410 = 0.0,
      $add414 = 0,
      $add477$neg = 0,
      $add561 = 0,
      $add608 = 0,
      $add612 = 0,
      $add620 = 0,
      $add653 = 0,
      $add653$sink524 = 0,
      $add67 = 0,
      $add737 = 0,
      $add810 = 0,
      $add87 = 0.0,
      $add90 = 0.0,
      $and = 0,
      $and12 = 0,
      $and134 = 0,
      $and282 = 0;
    var $and36 = 0,
      $and379 = 0,
      $and45 = 0,
      $and483 = 0,
      $and610 = 0,
      $and610$lobit = 0,
      $and62 = 0,
      $and702 = 0,
      $and780 = 0,
      $arrayidx = 0,
      $arrayidx117 = 0,
      $arrayidx251 = 0,
      $arrayidx453 = 0,
      $arrayidx489 = 0,
      $big = 0,
      $buf = 0,
      $call55 = 0.0,
      $carry$0493 = 0,
      $carry262$0484 = 0,
      $cmp103 = 0;
    var $cmp127 = 0,
      $cmp131 = 0,
      $cmp147 = 0,
      $cmp196 = 0,
      $cmp205 = 0,
      $cmp225 = 0,
      $cmp225500 = 0,
      $cmp235 = 0,
      $cmp235492 = 0,
      $cmp249 = 0,
      $cmp249496 = 0,
      $cmp259 = 0,
      $cmp259486 = 0,
      $cmp277 = 0,
      $cmp277482 = 0,
      $cmp299 = 0,
      $cmp308 = 0,
      $cmp315 = 0,
      $cmp324 = 0,
      $cmp324478 = 0;
    var $cmp333 = 0,
      $cmp338 = 0,
      $cmp350 = 0,
      $cmp363 = 0,
      $cmp363474 = 0,
      $cmp374 = 0,
      $cmp38 = 0,
      $cmp385 = 0,
      $cmp390 = 0,
      $cmp403 = 0,
      $cmp411 = 0,
      $cmp416 = 0,
      $cmp416469 = 0,
      $cmp420 = 0,
      $cmp433 = 0,
      $cmp433465 = 0,
      $cmp443 = 0,
      $cmp450 = 0,
      $cmp450$lcssa = 0,
      $cmp450458 = 0;
    var $cmp470 = 0,
      $cmp473 = 0,
      $cmp495 = 0,
      $cmp495454 = 0,
      $cmp505 = 0,
      $cmp528 = 0,
      $cmp577 = 0,
      $cmp59 = 0,
      $cmp614 = 0,
      $cmp617 = 0,
      $cmp623 = 0,
      $cmp636 = 0,
      $cmp636449 = 0,
      $cmp660 = 0,
      $cmp665 = 0,
      $cmp673 = 0,
      $cmp678 = 0,
      $cmp678435 = 0,
      $cmp686 = 0,
      $cmp707 = 0;
    var $cmp707430 = 0,
      $cmp710 = 0,
      $cmp710431 = 0,
      $cmp722 = 0,
      $cmp722427 = 0,
      $cmp745 = 0,
      $cmp745442 = 0,
      $cmp748 = 0,
      $cmp748443 = 0,
      $cmp760 = 0,
      $cmp765 = 0,
      $cmp770 = 0,
      $cmp770439 = 0,
      $cmp777 = 0,
      $cmp790 = 0,
      $cmp818 = 0,
      $cmp82 = 0,
      $cmp94 = 0,
      $cond = 0,
      $cond100 = 0;
    var $cond233 = 0,
      $cond271 = 0,
      $cond304 = 0,
      $cond43 = 0,
      $cond629 = 0,
      $cond732 = 0,
      $cond800 = 0,
      $conv111 = 0,
      $conv114 = 0,
      $conv116 = 0,
      $conv118393 = 0,
      $conv121 = 0,
      $conv123 = 0.0,
      $conv216 = 0,
      $conv218 = 0.0,
      $conv644 = 0,
      $conv646 = 0,
      $d$0 = 0,
      $d$0491 = 0,
      $d$0494 = 0;
    var $d$1483 = 0,
      $d$2$lcssa = 0,
      $d$2470 = 0,
      $d$4 = 0,
      $d$5438 = 0,
      $d$6432 = 0,
      $d$7444 = 0,
      $dec = 0,
      $dec476 = 0,
      $dec481 = 0,
      $dec78 = 0,
      $div274 = 0,
      $div356 = 0,
      $div378 = 0,
      $div384 = 0,
      $e$0480 = 0,
      $e$1 = 0,
      $e$2467 = 0,
      $e$4 = 0,
      $e$5 = 0;
    var $e2 = 0,
      $ebuf0 = 0,
      $estr$0 = 0,
      $estr$1$lcssa = 0,
      $estr$1450 = 0,
      $estr$2 = 0,
      $i$0479 = 0,
      $i$1$lcssa = 0,
      $i$1475 = 0,
      $i$2466 = 0,
      $i$3455 = 0,
      $inc = 0,
      $inc425 = 0,
      $inc438 = 0,
      $inc468 = 0,
      $inc500 = 0,
      $incdec$ptr106 = 0,
      $incdec$ptr112 = 0,
      $incdec$ptr115 = 0,
      $incdec$ptr122 = 0;
    var $incdec$ptr137 = 0,
      $incdec$ptr217 = 0,
      $incdec$ptr246 = 0,
      $incdec$ptr288 = 0,
      $incdec$ptr292 = 0,
      $incdec$ptr292520 = 0,
      $incdec$ptr296 = 0,
      $incdec$ptr419 = 0,
      $incdec$ptr423 = 0,
      $incdec$ptr639 = 0,
      $incdec$ptr645 = 0,
      $incdec$ptr647 = 0,
      $incdec$ptr681 = 0,
      $incdec$ptr689 = 0,
      $incdec$ptr698 = 0,
      $incdec$ptr725 = 0,
      $incdec$ptr734 = 0,
      $incdec$ptr763 = 0,
      $incdec$ptr773 = 0,
      $incdec$ptr776 = 0;
    var $incdec$ptr808 = 0,
      $j$0 = 0,
      $j$0$in476 = 0,
      $j$1456 = 0,
      $j$2 = 0,
      $l$0 = 0,
      $l$1 = 0,
      $land$ext$neg = 0,
      $mul = 0.0,
      $mul125 = 0.0,
      $mul202 = 0.0,
      $mul220 = 0.0,
      $mul286 = 0,
      $mul322 = 0,
      $mul328 = 0,
      $mul335 = 0,
      $mul349 = 0,
      $mul367 = 0,
      $mul406 = 0.0,
      $mul407 = 0.0;
    var $mul431 = 0,
      $mul437 = 0,
      $mul499 = 0,
      $mul513 = 0,
      $mul80 = 0.0,
      $not$tobool341 = 0,
      $or = 0,
      $or$cond = 0,
      $or$cond1$not = 0,
      $or$cond2 = 0,
      $or$cond398 = 0,
      $or$cond400 = 0,
      $or$cond409 = 0,
      $or$cond411 = 0,
      $or120 = 0,
      $or504 = 0,
      $or613 = 0,
      $p$addr$2 = 0,
      $p$addr$3 = 0,
      $p$addr$4$lcssa = 0;
    var $p$addr$4433 = 0,
      $p$addr$5$lcssa = 0,
      $p$addr$5445 = 0,
      $pl$0 = 0,
      $prefix$0 = 0,
      $re$1426 = 0,
      $rem494 = 0,
      $rem494453 = 0,
      $round$0425 = 0.0,
      $round377$1 = 0.0,
      $s$0 = 0,
      $s$1 = 0,
      $s35$0 = 0,
      $s668$0436 = 0,
      $s668$1 = 0,
      $s715$0$lcssa = 0,
      $s715$0428 = 0,
      $s753$0 = 0,
      $s753$1440 = 0,
      $s753$2 = 0;
    var $scevgep513 = 0,
      $scevgep513514 = 0,
      $shl280 = 0,
      $shr283 = 0,
      $shr285 = 0,
      $small$1 = 0.0,
      $spec$select = 0,
      $spec$select395 = 0,
      $spec$select396 = 0,
      $spec$select396521 = 0,
      $spec$select396523 = 0,
      $spec$select397 = 0,
      $spec$select399 = 0.0,
      $spec$select401 = 0,
      $spec$select402 = 0,
      $spec$select403 = 0,
      $spec$select405 = 0,
      $spec$select408 = 0,
      $spec$select410 = 0,
      $spec$select412 = 0.0;
    var $spec$select413 = 0,
      $spec$select414 = 0,
      $spec$select416 = 0,
      $spec$select417 = 0,
      $spec$select418 = 0.0,
      $spec$select419 = 0.0,
      $spec$select420 = 0.0,
      $sub = 0.0,
      $sub$ptr$div = 0,
      $sub$ptr$div321 = 0,
      $sub$ptr$div347 = 0,
      $sub$ptr$div430 = 0,
      $sub$ptr$div511 = 0,
      $sub$ptr$lhs$cast = 0,
      $sub$ptr$lhs$cast151 = 0,
      $sub$ptr$lhs$cast160 = 0,
      $sub$ptr$lhs$cast173$pre$phiZZZZ2D = 0,
      $sub$ptr$lhs$cast305 = 0,
      $sub$ptr$lhs$cast344 = 0,
      $sub$ptr$lhs$cast508 = 0;
    var $sub$ptr$lhs$cast633 = 0,
      $sub$ptr$lhs$cast694 = 0,
      $sub$ptr$lhs$cast787 = 0,
      $sub$ptr$lhs$cast811 = 0,
      $sub$ptr$rhs$cast$le = 0,
      $sub$ptr$rhs$cast152 = 0,
      $sub$ptr$rhs$cast161 = 0,
      $sub$ptr$rhs$cast174$pre$phiZZZZ2D = 0,
      $sub$ptr$rhs$cast306 = 0,
      $sub$ptr$rhs$cast319 = 0,
      $sub$ptr$rhs$cast345 = 0,
      $sub$ptr$rhs$cast428 = 0,
      $sub$ptr$rhs$cast634 = 0,
      $sub$ptr$rhs$cast634447 = 0,
      $sub$ptr$rhs$cast649 = 0,
      $sub$ptr$rhs$cast695 = 0,
      $sub$ptr$rhs$cast788 = 0,
      $sub$ptr$rhs$cast812 = 0,
      $sub$ptr$sub = 0,
      $sub$ptr$sub145 = 0;
    var $sub$ptr$sub153 = 0,
      $sub$ptr$sub159 = 0,
      $sub$ptr$sub162 = 0,
      $sub$ptr$sub172 = 0,
      $sub$ptr$sub175 = 0,
      $sub$ptr$sub307 = 0,
      $sub$ptr$sub320 = 0,
      $sub$ptr$sub346 = 0,
      $sub$ptr$sub429 = 0,
      $sub$ptr$sub510 = 0,
      $sub$ptr$sub635 = 0,
      $sub$ptr$sub635448 = 0,
      $sub$ptr$sub650 = 0,
      $sub$ptr$sub650$pn = 0,
      $sub$ptr$sub696 = 0,
      $sub$ptr$sub789 = 0,
      $sub$ptr$sub813 = 0,
      $sub124 = 0.0,
      $sub146 = 0,
      $sub181 = 0;
    var $sub203 = 0,
      $sub219 = 0.0,
      $sub256 = 0,
      $sub264 = 0,
      $sub281 = 0,
      $sub336 = 0,
      $sub343 = 0,
      $sub357 = 0,
      $sub409 = 0,
      $sub478 = 0,
      $sub480 = 0,
      $sub514 = 0,
      $sub562 = 0,
      $sub626 = 0,
      $sub735 = 0,
      $sub74 = 0,
      $sub806 = 0,
      $sub85 = 0.0,
      $sub86 = 0.0,
      $sub88 = 0.0;
    var $sub91 = 0.0,
      $sub97 = 0,
      $t$addr$0 = 0,
      $t$addr$1 = 0,
      $tobool129 = 0,
      $tobool13 = 0,
      $tobool135 = 0,
      $tobool139 = 0,
      $tobool140 = 0,
      $tobool222 = 0,
      $tobool244 = 0,
      $tobool252 = 0,
      $tobool290 = 0,
      $tobool290519 = 0,
      $tobool294 = 0,
      $tobool341 = 0,
      $tobool37 = 0,
      $tobool371 = 0,
      $tobool380 = 0,
      $tobool400 = 0;
    var $tobool454 = 0,
      $tobool484 = 0,
      $tobool490 = 0,
      $tobool56 = 0,
      $tobool609 = 0,
      $tobool609$not = 0,
      $tobool63 = 0,
      $tobool703 = 0,
      $tobool76 = 0,
      $tobool76421 = 0,
      $tobool781 = 0,
      $tobool79 = 0,
      $tobool9 = 0,
      $w$add653 = 0,
      $xor = 0,
      $xor167 = 0,
      $xor186 = 0,
      $xor655 = 0,
      $xor816 = 0,
      $y$addr$0 = 0.0;
    var $y$addr$1 = 0.0,
      $y$addr$2 = 0.0,
      $y$addr$3 = 0.0,
      $y$addr$4 = 0.0,
      $z$0 = 0,
      $z$1 = 0,
      $z$2$lcssa = 0,
      $z$2501 = 0,
      $z$3$lcssa = 0,
      $z$3497 = 0,
      $z$4$lcssa = 0,
      $z$4487 = 0,
      $z$5 = 0,
      $z$8 = 0,
      $z$9$lcssa = 0,
      $z$9459 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 560) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560 | 0);
    $big = (sp + 32) | 0;
    $e2 = (sp + 536) | 0;
    $buf = sp;
    $sub$ptr$rhs$cast$le = $buf;
    $ebuf0 = (sp + 540) | 0;
    HEAP32[$e2 >> 2] = 0;
    $arrayidx = ($ebuf0 + 12) | 0;
    $0 = ___DOUBLE_BITS_527($y) | 0;
    $1 = getTempRet0() | 0;
    $2 = ($1 | 0) < 0;
    if ($2) {
      $sub = -$y;
      $3 = ___DOUBLE_BITS_527($sub) | 0;
      $4 = getTempRet0() | 0;
      $8 = $4;
      $85 = $3;
      $pl$0 = 1;
      $prefix$0 = 8907;
      $y$addr$0 = $sub;
    } else {
      $and = $fl & 2048;
      $tobool9 = ($and | 0) == 0;
      $and12 = $fl & 1;
      $tobool13 = ($and12 | 0) == 0;
      $$ = $tobool13 ? 8908 : 8913;
      $spec$select416 = $tobool9 ? $$ : 8910;
      $5 = $fl & 2049;
      $6 = ($5 | 0) != 0;
      $spec$select417 = $6 & 1;
      $8 = $1;
      $85 = $0;
      $pl$0 = $spec$select417;
      $prefix$0 = $spec$select416;
      $y$addr$0 = $y;
    }
    $7 = $8 & 2146435072;
    $9 = 0 == 0;
    $10 = ($7 | 0) == 2146435072;
    $11 = $9 & $10;
    do {
      if ($11) {
        $and36 = $t & 32;
        $tobool37 = ($and36 | 0) != 0;
        $cond = $tobool37 ? 8926 : 8930;
        $cmp38 = ($y$addr$0 != $y$addr$0) | (0.0 != 0.0);
        $cond43 = $tobool37 ? 8934 : 8938;
        $s35$0 = $cmp38 ? $cond43 : $cond;
        $add = ($pl$0 + 3) | 0;
        $and45 = $fl & -65537;
        _pad_524($f, 32, $w, $add, $and45);
        _out($f, $prefix$0, $pl$0);
        _out($f, $s35$0, 3);
        $xor = $fl ^ 8192;
        _pad_524($f, 32, $w, $add, $xor);
        $add653$sink524 = $add;
      } else {
        $call55 = +_frexp($y$addr$0, $e2);
        $mul = $call55 * 2.0;
        $tobool56 = $mul != 0.0;
        if ($tobool56) {
          $12 = HEAP32[$e2 >> 2] | 0;
          $dec = ($12 + -1) | 0;
          HEAP32[$e2 >> 2] = $dec;
        }
        $or = $t | 32;
        $cmp59 = ($or | 0) == 97;
        if ($cmp59) {
          $and62 = $t & 32;
          $tobool63 = ($and62 | 0) == 0;
          $add$ptr65 = ($prefix$0 + 9) | 0;
          $spec$select = $tobool63 ? $prefix$0 : $add$ptr65;
          $add67 = $pl$0 | 2;
          $13 = $p >>> 0 > 11;
          $sub74 = (12 - $p) | 0;
          $tobool76421 = ($sub74 | 0) == 0;
          $tobool76 = $13 | $tobool76421;
          do {
            if ($tobool76) {
              $y$addr$1 = $mul;
            } else {
              $re$1426 = $sub74;
              $round$0425 = 8.0;
              while (1) {
                $dec78 = ($re$1426 + -1) | 0;
                $mul80 = $round$0425 * 16.0;
                $tobool79 = ($dec78 | 0) == 0;
                if ($tobool79) {
                  break;
                } else {
                  $re$1426 = $dec78;
                  $round$0425 = $mul80;
                }
              }
              $14 = HEAP8[$spec$select >> 0] | 0;
              $cmp82 = ($14 << 24) >> 24 == 45;
              if ($cmp82) {
                $sub85 = -$mul;
                $sub86 = $sub85 - $mul80;
                $add87 = $mul80 + $sub86;
                $sub88 = -$add87;
                $y$addr$1 = $sub88;
                break;
              } else {
                $add90 = $mul + $mul80;
                $sub91 = $add90 - $mul80;
                $y$addr$1 = $sub91;
                break;
              }
            }
          } while (0);
          $15 = HEAP32[$e2 >> 2] | 0;
          $cmp94 = ($15 | 0) < 0;
          $sub97 = (0 - $15) | 0;
          $cond100 = $cmp94 ? $sub97 : $15;
          $16 = ($cond100 | 0) < 0;
          $17 = ($16 << 31) >> 31;
          $18 = _fmt_u($cond100, $17, $arrayidx) | 0;
          $cmp103 = ($18 | 0) == ($arrayidx | 0);
          if ($cmp103) {
            $incdec$ptr106 = ($ebuf0 + 11) | 0;
            HEAP8[$incdec$ptr106 >> 0] = 48;
            $estr$0 = $incdec$ptr106;
          } else {
            $estr$0 = $18;
          }
          $19 = $15 >> 31;
          $20 = $19 & 2;
          $21 = ($20 + 43) | 0;
          $conv111 = $21 & 255;
          $incdec$ptr112 = ($estr$0 + -1) | 0;
          HEAP8[$incdec$ptr112 >> 0] = $conv111;
          $add113 = ($t + 15) | 0;
          $conv114 = $add113 & 255;
          $incdec$ptr115 = ($estr$0 + -2) | 0;
          HEAP8[$incdec$ptr115 >> 0] = $conv114;
          $cmp131 = ($p | 0) < 1;
          $and134 = $fl & 8;
          $tobool135 = ($and134 | 0) == 0;
          $s$0 = $buf;
          $y$addr$2 = $y$addr$1;
          while (1) {
            $conv116 = ~~$y$addr$2;
            $arrayidx117 = (512 + $conv116) | 0;
            $22 = HEAP8[$arrayidx117 >> 0] | 0;
            $conv118393 = $22 & 255;
            $or120 = $and62 | $conv118393;
            $conv121 = $or120 & 255;
            $incdec$ptr122 = ($s$0 + 1) | 0;
            HEAP8[$s$0 >> 0] = $conv121;
            $conv123 = +($conv116 | 0);
            $sub124 = $y$addr$2 - $conv123;
            $mul125 = $sub124 * 16.0;
            $sub$ptr$lhs$cast = $incdec$ptr122;
            $sub$ptr$sub = ($sub$ptr$lhs$cast - $sub$ptr$rhs$cast$le) | 0;
            $cmp127 = ($sub$ptr$sub | 0) == 1;
            if ($cmp127) {
              $tobool129 = $mul125 == 0.0;
              $or$cond1$not = $cmp131 & $tobool129;
              $or$cond = $tobool135 & $or$cond1$not;
              if ($or$cond) {
                $s$1 = $incdec$ptr122;
              } else {
                $incdec$ptr137 = ($s$0 + 2) | 0;
                HEAP8[$incdec$ptr122 >> 0] = 46;
                $s$1 = $incdec$ptr137;
              }
            } else {
              $s$1 = $incdec$ptr122;
            }
            $tobool139 = $mul125 != 0.0;
            if ($tobool139) {
              $s$0 = $s$1;
              $y$addr$2 = $mul125;
            } else {
              break;
            }
          }
          $tobool140 = ($p | 0) == 0;
          $$pre517 = $s$1;
          if ($tobool140) {
            label = 25;
          } else {
            $sub$ptr$sub145 = (-2 - $sub$ptr$rhs$cast$le) | 0;
            $sub146 = ($sub$ptr$sub145 + $$pre517) | 0;
            $cmp147 = ($sub146 | 0) < ($p | 0);
            if ($cmp147) {
              $sub$ptr$lhs$cast151 = $arrayidx;
              $sub$ptr$rhs$cast152 = $incdec$ptr115;
              $sub$ptr$sub153 = ($p + 2) | 0;
              $add150 = ($sub$ptr$sub153 + $sub$ptr$lhs$cast151) | 0;
              $add154 = ($add150 - $sub$ptr$rhs$cast152) | 0;
              $l$0 = $add154;
              $sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast151;
              $sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast152;
            } else {
              label = 25;
            }
          }
          if ((label | 0) == 25) {
            $sub$ptr$lhs$cast160 = $arrayidx;
            $sub$ptr$rhs$cast161 = $incdec$ptr115;
            $sub$ptr$sub159 = ($sub$ptr$lhs$cast160 - $sub$ptr$rhs$cast$le) | 0;
            $sub$ptr$sub162 = ($sub$ptr$sub159 - $sub$ptr$rhs$cast161) | 0;
            $add163 = ($sub$ptr$sub162 + $$pre517) | 0;
            $l$0 = $add163;
            $sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast160;
            $sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast161;
          }
          $add165 = ($l$0 + $add67) | 0;
          _pad_524($f, 32, $w, $add165, $fl);
          _out($f, $spec$select, $add67);
          $xor167 = $fl ^ 65536;
          _pad_524($f, 48, $w, $add165, $xor167);
          $sub$ptr$sub172 = ($$pre517 - $sub$ptr$rhs$cast$le) | 0;
          _out($f, $buf, $sub$ptr$sub172);
          $sub$ptr$sub175 =
            ($sub$ptr$lhs$cast173$pre$phiZZZZ2D -
              $sub$ptr$rhs$cast174$pre$phiZZZZ2D) |
            0;
          $23 = ($sub$ptr$sub172 + $sub$ptr$sub175) | 0;
          $sub181 = ($l$0 - $23) | 0;
          _pad_524($f, 48, $sub181, 0, 0);
          _out($f, $incdec$ptr115, $sub$ptr$sub175);
          $xor186 = $fl ^ 8192;
          _pad_524($f, 32, $w, $add165, $xor186);
          $add653$sink524 = $add165;
          break;
        }
        $cmp196 = ($p | 0) < 0;
        $spec$select395 = $cmp196 ? 6 : $p;
        if ($tobool56) {
          $mul202 = $mul * 268435456.0;
          $24 = HEAP32[$e2 >> 2] | 0;
          $sub203 = ($24 + -28) | 0;
          HEAP32[$e2 >> 2] = $sub203;
          $$pr = $sub203;
          $y$addr$3 = $mul202;
        } else {
          $$pre = HEAP32[$e2 >> 2] | 0;
          $$pr = $$pre;
          $y$addr$3 = $mul;
        }
        $cmp205 = ($$pr | 0) < 0;
        $add$ptr213 = ($big + 288) | 0;
        $z$0 = $cmp205 ? $big : $add$ptr213;
        $y$addr$4 = $y$addr$3;
        $z$1 = $z$0;
        while (1) {
          $conv216 = ~~$y$addr$4 >>> 0;
          HEAP32[$z$1 >> 2] = $conv216;
          $incdec$ptr217 = ($z$1 + 4) | 0;
          $conv218 = +($conv216 >>> 0);
          $sub219 = $y$addr$4 - $conv218;
          $mul220 = $sub219 * 1.0e9;
          $tobool222 = $mul220 != 0.0;
          if ($tobool222) {
            $y$addr$4 = $mul220;
            $z$1 = $incdec$ptr217;
          } else {
            break;
          }
        }
        $sub$ptr$rhs$cast345 = $z$0;
        $cmp225500 = ($$pr | 0) > 0;
        if ($cmp225500) {
          $26 = $$pr;
          $a$1502 = $z$0;
          $z$2501 = $incdec$ptr217;
          while (1) {
            $25 = ($26 | 0) < 29;
            $cond233 = $25 ? $26 : 29;
            $d$0491 = ($z$2501 + -4) | 0;
            $cmp235492 = $d$0491 >>> 0 < $a$1502 >>> 0;
            if ($cmp235492) {
              $a$2 = $a$1502;
            } else {
              $carry$0493 = 0;
              $d$0494 = $d$0491;
              while (1) {
                $27 = HEAP32[$d$0494 >> 2] | 0;
                $28 = _bitshift64Shl($27 | 0, 0, $cond233 | 0) | 0;
                $29 = getTempRet0() | 0;
                $30 = _i64Add($28 | 0, $29 | 0, $carry$0493 | 0, 0) | 0;
                $31 = getTempRet0() | 0;
                $32 = ___udivdi3($30 | 0, $31 | 0, 1000000000, 0) | 0;
                $33 = getTempRet0() | 0;
                $34 = ___muldi3($32 | 0, $33 | 0, 1000000000, 0) | 0;
                $35 = getTempRet0() | 0;
                $36 = _i64Subtract($30 | 0, $31 | 0, $34 | 0, $35 | 0) | 0;
                $37 = getTempRet0() | 0;
                HEAP32[$d$0494 >> 2] = $36;
                $d$0 = ($d$0494 + -4) | 0;
                $cmp235 = $d$0 >>> 0 < $a$1502 >>> 0;
                if ($cmp235) {
                  break;
                } else {
                  $carry$0493 = $32;
                  $d$0494 = $d$0;
                }
              }
              $tobool244 = ($32 | 0) == 0;
              if ($tobool244) {
                $a$2 = $a$1502;
              } else {
                $incdec$ptr246 = ($a$1502 + -4) | 0;
                HEAP32[$incdec$ptr246 >> 2] = $32;
                $a$2 = $incdec$ptr246;
              }
            }
            $cmp249496 = $z$2501 >>> 0 > $a$2 >>> 0;
            L57: do {
              if ($cmp249496) {
                $z$3497 = $z$2501;
                while (1) {
                  $arrayidx251 = ($z$3497 + -4) | 0;
                  $38 = HEAP32[$arrayidx251 >> 2] | 0;
                  $tobool252 = ($38 | 0) == 0;
                  if (!$tobool252) {
                    $z$3$lcssa = $z$3497;
                    break L57;
                  }
                  $cmp249 = $arrayidx251 >>> 0 > $a$2 >>> 0;
                  if ($cmp249) {
                    $z$3497 = $arrayidx251;
                  } else {
                    $z$3$lcssa = $arrayidx251;
                    break;
                  }
                }
              } else {
                $z$3$lcssa = $z$2501;
              }
            } while (0);
            $39 = HEAP32[$e2 >> 2] | 0;
            $sub256 = ($39 - $cond233) | 0;
            HEAP32[$e2 >> 2] = $sub256;
            $cmp225 = ($sub256 | 0) > 0;
            if ($cmp225) {
              $26 = $sub256;
              $a$1502 = $a$2;
              $z$2501 = $z$3$lcssa;
            } else {
              $$pr415 = $sub256;
              $a$1$lcssa = $a$2;
              $z$2$lcssa = $z$3$lcssa;
              break;
            }
          }
        } else {
          $$pr415 = $$pr;
          $a$1$lcssa = $z$0;
          $z$2$lcssa = $incdec$ptr217;
        }
        $cmp259486 = ($$pr415 | 0) < 0;
        if ($cmp259486) {
          $add273 = ($spec$select395 + 25) | 0;
          $div274 = (($add273 | 0) / 9) & -1;
          $add275 = ($div274 + 1) | 0;
          $cmp299 = ($or | 0) == 102;
          $40 = $$pr415;
          $a$3488 = $a$1$lcssa;
          $z$4487 = $z$2$lcssa;
          while (1) {
            $sub264 = (0 - $40) | 0;
            $41 = ($sub264 | 0) < 9;
            $cond271 = $41 ? $sub264 : 9;
            $cmp277482 = $a$3488 >>> 0 < $z$4487 >>> 0;
            if ($cmp277482) {
              $shl280 = 1 << $cond271;
              $sub281 = ($shl280 + -1) | 0;
              $shr285 = 1000000000 >>> $cond271;
              $carry262$0484 = 0;
              $d$1483 = $a$3488;
              while (1) {
                $43 = HEAP32[$d$1483 >> 2] | 0;
                $and282 = $43 & $sub281;
                $shr283 = $43 >>> $cond271;
                $add284 = ($shr283 + $carry262$0484) | 0;
                HEAP32[$d$1483 >> 2] = $add284;
                $mul286 = Math_imul($and282, $shr285) | 0;
                $incdec$ptr288 = ($d$1483 + 4) | 0;
                $cmp277 = $incdec$ptr288 >>> 0 < $z$4487 >>> 0;
                if ($cmp277) {
                  $carry262$0484 = $mul286;
                  $d$1483 = $incdec$ptr288;
                } else {
                  break;
                }
              }
              $44 = HEAP32[$a$3488 >> 2] | 0;
              $tobool290 = ($44 | 0) == 0;
              $incdec$ptr292 = ($a$3488 + 4) | 0;
              $spec$select396 = $tobool290 ? $incdec$ptr292 : $a$3488;
              $tobool294 = ($mul286 | 0) == 0;
              if ($tobool294) {
                $spec$select396523 = $spec$select396;
                $z$5 = $z$4487;
              } else {
                $incdec$ptr296 = ($z$4487 + 4) | 0;
                HEAP32[$z$4487 >> 2] = $mul286;
                $spec$select396523 = $spec$select396;
                $z$5 = $incdec$ptr296;
              }
            } else {
              $42 = HEAP32[$a$3488 >> 2] | 0;
              $tobool290519 = ($42 | 0) == 0;
              $incdec$ptr292520 = ($a$3488 + 4) | 0;
              $spec$select396521 = $tobool290519 ? $incdec$ptr292520 : $a$3488;
              $spec$select396523 = $spec$select396521;
              $z$5 = $z$4487;
            }
            $cond304 = $cmp299 ? $z$0 : $spec$select396523;
            $sub$ptr$lhs$cast305 = $z$5;
            $sub$ptr$rhs$cast306 = $cond304;
            $sub$ptr$sub307 = ($sub$ptr$lhs$cast305 - $sub$ptr$rhs$cast306) | 0;
            $sub$ptr$div = $sub$ptr$sub307 >> 2;
            $cmp308 = ($sub$ptr$div | 0) > ($add275 | 0);
            $add$ptr311 = ($cond304 + ($add275 << 2)) | 0;
            $spec$select397 = $cmp308 ? $add$ptr311 : $z$5;
            $45 = HEAP32[$e2 >> 2] | 0;
            $add313 = ($45 + $cond271) | 0;
            HEAP32[$e2 >> 2] = $add313;
            $cmp259 = ($add313 | 0) < 0;
            if ($cmp259) {
              $40 = $add313;
              $a$3488 = $spec$select396523;
              $z$4487 = $spec$select397;
            } else {
              $a$3$lcssa = $spec$select396523;
              $z$4$lcssa = $spec$select397;
              break;
            }
          }
        } else {
          $a$3$lcssa = $a$1$lcssa;
          $z$4$lcssa = $z$2$lcssa;
        }
        $cmp315 = $a$3$lcssa >>> 0 < $z$4$lcssa >>> 0;
        if ($cmp315) {
          $sub$ptr$rhs$cast319 = $a$3$lcssa;
          $sub$ptr$sub320 = ($sub$ptr$rhs$cast345 - $sub$ptr$rhs$cast319) | 0;
          $sub$ptr$div321 = $sub$ptr$sub320 >> 2;
          $mul322 = ($sub$ptr$div321 * 9) | 0;
          $46 = HEAP32[$a$3$lcssa >> 2] | 0;
          $cmp324478 = $46 >>> 0 < 10;
          if ($cmp324478) {
            $e$1 = $mul322;
          } else {
            $e$0480 = $mul322;
            $i$0479 = 10;
            while (1) {
              $mul328 = ($i$0479 * 10) | 0;
              $inc = ($e$0480 + 1) | 0;
              $cmp324 = $46 >>> 0 < $mul328 >>> 0;
              if ($cmp324) {
                $e$1 = $inc;
                break;
              } else {
                $e$0480 = $inc;
                $i$0479 = $mul328;
              }
            }
          }
        } else {
          $e$1 = 0;
        }
        $cmp333 = ($or | 0) == 102;
        $mul335 = $cmp333 ? 0 : $e$1;
        $sub336 = ($spec$select395 - $mul335) | 0;
        $cmp338 = ($or | 0) == 103;
        $tobool341 = ($spec$select395 | 0) != 0;
        $47 = $tobool341 & $cmp338;
        $land$ext$neg = ($47 << 31) >> 31;
        $sub343 = ($sub336 + $land$ext$neg) | 0;
        $sub$ptr$lhs$cast344 = $z$4$lcssa;
        $sub$ptr$sub346 = ($sub$ptr$lhs$cast344 - $sub$ptr$rhs$cast345) | 0;
        $sub$ptr$div347 = $sub$ptr$sub346 >> 2;
        $48 = ($sub$ptr$div347 * 9) | 0;
        $mul349 = ($48 + -9) | 0;
        $cmp350 = ($sub343 | 0) < ($mul349 | 0);
        if ($cmp350) {
          $add$ptr354 = ($z$0 + 4) | 0;
          $add355 = ($sub343 + 9216) | 0;
          $div356 = (($add355 | 0) / 9) & -1;
          $sub357 = ($div356 + -1024) | 0;
          $add$ptr358 = ($add$ptr354 + ($sub357 << 2)) | 0;
          $49 = ($div356 * 9) | 0;
          $50 = ($add355 - $49) | 0;
          $cmp363474 = ($50 | 0) < 8;
          if ($cmp363474) {
            $i$1475 = 10;
            $j$0$in476 = $50;
            while (1) {
              $j$0 = ($j$0$in476 + 1) | 0;
              $mul367 = ($i$1475 * 10) | 0;
              $cmp363 = ($j$0$in476 | 0) < 7;
              if ($cmp363) {
                $i$1475 = $mul367;
                $j$0$in476 = $j$0;
              } else {
                $i$1$lcssa = $mul367;
                break;
              }
            }
          } else {
            $i$1$lcssa = 10;
          }
          $51 = HEAP32[$add$ptr358 >> 2] | 0;
          $div378 = (($51 >>> 0) / ($i$1$lcssa >>> 0)) & -1;
          $52 = Math_imul($div378, $i$1$lcssa) | 0;
          $53 = ($51 - $52) | 0;
          $tobool371 = ($53 | 0) == 0;
          $add$ptr373 = ($add$ptr358 + 4) | 0;
          $cmp374 = ($add$ptr373 | 0) == ($z$4$lcssa | 0);
          $or$cond398 = $cmp374 & $tobool371;
          if ($or$cond398) {
            $a$8 = $a$3$lcssa;
            $d$4 = $add$ptr358;
            $e$4 = $e$1;
          } else {
            $and379 = $div378 & 1;
            $tobool380 = ($and379 | 0) == 0;
            $spec$select399 = $tobool380
              ? 9007199254740992.0
              : 9007199254740994.0;
            $div384 = $i$1$lcssa >>> 1;
            $cmp385 = $53 >>> 0 < $div384 >>> 0;
            $cmp390 = ($53 | 0) == ($div384 | 0);
            $or$cond400 = $cmp374 & $cmp390;
            $spec$select412 = $or$cond400 ? 1.0 : 1.5;
            $spec$select418 = $cmp385 ? 0.5 : $spec$select412;
            $tobool400 = ($pl$0 | 0) == 0;
            if ($tobool400) {
              $round377$1 = $spec$select399;
              $small$1 = $spec$select418;
            } else {
              $54 = HEAP8[$prefix$0 >> 0] | 0;
              $cmp403 = ($54 << 24) >> 24 == 45;
              $mul406 = -$spec$select399;
              $mul407 = -$spec$select418;
              $spec$select419 = $cmp403 ? $mul406 : $spec$select399;
              $spec$select420 = $cmp403 ? $mul407 : $spec$select418;
              $round377$1 = $spec$select419;
              $small$1 = $spec$select420;
            }
            $sub409 = ($51 - $53) | 0;
            HEAP32[$add$ptr358 >> 2] = $sub409;
            $add410 = $round377$1 + $small$1;
            $cmp411 = $add410 != $round377$1;
            if ($cmp411) {
              $add414 = ($sub409 + $i$1$lcssa) | 0;
              HEAP32[$add$ptr358 >> 2] = $add414;
              $cmp416469 = $add414 >>> 0 > 999999999;
              if ($cmp416469) {
                $a$5471 = $a$3$lcssa;
                $d$2470 = $add$ptr358;
                while (1) {
                  $incdec$ptr419 = ($d$2470 + -4) | 0;
                  HEAP32[$d$2470 >> 2] = 0;
                  $cmp420 = $incdec$ptr419 >>> 0 < $a$5471 >>> 0;
                  if ($cmp420) {
                    $incdec$ptr423 = ($a$5471 + -4) | 0;
                    HEAP32[$incdec$ptr423 >> 2] = 0;
                    $a$6 = $incdec$ptr423;
                  } else {
                    $a$6 = $a$5471;
                  }
                  $55 = HEAP32[$incdec$ptr419 >> 2] | 0;
                  $inc425 = ($55 + 1) | 0;
                  HEAP32[$incdec$ptr419 >> 2] = $inc425;
                  $cmp416 = $inc425 >>> 0 > 999999999;
                  if ($cmp416) {
                    $a$5471 = $a$6;
                    $d$2470 = $incdec$ptr419;
                  } else {
                    $a$5$lcssa = $a$6;
                    $d$2$lcssa = $incdec$ptr419;
                    break;
                  }
                }
              } else {
                $a$5$lcssa = $a$3$lcssa;
                $d$2$lcssa = $add$ptr358;
              }
              $sub$ptr$rhs$cast428 = $a$5$lcssa;
              $sub$ptr$sub429 =
                ($sub$ptr$rhs$cast345 - $sub$ptr$rhs$cast428) | 0;
              $sub$ptr$div430 = $sub$ptr$sub429 >> 2;
              $mul431 = ($sub$ptr$div430 * 9) | 0;
              $56 = HEAP32[$a$5$lcssa >> 2] | 0;
              $cmp433465 = $56 >>> 0 < 10;
              if ($cmp433465) {
                $a$8 = $a$5$lcssa;
                $d$4 = $d$2$lcssa;
                $e$4 = $mul431;
              } else {
                $e$2467 = $mul431;
                $i$2466 = 10;
                while (1) {
                  $mul437 = ($i$2466 * 10) | 0;
                  $inc438 = ($e$2467 + 1) | 0;
                  $cmp433 = $56 >>> 0 < $mul437 >>> 0;
                  if ($cmp433) {
                    $a$8 = $a$5$lcssa;
                    $d$4 = $d$2$lcssa;
                    $e$4 = $inc438;
                    break;
                  } else {
                    $e$2467 = $inc438;
                    $i$2466 = $mul437;
                  }
                }
              }
            } else {
              $a$8 = $a$3$lcssa;
              $d$4 = $add$ptr358;
              $e$4 = $e$1;
            }
          }
          $add$ptr442 = ($d$4 + 4) | 0;
          $cmp443 = $z$4$lcssa >>> 0 > $add$ptr442 >>> 0;
          $spec$select401 = $cmp443 ? $add$ptr442 : $z$4$lcssa;
          $a$9 = $a$8;
          $e$5 = $e$4;
          $z$8 = $spec$select401;
        } else {
          $a$9 = $a$3$lcssa;
          $e$5 = $e$1;
          $z$8 = $z$4$lcssa;
        }
        $sub626 = (0 - $e$5) | 0;
        $cmp450458 = $z$8 >>> 0 > $a$9 >>> 0;
        L109: do {
          if ($cmp450458) {
            $z$9459 = $z$8;
            while (1) {
              $arrayidx453 = ($z$9459 + -4) | 0;
              $57 = HEAP32[$arrayidx453 >> 2] | 0;
              $tobool454 = ($57 | 0) == 0;
              if (!$tobool454) {
                $cmp450$lcssa = 1;
                $z$9$lcssa = $z$9459;
                break L109;
              }
              $cmp450 = $arrayidx453 >>> 0 > $a$9 >>> 0;
              if ($cmp450) {
                $z$9459 = $arrayidx453;
              } else {
                $cmp450$lcssa = 0;
                $z$9$lcssa = $arrayidx453;
                break;
              }
            }
          } else {
            $cmp450$lcssa = 0;
            $z$9$lcssa = $z$8;
          }
        } while (0);
        do {
          if ($cmp338) {
            $not$tobool341 = $tobool341 ^ 1;
            $inc468 = $not$tobool341 & 1;
            $spec$select402 = ($spec$select395 + $inc468) | 0;
            $cmp470 = ($spec$select402 | 0) > ($e$5 | 0);
            $cmp473 = ($e$5 | 0) > -5;
            $or$cond2 = $cmp470 & $cmp473;
            if ($or$cond2) {
              $dec476 = ($t + -1) | 0;
              $add477$neg = ($spec$select402 + -1) | 0;
              $sub478 = ($add477$neg - $e$5) | 0;
              $p$addr$2 = $sub478;
              $t$addr$0 = $dec476;
            } else {
              $sub480 = ($t + -2) | 0;
              $dec481 = ($spec$select402 + -1) | 0;
              $p$addr$2 = $dec481;
              $t$addr$0 = $sub480;
            }
            $and483 = $fl & 8;
            $tobool484 = ($and483 | 0) == 0;
            if ($tobool484) {
              if ($cmp450$lcssa) {
                $arrayidx489 = ($z$9$lcssa + -4) | 0;
                $58 = HEAP32[$arrayidx489 >> 2] | 0;
                $tobool490 = ($58 | 0) == 0;
                if ($tobool490) {
                  $j$2 = 9;
                } else {
                  $rem494453 = ($58 >>> 0) % 10 & -1;
                  $cmp495454 = ($rem494453 | 0) == 0;
                  if ($cmp495454) {
                    $i$3455 = 10;
                    $j$1456 = 0;
                    while (1) {
                      $mul499 = ($i$3455 * 10) | 0;
                      $inc500 = ($j$1456 + 1) | 0;
                      $rem494 = ($58 >>> 0) % ($mul499 >>> 0) & -1;
                      $cmp495 = ($rem494 | 0) == 0;
                      if ($cmp495) {
                        $i$3455 = $mul499;
                        $j$1456 = $inc500;
                      } else {
                        $j$2 = $inc500;
                        break;
                      }
                    }
                  } else {
                    $j$2 = 0;
                  }
                }
              } else {
                $j$2 = 9;
              }
              $or504 = $t$addr$0 | 32;
              $cmp505 = ($or504 | 0) == 102;
              $sub$ptr$lhs$cast508 = $z$9$lcssa;
              $sub$ptr$sub510 =
                ($sub$ptr$lhs$cast508 - $sub$ptr$rhs$cast345) | 0;
              $sub$ptr$div511 = $sub$ptr$sub510 >> 2;
              $59 = ($sub$ptr$div511 * 9) | 0;
              $mul513 = ($59 + -9) | 0;
              if ($cmp505) {
                $sub514 = ($mul513 - $j$2) | 0;
                $60 = ($sub514 | 0) > 0;
                $spec$select403 = $60 ? $sub514 : 0;
                $cmp528 = ($p$addr$2 | 0) < ($spec$select403 | 0);
                $spec$select413 = $cmp528 ? $p$addr$2 : $spec$select403;
                $p$addr$3 = $spec$select413;
                $t$addr$1 = $t$addr$0;
                break;
              } else {
                $add561 = ($mul513 + $e$5) | 0;
                $sub562 = ($add561 - $j$2) | 0;
                $61 = ($sub562 | 0) > 0;
                $spec$select405 = $61 ? $sub562 : 0;
                $cmp577 = ($p$addr$2 | 0) < ($spec$select405 | 0);
                $spec$select414 = $cmp577 ? $p$addr$2 : $spec$select405;
                $p$addr$3 = $spec$select414;
                $t$addr$1 = $t$addr$0;
                break;
              }
            } else {
              $p$addr$3 = $p$addr$2;
              $t$addr$1 = $t$addr$0;
            }
          } else {
            $p$addr$3 = $spec$select395;
            $t$addr$1 = $t;
          }
        } while (0);
        $tobool609 = ($p$addr$3 | 0) != 0;
        $and610 = $fl >>> 3;
        $and610$lobit = $and610 & 1;
        $62 = $tobool609 ? 1 : $and610$lobit;
        $or613 = $t$addr$1 | 32;
        $cmp614 = ($or613 | 0) == 102;
        if ($cmp614) {
          $cmp617 = ($e$5 | 0) > 0;
          $add620 = $cmp617 ? $e$5 : 0;
          $estr$2 = 0;
          $sub$ptr$sub650$pn = $add620;
        } else {
          $cmp623 = ($e$5 | 0) < 0;
          $cond629 = $cmp623 ? $sub626 : $e$5;
          $63 = ($cond629 | 0) < 0;
          $64 = ($63 << 31) >> 31;
          $65 = _fmt_u($cond629, $64, $arrayidx) | 0;
          $sub$ptr$lhs$cast633 = $arrayidx;
          $sub$ptr$rhs$cast634447 = $65;
          $sub$ptr$sub635448 =
            ($sub$ptr$lhs$cast633 - $sub$ptr$rhs$cast634447) | 0;
          $cmp636449 = ($sub$ptr$sub635448 | 0) < 2;
          if ($cmp636449) {
            $estr$1450 = $65;
            while (1) {
              $incdec$ptr639 = ($estr$1450 + -1) | 0;
              HEAP8[$incdec$ptr639 >> 0] = 48;
              $sub$ptr$rhs$cast634 = $incdec$ptr639;
              $sub$ptr$sub635 =
                ($sub$ptr$lhs$cast633 - $sub$ptr$rhs$cast634) | 0;
              $cmp636 = ($sub$ptr$sub635 | 0) < 2;
              if ($cmp636) {
                $estr$1450 = $incdec$ptr639;
              } else {
                $estr$1$lcssa = $incdec$ptr639;
                break;
              }
            }
          } else {
            $estr$1$lcssa = $65;
          }
          $66 = $e$5 >> 31;
          $67 = $66 & 2;
          $68 = ($67 + 43) | 0;
          $conv644 = $68 & 255;
          $incdec$ptr645 = ($estr$1$lcssa + -1) | 0;
          HEAP8[$incdec$ptr645 >> 0] = $conv644;
          $conv646 = $t$addr$1 & 255;
          $incdec$ptr647 = ($estr$1$lcssa + -2) | 0;
          HEAP8[$incdec$ptr647 >> 0] = $conv646;
          $sub$ptr$rhs$cast649 = $incdec$ptr647;
          $sub$ptr$sub650 = ($sub$ptr$lhs$cast633 - $sub$ptr$rhs$cast649) | 0;
          $estr$2 = $incdec$ptr647;
          $sub$ptr$sub650$pn = $sub$ptr$sub650;
        }
        $add608 = ($pl$0 + 1) | 0;
        $add612 = ($add608 + $p$addr$3) | 0;
        $l$1 = ($add612 + $62) | 0;
        $add653 = ($l$1 + $sub$ptr$sub650$pn) | 0;
        _pad_524($f, 32, $w, $add653, $fl);
        _out($f, $prefix$0, $pl$0);
        $xor655 = $fl ^ 65536;
        _pad_524($f, 48, $w, $add653, $xor655);
        if ($cmp614) {
          $cmp660 = $a$9 >>> 0 > $z$0 >>> 0;
          $spec$select408 = $cmp660 ? $z$0 : $a$9;
          $add$ptr671 = ($buf + 9) | 0;
          $sub$ptr$lhs$cast694 = $add$ptr671;
          $incdec$ptr689 = ($buf + 8) | 0;
          $d$5438 = $spec$select408;
          while (1) {
            $69 = HEAP32[$d$5438 >> 2] | 0;
            $70 = _fmt_u($69, 0, $add$ptr671) | 0;
            $cmp673 = ($d$5438 | 0) == ($spec$select408 | 0);
            if ($cmp673) {
              $cmp686 = ($70 | 0) == ($add$ptr671 | 0);
              if ($cmp686) {
                HEAP8[$incdec$ptr689 >> 0] = 48;
                $s668$1 = $incdec$ptr689;
              } else {
                $s668$1 = $70;
              }
            } else {
              $cmp678435 = $70 >>> 0 > $buf >>> 0;
              if ($cmp678435) {
                $71 = $70;
                $72 = ($71 - $sub$ptr$rhs$cast$le) | 0;
                _memset($buf | 0, 48, $72 | 0) | 0;
                $s668$0436 = $70;
                while (1) {
                  $incdec$ptr681 = ($s668$0436 + -1) | 0;
                  $cmp678 = $incdec$ptr681 >>> 0 > $buf >>> 0;
                  if ($cmp678) {
                    $s668$0436 = $incdec$ptr681;
                  } else {
                    $s668$1 = $incdec$ptr681;
                    break;
                  }
                }
              } else {
                $s668$1 = $70;
              }
            }
            $sub$ptr$rhs$cast695 = $s668$1;
            $sub$ptr$sub696 = ($sub$ptr$lhs$cast694 - $sub$ptr$rhs$cast695) | 0;
            _out($f, $s668$1, $sub$ptr$sub696);
            $incdec$ptr698 = ($d$5438 + 4) | 0;
            $cmp665 = $incdec$ptr698 >>> 0 > $z$0 >>> 0;
            if ($cmp665) {
              break;
            } else {
              $d$5438 = $incdec$ptr698;
            }
          }
          $tobool609$not = $tobool609 ^ 1;
          $and702 = $fl & 8;
          $tobool703 = ($and702 | 0) == 0;
          $or$cond409 = $tobool703 & $tobool609$not;
          if (!$or$cond409) {
            _out($f, 12809, 1);
          }
          $cmp707430 = $incdec$ptr698 >>> 0 < $z$9$lcssa >>> 0;
          $cmp710431 = ($p$addr$3 | 0) > 0;
          $73 = $cmp707430 & $cmp710431;
          if ($73) {
            $d$6432 = $incdec$ptr698;
            $p$addr$4433 = $p$addr$3;
            while (1) {
              $74 = HEAP32[$d$6432 >> 2] | 0;
              $75 = _fmt_u($74, 0, $add$ptr671) | 0;
              $cmp722427 = $75 >>> 0 > $buf >>> 0;
              if ($cmp722427) {
                $76 = $75;
                $77 = ($76 - $sub$ptr$rhs$cast$le) | 0;
                _memset($buf | 0, 48, $77 | 0) | 0;
                $s715$0428 = $75;
                while (1) {
                  $incdec$ptr725 = ($s715$0428 + -1) | 0;
                  $cmp722 = $incdec$ptr725 >>> 0 > $buf >>> 0;
                  if ($cmp722) {
                    $s715$0428 = $incdec$ptr725;
                  } else {
                    $s715$0$lcssa = $incdec$ptr725;
                    break;
                  }
                }
              } else {
                $s715$0$lcssa = $75;
              }
              $78 = ($p$addr$4433 | 0) < 9;
              $cond732 = $78 ? $p$addr$4433 : 9;
              _out($f, $s715$0$lcssa, $cond732);
              $incdec$ptr734 = ($d$6432 + 4) | 0;
              $sub735 = ($p$addr$4433 + -9) | 0;
              $cmp707 = $incdec$ptr734 >>> 0 < $z$9$lcssa >>> 0;
              $cmp710 = ($p$addr$4433 | 0) > 9;
              $79 = $cmp707 & $cmp710;
              if ($79) {
                $d$6432 = $incdec$ptr734;
                $p$addr$4433 = $sub735;
              } else {
                $p$addr$4$lcssa = $sub735;
                break;
              }
            }
          } else {
            $p$addr$4$lcssa = $p$addr$3;
          }
          $add737 = ($p$addr$4$lcssa + 9) | 0;
          _pad_524($f, 48, $add737, 9, 0);
        } else {
          $add$ptr742 = ($a$9 + 4) | 0;
          $spec$select410 = $cmp450$lcssa ? $z$9$lcssa : $add$ptr742;
          $cmp745442 = $a$9 >>> 0 < $spec$select410 >>> 0;
          $cmp748443 = ($p$addr$3 | 0) > -1;
          $80 = $cmp745442 & $cmp748443;
          if ($80) {
            $add$ptr756 = ($buf + 9) | 0;
            $and780 = $fl & 8;
            $tobool781 = ($and780 | 0) == 0;
            $sub$ptr$lhs$cast787 = $add$ptr756;
            $81 = (0 - $sub$ptr$rhs$cast$le) | 0;
            $incdec$ptr763 = ($buf + 8) | 0;
            $d$7444 = $a$9;
            $p$addr$5445 = $p$addr$3;
            while (1) {
              $82 = HEAP32[$d$7444 >> 2] | 0;
              $83 = _fmt_u($82, 0, $add$ptr756) | 0;
              $cmp760 = ($83 | 0) == ($add$ptr756 | 0);
              if ($cmp760) {
                HEAP8[$incdec$ptr763 >> 0] = 48;
                $s753$0 = $incdec$ptr763;
              } else {
                $s753$0 = $83;
              }
              $cmp765 = ($d$7444 | 0) == ($a$9 | 0);
              do {
                if ($cmp765) {
                  $incdec$ptr776 = ($s753$0 + 1) | 0;
                  _out($f, $s753$0, 1);
                  $cmp777 = ($p$addr$5445 | 0) < 1;
                  $or$cond411 = $tobool781 & $cmp777;
                  if ($or$cond411) {
                    $s753$2 = $incdec$ptr776;
                    break;
                  }
                  _out($f, 12809, 1);
                  $s753$2 = $incdec$ptr776;
                } else {
                  $cmp770439 = $s753$0 >>> 0 > $buf >>> 0;
                  if (!$cmp770439) {
                    $s753$2 = $s753$0;
                    break;
                  }
                  $scevgep513 = ($s753$0 + $81) | 0;
                  $scevgep513514 = $scevgep513;
                  _memset($buf | 0, 48, $scevgep513514 | 0) | 0;
                  $s753$1440 = $s753$0;
                  while (1) {
                    $incdec$ptr773 = ($s753$1440 + -1) | 0;
                    $cmp770 = $incdec$ptr773 >>> 0 > $buf >>> 0;
                    if ($cmp770) {
                      $s753$1440 = $incdec$ptr773;
                    } else {
                      $s753$2 = $incdec$ptr773;
                      break;
                    }
                  }
                }
              } while (0);
              $sub$ptr$rhs$cast788 = $s753$2;
              $sub$ptr$sub789 =
                ($sub$ptr$lhs$cast787 - $sub$ptr$rhs$cast788) | 0;
              $cmp790 = ($p$addr$5445 | 0) > ($sub$ptr$sub789 | 0);
              $cond800 = $cmp790 ? $sub$ptr$sub789 : $p$addr$5445;
              _out($f, $s753$2, $cond800);
              $sub806 = ($p$addr$5445 - $sub$ptr$sub789) | 0;
              $incdec$ptr808 = ($d$7444 + 4) | 0;
              $cmp745 = $incdec$ptr808 >>> 0 < $spec$select410 >>> 0;
              $cmp748 = ($sub806 | 0) > -1;
              $84 = $cmp745 & $cmp748;
              if ($84) {
                $d$7444 = $incdec$ptr808;
                $p$addr$5445 = $sub806;
              } else {
                $p$addr$5$lcssa = $sub806;
                break;
              }
            }
          } else {
            $p$addr$5$lcssa = $p$addr$3;
          }
          $add810 = ($p$addr$5$lcssa + 18) | 0;
          _pad_524($f, 48, $add810, 18, 0);
          $sub$ptr$lhs$cast811 = $arrayidx;
          $sub$ptr$rhs$cast812 = $estr$2;
          $sub$ptr$sub813 = ($sub$ptr$lhs$cast811 - $sub$ptr$rhs$cast812) | 0;
          _out($f, $estr$2, $sub$ptr$sub813);
        }
        $xor816 = $fl ^ 8192;
        _pad_524($f, 32, $w, $add653, $xor816);
        $add653$sink524 = $add653;
      }
    } while (0);
    $cmp818 = ($add653$sink524 | 0) < ($w | 0);
    $w$add653 = $cmp818 ? $w : $add653$sink524;
    STACKTOP = sp;
    return $w$add653 | 0;
  }
  function _pop_arg_long_double($arg, $ap) {
    $arg = $arg | 0;
    $ap = $ap | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0.0,
      $arglist_current = 0,
      $arglist_next = 0,
      $expanded = 0,
      $expanded1 = 0,
      $expanded3 = 0,
      $expanded4 = 0,
      $expanded5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $arglist_current = HEAP32[$ap >> 2] | 0;
    $0 = $arglist_current;
    $1 = (0 + 8) | 0;
    $expanded1 = $1;
    $expanded = ($expanded1 - 1) | 0;
    $2 = ($0 + $expanded) | 0;
    $3 = (0 + 8) | 0;
    $expanded5 = $3;
    $expanded4 = ($expanded5 - 1) | 0;
    $expanded3 = $expanded4 ^ -1;
    $4 = $2 & $expanded3;
    $5 = $4;
    $6 = +HEAPF64[$5 >> 3];
    $arglist_next = ($5 + 8) | 0;
    HEAP32[$ap >> 2] = $arglist_next;
    HEAPF64[$arg >> 3] = $6;
    return;
  }
  function ___vfprintf_internal($f, $fmt, $ap, $fmt_fp, $pop_arg_long_double) {
    $f = $f | 0;
    $fmt = $fmt | 0;
    $ap = $ap | 0;
    $fmt_fp = $fmt_fp | 0;
    $pop_arg_long_double = $pop_arg_long_double | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $add$ptr = 0,
      $and = 0,
      $and11 = 0,
      $and36 = 0,
      $ap2 = 0,
      $buf = 0,
      $buf_size = 0,
      $call = 0,
      $call21 = 0,
      $call2133 = 0,
      $call6 = 0,
      $cmp = 0;
    var $cmp5 = 0,
      $cmp7 = 0,
      $cond = 0,
      $internal_buf = 0,
      $lock = 0,
      $mode = 0,
      $nl_arg = 0,
      $nl_type = 0,
      $or = 0,
      $ret$1 = 0,
      $retval$0 = 0,
      $spec$select = 0,
      $spec$select32 = 0,
      $tobool = 0,
      $tobool22 = 0,
      $tobool26 = 0,
      $tobool37 = 0,
      $tobool41 = 0,
      $vacopy_currentptr = 0,
      $wbase = 0;
    var $wend = 0,
      $wpos = 0,
      $write = 0,
      dest = 0,
      label = 0,
      sp = 0,
      stop = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 224) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224 | 0);
    $ap2 = (sp + 208) | 0;
    $nl_type = (sp + 160) | 0;
    $nl_arg = (sp + 80) | 0;
    $internal_buf = sp;
    dest = $nl_type;
    stop = (dest + 40) | 0;
    do {
      HEAP32[dest >> 2] = 0 | 0;
      dest = (dest + 4) | 0;
    } while ((dest | 0) < (stop | 0));
    $vacopy_currentptr = HEAP32[$ap >> 2] | 0;
    HEAP32[$ap2 >> 2] = $vacopy_currentptr;
    $call =
      _printf_core(
        0,
        $fmt,
        $ap2,
        $nl_arg,
        $nl_type,
        $fmt_fp,
        $pop_arg_long_double
      ) | 0;
    $cmp = ($call | 0) < 0;
    if ($cmp) {
      $retval$0 = -1;
    } else {
      $lock = ($f + 76) | 0;
      $0 = HEAP32[$lock >> 2] | 0;
      $cmp5 = ($0 | 0) > -1;
      if ($cmp5) {
        $call6 = ___lockfile($f) | 0;
        $cond = $call6;
      } else {
        $cond = 0;
      }
      $1 = HEAP32[$f >> 2] | 0;
      $and = $1 & 32;
      $mode = ($f + 74) | 0;
      $2 = HEAP8[$mode >> 0] | 0;
      $cmp7 = ($2 << 24) >> 24 < 1;
      if ($cmp7) {
        $and11 = $1 & -33;
        HEAP32[$f >> 2] = $and11;
      }
      $buf_size = ($f + 48) | 0;
      $3 = HEAP32[$buf_size >> 2] | 0;
      $tobool = ($3 | 0) == 0;
      if ($tobool) {
        $buf = ($f + 44) | 0;
        $4 = HEAP32[$buf >> 2] | 0;
        HEAP32[$buf >> 2] = $internal_buf;
        $wbase = ($f + 28) | 0;
        HEAP32[$wbase >> 2] = $internal_buf;
        $wpos = ($f + 20) | 0;
        HEAP32[$wpos >> 2] = $internal_buf;
        HEAP32[$buf_size >> 2] = 80;
        $add$ptr = ($internal_buf + 80) | 0;
        $wend = ($f + 16) | 0;
        HEAP32[$wend >> 2] = $add$ptr;
        $call21 =
          _printf_core(
            $f,
            $fmt,
            $ap2,
            $nl_arg,
            $nl_type,
            $fmt_fp,
            $pop_arg_long_double
          ) | 0;
        $tobool22 = ($4 | 0) == (0 | 0);
        if ($tobool22) {
          $ret$1 = $call21;
        } else {
          $write = ($f + 36) | 0;
          $5 = HEAP32[$write >> 2] | 0;
          FUNCTION_TABLE_iiii[$5 & 511]($f, 0, 0) | 0;
          $6 = HEAP32[$wpos >> 2] | 0;
          $tobool26 = ($6 | 0) == (0 | 0);
          $spec$select = $tobool26 ? -1 : $call21;
          HEAP32[$buf >> 2] = $4;
          HEAP32[$buf_size >> 2] = 0;
          HEAP32[$wend >> 2] = 0;
          HEAP32[$wbase >> 2] = 0;
          HEAP32[$wpos >> 2] = 0;
          $ret$1 = $spec$select;
        }
      } else {
        $call2133 =
          _printf_core(
            $f,
            $fmt,
            $ap2,
            $nl_arg,
            $nl_type,
            $fmt_fp,
            $pop_arg_long_double
          ) | 0;
        $ret$1 = $call2133;
      }
      $7 = HEAP32[$f >> 2] | 0;
      $and36 = $7 & 32;
      $tobool37 = ($and36 | 0) == 0;
      $spec$select32 = $tobool37 ? $ret$1 : -1;
      $or = $7 | $and;
      HEAP32[$f >> 2] = $or;
      $tobool41 = ($cond | 0) == 0;
      if (!$tobool41) {
        ___unlockfile($f);
      }
      $retval$0 = $spec$select32;
    }
    STACKTOP = sp;
    return $retval$0 | 0;
  }
  function _printf_core(
    $f,
    $fmt,
    $ap,
    $nl_arg,
    $nl_type,
    $fmt_fp,
    $pop_arg_long_double
  ) {
    $f = $f | 0;
    $fmt = $fmt | 0;
    $ap = $ap | 0;
    $nl_arg = $nl_arg | 0;
    $nl_type = $nl_type | 0;
    $fmt_fp = $fmt_fp | 0;
    $pop_arg_long_double = $pop_arg_long_double | 0;
    var $$ = 0,
      $$lcssa213 = 0,
      $$pre = 0,
      $$pre261 = 0,
      $$pre262 = 0,
      $$pre263 = 0,
      $$pre263$pre = 0,
      $$pre264 = 0,
      $$pre267 = 0,
      $$sink = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $100 = 0,
      $101 = 0,
      $102 = 0,
      $103 = 0,
      $104 = 0,
      $105 = 0,
      $106 = 0;
    var $107 = 0,
      $108 = 0,
      $109 = 0,
      $11 = 0,
      $110 = 0,
      $111 = 0,
      $112 = 0,
      $113 = 0,
      $114 = 0,
      $115 = 0,
      $116 = 0,
      $117 = 0,
      $118 = 0,
      $119 = 0,
      $12 = 0,
      $120 = 0,
      $121 = 0,
      $122 = 0,
      $123 = 0,
      $124 = 0;
    var $125 = 0,
      $126 = 0,
      $127 = 0,
      $128 = 0,
      $129 = 0,
      $13 = 0,
      $130 = 0,
      $131 = 0,
      $132 = 0,
      $133 = 0,
      $134 = 0,
      $135 = 0,
      $136 = 0,
      $137 = 0,
      $138 = 0,
      $139 = 0,
      $14 = 0,
      $140 = 0,
      $141 = 0,
      $142 = 0;
    var $143 = 0,
      $144 = 0,
      $145 = 0,
      $146 = 0,
      $147 = 0,
      $148 = 0,
      $149 = 0,
      $15 = 0,
      $150 = 0,
      $151 = 0,
      $152 = 0,
      $153 = 0,
      $154 = 0,
      $155 = 0,
      $156 = 0,
      $157 = 0,
      $158 = 0,
      $159 = 0,
      $16 = 0,
      $160 = 0;
    var $161 = 0,
      $162 = 0,
      $163 = 0,
      $164 = 0,
      $165 = 0.0,
      $166 = 0,
      $167 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0,
      $23 = 0,
      $24 = 0,
      $25 = 0,
      $26 = 0,
      $27 = 0,
      $28 = 0;
    var $29 = 0,
      $3 = 0,
      $30 = 0,
      $31 = 0,
      $32 = 0,
      $33 = 0,
      $34 = 0,
      $35 = 0,
      $36 = 0,
      $37 = 0,
      $38 = 0,
      $39 = 0,
      $4 = 0,
      $40 = 0,
      $41 = 0,
      $42 = 0,
      $43 = 0,
      $44 = 0,
      $45 = 0,
      $46 = 0;
    var $47 = 0,
      $48 = 0,
      $49 = 0,
      $5 = 0,
      $50 = 0,
      $51 = 0,
      $52 = 0,
      $53 = 0,
      $54 = 0,
      $55 = 0,
      $56 = 0,
      $57 = 0,
      $58 = 0,
      $59 = 0,
      $6 = 0,
      $60 = 0,
      $61 = 0,
      $62 = 0,
      $63 = 0,
      $64 = 0;
    var $65 = 0,
      $66 = 0,
      $67 = 0,
      $68 = 0,
      $69 = 0,
      $7 = 0,
      $70 = 0,
      $71 = 0,
      $72 = 0,
      $73 = 0,
      $74 = 0,
      $75 = 0,
      $76 = 0,
      $77 = 0,
      $78 = 0,
      $79 = 0,
      $8 = 0,
      $80 = 0,
      $81 = 0,
      $82 = 0;
    var $83 = 0,
      $84 = 0,
      $85 = 0,
      $86 = 0,
      $87 = 0,
      $88 = 0,
      $89 = 0,
      $9 = 0,
      $90 = 0,
      $91 = 0,
      $92 = 0,
      $93 = 0,
      $94 = 0,
      $95 = 0,
      $96 = 0,
      $97 = 0,
      $98 = 0,
      $99 = 0,
      $a$0 = 0,
      $a$1 = 0;
    var $add = 0,
      $add$ptr = 0,
      $add$ptr139 = 0,
      $add$ptr150 = 0,
      $add$ptr206 = 0,
      $add$ptr258 = 0,
      $add$ptr341 = 0,
      $add$ptr354 = 0,
      $add$ptr468 = 0,
      $add$ptr88 = 0,
      $add270 = 0,
      $add323 = 0,
      $add390 = 0,
      $add407 = 0,
      $add436 = 0,
      $and = 0,
      $and211 = 0,
      $and215 = 0,
      $and217 = 0,
      $and220 = 0;
    var $and233 = 0,
      $and250 = 0,
      $and255 = 0,
      $and264 = 0,
      $and290 = 0,
      $and295 = 0,
      $and310 = 0,
      $arg = 0,
      $arglist_current = 0,
      $arglist_current2 = 0,
      $arglist_next = 0,
      $arglist_next3 = 0,
      $argpos$0 = 0,
      $arrayidx114 = 0,
      $arrayidx119 = 0,
      $arrayidx124 = 0,
      $arrayidx129 = 0,
      $arrayidx132 = 0,
      $arrayidx16 = 0,
      $arrayidx174 = 0;
    var $arrayidx193 = 0,
      $arrayidx207 = 0,
      $arrayidx31 = 0,
      $arrayidx35 = 0,
      $arrayidx365 = 0,
      $arrayidx40 = 0,
      $arrayidx464 = 0,
      $arrayidx476 = 0,
      $arrayidx68 = 0,
      $arrayidx73 = 0,
      $arrayidx78 = 0,
      $arrayidx81 = 0,
      $brmerge = 0,
      $brmerge235 = 0,
      $buf = 0,
      $call = 0,
      $call104 = 0,
      $call121 = 0,
      $call160 = 0,
      $call33 = 0;
    var $call351 = 0,
      $call379 = 0,
      $call406 = 0,
      $call424 = 0,
      $call70 = 0,
      $cmp = 0,
      $cmp1 = 0,
      $cmp105 = 0,
      $cmp111 = 0,
      $cmp116 = 0,
      $cmp126 = 0,
      $cmp13 = 0,
      $cmp166 = 0,
      $cmp177 = 0,
      $cmp18 = 0,
      $cmp182 = 0,
      $cmp185 = 0,
      $cmp212 = 0,
      $cmp241 = 0,
      $cmp271 = 0;
    var $cmp307 = 0,
      $cmp324 = 0,
      $cmp37 = 0,
      $cmp372 = 0,
      $cmp372242 = 0,
      $cmp380 = 0,
      $cmp385 = 0,
      $cmp399 = 0,
      $cmp399247 = 0,
      $cmp408 = 0,
      $cmp416 = 0,
      $cmp429 = 0,
      $cmp437 = 0,
      $cmp461 = 0,
      $cmp473 = 0,
      $cmp50 = 0,
      $cmp50231 = 0,
      $cmp65 = 0,
      $cmp75 = 0,
      $cmp97 = 0;
    var $cnt$0 = 0,
      $cnt$0$ph = 0,
      $cnt$1 = 0,
      $cond = 0,
      $cond149 = 0,
      $cond246 = 0,
      $cond350 = 0,
      $cond421 = 0,
      $conv120 = 0,
      $conv130 = 0,
      $conv134 = 0,
      $conv164 = 0,
      $conv172 = 0,
      $conv175 = 0,
      $conv208 = 0,
      $conv230 = 0,
      $conv233 = 0,
      $conv32 = 0,
      $conv41 = 0,
      $conv48 = 0;
    var $conv48229 = 0,
      $conv69 = 0,
      $conv79 = 0,
      $conv83 = 0,
      $expanded = 0,
      $expanded10 = 0,
      $expanded11 = 0,
      $expanded13 = 0,
      $expanded14 = 0,
      $expanded15 = 0,
      $expanded4 = 0,
      $expanded6 = 0,
      $expanded7 = 0,
      $expanded8 = 0,
      $fl$0$lcssa = 0,
      $fl$0237 = 0,
      $fl$1 = 0,
      $fl$3 = 0,
      $fl$4 = 0,
      $fl$6 = 0;
    var $i$0217 = 0,
      $i$0217271 = 0,
      $i$0243 = 0,
      $i$1248 = 0,
      $i$2224 = 0,
      $i$3221 = 0,
      $i137 = 0,
      $i86 = 0,
      $inc = 0,
      $inc483 = 0,
      $incdec$ptr = 0,
      $incdec$ptr171 = 0,
      $incdec$ptr23 = 0,
      $incdec$ptr378 = 0,
      $incdec$ptr405 = 0,
      $incdec$ptr45 = 0,
      $incdec$ptr62 = 0,
      $incdec$ptr93 = 0,
      $l$0 = 0,
      $l$0$ph = 0;
    var $l$0$ph$be = 0,
      $l10n$0$ph = 0,
      $l10n$1 = 0,
      $l10n$2 = 0,
      $l10n$3 = 0,
      $lnot = 0,
      $lnot$ext = 0,
      $mb = 0,
      $or = 0,
      $or$cond = 0,
      $or$cond189 = 0,
      $or$cond190 = 0,
      $or$cond194 = 0,
      $or100 = 0,
      $or247 = 0,
      $p$0 = 0,
      $p$1 = 0,
      $p$2 = 0,
      $p$2$add323 = 0,
      $p$3 = 0;
    var $p$4269 = 0,
      $p$5 = 0,
      $pl$0 = 0,
      $pl$1 = 0,
      $pl$2 = 0,
      $prefix$0 = 0,
      $prefix$1 = 0,
      $prefix$2 = 0,
      $retval$0 = 0,
      $s = 0,
      $shl = 0,
      $shl232 = 0,
      $shl60 = 0,
      $shr199 = 0,
      $spec$select = 0,
      $spec$select193 = 0,
      $spec$select195 = 0,
      $spec$select200 = 0,
      $spec$select201 = 0,
      $spec$select202 = 0;
    var $spec$select203 = 0,
      $spec$select204 = 0,
      $spec$select205 = 0,
      $spec$select206 = 0,
      $spec$select207 = 0,
      $spec$select208 = 0,
      $st$0 = 0,
      $storemerge187$lcssa = 0,
      $storemerge187236 = 0,
      $storemerge188 = 0,
      $sub = 0,
      $sub$ptr$lhs$cast = 0,
      $sub$ptr$lhs$cast318 = 0,
      $sub$ptr$lhs$cast356 = 0,
      $sub$ptr$lhs$cast426$pre$phiZZZZ2D = 0,
      $sub$ptr$rhs$cast = 0,
      $sub$ptr$rhs$cast268 = 0,
      $sub$ptr$rhs$cast319 = 0,
      $sub$ptr$rhs$cast357 = 0,
      $sub$ptr$rhs$cast427 = 0;
    var $sub$ptr$sub = 0,
      $sub$ptr$sub269 = 0,
      $sub$ptr$sub320 = 0,
      $sub$ptr$sub358 = 0,
      $sub$ptr$sub428 = 0,
      $sub101 = 0,
      $sub131 = 0,
      $sub135 = 0,
      $sub165 = 0,
      $sub173 = 0,
      $sub176 = 0,
      $sub384 = 0,
      $sub42 = 0,
      $sub49 = 0,
      $sub49230 = 0,
      $sub49238 = 0,
      $sub80 = 0,
      $sub84 = 0,
      $t$0 = 0,
      $t$1 = 0;
    var $tobool = 0,
      $tobool122 = 0,
      $tobool141 = 0,
      $tobool179 = 0,
      $tobool209 = 0,
      $tobool218 = 0,
      $tobool25 = 0,
      $tobool256 = 0,
      $tobool265 = 0,
      $tobool28 = 0,
      $tobool291 = 0,
      $tobool296 = 0,
      $tobool315 = 0,
      $tobool34 = 0,
      $tobool345 = 0,
      $tobool352 = 0,
      $tobool375 = 0,
      $tobool402 = 0,
      $tobool454 = 0,
      $tobool457 = 0;
    var $tobool465 = 0,
      $tobool477 = 0,
      $tobool55 = 0,
      $tobool55234 = 0,
      $tobool71 = 0,
      $tobool90 = 0,
      $trunc = 0,
      $w$0 = 0,
      $w$1 = 0,
      $w$2 = 0,
      $wc = 0,
      $ws$0244 = 0,
      $ws$1249 = 0,
      $xor = 0,
      $xor444 = 0,
      $xor452 = 0,
      $z$0$lcssa = 0,
      $z$0226 = 0,
      $z$1 = 0,
      label = 0;
    var sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 64) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
    $s = (sp + 56) | 0;
    $arg = (sp + 40) | 0;
    $buf = sp;
    $wc = (sp + 48) | 0;
    $mb = (sp + 60) | 0;
    HEAP32[$s >> 2] = $fmt;
    $tobool25 = ($f | 0) != (0 | 0);
    $add$ptr206 = ($buf + 40) | 0;
    $sub$ptr$lhs$cast318 = $add$ptr206;
    $add$ptr341 = ($buf + 39) | 0;
    $arrayidx365 = ($wc + 4) | 0;
    $cnt$0$ph = 0;
    $l$0$ph = 0;
    $l10n$0$ph = 0;
    L1: while (1) {
      $cnt$0 = $cnt$0$ph;
      $l$0 = $l$0$ph;
      while (1) {
        $cmp = ($cnt$0 | 0) > -1;
        do {
          if ($cmp) {
            $sub = (2147483647 - $cnt$0) | 0;
            $cmp1 = ($l$0 | 0) > ($sub | 0);
            if ($cmp1) {
              $call = ___errno_location() | 0;
              HEAP32[$call >> 2] = 75;
              $cnt$1 = -1;
              break;
            } else {
              $add = ($l$0 + $cnt$0) | 0;
              $cnt$1 = $add;
              break;
            }
          } else {
            $cnt$1 = $cnt$0;
          }
        } while (0);
        $0 = HEAP32[$s >> 2] | 0;
        $1 = HEAP8[$0 >> 0] | 0;
        $tobool = ($1 << 24) >> 24 == 0;
        if ($tobool) {
          label = 92;
          break L1;
        }
        $2 = $1;
        $3 = $0;
        L12: while (1) {
          switch (($2 << 24) >> 24) {
            case 37: {
              label = 10;
              break L12;
              break;
            }
            case 0: {
              $z$0$lcssa = $3;
              break L12;
              break;
            }
            default: {
            }
          }
          $incdec$ptr = ($3 + 1) | 0;
          HEAP32[$s >> 2] = $incdec$ptr;
          $$pre = HEAP8[$incdec$ptr >> 0] | 0;
          $2 = $$pre;
          $3 = $incdec$ptr;
        }
        L15: do {
          if ((label | 0) == 10) {
            label = 0;
            $4 = $3;
            $z$0226 = $3;
            while (1) {
              $arrayidx16 = ($4 + 1) | 0;
              $5 = HEAP8[$arrayidx16 >> 0] | 0;
              $cmp18 = ($5 << 24) >> 24 == 37;
              if (!$cmp18) {
                $z$0$lcssa = $z$0226;
                break L15;
              }
              $incdec$ptr23 = ($z$0226 + 1) | 0;
              $add$ptr = ($4 + 2) | 0;
              HEAP32[$s >> 2] = $add$ptr;
              $6 = HEAP8[$add$ptr >> 0] | 0;
              $cmp13 = ($6 << 24) >> 24 == 37;
              if ($cmp13) {
                $4 = $add$ptr;
                $z$0226 = $incdec$ptr23;
              } else {
                $z$0$lcssa = $incdec$ptr23;
                break;
              }
            }
          }
        } while (0);
        $sub$ptr$lhs$cast = $z$0$lcssa;
        $sub$ptr$rhs$cast = $0;
        $sub$ptr$sub = ($sub$ptr$lhs$cast - $sub$ptr$rhs$cast) | 0;
        if ($tobool25) {
          _out($f, $0, $sub$ptr$sub);
        }
        $tobool28 = ($sub$ptr$sub | 0) == 0;
        if ($tobool28) {
          break;
        } else {
          $cnt$0 = $cnt$1;
          $l$0 = $sub$ptr$sub;
        }
      }
      $7 = HEAP32[$s >> 2] | 0;
      $arrayidx31 = ($7 + 1) | 0;
      $8 = HEAP8[$arrayidx31 >> 0] | 0;
      $conv32 = ($8 << 24) >> 24;
      $call33 = _isdigit($conv32) | 0;
      $tobool34 = ($call33 | 0) == 0;
      $$pre261 = HEAP32[$s >> 2] | 0;
      if ($tobool34) {
        $$sink = 1;
        $argpos$0 = -1;
        $l10n$1 = $l10n$0$ph;
      } else {
        $arrayidx35 = ($$pre261 + 2) | 0;
        $9 = HEAP8[$arrayidx35 >> 0] | 0;
        $cmp37 = ($9 << 24) >> 24 == 36;
        if ($cmp37) {
          $arrayidx40 = ($$pre261 + 1) | 0;
          $10 = HEAP8[$arrayidx40 >> 0] | 0;
          $conv41 = ($10 << 24) >> 24;
          $sub42 = ($conv41 + -48) | 0;
          $$sink = 3;
          $argpos$0 = $sub42;
          $l10n$1 = 1;
        } else {
          $$sink = 1;
          $argpos$0 = -1;
          $l10n$1 = $l10n$0$ph;
        }
      }
      $incdec$ptr45 = ($$pre261 + $$sink) | 0;
      HEAP32[$s >> 2] = $incdec$ptr45;
      $11 = HEAP8[$incdec$ptr45 >> 0] | 0;
      $conv48229 = ($11 << 24) >> 24;
      $sub49230 = ($conv48229 + -32) | 0;
      $cmp50231 = $sub49230 >>> 0 > 31;
      $shl232 = 1 << $sub49230;
      $and233 = $shl232 & 75913;
      $tobool55234 = ($and233 | 0) == 0;
      $brmerge235 = $cmp50231 | $tobool55234;
      if ($brmerge235) {
        $$lcssa213 = $11;
        $fl$0$lcssa = 0;
        $storemerge187$lcssa = $incdec$ptr45;
      } else {
        $fl$0237 = 0;
        $storemerge187236 = $incdec$ptr45;
        $sub49238 = $sub49230;
        while (1) {
          $shl60 = 1 << $sub49238;
          $or = $shl60 | $fl$0237;
          $incdec$ptr62 = ($storemerge187236 + 1) | 0;
          HEAP32[$s >> 2] = $incdec$ptr62;
          $12 = HEAP8[$incdec$ptr62 >> 0] | 0;
          $conv48 = ($12 << 24) >> 24;
          $sub49 = ($conv48 + -32) | 0;
          $cmp50 = $sub49 >>> 0 > 31;
          $shl = 1 << $sub49;
          $and = $shl & 75913;
          $tobool55 = ($and | 0) == 0;
          $brmerge = $cmp50 | $tobool55;
          if ($brmerge) {
            $$lcssa213 = $12;
            $fl$0$lcssa = $or;
            $storemerge187$lcssa = $incdec$ptr62;
            break;
          } else {
            $fl$0237 = $or;
            $storemerge187236 = $incdec$ptr62;
            $sub49238 = $sub49;
          }
        }
      }
      $cmp65 = ($$lcssa213 << 24) >> 24 == 42;
      if ($cmp65) {
        $arrayidx68 = ($storemerge187$lcssa + 1) | 0;
        $13 = HEAP8[$arrayidx68 >> 0] | 0;
        $conv69 = ($13 << 24) >> 24;
        $call70 = _isdigit($conv69) | 0;
        $tobool71 = ($call70 | 0) == 0;
        if ($tobool71) {
          label = 27;
        } else {
          $14 = HEAP32[$s >> 2] | 0;
          $arrayidx73 = ($14 + 2) | 0;
          $15 = HEAP8[$arrayidx73 >> 0] | 0;
          $cmp75 = ($15 << 24) >> 24 == 36;
          if ($cmp75) {
            $arrayidx78 = ($14 + 1) | 0;
            $16 = HEAP8[$arrayidx78 >> 0] | 0;
            $conv79 = ($16 << 24) >> 24;
            $sub80 = ($conv79 + -48) | 0;
            $arrayidx81 = ($nl_type + ($sub80 << 2)) | 0;
            HEAP32[$arrayidx81 >> 2] = 10;
            $17 = HEAP8[$arrayidx78 >> 0] | 0;
            $conv83 = ($17 << 24) >> 24;
            $sub84 = ($conv83 + -48) | 0;
            $i86 = ($nl_arg + ($sub84 << 3)) | 0;
            $18 = $i86;
            $19 = $18;
            $20 = HEAP32[$19 >> 2] | 0;
            $21 = ($18 + 4) | 0;
            $22 = $21;
            $23 = HEAP32[$22 >> 2] | 0;
            $add$ptr88 = ($14 + 3) | 0;
            $l10n$2 = 1;
            $storemerge188 = $add$ptr88;
            $w$0 = $20;
          } else {
            label = 27;
          }
        }
        if ((label | 0) == 27) {
          label = 0;
          $tobool90 = ($l10n$1 | 0) == 0;
          if (!$tobool90) {
            $retval$0 = -1;
            break;
          }
          if ($tobool25) {
            $arglist_current = HEAP32[$ap >> 2] | 0;
            $24 = $arglist_current;
            $25 = (0 + 4) | 0;
            $expanded4 = $25;
            $expanded = ($expanded4 - 1) | 0;
            $26 = ($24 + $expanded) | 0;
            $27 = (0 + 4) | 0;
            $expanded8 = $27;
            $expanded7 = ($expanded8 - 1) | 0;
            $expanded6 = $expanded7 ^ -1;
            $28 = $26 & $expanded6;
            $29 = $28;
            $30 = HEAP32[$29 >> 2] | 0;
            $arglist_next = ($29 + 4) | 0;
            HEAP32[$ap >> 2] = $arglist_next;
            $cond = $30;
          } else {
            $cond = 0;
          }
          $31 = HEAP32[$s >> 2] | 0;
          $incdec$ptr93 = ($31 + 1) | 0;
          $l10n$2 = 0;
          $storemerge188 = $incdec$ptr93;
          $w$0 = $cond;
        }
        HEAP32[$s >> 2] = $storemerge188;
        $cmp97 = ($w$0 | 0) < 0;
        $or100 = $fl$0$lcssa | 8192;
        $sub101 = (0 - $w$0) | 0;
        $spec$select200 = $cmp97 ? $or100 : $fl$0$lcssa;
        $spec$select201 = $cmp97 ? $sub101 : $w$0;
        $33 = $storemerge188;
        $fl$1 = $spec$select200;
        $l10n$3 = $l10n$2;
        $w$1 = $spec$select201;
      } else {
        $call104 = _getint($s) | 0;
        $cmp105 = ($call104 | 0) < 0;
        if ($cmp105) {
          $retval$0 = -1;
          break;
        }
        $$pre262 = HEAP32[$s >> 2] | 0;
        $33 = $$pre262;
        $fl$1 = $fl$0$lcssa;
        $l10n$3 = $l10n$1;
        $w$1 = $call104;
      }
      $32 = HEAP8[$33 >> 0] | 0;
      $cmp111 = ($32 << 24) >> 24 == 46;
      do {
        if ($cmp111) {
          $arrayidx114 = ($33 + 1) | 0;
          $34 = HEAP8[$arrayidx114 >> 0] | 0;
          $cmp116 = ($34 << 24) >> 24 == 42;
          if (!$cmp116) {
            HEAP32[$s >> 2] = $arrayidx114;
            $call160 = _getint($s) | 0;
            $$pre263$pre = HEAP32[$s >> 2] | 0;
            $$pre263 = $$pre263$pre;
            $p$0 = $call160;
            break;
          }
          $arrayidx119 = ($33 + 2) | 0;
          $35 = HEAP8[$arrayidx119 >> 0] | 0;
          $conv120 = ($35 << 24) >> 24;
          $call121 = _isdigit($conv120) | 0;
          $tobool122 = ($call121 | 0) == 0;
          if (!$tobool122) {
            $36 = HEAP32[$s >> 2] | 0;
            $arrayidx124 = ($36 + 3) | 0;
            $37 = HEAP8[$arrayidx124 >> 0] | 0;
            $cmp126 = ($37 << 24) >> 24 == 36;
            if ($cmp126) {
              $arrayidx129 = ($36 + 2) | 0;
              $38 = HEAP8[$arrayidx129 >> 0] | 0;
              $conv130 = ($38 << 24) >> 24;
              $sub131 = ($conv130 + -48) | 0;
              $arrayidx132 = ($nl_type + ($sub131 << 2)) | 0;
              HEAP32[$arrayidx132 >> 2] = 10;
              $39 = HEAP8[$arrayidx129 >> 0] | 0;
              $conv134 = ($39 << 24) >> 24;
              $sub135 = ($conv134 + -48) | 0;
              $i137 = ($nl_arg + ($sub135 << 3)) | 0;
              $40 = $i137;
              $41 = $40;
              $42 = HEAP32[$41 >> 2] | 0;
              $43 = ($40 + 4) | 0;
              $44 = $43;
              $45 = HEAP32[$44 >> 2] | 0;
              $add$ptr139 = ($36 + 4) | 0;
              HEAP32[$s >> 2] = $add$ptr139;
              $$pre263 = $add$ptr139;
              $p$0 = $42;
              break;
            }
          }
          $tobool141 = ($l10n$3 | 0) == 0;
          if (!$tobool141) {
            $retval$0 = -1;
            break L1;
          }
          if ($tobool25) {
            $arglist_current2 = HEAP32[$ap >> 2] | 0;
            $46 = $arglist_current2;
            $47 = (0 + 4) | 0;
            $expanded11 = $47;
            $expanded10 = ($expanded11 - 1) | 0;
            $48 = ($46 + $expanded10) | 0;
            $49 = (0 + 4) | 0;
            $expanded15 = $49;
            $expanded14 = ($expanded15 - 1) | 0;
            $expanded13 = $expanded14 ^ -1;
            $50 = $48 & $expanded13;
            $51 = $50;
            $52 = HEAP32[$51 >> 2] | 0;
            $arglist_next3 = ($51 + 4) | 0;
            HEAP32[$ap >> 2] = $arglist_next3;
            $cond149 = $52;
          } else {
            $cond149 = 0;
          }
          $53 = HEAP32[$s >> 2] | 0;
          $add$ptr150 = ($53 + 2) | 0;
          HEAP32[$s >> 2] = $add$ptr150;
          $$pre263 = $add$ptr150;
          $p$0 = $cond149;
        } else {
          $$pre263 = $33;
          $p$0 = -1;
        }
      } while (0);
      $55 = $$pre263;
      $st$0 = 0;
      while (1) {
        $54 = HEAP8[$55 >> 0] | 0;
        $conv164 = ($54 << 24) >> 24;
        $sub165 = ($conv164 + -65) | 0;
        $cmp166 = $sub165 >>> 0 > 57;
        if ($cmp166) {
          $retval$0 = -1;
          break L1;
        }
        $incdec$ptr171 = ($55 + 1) | 0;
        HEAP32[$s >> 2] = $incdec$ptr171;
        $56 = HEAP8[$55 >> 0] | 0;
        $conv172 = ($56 << 24) >> 24;
        $sub173 = ($conv172 + -65) | 0;
        $arrayidx174 = (((48 + (($st$0 * 58) | 0)) | 0) + $sub173) | 0;
        $57 = HEAP8[$arrayidx174 >> 0] | 0;
        $conv175 = $57 & 255;
        $sub176 = ($conv175 + -1) | 0;
        $cmp177 = $sub176 >>> 0 < 8;
        if ($cmp177) {
          $55 = $incdec$ptr171;
          $st$0 = $conv175;
        } else {
          break;
        }
      }
      $tobool179 = ($57 << 24) >> 24 == 0;
      if ($tobool179) {
        $retval$0 = -1;
        break;
      }
      $cmp182 = ($57 << 24) >> 24 == 19;
      $cmp185 = ($argpos$0 | 0) > -1;
      do {
        if ($cmp182) {
          if ($cmp185) {
            $retval$0 = -1;
            break L1;
          } else {
            label = 54;
          }
        } else {
          if ($cmp185) {
            $arrayidx193 = ($nl_type + ($argpos$0 << 2)) | 0;
            HEAP32[$arrayidx193 >> 2] = $conv175;
            $58 = ($nl_arg + ($argpos$0 << 3)) | 0;
            $59 = $58;
            $60 = $59;
            $61 = HEAP32[$60 >> 2] | 0;
            $62 = ($59 + 4) | 0;
            $63 = $62;
            $64 = HEAP32[$63 >> 2] | 0;
            $65 = $arg;
            $66 = $65;
            HEAP32[$66 >> 2] = $61;
            $67 = ($65 + 4) | 0;
            $68 = $67;
            HEAP32[$68 >> 2] = $64;
            label = 54;
            break;
          }
          if (!$tobool25) {
            $retval$0 = 0;
            break L1;
          }
          _pop_arg($arg, $conv175, $ap, $pop_arg_long_double);
          $$pre264 = HEAP32[$s >> 2] | 0;
          $69 = $$pre264;
          label = 55;
        }
      } while (0);
      if ((label | 0) == 54) {
        label = 0;
        if ($tobool25) {
          $69 = $incdec$ptr171;
          label = 55;
        } else {
          $l$0$ph$be = 0;
        }
      }
      L77: do {
        if ((label | 0) == 55) {
          label = 0;
          $arrayidx207 = ($69 + -1) | 0;
          $70 = HEAP8[$arrayidx207 >> 0] | 0;
          $conv208 = ($70 << 24) >> 24;
          $tobool209 = ($st$0 | 0) != 0;
          $and211 = $conv208 & 15;
          $cmp212 = ($and211 | 0) == 3;
          $or$cond189 = $tobool209 & $cmp212;
          $and215 = $conv208 & -33;
          $t$0 = $or$cond189 ? $and215 : $conv208;
          $and217 = $fl$1 & 8192;
          $tobool218 = ($and217 | 0) == 0;
          $and220 = $fl$1 & -65537;
          $spec$select = $tobool218 ? $fl$1 : $and220;
          L79: do {
            switch ($t$0 | 0) {
              case 110: {
                $trunc = $st$0 & 255;
                switch (($trunc << 24) >> 24) {
                  case 0: {
                    $77 = HEAP32[$arg >> 2] | 0;
                    HEAP32[$77 >> 2] = $cnt$1;
                    $l$0$ph$be = 0;
                    break L77;
                    break;
                  }
                  case 1: {
                    $78 = HEAP32[$arg >> 2] | 0;
                    HEAP32[$78 >> 2] = $cnt$1;
                    $l$0$ph$be = 0;
                    break L77;
                    break;
                  }
                  case 2: {
                    $79 = ($cnt$1 | 0) < 0;
                    $80 = ($79 << 31) >> 31;
                    $81 = HEAP32[$arg >> 2] | 0;
                    $82 = $81;
                    $83 = $82;
                    HEAP32[$83 >> 2] = $cnt$1;
                    $84 = ($82 + 4) | 0;
                    $85 = $84;
                    HEAP32[$85 >> 2] = $80;
                    $l$0$ph$be = 0;
                    break L77;
                    break;
                  }
                  case 3: {
                    $conv230 = $cnt$1 & 65535;
                    $86 = HEAP32[$arg >> 2] | 0;
                    HEAP16[$86 >> 1] = $conv230;
                    $l$0$ph$be = 0;
                    break L77;
                    break;
                  }
                  case 4: {
                    $conv233 = $cnt$1 & 255;
                    $87 = HEAP32[$arg >> 2] | 0;
                    HEAP8[$87 >> 0] = $conv233;
                    $l$0$ph$be = 0;
                    break L77;
                    break;
                  }
                  case 6: {
                    $88 = HEAP32[$arg >> 2] | 0;
                    HEAP32[$88 >> 2] = $cnt$1;
                    $l$0$ph$be = 0;
                    break L77;
                    break;
                  }
                  case 7: {
                    $89 = ($cnt$1 | 0) < 0;
                    $90 = ($89 << 31) >> 31;
                    $91 = HEAP32[$arg >> 2] | 0;
                    $92 = $91;
                    $93 = $92;
                    HEAP32[$93 >> 2] = $cnt$1;
                    $94 = ($92 + 4) | 0;
                    $95 = $94;
                    HEAP32[$95 >> 2] = $90;
                    $l$0$ph$be = 0;
                    break L77;
                    break;
                  }
                  default: {
                    $l$0$ph$be = 0;
                    break L77;
                  }
                }
                break;
              }
              case 112: {
                $cmp241 = $p$0 >>> 0 > 8;
                $cond246 = $cmp241 ? $p$0 : 8;
                $or247 = $spec$select | 8;
                $fl$3 = $or247;
                $p$1 = $cond246;
                $t$1 = 120;
                label = 67;
                break;
              }
              case 88:
              case 120: {
                $fl$3 = $spec$select;
                $p$1 = $p$0;
                $t$1 = $t$0;
                label = 67;
                break;
              }
              case 111: {
                $112 = $arg;
                $113 = $112;
                $114 = HEAP32[$113 >> 2] | 0;
                $115 = ($112 + 4) | 0;
                $116 = $115;
                $117 = HEAP32[$116 >> 2] | 0;
                $118 = _fmt_o($114, $117, $add$ptr206) | 0;
                $and264 = $spec$select & 8;
                $tobool265 = ($and264 | 0) == 0;
                $sub$ptr$rhs$cast268 = $118;
                $sub$ptr$sub269 =
                  ($sub$ptr$lhs$cast318 - $sub$ptr$rhs$cast268) | 0;
                $cmp271 = ($p$0 | 0) > ($sub$ptr$sub269 | 0);
                $add270 = ($sub$ptr$sub269 + 1) | 0;
                $119 = $tobool265 | $cmp271;
                $spec$select204 = $119 ? $p$0 : $add270;
                $a$0 = $118;
                $fl$4 = $spec$select;
                $p$2 = $spec$select204;
                $pl$1 = 0;
                $prefix$1 = 8890;
                label = 73;
                break;
              }
              case 105:
              case 100: {
                $120 = $arg;
                $121 = $120;
                $122 = HEAP32[$121 >> 2] | 0;
                $123 = ($120 + 4) | 0;
                $124 = $123;
                $125 = HEAP32[$124 >> 2] | 0;
                $126 = ($125 | 0) < 0;
                if ($126) {
                  $127 = _i64Subtract(0, 0, $122 | 0, $125 | 0) | 0;
                  $128 = getTempRet0() | 0;
                  $129 = $arg;
                  $130 = $129;
                  HEAP32[$130 >> 2] = $127;
                  $131 = ($129 + 4) | 0;
                  $132 = $131;
                  HEAP32[$132 >> 2] = $128;
                  $135 = $127;
                  $136 = $128;
                  $pl$0 = 1;
                  $prefix$0 = 8890;
                  label = 72;
                  break L79;
                } else {
                  $and290 = $spec$select & 2048;
                  $tobool291 = ($and290 | 0) == 0;
                  $and295 = $spec$select & 1;
                  $tobool296 = ($and295 | 0) == 0;
                  $$ = $tobool296 ? 8890 : 8892;
                  $spec$select205 = $tobool291 ? $$ : 8891;
                  $133 = $spec$select & 2049;
                  $134 = ($133 | 0) != 0;
                  $spec$select206 = $134 & 1;
                  $135 = $122;
                  $136 = $125;
                  $pl$0 = $spec$select206;
                  $prefix$0 = $spec$select205;
                  label = 72;
                  break L79;
                }
                break;
              }
              case 117: {
                $71 = $arg;
                $72 = $71;
                $73 = HEAP32[$72 >> 2] | 0;
                $74 = ($71 + 4) | 0;
                $75 = $74;
                $76 = HEAP32[$75 >> 2] | 0;
                $135 = $73;
                $136 = $76;
                $pl$0 = 0;
                $prefix$0 = 8890;
                label = 72;
                break;
              }
              case 99: {
                $147 = $arg;
                $148 = $147;
                $149 = HEAP32[$148 >> 2] | 0;
                $150 = ($147 + 4) | 0;
                $151 = $150;
                $152 = HEAP32[$151 >> 2] | 0;
                $153 = $149 & 255;
                HEAP8[$add$ptr341 >> 0] = $153;
                $a$1 = $add$ptr341;
                $fl$6 = $and220;
                $p$5 = 1;
                $pl$2 = 0;
                $prefix$2 = 8890;
                $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
                break;
              }
              case 115: {
                $154 = HEAP32[$arg >> 2] | 0;
                $tobool345 = ($154 | 0) == (0 | 0);
                $cond350 = $tobool345 ? 8900 : $154;
                $call351 = _memchr($cond350, 0, $p$0) | 0;
                $tobool352 = ($call351 | 0) == (0 | 0);
                $sub$ptr$lhs$cast356 = $call351;
                $sub$ptr$rhs$cast357 = $cond350;
                $sub$ptr$sub358 =
                  ($sub$ptr$lhs$cast356 - $sub$ptr$rhs$cast357) | 0;
                $add$ptr354 = ($cond350 + $p$0) | 0;
                $p$3 = $tobool352 ? $p$0 : $sub$ptr$sub358;
                $z$1 = $tobool352 ? $add$ptr354 : $call351;
                $$pre267 = $z$1;
                $a$1 = $cond350;
                $fl$6 = $and220;
                $p$5 = $p$3;
                $pl$2 = 0;
                $prefix$2 = 8890;
                $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $$pre267;
                break;
              }
              case 67: {
                $155 = $arg;
                $156 = $155;
                $157 = HEAP32[$156 >> 2] | 0;
                $158 = ($155 + 4) | 0;
                $159 = $158;
                $160 = HEAP32[$159 >> 2] | 0;
                HEAP32[$wc >> 2] = $157;
                HEAP32[$arrayidx365 >> 2] = 0;
                HEAP32[$arg >> 2] = $wc;
                $p$4269 = -1;
                label = 79;
                break;
              }
              case 83: {
                $cmp372242 = ($p$0 | 0) == 0;
                if ($cmp372242) {
                  _pad_524($f, 32, $w$1, 0, $spec$select);
                  $i$0217271 = 0;
                  label = 89;
                } else {
                  $p$4269 = $p$0;
                  label = 79;
                }
                break;
              }
              case 65:
              case 71:
              case 70:
              case 69:
              case 97:
              case 103:
              case 102:
              case 101: {
                $165 = +HEAPF64[$arg >> 3];
                $call424 =
                  FUNCTION_TABLE_iidiiii[$fmt_fp & 511](
                    $f,
                    $165,
                    $w$1,
                    $p$0,
                    $spec$select,
                    $t$0
                  ) | 0;
                $l$0$ph$be = $call424;
                break L77;
                break;
              }
              default: {
                $a$1 = $0;
                $fl$6 = $spec$select;
                $p$5 = $p$0;
                $pl$2 = 0;
                $prefix$2 = 8890;
                $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
              }
            }
          } while (0);
          L102: do {
            if ((label | 0) == 67) {
              label = 0;
              $96 = $arg;
              $97 = $96;
              $98 = HEAP32[$97 >> 2] | 0;
              $99 = ($96 + 4) | 0;
              $100 = $99;
              $101 = HEAP32[$100 >> 2] | 0;
              $and250 = $t$1 & 32;
              $102 = _fmt_x($98, $101, $add$ptr206, $and250) | 0;
              $103 = $arg;
              $104 = $103;
              $105 = HEAP32[$104 >> 2] | 0;
              $106 = ($103 + 4) | 0;
              $107 = $106;
              $108 = HEAP32[$107 >> 2] | 0;
              $109 = ($105 | 0) == 0;
              $110 = ($108 | 0) == 0;
              $111 = $109 & $110;
              $and255 = $fl$3 & 8;
              $tobool256 = ($and255 | 0) == 0;
              $or$cond190 = $tobool256 | $111;
              $shr199 = $t$1 >>> 4;
              $add$ptr258 = (8890 + $shr199) | 0;
              $spec$select202 = $or$cond190 ? 8890 : $add$ptr258;
              $spec$select203 = $or$cond190 ? 0 : 2;
              $a$0 = $102;
              $fl$4 = $fl$3;
              $p$2 = $p$1;
              $pl$1 = $spec$select203;
              $prefix$1 = $spec$select202;
              label = 73;
            } else if ((label | 0) == 72) {
              label = 0;
              $137 = _fmt_u($135, $136, $add$ptr206) | 0;
              $a$0 = $137;
              $fl$4 = $spec$select;
              $p$2 = $p$0;
              $pl$1 = $pl$0;
              $prefix$1 = $prefix$0;
              label = 73;
            } else if ((label | 0) == 79) {
              label = 0;
              $161 = HEAP32[$arg >> 2] | 0;
              $i$0243 = 0;
              $ws$0244 = $161;
              while (1) {
                $162 = HEAP32[$ws$0244 >> 2] | 0;
                $tobool375 = ($162 | 0) == 0;
                if ($tobool375) {
                  $i$0217 = $i$0243;
                  break;
                }
                $call379 = _wctomb($mb, $162) | 0;
                $cmp380 = ($call379 | 0) < 0;
                $sub384 = ($p$4269 - $i$0243) | 0;
                $cmp385 = $call379 >>> 0 > $sub384 >>> 0;
                $or$cond194 = $cmp380 | $cmp385;
                if ($or$cond194) {
                  label = 83;
                  break;
                }
                $incdec$ptr378 = ($ws$0244 + 4) | 0;
                $add390 = ($call379 + $i$0243) | 0;
                $cmp372 = $p$4269 >>> 0 > $add390 >>> 0;
                if ($cmp372) {
                  $i$0243 = $add390;
                  $ws$0244 = $incdec$ptr378;
                } else {
                  $i$0217 = $add390;
                  break;
                }
              }
              if ((label | 0) == 83) {
                label = 0;
                if ($cmp380) {
                  $retval$0 = -1;
                  break L1;
                } else {
                  $i$0217 = $i$0243;
                }
              }
              _pad_524($f, 32, $w$1, $i$0217, $spec$select);
              $cmp399247 = ($i$0217 | 0) == 0;
              if ($cmp399247) {
                $i$0217271 = 0;
                label = 89;
              } else {
                $163 = HEAP32[$arg >> 2] | 0;
                $i$1248 = 0;
                $ws$1249 = $163;
                while (1) {
                  $164 = HEAP32[$ws$1249 >> 2] | 0;
                  $tobool402 = ($164 | 0) == 0;
                  if ($tobool402) {
                    $i$0217271 = $i$0217;
                    label = 89;
                    break L102;
                  }
                  $call406 = _wctomb($mb, $164) | 0;
                  $add407 = ($call406 + $i$1248) | 0;
                  $cmp408 = ($add407 | 0) > ($i$0217 | 0);
                  if ($cmp408) {
                    $i$0217271 = $i$0217;
                    label = 89;
                    break L102;
                  }
                  $incdec$ptr405 = ($ws$1249 + 4) | 0;
                  _out($f, $mb, $call406);
                  $cmp399 = $add407 >>> 0 < $i$0217 >>> 0;
                  if ($cmp399) {
                    $i$1248 = $add407;
                    $ws$1249 = $incdec$ptr405;
                  } else {
                    $i$0217271 = $i$0217;
                    label = 89;
                    break;
                  }
                }
              }
            }
          } while (0);
          if ((label | 0) == 73) {
            label = 0;
            $cmp307 = ($p$2 | 0) > -1;
            $and310 = $fl$4 & -65537;
            $spec$select193 = $cmp307 ? $and310 : $fl$4;
            $138 = $arg;
            $139 = $138;
            $140 = HEAP32[$139 >> 2] | 0;
            $141 = ($138 + 4) | 0;
            $142 = $141;
            $143 = HEAP32[$142 >> 2] | 0;
            $144 = ($140 | 0) != 0;
            $145 = ($143 | 0) != 0;
            $146 = $144 | $145;
            $tobool315 = ($p$2 | 0) != 0;
            $or$cond = $tobool315 | $146;
            $sub$ptr$rhs$cast319 = $a$0;
            $sub$ptr$sub320 = ($sub$ptr$lhs$cast318 - $sub$ptr$rhs$cast319) | 0;
            $lnot = $146 ^ 1;
            $lnot$ext = $lnot & 1;
            $add323 = ($sub$ptr$sub320 + $lnot$ext) | 0;
            $cmp324 = ($p$2 | 0) > ($add323 | 0);
            $p$2$add323 = $cmp324 ? $p$2 : $add323;
            $spec$select207 = $or$cond ? $p$2$add323 : 0;
            $spec$select208 = $or$cond ? $a$0 : $add$ptr206;
            $a$1 = $spec$select208;
            $fl$6 = $spec$select193;
            $p$5 = $spec$select207;
            $pl$2 = $pl$1;
            $prefix$2 = $prefix$1;
            $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
          } else if ((label | 0) == 89) {
            label = 0;
            $xor = $spec$select ^ 8192;
            _pad_524($f, 32, $w$1, $i$0217271, $xor);
            $cmp416 = ($w$1 | 0) > ($i$0217271 | 0);
            $cond421 = $cmp416 ? $w$1 : $i$0217271;
            $l$0$ph$be = $cond421;
            break;
          }
          $sub$ptr$rhs$cast427 = $a$1;
          $sub$ptr$sub428 =
            ($sub$ptr$lhs$cast426$pre$phiZZZZ2D - $sub$ptr$rhs$cast427) | 0;
          $cmp429 = ($p$5 | 0) < ($sub$ptr$sub428 | 0);
          $spec$select195 = $cmp429 ? $sub$ptr$sub428 : $p$5;
          $add436 = ($spec$select195 + $pl$2) | 0;
          $cmp437 = ($w$1 | 0) < ($add436 | 0);
          $w$2 = $cmp437 ? $add436 : $w$1;
          _pad_524($f, 32, $w$2, $add436, $fl$6);
          _out($f, $prefix$2, $pl$2);
          $xor444 = $fl$6 ^ 65536;
          _pad_524($f, 48, $w$2, $add436, $xor444);
          _pad_524($f, 48, $spec$select195, $sub$ptr$sub428, 0);
          _out($f, $a$1, $sub$ptr$sub428);
          $xor452 = $fl$6 ^ 8192;
          _pad_524($f, 32, $w$2, $add436, $xor452);
          $l$0$ph$be = $w$2;
        }
      } while (0);
      $cnt$0$ph = $cnt$1;
      $l$0$ph = $l$0$ph$be;
      $l10n$0$ph = $l10n$3;
    }
    L123: do {
      if ((label | 0) == 92) {
        $tobool454 = ($f | 0) == (0 | 0);
        if ($tobool454) {
          $tobool457 = ($l10n$0$ph | 0) == 0;
          if ($tobool457) {
            $retval$0 = 0;
          } else {
            $i$2224 = 1;
            while (1) {
              $arrayidx464 = ($nl_type + ($i$2224 << 2)) | 0;
              $166 = HEAP32[$arrayidx464 >> 2] | 0;
              $tobool465 = ($166 | 0) == 0;
              if ($tobool465) {
                break;
              }
              $add$ptr468 = ($nl_arg + ($i$2224 << 3)) | 0;
              _pop_arg($add$ptr468, $166, $ap, $pop_arg_long_double);
              $inc = ($i$2224 + 1) | 0;
              $cmp461 = $inc >>> 0 < 10;
              if ($cmp461) {
                $i$2224 = $inc;
              } else {
                $retval$0 = 1;
                break L123;
              }
            }
            $i$3221 = $i$2224;
            while (1) {
              $arrayidx476 = ($nl_type + ($i$3221 << 2)) | 0;
              $167 = HEAP32[$arrayidx476 >> 2] | 0;
              $tobool477 = ($167 | 0) == 0;
              $inc483 = ($i$3221 + 1) | 0;
              if (!$tobool477) {
                $retval$0 = -1;
                break L123;
              }
              $cmp473 = $inc483 >>> 0 < 10;
              if ($cmp473) {
                $i$3221 = $inc483;
              } else {
                $retval$0 = 1;
                break;
              }
            }
          }
        } else {
          $retval$0 = $cnt$1;
        }
      }
    } while (0);
    STACKTOP = sp;
    return $retval$0 | 0;
  }
  function ___lockfile($f) {
    $f = $f | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 1;
  }
  function ___unlockfile($f) {
    $f = $f | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return;
  }
  function _out($f, $s, $l) {
    $f = $f | 0;
    $s = $s | 0;
    $l = $l | 0;
    var $0 = 0,
      $and = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$f >> 2] | 0;
    $and = $0 & 32;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      ___fwritex($s, $l, $f) | 0;
    }
    return;
  }
  function _isdigit($c) {
    $c = $c | 0;
    var $cmp = 0,
      $conv = 0,
      $sub = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $sub = ($c + -48) | 0;
    $cmp = $sub >>> 0 < 10;
    $conv = $cmp & 1;
    return $conv | 0;
  }
  function _getint($s) {
    $s = $s | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $add = 0,
      $call = 0,
      $call5 = 0,
      $conv = 0,
      $conv1 = 0,
      $conv4 = 0,
      $i$0$lcssa = 0,
      $i$07 = 0,
      $incdec$ptr = 0,
      $mul = 0,
      $sub = 0,
      $tobool = 0,
      $tobool6 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$s >> 2] | 0;
    $1 = HEAP8[$0 >> 0] | 0;
    $conv4 = ($1 << 24) >> 24;
    $call5 = _isdigit($conv4) | 0;
    $tobool6 = ($call5 | 0) == 0;
    if ($tobool6) {
      $i$0$lcssa = 0;
    } else {
      $i$07 = 0;
      while (1) {
        $mul = ($i$07 * 10) | 0;
        $2 = HEAP32[$s >> 2] | 0;
        $3 = HEAP8[$2 >> 0] | 0;
        $conv1 = ($3 << 24) >> 24;
        $sub = ($mul + -48) | 0;
        $add = ($sub + $conv1) | 0;
        $incdec$ptr = ($2 + 1) | 0;
        HEAP32[$s >> 2] = $incdec$ptr;
        $4 = HEAP8[$incdec$ptr >> 0] | 0;
        $conv = ($4 << 24) >> 24;
        $call = _isdigit($conv) | 0;
        $tobool = ($call | 0) == 0;
        if ($tobool) {
          $i$0$lcssa = $add;
          break;
        } else {
          $i$07 = $add;
        }
      }
    }
    return $i$0$lcssa | 0;
  }
  function _pop_arg($arg, $type, $ap, $pop_arg_long_double) {
    $arg = $arg | 0;
    $type = $type | 0;
    $ap = $ap | 0;
    $pop_arg_long_double = $pop_arg_long_double | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $100 = 0,
      $101 = 0,
      $102 = 0,
      $103 = 0.0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0;
    var $23 = 0,
      $24 = 0,
      $25 = 0,
      $26 = 0,
      $27 = 0,
      $28 = 0,
      $29 = 0,
      $3 = 0,
      $30 = 0,
      $31 = 0,
      $32 = 0,
      $33 = 0,
      $34 = 0,
      $35 = 0,
      $36 = 0,
      $37 = 0,
      $38 = 0,
      $39 = 0,
      $4 = 0,
      $40 = 0;
    var $41 = 0,
      $42 = 0,
      $43 = 0,
      $44 = 0,
      $45 = 0,
      $46 = 0,
      $47 = 0,
      $48 = 0,
      $49 = 0,
      $5 = 0,
      $50 = 0,
      $51 = 0,
      $52 = 0,
      $53 = 0,
      $54 = 0,
      $55 = 0,
      $56 = 0,
      $57 = 0,
      $58 = 0,
      $59 = 0;
    var $6 = 0,
      $60 = 0,
      $61 = 0,
      $62 = 0,
      $63 = 0,
      $64 = 0,
      $65 = 0,
      $66 = 0,
      $67 = 0,
      $68 = 0,
      $69 = 0,
      $7 = 0,
      $70 = 0,
      $71 = 0,
      $72 = 0,
      $73 = 0,
      $74 = 0,
      $75 = 0,
      $76 = 0,
      $77 = 0;
    var $78 = 0,
      $79 = 0,
      $8 = 0,
      $80 = 0,
      $81 = 0,
      $82 = 0,
      $83 = 0,
      $84 = 0,
      $85 = 0,
      $86 = 0,
      $87 = 0,
      $88 = 0,
      $89 = 0,
      $9 = 0,
      $90 = 0,
      $91 = 0,
      $92 = 0,
      $93 = 0,
      $94 = 0,
      $95 = 0;
    var $96 = 0,
      $97 = 0,
      $98 = 0,
      $99 = 0,
      $arglist_current = 0,
      $arglist_current11 = 0,
      $arglist_current14 = 0,
      $arglist_current17 = 0,
      $arglist_current2 = 0,
      $arglist_current20 = 0,
      $arglist_current23 = 0,
      $arglist_current5 = 0,
      $arglist_current8 = 0,
      $arglist_next = 0,
      $arglist_next12 = 0,
      $arglist_next15 = 0,
      $arglist_next18 = 0,
      $arglist_next21 = 0,
      $arglist_next24 = 0,
      $arglist_next3 = 0;
    var $arglist_next6 = 0,
      $arglist_next9 = 0,
      $cmp = 0,
      $conv16 = 0,
      $conv22$mask = 0,
      $conv28 = 0,
      $conv34$mask = 0,
      $expanded = 0,
      $expanded25 = 0,
      $expanded27 = 0,
      $expanded28 = 0,
      $expanded29 = 0,
      $expanded31 = 0,
      $expanded32 = 0,
      $expanded34 = 0,
      $expanded35 = 0,
      $expanded36 = 0,
      $expanded38 = 0,
      $expanded39 = 0,
      $expanded41 = 0;
    var $expanded42 = 0,
      $expanded43 = 0,
      $expanded45 = 0,
      $expanded46 = 0,
      $expanded48 = 0,
      $expanded49 = 0,
      $expanded50 = 0,
      $expanded52 = 0,
      $expanded53 = 0,
      $expanded55 = 0,
      $expanded56 = 0,
      $expanded57 = 0,
      $expanded59 = 0,
      $expanded60 = 0,
      $expanded62 = 0,
      $expanded63 = 0,
      $expanded64 = 0,
      $expanded66 = 0,
      $expanded67 = 0,
      $expanded69 = 0;
    var $expanded70 = 0,
      $expanded71 = 0,
      $expanded73 = 0,
      $expanded74 = 0,
      $expanded76 = 0,
      $expanded77 = 0,
      $expanded78 = 0,
      $expanded80 = 0,
      $expanded81 = 0,
      $expanded83 = 0,
      $expanded84 = 0,
      $expanded85 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $cmp = $type >>> 0 > 20;
    L1: do {
      if (!$cmp) {
        do {
          switch ($type | 0) {
            case 9: {
              $arglist_current = HEAP32[$ap >> 2] | 0;
              $0 = $arglist_current;
              $1 = (0 + 4) | 0;
              $expanded25 = $1;
              $expanded = ($expanded25 - 1) | 0;
              $2 = ($0 + $expanded) | 0;
              $3 = (0 + 4) | 0;
              $expanded29 = $3;
              $expanded28 = ($expanded29 - 1) | 0;
              $expanded27 = $expanded28 ^ -1;
              $4 = $2 & $expanded27;
              $5 = $4;
              $6 = HEAP32[$5 >> 2] | 0;
              $arglist_next = ($5 + 4) | 0;
              HEAP32[$ap >> 2] = $arglist_next;
              HEAP32[$arg >> 2] = $6;
              break L1;
              break;
            }
            case 10: {
              $arglist_current2 = HEAP32[$ap >> 2] | 0;
              $7 = $arglist_current2;
              $8 = (0 + 4) | 0;
              $expanded32 = $8;
              $expanded31 = ($expanded32 - 1) | 0;
              $9 = ($7 + $expanded31) | 0;
              $10 = (0 + 4) | 0;
              $expanded36 = $10;
              $expanded35 = ($expanded36 - 1) | 0;
              $expanded34 = $expanded35 ^ -1;
              $11 = $9 & $expanded34;
              $12 = $11;
              $13 = HEAP32[$12 >> 2] | 0;
              $arglist_next3 = ($12 + 4) | 0;
              HEAP32[$ap >> 2] = $arglist_next3;
              $14 = ($13 | 0) < 0;
              $15 = ($14 << 31) >> 31;
              $16 = $arg;
              $17 = $16;
              HEAP32[$17 >> 2] = $13;
              $18 = ($16 + 4) | 0;
              $19 = $18;
              HEAP32[$19 >> 2] = $15;
              break L1;
              break;
            }
            case 11: {
              $arglist_current5 = HEAP32[$ap >> 2] | 0;
              $20 = $arglist_current5;
              $21 = (0 + 4) | 0;
              $expanded39 = $21;
              $expanded38 = ($expanded39 - 1) | 0;
              $22 = ($20 + $expanded38) | 0;
              $23 = (0 + 4) | 0;
              $expanded43 = $23;
              $expanded42 = ($expanded43 - 1) | 0;
              $expanded41 = $expanded42 ^ -1;
              $24 = $22 & $expanded41;
              $25 = $24;
              $26 = HEAP32[$25 >> 2] | 0;
              $arglist_next6 = ($25 + 4) | 0;
              HEAP32[$ap >> 2] = $arglist_next6;
              $27 = $arg;
              $28 = $27;
              HEAP32[$28 >> 2] = $26;
              $29 = ($27 + 4) | 0;
              $30 = $29;
              HEAP32[$30 >> 2] = 0;
              break L1;
              break;
            }
            case 12: {
              $arglist_current8 = HEAP32[$ap >> 2] | 0;
              $31 = $arglist_current8;
              $32 = (0 + 8) | 0;
              $expanded46 = $32;
              $expanded45 = ($expanded46 - 1) | 0;
              $33 = ($31 + $expanded45) | 0;
              $34 = (0 + 8) | 0;
              $expanded50 = $34;
              $expanded49 = ($expanded50 - 1) | 0;
              $expanded48 = $expanded49 ^ -1;
              $35 = $33 & $expanded48;
              $36 = $35;
              $37 = $36;
              $38 = $37;
              $39 = HEAP32[$38 >> 2] | 0;
              $40 = ($37 + 4) | 0;
              $41 = $40;
              $42 = HEAP32[$41 >> 2] | 0;
              $arglist_next9 = ($36 + 8) | 0;
              HEAP32[$ap >> 2] = $arglist_next9;
              $43 = $arg;
              $44 = $43;
              HEAP32[$44 >> 2] = $39;
              $45 = ($43 + 4) | 0;
              $46 = $45;
              HEAP32[$46 >> 2] = $42;
              break L1;
              break;
            }
            case 13: {
              $arglist_current11 = HEAP32[$ap >> 2] | 0;
              $47 = $arglist_current11;
              $48 = (0 + 4) | 0;
              $expanded53 = $48;
              $expanded52 = ($expanded53 - 1) | 0;
              $49 = ($47 + $expanded52) | 0;
              $50 = (0 + 4) | 0;
              $expanded57 = $50;
              $expanded56 = ($expanded57 - 1) | 0;
              $expanded55 = $expanded56 ^ -1;
              $51 = $49 & $expanded55;
              $52 = $51;
              $53 = HEAP32[$52 >> 2] | 0;
              $arglist_next12 = ($52 + 4) | 0;
              HEAP32[$ap >> 2] = $arglist_next12;
              $conv16 = $53 & 65535;
              $54 = ($conv16 << 16) >> 16;
              $55 = ($54 | 0) < 0;
              $56 = ($55 << 31) >> 31;
              $57 = $arg;
              $58 = $57;
              HEAP32[$58 >> 2] = $54;
              $59 = ($57 + 4) | 0;
              $60 = $59;
              HEAP32[$60 >> 2] = $56;
              break L1;
              break;
            }
            case 14: {
              $arglist_current14 = HEAP32[$ap >> 2] | 0;
              $61 = $arglist_current14;
              $62 = (0 + 4) | 0;
              $expanded60 = $62;
              $expanded59 = ($expanded60 - 1) | 0;
              $63 = ($61 + $expanded59) | 0;
              $64 = (0 + 4) | 0;
              $expanded64 = $64;
              $expanded63 = ($expanded64 - 1) | 0;
              $expanded62 = $expanded63 ^ -1;
              $65 = $63 & $expanded62;
              $66 = $65;
              $67 = HEAP32[$66 >> 2] | 0;
              $arglist_next15 = ($66 + 4) | 0;
              HEAP32[$ap >> 2] = $arglist_next15;
              $conv22$mask = $67 & 65535;
              $68 = $arg;
              $69 = $68;
              HEAP32[$69 >> 2] = $conv22$mask;
              $70 = ($68 + 4) | 0;
              $71 = $70;
              HEAP32[$71 >> 2] = 0;
              break L1;
              break;
            }
            case 15: {
              $arglist_current17 = HEAP32[$ap >> 2] | 0;
              $72 = $arglist_current17;
              $73 = (0 + 4) | 0;
              $expanded67 = $73;
              $expanded66 = ($expanded67 - 1) | 0;
              $74 = ($72 + $expanded66) | 0;
              $75 = (0 + 4) | 0;
              $expanded71 = $75;
              $expanded70 = ($expanded71 - 1) | 0;
              $expanded69 = $expanded70 ^ -1;
              $76 = $74 & $expanded69;
              $77 = $76;
              $78 = HEAP32[$77 >> 2] | 0;
              $arglist_next18 = ($77 + 4) | 0;
              HEAP32[$ap >> 2] = $arglist_next18;
              $conv28 = $78 & 255;
              $79 = ($conv28 << 24) >> 24;
              $80 = ($79 | 0) < 0;
              $81 = ($80 << 31) >> 31;
              $82 = $arg;
              $83 = $82;
              HEAP32[$83 >> 2] = $79;
              $84 = ($82 + 4) | 0;
              $85 = $84;
              HEAP32[$85 >> 2] = $81;
              break L1;
              break;
            }
            case 16: {
              $arglist_current20 = HEAP32[$ap >> 2] | 0;
              $86 = $arglist_current20;
              $87 = (0 + 4) | 0;
              $expanded74 = $87;
              $expanded73 = ($expanded74 - 1) | 0;
              $88 = ($86 + $expanded73) | 0;
              $89 = (0 + 4) | 0;
              $expanded78 = $89;
              $expanded77 = ($expanded78 - 1) | 0;
              $expanded76 = $expanded77 ^ -1;
              $90 = $88 & $expanded76;
              $91 = $90;
              $92 = HEAP32[$91 >> 2] | 0;
              $arglist_next21 = ($91 + 4) | 0;
              HEAP32[$ap >> 2] = $arglist_next21;
              $conv34$mask = $92 & 255;
              $93 = $arg;
              $94 = $93;
              HEAP32[$94 >> 2] = $conv34$mask;
              $95 = ($93 + 4) | 0;
              $96 = $95;
              HEAP32[$96 >> 2] = 0;
              break L1;
              break;
            }
            case 17: {
              $arglist_current23 = HEAP32[$ap >> 2] | 0;
              $97 = $arglist_current23;
              $98 = (0 + 8) | 0;
              $expanded81 = $98;
              $expanded80 = ($expanded81 - 1) | 0;
              $99 = ($97 + $expanded80) | 0;
              $100 = (0 + 8) | 0;
              $expanded85 = $100;
              $expanded84 = ($expanded85 - 1) | 0;
              $expanded83 = $expanded84 ^ -1;
              $101 = $99 & $expanded83;
              $102 = $101;
              $103 = +HEAPF64[$102 >> 3];
              $arglist_next24 = ($102 + 8) | 0;
              HEAP32[$ap >> 2] = $arglist_next24;
              HEAPF64[$arg >> 3] = $103;
              break L1;
              break;
            }
            case 18: {
              FUNCTION_TABLE_vii[$pop_arg_long_double & 511]($arg, $ap);
              break L1;
              break;
            }
            default: {
              break L1;
            }
          }
        } while (0);
      }
    } while (0);
    return;
  }
  function _fmt_x($0, $1, $s, $lower) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $s = $s | 0;
    $lower = $lower | 0;
    var $10 = 0,
      $11 = 0,
      $12 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $arrayidx = 0,
      $conv1 = 0,
      $conv4 = 0,
      $idxprom = 0,
      $incdec$ptr = 0,
      $or = 0,
      $s$addr$0$lcssa = 0,
      $s$addr$06 = 0,
      label = 0;
    var sp = 0;
    sp = STACKTOP;
    $2 = ($0 | 0) == 0;
    $3 = ($1 | 0) == 0;
    $4 = $2 & $3;
    if ($4) {
      $s$addr$0$lcssa = $s;
    } else {
      $5 = $0;
      $7 = $1;
      $s$addr$06 = $s;
      while (1) {
        $idxprom = $5 & 15;
        $arrayidx = (512 + $idxprom) | 0;
        $6 = HEAP8[$arrayidx >> 0] | 0;
        $conv4 = $6 & 255;
        $or = $conv4 | $lower;
        $conv1 = $or & 255;
        $incdec$ptr = ($s$addr$06 + -1) | 0;
        HEAP8[$incdec$ptr >> 0] = $conv1;
        $8 = _bitshift64Lshr($5 | 0, $7 | 0, 4) | 0;
        $9 = getTempRet0() | 0;
        $10 = ($8 | 0) == 0;
        $11 = ($9 | 0) == 0;
        $12 = $10 & $11;
        if ($12) {
          $s$addr$0$lcssa = $incdec$ptr;
          break;
        } else {
          $5 = $8;
          $7 = $9;
          $s$addr$06 = $incdec$ptr;
        }
      }
    }
    return $s$addr$0$lcssa | 0;
  }
  function _fmt_o($0, $1, $s) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $s = $s | 0;
    var $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $conv = 0,
      $incdec$ptr = 0,
      $s$addr$0$lcssa = 0,
      $s$addr$06 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $2 = ($0 | 0) == 0;
    $3 = ($1 | 0) == 0;
    $4 = $2 & $3;
    if ($4) {
      $s$addr$0$lcssa = $s;
    } else {
      $6 = $0;
      $8 = $1;
      $s$addr$06 = $s;
      while (1) {
        $5 = $6 & 255;
        $7 = $5 & 7;
        $conv = $7 | 48;
        $incdec$ptr = ($s$addr$06 + -1) | 0;
        HEAP8[$incdec$ptr >> 0] = $conv;
        $9 = _bitshift64Lshr($6 | 0, $8 | 0, 3) | 0;
        $10 = getTempRet0() | 0;
        $11 = ($9 | 0) == 0;
        $12 = ($10 | 0) == 0;
        $13 = $11 & $12;
        if ($13) {
          $s$addr$0$lcssa = $incdec$ptr;
          break;
        } else {
          $6 = $9;
          $8 = $10;
          $s$addr$06 = $incdec$ptr;
        }
      }
    }
    return $s$addr$0$lcssa | 0;
  }
  function _fmt_u($0, $1, $s) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $s = $s | 0;
    var $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0,
      $23 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0;
    var $8 = 0,
      $9 = 0,
      $add5 = 0,
      $conv = 0,
      $conv6 = 0,
      $div9 = 0,
      $incdec$ptr = 0,
      $incdec$ptr7 = 0,
      $s$addr$0$lcssa = 0,
      $s$addr$013 = 0,
      $s$addr$1$lcssa = 0,
      $s$addr$19 = 0,
      $tobool8 = 0,
      $x$addr$0$lcssa$off0 = 0,
      $y$010 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $2 = $1 >>> 0 > 0;
    $3 = $0 >>> 0 > 4294967295;
    $4 = ($1 | 0) == 0;
    $5 = $4 & $3;
    $6 = $2 | $5;
    if ($6) {
      $7 = $0;
      $8 = $1;
      $s$addr$013 = $s;
      while (1) {
        $9 = ___udivdi3($7 | 0, $8 | 0, 10, 0) | 0;
        $10 = getTempRet0() | 0;
        $11 = ___muldi3($9 | 0, $10 | 0, 10, 0) | 0;
        $12 = getTempRet0() | 0;
        $13 = _i64Subtract($7 | 0, $8 | 0, $11 | 0, $12 | 0) | 0;
        $14 = getTempRet0() | 0;
        $15 = $13 & 255;
        $conv = $15 | 48;
        $incdec$ptr = ($s$addr$013 + -1) | 0;
        HEAP8[$incdec$ptr >> 0] = $conv;
        $16 = $8 >>> 0 > 9;
        $17 = $7 >>> 0 > 4294967295;
        $18 = ($8 | 0) == 9;
        $19 = $18 & $17;
        $20 = $16 | $19;
        if ($20) {
          $7 = $9;
          $8 = $10;
          $s$addr$013 = $incdec$ptr;
        } else {
          break;
        }
      }
      $s$addr$0$lcssa = $incdec$ptr;
      $x$addr$0$lcssa$off0 = $9;
    } else {
      $s$addr$0$lcssa = $s;
      $x$addr$0$lcssa$off0 = $0;
    }
    $tobool8 = ($x$addr$0$lcssa$off0 | 0) == 0;
    if ($tobool8) {
      $s$addr$1$lcssa = $s$addr$0$lcssa;
    } else {
      $s$addr$19 = $s$addr$0$lcssa;
      $y$010 = $x$addr$0$lcssa$off0;
      while (1) {
        $div9 = (($y$010 >>> 0) / 10) & -1;
        $21 = ($div9 * 10) | 0;
        $22 = ($y$010 - $21) | 0;
        $add5 = $22 | 48;
        $conv6 = $add5 & 255;
        $incdec$ptr7 = ($s$addr$19 + -1) | 0;
        HEAP8[$incdec$ptr7 >> 0] = $conv6;
        $23 = $y$010 >>> 0 < 10;
        if ($23) {
          $s$addr$1$lcssa = $incdec$ptr7;
          break;
        } else {
          $s$addr$19 = $incdec$ptr7;
          $y$010 = $div9;
        }
      }
    }
    return $s$addr$1$lcssa | 0;
  }
  function _pad_524($f, $c, $w, $l, $fl) {
    $f = $f | 0;
    $c = $c | 0;
    $w = $w | 0;
    $l = $l | 0;
    $fl = $fl | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $and = 0,
      $cmp = 0,
      $cmp3 = 0,
      $cmp38 = 0,
      $cond = 0,
      $conv = 0,
      $l$addr$0$lcssa = 0,
      $l$addr$09 = 0,
      $or$cond = 0,
      $pad = 0,
      $sub = 0,
      $sub6 = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 256) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256 | 0);
    $pad = sp;
    $and = $fl & 73728;
    $tobool = ($and | 0) == 0;
    $cmp = ($w | 0) > ($l | 0);
    $or$cond = $cmp & $tobool;
    if ($or$cond) {
      $sub = ($w - $l) | 0;
      $conv = ($c << 24) >> 24;
      $0 = $sub >>> 0 < 256;
      $cond = $0 ? $sub : 256;
      _memset($pad | 0, $conv | 0, $cond | 0) | 0;
      $cmp38 = $sub >>> 0 > 255;
      if ($cmp38) {
        $1 = ($w - $l) | 0;
        $l$addr$09 = $sub;
        while (1) {
          _out($f, $pad, 256);
          $sub6 = ($l$addr$09 + -256) | 0;
          $cmp3 = $sub6 >>> 0 > 255;
          if ($cmp3) {
            $l$addr$09 = $sub6;
          } else {
            break;
          }
        }
        $2 = $1 & 255;
        $l$addr$0$lcssa = $2;
      } else {
        $l$addr$0$lcssa = $sub;
      }
      _out($f, $pad, $l$addr$0$lcssa);
    }
    STACKTOP = sp;
    return;
  }
  function _wctomb($s, $wc) {
    $s = $s | 0;
    $wc = $wc | 0;
    var $call = 0,
      $retval$0 = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $tobool = ($s | 0) == (0 | 0);
    if ($tobool) {
      $retval$0 = 0;
    } else {
      $call = _wcrtomb($s, $wc, 0) | 0;
      $retval$0 = $call;
    }
    return $retval$0 | 0;
  }
  function _wcrtomb($s, $wc, $st) {
    $s = $s | 0;
    $wc = $wc | 0;
    $st = $st | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $and = 0,
      $and32 = 0,
      $and36 = 0,
      $and49 = 0,
      $and54 = 0,
      $and58 = 0,
      $call = 0,
      $call10 = 0,
      $call66 = 0,
      $cmp = 0;
    var $cmp14 = 0,
      $cmp21 = 0,
      $cmp24 = 0,
      $cmp41 = 0,
      $cmp7 = 0,
      $conv = 0,
      $conv12 = 0,
      $conv17 = 0,
      $conv19 = 0,
      $conv29 = 0,
      $conv34 = 0,
      $conv38 = 0,
      $conv46 = 0,
      $conv51 = 0,
      $conv56 = 0,
      $conv60 = 0,
      $incdec$ptr = 0,
      $incdec$ptr30 = 0,
      $incdec$ptr35 = 0,
      $incdec$ptr47 = 0;
    var $incdec$ptr52 = 0,
      $incdec$ptr57 = 0,
      $locale = 0,
      $or = 0,
      $or$cond = 0,
      $or18 = 0,
      $or28 = 0,
      $or33 = 0,
      $or37 = 0,
      $or45 = 0,
      $or50 = 0,
      $or55 = 0,
      $or59 = 0,
      $retval$0 = 0,
      $sub40 = 0,
      $tobool = 0,
      $tobool2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $tobool = ($s | 0) == (0 | 0);
    do {
      if ($tobool) {
        $retval$0 = 1;
      } else {
        $cmp = $wc >>> 0 < 128;
        if ($cmp) {
          $conv = $wc & 255;
          HEAP8[$s >> 0] = $conv;
          $retval$0 = 1;
          break;
        }
        $call = ___pthread_self_180() | 0;
        $locale = ($call + 188) | 0;
        $0 = HEAP32[$locale >> 2] | 0;
        $1 = HEAP32[$0 >> 2] | 0;
        $tobool2 = ($1 | 0) == (0 | 0);
        if ($tobool2) {
          $2 = $wc & -128;
          $cmp7 = ($2 | 0) == 57216;
          if ($cmp7) {
            $conv12 = $wc & 255;
            HEAP8[$s >> 0] = $conv12;
            $retval$0 = 1;
            break;
          } else {
            $call10 = ___errno_location() | 0;
            HEAP32[$call10 >> 2] = 84;
            $retval$0 = -1;
            break;
          }
        }
        $cmp14 = $wc >>> 0 < 2048;
        if ($cmp14) {
          $3 = $wc >>> 6;
          $or = $3 | 192;
          $conv17 = $or & 255;
          $incdec$ptr = ($s + 1) | 0;
          HEAP8[$s >> 0] = $conv17;
          $and = $wc & 63;
          $or18 = $and | 128;
          $conv19 = $or18 & 255;
          HEAP8[$incdec$ptr >> 0] = $conv19;
          $retval$0 = 2;
          break;
        }
        $cmp21 = $wc >>> 0 < 55296;
        $4 = $wc & -8192;
        $cmp24 = ($4 | 0) == 57344;
        $or$cond = $cmp21 | $cmp24;
        if ($or$cond) {
          $5 = $wc >>> 12;
          $or28 = $5 | 224;
          $conv29 = $or28 & 255;
          $incdec$ptr30 = ($s + 1) | 0;
          HEAP8[$s >> 0] = $conv29;
          $6 = $wc >>> 6;
          $and32 = $6 & 63;
          $or33 = $and32 | 128;
          $conv34 = $or33 & 255;
          $incdec$ptr35 = ($s + 2) | 0;
          HEAP8[$incdec$ptr30 >> 0] = $conv34;
          $and36 = $wc & 63;
          $or37 = $and36 | 128;
          $conv38 = $or37 & 255;
          HEAP8[$incdec$ptr35 >> 0] = $conv38;
          $retval$0 = 3;
          break;
        }
        $sub40 = ($wc + -65536) | 0;
        $cmp41 = $sub40 >>> 0 < 1048576;
        if ($cmp41) {
          $7 = $wc >>> 18;
          $or45 = $7 | 240;
          $conv46 = $or45 & 255;
          $incdec$ptr47 = ($s + 1) | 0;
          HEAP8[$s >> 0] = $conv46;
          $8 = $wc >>> 12;
          $and49 = $8 & 63;
          $or50 = $and49 | 128;
          $conv51 = $or50 & 255;
          $incdec$ptr52 = ($s + 2) | 0;
          HEAP8[$incdec$ptr47 >> 0] = $conv51;
          $9 = $wc >>> 6;
          $and54 = $9 & 63;
          $or55 = $and54 | 128;
          $conv56 = $or55 & 255;
          $incdec$ptr57 = ($s + 3) | 0;
          HEAP8[$incdec$ptr52 >> 0] = $conv56;
          $and58 = $wc & 63;
          $or59 = $and58 | 128;
          $conv60 = $or59 & 255;
          HEAP8[$incdec$ptr57 >> 0] = $conv60;
          $retval$0 = 4;
          break;
        } else {
          $call66 = ___errno_location() | 0;
          HEAP32[$call66 >> 2] = 84;
          $retval$0 = -1;
          break;
        }
      }
    } while (0);
    return $retval$0 | 0;
  }
  function ___pthread_self_180() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = _pthread_self() | 0;
    return $call | 0;
  }
  function ___fwritex($s, $l, $f) {
    $s = $s | 0;
    $l = $l | 0;
    $f = $f | 0;
    var $$pre = 0,
      $$pre35 = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $add = 0,
      $add$ptr = 0,
      $add$ptr27 = 0,
      $arrayidx = 0,
      $call = 0,
      $call16 = 0,
      $call4 = 0;
    var $cmp = 0,
      $cmp11 = 0,
      $cmp17 = 0,
      $cmp6 = 0,
      $i$033 = 0,
      $i$1 = 0,
      $l$addr$0 = 0,
      $l$addr$1 = 0,
      $lbf = 0,
      $or$cond = 0,
      $retval$1 = 0,
      $s$addr$1 = 0,
      $sub = 0,
      $sub$ptr$sub = 0,
      $tobool = 0,
      $tobool1 = 0,
      $tobool9 = 0,
      $tobool932 = 0,
      $wend = 0,
      $wpos = 0;
    var $write = 0,
      $write15 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $wend = ($f + 16) | 0;
    $0 = HEAP32[$wend >> 2] | 0;
    $tobool = ($0 | 0) == (0 | 0);
    if ($tobool) {
      $call = ___towrite($f) | 0;
      $tobool1 = ($call | 0) == 0;
      if ($tobool1) {
        $$pre = HEAP32[$wend >> 2] | 0;
        $3 = $$pre;
        label = 5;
      } else {
        $retval$1 = 0;
      }
    } else {
      $1 = $0;
      $3 = $1;
      label = 5;
    }
    L5: do {
      if ((label | 0) == 5) {
        $wpos = ($f + 20) | 0;
        $2 = HEAP32[$wpos >> 2] | 0;
        $sub$ptr$sub = ($3 - $2) | 0;
        $cmp = $sub$ptr$sub >>> 0 < $l >>> 0;
        $4 = $2;
        if ($cmp) {
          $write = ($f + 36) | 0;
          $5 = HEAP32[$write >> 2] | 0;
          $call4 = FUNCTION_TABLE_iiii[$5 & 511]($f, $s, $l) | 0;
          $retval$1 = $call4;
          break;
        }
        $lbf = ($f + 75) | 0;
        $6 = HEAP8[$lbf >> 0] | 0;
        $cmp6 = ($6 << 24) >> 24 < 0;
        $tobool932 = ($l | 0) == 0;
        $or$cond = $cmp6 | $tobool932;
        L10: do {
          if ($or$cond) {
            $9 = $4;
            $i$1 = 0;
            $l$addr$1 = $l;
            $s$addr$1 = $s;
          } else {
            $i$033 = $l;
            while (1) {
              $sub = ($i$033 + -1) | 0;
              $arrayidx = ($s + $sub) | 0;
              $7 = HEAP8[$arrayidx >> 0] | 0;
              $cmp11 = ($7 << 24) >> 24 == 10;
              if ($cmp11) {
                break;
              }
              $tobool9 = ($sub | 0) == 0;
              if ($tobool9) {
                $9 = $4;
                $i$1 = 0;
                $l$addr$1 = $l;
                $s$addr$1 = $s;
                break L10;
              } else {
                $i$033 = $sub;
              }
            }
            $write15 = ($f + 36) | 0;
            $8 = HEAP32[$write15 >> 2] | 0;
            $call16 = FUNCTION_TABLE_iiii[$8 & 511]($f, $s, $i$033) | 0;
            $cmp17 = $call16 >>> 0 < $i$033 >>> 0;
            if ($cmp17) {
              $retval$1 = $call16;
              break L5;
            }
            $add$ptr = ($s + $i$033) | 0;
            $l$addr$0 = ($l - $i$033) | 0;
            $$pre35 = HEAP32[$wpos >> 2] | 0;
            $9 = $$pre35;
            $i$1 = $i$033;
            $l$addr$1 = $l$addr$0;
            $s$addr$1 = $add$ptr;
          }
        } while (0);
        _memcpy($9 | 0, $s$addr$1 | 0, $l$addr$1 | 0) | 0;
        $10 = HEAP32[$wpos >> 2] | 0;
        $add$ptr27 = ($10 + $l$addr$1) | 0;
        HEAP32[$wpos >> 2] = $add$ptr27;
        $add = ($i$1 + $l$addr$1) | 0;
        $retval$1 = $add;
      }
    } while (0);
    return $retval$1 | 0;
  }
  function ___towrite($f) {
    $f = $f | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $add$ptr = 0,
      $and = 0,
      $buf = 0,
      $buf_size = 0,
      $conv = 0,
      $conv3 = 0,
      $mode = 0,
      $or = 0,
      $or5 = 0,
      $rend = 0,
      $retval$0 = 0,
      $rpos = 0,
      $sub = 0,
      $tobool = 0,
      $wbase = 0;
    var $wend = 0,
      $wpos = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $mode = ($f + 74) | 0;
    $0 = HEAP8[$mode >> 0] | 0;
    $conv = ($0 << 24) >> 24;
    $sub = ($conv + 255) | 0;
    $or = $sub | $conv;
    $conv3 = $or & 255;
    HEAP8[$mode >> 0] = $conv3;
    $1 = HEAP32[$f >> 2] | 0;
    $and = $1 & 8;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      $rend = ($f + 8) | 0;
      HEAP32[$rend >> 2] = 0;
      $rpos = ($f + 4) | 0;
      HEAP32[$rpos >> 2] = 0;
      $buf = ($f + 44) | 0;
      $2 = HEAP32[$buf >> 2] | 0;
      $wbase = ($f + 28) | 0;
      HEAP32[$wbase >> 2] = $2;
      $wpos = ($f + 20) | 0;
      HEAP32[$wpos >> 2] = $2;
      $3 = $2;
      $buf_size = ($f + 48) | 0;
      $4 = HEAP32[$buf_size >> 2] | 0;
      $add$ptr = ($3 + $4) | 0;
      $wend = ($f + 16) | 0;
      HEAP32[$wend >> 2] = $add$ptr;
      $retval$0 = 0;
    } else {
      $or5 = $1 | 32;
      HEAP32[$f >> 2] = $or5;
      $retval$0 = -1;
    }
    return $retval$0 | 0;
  }
  function ___DOUBLE_BITS_527($__f) {
    $__f = +$__f;
    var $0 = 0,
      $1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    HEAPF64[tempDoublePtr >> 3] = $__f;
    $0 = HEAP32[tempDoublePtr >> 2] | 0;
    $1 = HEAP32[(tempDoublePtr + 4) >> 2] | 0;
    setTempRet0($1 | 0);
    return $0 | 0;
  }
  function _sn_write($f, $s, $l) {
    $f = $f | 0;
    $s = $s | 0;
    $l = $l | 0;
    var $$cast = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $add$ptr = 0,
      $cmp = 0,
      $spec$select = 0,
      $sub$ptr$sub = 0,
      $wend = 0,
      $wpos = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $wend = ($f + 16) | 0;
    $0 = HEAP32[$wend >> 2] | 0;
    $wpos = ($f + 20) | 0;
    $1 = HEAP32[$wpos >> 2] | 0;
    $sub$ptr$sub = ($0 - $1) | 0;
    $cmp = $sub$ptr$sub >>> 0 > $l >>> 0;
    $spec$select = $cmp ? $l : $sub$ptr$sub;
    $$cast = $1;
    _memcpy($$cast | 0, $s | 0, $spec$select | 0) | 0;
    $2 = HEAP32[$wpos >> 2] | 0;
    $add$ptr = ($2 + $spec$select) | 0;
    HEAP32[$wpos >> 2] = $add$ptr;
    return $l | 0;
  }
  function _isxdigit($c) {
    $c = $c | 0;
    var $call = 0,
      $cmp = 0,
      $narrow = 0,
      $or = 0,
      $spec$select = 0,
      $sub = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = _isdigit($c) | 0;
    $tobool = ($call | 0) != 0;
    $or = $c | 32;
    $sub = ($or + -97) | 0;
    $cmp = $sub >>> 0 < 6;
    $narrow = $cmp | $tobool;
    $spec$select = $narrow & 1;
    return $spec$select | 0;
  }
  function ___strdup($s) {
    $s = $s | 0;
    var $add = 0,
      $call = 0,
      $call1 = 0,
      $call3 = 0,
      $retval$0 = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = _strlen($s) | 0;
    $add = ($call + 1) | 0;
    $call1 = _malloc($add) | 0;
    $tobool = ($call1 | 0) == (0 | 0);
    if ($tobool) {
      $retval$0 = 0;
    } else {
      $call3 = _memcpy($call1 | 0, $s | 0, $add | 0) | 0;
      $retval$0 = $call3;
    }
    return $retval$0 | 0;
  }
  function ___overflow($f, $_c) {
    $f = $f | 0;
    $_c = $_c | 0;
    var $$pre = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $c = 0,
      $call = 0,
      $call13 = 0,
      $cmp = 0,
      $cmp14 = 0,
      $cmp7 = 0,
      $conv = 0,
      $conv18 = 0,
      $conv5 = 0,
      $conv6 = 0,
      $incdec$ptr = 0,
      $lbf = 0,
      $retval$0 = 0;
    var $tobool = 0,
      $tobool1 = 0,
      $wend = 0,
      $wpos = 0,
      $write = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $c = sp;
    $conv = $_c & 255;
    HEAP8[$c >> 0] = $conv;
    $wend = ($f + 16) | 0;
    $0 = HEAP32[$wend >> 2] | 0;
    $tobool = ($0 | 0) == (0 | 0);
    if ($tobool) {
      $call = ___towrite($f) | 0;
      $tobool1 = ($call | 0) == 0;
      if ($tobool1) {
        $$pre = HEAP32[$wend >> 2] | 0;
        $2 = $$pre;
        label = 4;
      } else {
        $retval$0 = -1;
      }
    } else {
      $2 = $0;
      label = 4;
    }
    do {
      if ((label | 0) == 4) {
        $wpos = ($f + 20) | 0;
        $1 = HEAP32[$wpos >> 2] | 0;
        $cmp = $1 >>> 0 < $2 >>> 0;
        if ($cmp) {
          $conv5 = $_c & 255;
          $lbf = ($f + 75) | 0;
          $3 = HEAP8[$lbf >> 0] | 0;
          $conv6 = ($3 << 24) >> 24;
          $cmp7 = ($conv5 | 0) == ($conv6 | 0);
          if (!$cmp7) {
            $incdec$ptr = ($1 + 1) | 0;
            HEAP32[$wpos >> 2] = $incdec$ptr;
            HEAP8[$1 >> 0] = $conv;
            $retval$0 = $conv5;
            break;
          }
        }
        $write = ($f + 36) | 0;
        $4 = HEAP32[$write >> 2] | 0;
        $call13 = FUNCTION_TABLE_iiii[$4 & 511]($f, $c, 1) | 0;
        $cmp14 = ($call13 | 0) == 1;
        if ($cmp14) {
          $5 = HEAP8[$c >> 0] | 0;
          $conv18 = $5 & 255;
          $retval$0 = $conv18;
        } else {
          $retval$0 = -1;
        }
      }
    } while (0);
    STACKTOP = sp;
    return $retval$0 | 0;
  }
  function ___ofl_lock() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    ___lock(17652 | 0);
    return 17660 | 0;
  }
  function ___ofl_unlock() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    ___unlock(17652 | 0);
    return;
  }
  function _fflush($f) {
    $f = $f | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $call = 0,
      $call1 = 0,
      $call11 = 0,
      $call118 = 0,
      $call17 = 0,
      $call23 = 0,
      $call7 = 0,
      $cmp = 0,
      $cmp15 = 0,
      $cmp21 = 0,
      $cond10 = 0,
      $cond20 = 0,
      $f$addr$0 = 0,
      $f$addr$019 = 0;
    var $f$addr$022 = 0,
      $lock = 0,
      $lock14 = 0,
      $next = 0,
      $or = 0,
      $phitmp = 0,
      $r$0$lcssa = 0,
      $r$021 = 0,
      $r$1 = 0,
      $retval$0 = 0,
      $tobool = 0,
      $tobool12 = 0,
      $tobool1220 = 0,
      $tobool25 = 0,
      $tobool5 = 0,
      $wbase = 0,
      $wpos = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $tobool = ($f | 0) == (0 | 0);
    do {
      if ($tobool) {
        $1 = HEAP32[725] | 0;
        $tobool5 = ($1 | 0) == (0 | 0);
        if ($tobool5) {
          $cond10 = 0;
        } else {
          $2 = HEAP32[725] | 0;
          $call7 = _fflush($2) | 0;
          $cond10 = $call7;
        }
        $call11 = ___ofl_lock() | 0;
        $f$addr$019 = HEAP32[$call11 >> 2] | 0;
        $tobool1220 = ($f$addr$019 | 0) == (0 | 0);
        if ($tobool1220) {
          $r$0$lcssa = $cond10;
        } else {
          $f$addr$022 = $f$addr$019;
          $r$021 = $cond10;
          while (1) {
            $lock14 = ($f$addr$022 + 76) | 0;
            $3 = HEAP32[$lock14 >> 2] | 0;
            $cmp15 = ($3 | 0) > -1;
            if ($cmp15) {
              $call17 = ___lockfile($f$addr$022) | 0;
              $cond20 = $call17;
            } else {
              $cond20 = 0;
            }
            $wpos = ($f$addr$022 + 20) | 0;
            $4 = HEAP32[$wpos >> 2] | 0;
            $wbase = ($f$addr$022 + 28) | 0;
            $5 = HEAP32[$wbase >> 2] | 0;
            $cmp21 = $4 >>> 0 > $5 >>> 0;
            if ($cmp21) {
              $call23 = ___fflush_unlocked($f$addr$022) | 0;
              $or = $call23 | $r$021;
              $r$1 = $or;
            } else {
              $r$1 = $r$021;
            }
            $tobool25 = ($cond20 | 0) == 0;
            if (!$tobool25) {
              ___unlockfile($f$addr$022);
            }
            $next = ($f$addr$022 + 56) | 0;
            $f$addr$0 = HEAP32[$next >> 2] | 0;
            $tobool12 = ($f$addr$0 | 0) == (0 | 0);
            if ($tobool12) {
              $r$0$lcssa = $r$1;
              break;
            } else {
              $f$addr$022 = $f$addr$0;
              $r$021 = $r$1;
            }
          }
        }
        ___ofl_unlock();
        $retval$0 = $r$0$lcssa;
      } else {
        $lock = ($f + 76) | 0;
        $0 = HEAP32[$lock >> 2] | 0;
        $cmp = ($0 | 0) > -1;
        if (!$cmp) {
          $call118 = ___fflush_unlocked($f) | 0;
          $retval$0 = $call118;
          break;
        }
        $call = ___lockfile($f) | 0;
        $phitmp = ($call | 0) == 0;
        $call1 = ___fflush_unlocked($f) | 0;
        if ($phitmp) {
          $retval$0 = $call1;
        } else {
          ___unlockfile($f);
          $retval$0 = $call1;
        }
      }
    } while (0);
    return $retval$0 | 0;
  }
  function ___fflush_unlocked($f) {
    $f = $f | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $cmp = 0,
      $cmp4 = 0,
      $rend = 0,
      $retval$0 = 0,
      $rpos = 0,
      $seek = 0,
      $sub$ptr$lhs$cast = 0,
      $sub$ptr$rhs$cast = 0,
      $sub$ptr$sub = 0,
      $tobool = 0;
    var $wbase = 0,
      $wend = 0,
      $wpos = 0,
      $write = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $wpos = ($f + 20) | 0;
    $0 = HEAP32[$wpos >> 2] | 0;
    $wbase = ($f + 28) | 0;
    $1 = HEAP32[$wbase >> 2] | 0;
    $cmp = $0 >>> 0 > $1 >>> 0;
    if ($cmp) {
      $write = ($f + 36) | 0;
      $2 = HEAP32[$write >> 2] | 0;
      FUNCTION_TABLE_iiii[$2 & 511]($f, 0, 0) | 0;
      $3 = HEAP32[$wpos >> 2] | 0;
      $tobool = ($3 | 0) == (0 | 0);
      if ($tobool) {
        $retval$0 = -1;
      } else {
        label = 3;
      }
    } else {
      label = 3;
    }
    if ((label | 0) == 3) {
      $rpos = ($f + 4) | 0;
      $4 = HEAP32[$rpos >> 2] | 0;
      $rend = ($f + 8) | 0;
      $5 = HEAP32[$rend >> 2] | 0;
      $cmp4 = $4 >>> 0 < $5 >>> 0;
      if ($cmp4) {
        $sub$ptr$lhs$cast = $4;
        $sub$ptr$rhs$cast = $5;
        $sub$ptr$sub = ($sub$ptr$lhs$cast - $sub$ptr$rhs$cast) | 0;
        $6 = ($sub$ptr$sub | 0) < 0;
        $7 = ($6 << 31) >> 31;
        $seek = ($f + 40) | 0;
        $8 = HEAP32[$seek >> 2] | 0;
        FUNCTION_TABLE_iiiii[$8 & 511]($f, $sub$ptr$sub, $7, 1) | 0;
        $9 = getTempRet0() | 0;
      }
      $wend = ($f + 16) | 0;
      HEAP32[$wend >> 2] = 0;
      HEAP32[$wbase >> 2] = 0;
      HEAP32[$wpos >> 2] = 0;
      HEAP32[$rend >> 2] = 0;
      HEAP32[$rpos >> 2] = 0;
      $retval$0 = 0;
    }
    return $retval$0 | 0;
  }
  function _fputc($c, $f) {
    $c = $c | 0;
    $f = $f | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $call = 0,
      $call10 = 0,
      $call28 = 0,
      $cmp = 0,
      $cmp15 = 0,
      $cmp20 = 0,
      $cmp3 = 0,
      $cmp5 = 0,
      $cond30 = 0,
      $conv = 0,
      $conv1 = 0,
      $conv11 = 0,
      $conv12 = 0;
    var $conv14 = 0,
      $conv2 = 0,
      $incdec$ptr = 0,
      $incdec$ptr25 = 0,
      $lbf = 0,
      $lbf13 = 0,
      $lock = 0,
      $retval$0 = 0,
      $tobool = 0,
      $wend = 0,
      $wend19 = 0,
      $wpos = 0,
      $wpos18 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $lock = ($f + 76) | 0;
    $0 = HEAP32[$lock >> 2] | 0;
    $cmp = ($0 | 0) < 0;
    if ($cmp) {
      label = 3;
    } else {
      $call = ___lockfile($f) | 0;
      $tobool = ($call | 0) == 0;
      if ($tobool) {
        label = 3;
      } else {
        $conv11 = $c & 255;
        $conv12 = $c & 255;
        $lbf13 = ($f + 75) | 0;
        $4 = HEAP8[$lbf13 >> 0] | 0;
        $conv14 = ($4 << 24) >> 24;
        $cmp15 = ($conv12 | 0) == ($conv14 | 0);
        if ($cmp15) {
          label = 10;
        } else {
          $wpos18 = ($f + 20) | 0;
          $5 = HEAP32[$wpos18 >> 2] | 0;
          $wend19 = ($f + 16) | 0;
          $6 = HEAP32[$wend19 >> 2] | 0;
          $cmp20 = $5 >>> 0 < $6 >>> 0;
          if ($cmp20) {
            $incdec$ptr25 = ($5 + 1) | 0;
            HEAP32[$wpos18 >> 2] = $incdec$ptr25;
            HEAP8[$5 >> 0] = $conv11;
            $cond30 = $conv12;
          } else {
            label = 10;
          }
        }
        if ((label | 0) == 10) {
          $call28 = ___overflow($f, $c) | 0;
          $cond30 = $call28;
        }
        ___unlockfile($f);
        $retval$0 = $cond30;
      }
    }
    do {
      if ((label | 0) == 3) {
        $conv = $c & 255;
        $conv1 = $c & 255;
        $lbf = ($f + 75) | 0;
        $1 = HEAP8[$lbf >> 0] | 0;
        $conv2 = ($1 << 24) >> 24;
        $cmp3 = ($conv1 | 0) == ($conv2 | 0);
        if (!$cmp3) {
          $wpos = ($f + 20) | 0;
          $2 = HEAP32[$wpos >> 2] | 0;
          $wend = ($f + 16) | 0;
          $3 = HEAP32[$wend >> 2] | 0;
          $cmp5 = $2 >>> 0 < $3 >>> 0;
          if ($cmp5) {
            $incdec$ptr = ($2 + 1) | 0;
            HEAP32[$wpos >> 2] = $incdec$ptr;
            HEAP8[$2 >> 0] = $conv;
            $retval$0 = $conv1;
            break;
          }
        }
        $call10 = ___overflow($f, $c) | 0;
        $retval$0 = $call10;
      }
    } while (0);
    return $retval$0 | 0;
  }
  function __GLOBAL__sub_I_bind_cpp() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    ___cxx_global_var_init_175();
    return;
  }
  function ___cxx_global_var_init_175() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(18177);
    return;
  }
  function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(
    $this
  ) {
    $this = $this | 0;
    var $this$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $this$addr = $this;
    ___embind_register_native_and_builtin_types();
    STACKTOP = sp;
    return;
  }
  function ___embind_register_native_and_builtin_types() {
    var $call = 0,
      $call1 = 0,
      $call2 = 0,
      $call3 = 0,
      $call4 = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN10emscripten8internal6TypeIDIvvE3getEv() | 0;
    __embind_register_void($call | 0, 10485 | 0);
    $call1 = __ZN10emscripten8internal6TypeIDIbvE3getEv() | 0;
    __embind_register_bool($call1 | 0, 10490 | 0, 1, 1, 0);
    __ZN12_GLOBAL__N_116register_integerIcEEvPKc(10495);
    __ZN12_GLOBAL__N_116register_integerIaEEvPKc(10500);
    __ZN12_GLOBAL__N_116register_integerIhEEvPKc(10512);
    __ZN12_GLOBAL__N_116register_integerIsEEvPKc(10526);
    __ZN12_GLOBAL__N_116register_integerItEEvPKc(10532);
    __ZN12_GLOBAL__N_116register_integerIiEEvPKc(10547);
    __ZN12_GLOBAL__N_116register_integerIjEEvPKc(10551);
    __ZN12_GLOBAL__N_116register_integerIlEEvPKc(10564);
    __ZN12_GLOBAL__N_116register_integerImEEvPKc(10569);
    __ZN12_GLOBAL__N_114register_floatIfEEvPKc(10620);
    __ZN12_GLOBAL__N_114register_floatIdEEvPKc(15274);
    $call2 =
      __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE3getEv() |
      0;
    __embind_register_std_string($call2 | 0, 10930 | 0);
    $call3 =
      __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEvE3getEv() |
      0;
    __embind_register_std_string($call3 | 0, 8942 | 0);
    $call4 =
      __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEvE3getEv() |
      0;
    __embind_register_std_wstring($call4 | 0, 4, 8975 | 0);
    $call5 = __ZN10emscripten8internal6TypeIDINS_3valEvE3getEv() | 0;
    __embind_register_emval($call5 | 0, 8988 | 0);
    __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc(9004);
    __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(9034);
    __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(9071);
    __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(9110);
    __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(9141);
    __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(9181);
    __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(9210);
    __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc(9248);
    __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc(9278);
    __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(9317);
    __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(9349);
    __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(9382);
    __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(9415);
    __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(9449);
    __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(9482);
    __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc(9516);
    __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc(9547);
    __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc(9579);
    return;
  }
  function __ZN10emscripten8internal6TypeIDIvvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN10emscripten8internal11LightTypeIDIvE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal6TypeIDIbvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN10emscripten8internal11LightTypeIDIbE3getEv() | 0;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116register_integerIcEEvPKc($name) {
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $conv = 0,
      $conv3 = 0,
      $name$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDIcvE3getEv() | 0;
    $0 = $name$addr;
    $conv = (-128 << 24) >> 24;
    $conv3 = (127 << 24) >> 24;
    __embind_register_integer($call | 0, $0 | 0, 1, $conv | 0, $conv3 | 0);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116register_integerIaEEvPKc($name) {
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $conv = 0,
      $conv3 = 0,
      $name$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDIavE3getEv() | 0;
    $0 = $name$addr;
    $conv = (-128 << 24) >> 24;
    $conv3 = (127 << 24) >> 24;
    __embind_register_integer($call | 0, $0 | 0, 1, $conv | 0, $conv3 | 0);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116register_integerIhEEvPKc($name) {
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $conv = 0,
      $conv3 = 0,
      $name$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDIhvE3getEv() | 0;
    $0 = $name$addr;
    $conv = 0;
    $conv3 = 255;
    __embind_register_integer($call | 0, $0 | 0, 1, $conv | 0, $conv3 | 0);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116register_integerIsEEvPKc($name) {
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $conv = 0,
      $conv3 = 0,
      $name$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDIsvE3getEv() | 0;
    $0 = $name$addr;
    $conv = (-32768 << 16) >> 16;
    $conv3 = (32767 << 16) >> 16;
    __embind_register_integer($call | 0, $0 | 0, 2, $conv | 0, $conv3 | 0);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116register_integerItEEvPKc($name) {
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $conv = 0,
      $conv3 = 0,
      $name$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDItvE3getEv() | 0;
    $0 = $name$addr;
    $conv = 0;
    $conv3 = 65535;
    __embind_register_integer($call | 0, $0 | 0, 2, $conv | 0, $conv3 | 0);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116register_integerIiEEvPKc($name) {
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $name$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDIivE3getEv() | 0;
    $0 = $name$addr;
    __embind_register_integer($call | 0, $0 | 0, 4, -2147483648, 2147483647);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116register_integerIjEEvPKc($name) {
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $name$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDIjvE3getEv() | 0;
    $0 = $name$addr;
    __embind_register_integer($call | 0, $0 | 0, 4, 0, -1);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116register_integerIlEEvPKc($name) {
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $name$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDIlvE3getEv() | 0;
    $0 = $name$addr;
    __embind_register_integer($call | 0, $0 | 0, 4, -2147483648, 2147483647);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116register_integerImEEvPKc($name) {
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $name$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDImvE3getEv() | 0;
    $0 = $name$addr;
    __embind_register_integer($call | 0, $0 | 0, 4, 0, -1);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_114register_floatIfEEvPKc($name) {
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $name$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDIfvE3getEv() | 0;
    $0 = $name$addr;
    __embind_register_float($call | 0, $0 | 0, 4);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_114register_floatIdEEvPKc($name) {
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $name$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDIdvE3getEv() | 0;
    $0 = $name$addr;
    __embind_register_float($call | 0, $0 | 0, 8);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() |
      0;
    return $call | 0;
  }
  function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() |
      0;
    return $call | 0;
  }
  function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() |
      0;
    return $call | 0;
  }
  function __ZN10emscripten8internal6TypeIDINS_3valEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc($name) {
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $call1 = 0,
      $name$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEvE3getEv() | 0;
    $call1 =
      __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() | 0;
    $0 = $name$addr;
    __embind_register_memory_view($call | 0, $call1 | 0, $0 | 0);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc($name) {
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $call1 = 0,
      $name$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEvE3getEv() | 0;
    $call1 =
      __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() | 0;
    $0 = $name$addr;
    __embind_register_memory_view($call | 0, $call1 | 0, $0 | 0);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc($name) {
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $call1 = 0,
      $name$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEvE3getEv() | 0;
    $call1 =
      __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() | 0;
    $0 = $name$addr;
    __embind_register_memory_view($call | 0, $call1 | 0, $0 | 0);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc($name) {
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $call1 = 0,
      $name$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEvE3getEv() | 0;
    $call1 =
      __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() | 0;
    $0 = $name$addr;
    __embind_register_memory_view($call | 0, $call1 | 0, $0 | 0);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc($name) {
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $call1 = 0,
      $name$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEvE3getEv() | 0;
    $call1 =
      __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() | 0;
    $0 = $name$addr;
    __embind_register_memory_view($call | 0, $call1 | 0, $0 | 0);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc($name) {
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $call1 = 0,
      $name$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEvE3getEv() | 0;
    $call1 =
      __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() | 0;
    $0 = $name$addr;
    __embind_register_memory_view($call | 0, $call1 | 0, $0 | 0);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc($name) {
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $call1 = 0,
      $name$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEvE3getEv() | 0;
    $call1 =
      __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() | 0;
    $0 = $name$addr;
    __embind_register_memory_view($call | 0, $call1 | 0, $0 | 0);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc($name) {
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $call1 = 0,
      $name$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEvE3getEv() | 0;
    $call1 =
      __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() | 0;
    $0 = $name$addr;
    __embind_register_memory_view($call | 0, $call1 | 0, $0 | 0);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc($name) {
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $call1 = 0,
      $name$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEvE3getEv() | 0;
    $call1 =
      __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() | 0;
    $0 = $name$addr;
    __embind_register_memory_view($call | 0, $call1 | 0, $0 | 0);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc($name) {
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $call1 = 0,
      $name$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEvE3getEv() | 0;
    $call1 =
      __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() | 0;
    $0 = $name$addr;
    __embind_register_memory_view($call | 0, $call1 | 0, $0 | 0);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc($name) {
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $call1 = 0,
      $name$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEvE3getEv() | 0;
    $call1 =
      __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() | 0;
    $0 = $name$addr;
    __embind_register_memory_view($call | 0, $call1 | 0, $0 | 0);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc($name) {
    $name = $name | 0;
    var $0 = 0,
      $call = 0,
      $call1 = 0,
      $name$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $name$addr = $name;
    $call = __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEvE3getEv() | 0;
    $call1 =
      __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() | 0;
    $0 = $name$addr;
    __embind_register_memory_view($call | 0, $call1 | 0, $0 | 0);
    STACKTOP = sp;
    return;
  }
  function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 7;
  }
  function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 1304 | 0;
  }
  function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 7;
  }
  function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 1312 | 0;
  }
  function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 6;
  }
  function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 1320 | 0;
  }
  function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 5;
  }
  function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 1328 | 0;
  }
  function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 4;
  }
  function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 1336 | 0;
  }
  function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 5;
  }
  function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 1344 | 0;
  }
  function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 4;
  }
  function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 1352 | 0;
  }
  function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 3;
  }
  function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 1360 | 0;
  }
  function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2;
  }
  function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 1368 | 0;
  }
  function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 1;
  }
  function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 1376 | 0;
  }
  function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 0;
  }
  function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 1384 | 0;
  }
  function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() | 0;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 0;
  }
  function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 1392 | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 616 | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 1400 | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 1424 | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 840 | 0;
  }
  function __ZN10emscripten8internal6TypeIDIdvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN10emscripten8internal11LightTypeIDIdE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2784 | 0;
  }
  function __ZN10emscripten8internal6TypeIDImvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN10emscripten8internal11LightTypeIDImE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2760 | 0;
  }
  function __ZN10emscripten8internal6TypeIDIlvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN10emscripten8internal11LightTypeIDIlE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2752 | 0;
  }
  function __ZN10emscripten8internal6TypeIDIjvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN10emscripten8internal11LightTypeIDIjE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2744 | 0;
  }
  function __ZN10emscripten8internal6TypeIDIsvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN10emscripten8internal11LightTypeIDIsE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2720 | 0;
  }
  function __ZN10emscripten8internal6TypeIDIavE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN10emscripten8internal11LightTypeIDIaE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2712 | 0;
  }
  function __ZN10emscripten8internal6TypeIDIcvE3getEv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN10emscripten8internal11LightTypeIDIcE3getEv() | 0;
    return $call | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2696 | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2688 | 0;
  }
  function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 2672 | 0;
  }
  function ___getTypeName($ti) {
    $ti = $ti | 0;
    var $0 = 0,
      $1 = 0,
      $__type_name$i = 0,
      $call1 = 0,
      $this$addr$i = 0,
      $this1$i = 0,
      $ti$addr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ti$addr = $ti;
    $0 = $ti$addr;
    $this$addr$i = $0;
    $this1$i = $this$addr$i;
    $__type_name$i = ($this1$i + 4) | 0;
    $1 = HEAP32[$__type_name$i >> 2] | 0;
    $call1 = ___strdup($1) | 0;
    STACKTOP = sp;
    return $call1 | 0;
  }
  function _malloc($bytes) {
    $bytes = $bytes | 0;
    var $$pre = 0,
      $$pre$i = 0,
      $$pre$i$i = 0,
      $$pre$i134 = 0,
      $$pre$i194 = 0,
      $$pre$i31$i = 0,
      $$pre$phi$i$iZ2D = 0,
      $$pre$phi$i195Z2D = 0,
      $$pre$phi$i32$iZ2D = 0,
      $$pre$phi$iZ2D = 0,
      $$pre$phiZ2D = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $100 = 0,
      $101 = 0,
      $102 = 0,
      $103 = 0,
      $104 = 0,
      $105 = 0;
    var $106 = 0,
      $107 = 0,
      $108 = 0,
      $109 = 0,
      $11 = 0,
      $110 = 0,
      $111 = 0,
      $112 = 0,
      $113 = 0,
      $114 = 0,
      $115 = 0,
      $116 = 0,
      $117 = 0,
      $118 = 0,
      $119 = 0,
      $12 = 0,
      $120 = 0,
      $121 = 0,
      $122 = 0,
      $123 = 0;
    var $124 = 0,
      $125 = 0,
      $126 = 0,
      $127 = 0,
      $128 = 0,
      $129 = 0,
      $13 = 0,
      $130 = 0,
      $131 = 0,
      $132 = 0,
      $133 = 0,
      $134 = 0,
      $135 = 0,
      $136 = 0,
      $137 = 0,
      $138 = 0,
      $139 = 0,
      $14 = 0,
      $140 = 0,
      $141 = 0;
    var $142 = 0,
      $143 = 0,
      $144 = 0,
      $145 = 0,
      $146 = 0,
      $147 = 0,
      $148 = 0,
      $149 = 0,
      $15 = 0,
      $150 = 0,
      $151 = 0,
      $152 = 0,
      $153 = 0,
      $154 = 0,
      $155 = 0,
      $156 = 0,
      $157 = 0,
      $158 = 0,
      $159 = 0,
      $16 = 0;
    var $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0,
      $23 = 0,
      $24 = 0,
      $25 = 0,
      $26 = 0,
      $27 = 0,
      $28 = 0,
      $29 = 0,
      $3 = 0,
      $30 = 0,
      $31 = 0,
      $32 = 0,
      $33 = 0,
      $34 = 0;
    var $35 = 0,
      $36 = 0,
      $37 = 0,
      $38 = 0,
      $39 = 0,
      $4 = 0,
      $40 = 0,
      $41 = 0,
      $42 = 0,
      $43 = 0,
      $44 = 0,
      $45 = 0,
      $46 = 0,
      $47 = 0,
      $48 = 0,
      $49 = 0,
      $5 = 0,
      $50 = 0,
      $51 = 0,
      $52 = 0;
    var $53 = 0,
      $54 = 0,
      $55 = 0,
      $56 = 0,
      $57 = 0,
      $58 = 0,
      $59 = 0,
      $6 = 0,
      $60 = 0,
      $61 = 0,
      $62 = 0,
      $63 = 0,
      $64 = 0,
      $65 = 0,
      $66 = 0,
      $67 = 0,
      $68 = 0,
      $69 = 0,
      $7 = 0,
      $70 = 0;
    var $71 = 0,
      $72 = 0,
      $73 = 0,
      $74 = 0,
      $75 = 0,
      $76 = 0,
      $77 = 0,
      $78 = 0,
      $79 = 0,
      $8 = 0,
      $80 = 0,
      $81 = 0,
      $82 = 0,
      $83 = 0,
      $84 = 0,
      $85 = 0,
      $86 = 0,
      $87 = 0,
      $88 = 0,
      $89 = 0;
    var $9 = 0,
      $90 = 0,
      $91 = 0,
      $92 = 0,
      $93 = 0,
      $94 = 0,
      $95 = 0,
      $96 = 0,
      $97 = 0,
      $98 = 0,
      $99 = 0,
      $F$0$i$i = 0,
      $F104$0 = 0,
      $F197$0$i = 0,
      $F224$0$i$i = 0,
      $F290$0$i = 0,
      $I252$0$i$i = 0,
      $I316$0$i = 0,
      $I57$0$i$i = 0,
      $K105$010$i$i = 0;
    var $K305$08$i$i = 0,
      $K373$015$i = 0,
      $R$1$i = 0,
      $R$1$i$be = 0,
      $R$1$i$i = 0,
      $R$1$i$i$be = 0,
      $R$1$i$i$ph = 0,
      $R$1$i$ph = 0,
      $R$1$i183 = 0,
      $R$1$i183$be = 0,
      $R$1$i183$ph = 0,
      $R$3$i = 0,
      $R$3$i$i = 0,
      $R$3$i188 = 0,
      $RP$1$i = 0,
      $RP$1$i$be = 0,
      $RP$1$i$i = 0,
      $RP$1$i$i$be = 0,
      $RP$1$i$i$ph = 0,
      $RP$1$i$ph = 0;
    var $RP$1$i182 = 0,
      $RP$1$i182$be = 0,
      $RP$1$i182$ph = 0,
      $T$0$lcssa$i = 0,
      $T$0$lcssa$i$i = 0,
      $T$0$lcssa$i34$i = 0,
      $T$014$i = 0,
      $T$07$i$i = 0,
      $T$09$i$i = 0,
      $add$i = 0,
      $add$i$i = 0,
      $add$i135 = 0,
      $add$i155 = 0,
      $add$ptr = 0,
      $add$ptr$i = 0,
      $add$ptr$i$i = 0,
      $add$ptr$i$i$i = 0,
      $add$ptr$i141 = 0,
      $add$ptr$i174 = 0,
      $add$ptr$i2$i$i = 0;
    var $add$ptr$i35$i = 0,
      $add$ptr$i43$i = 0,
      $add$ptr$i57$i = 0,
      $add$ptr14$i$i = 0,
      $add$ptr15$i$i = 0,
      $add$ptr16$i$i = 0,
      $add$ptr166 = 0,
      $add$ptr169 = 0,
      $add$ptr17$i$i = 0,
      $add$ptr178 = 0,
      $add$ptr181$i = 0,
      $add$ptr182 = 0,
      $add$ptr189$i = 0,
      $add$ptr190$i = 0,
      $add$ptr193 = 0,
      $add$ptr199 = 0,
      $add$ptr2$i$i = 0,
      $add$ptr205$i$i = 0,
      $add$ptr212$i$i = 0,
      $add$ptr225$i = 0;
    var $add$ptr227$i = 0,
      $add$ptr24$i$i = 0,
      $add$ptr262$i = 0,
      $add$ptr269$i = 0,
      $add$ptr273$i = 0,
      $add$ptr282$i = 0,
      $add$ptr3$i$i = 0,
      $add$ptr30$i$i = 0,
      $add$ptr369$i$i = 0,
      $add$ptr4$i$i = 0,
      $add$ptr4$i$i$i = 0,
      $add$ptr4$i41$i = 0,
      $add$ptr4$i49$i = 0,
      $add$ptr441$i = 0,
      $add$ptr5$i$i = 0,
      $add$ptr6$i$i = 0,
      $add$ptr6$i$i$i = 0,
      $add$ptr6$i53$i = 0,
      $add$ptr7$i$i = 0,
      $add$ptr81$i$i = 0;
    var $add$ptr95 = 0,
      $add$ptr98 = 0,
      $add10$i = 0,
      $add101$i = 0,
      $add110$i = 0,
      $add13$i = 0,
      $add14$i = 0,
      $add140$i = 0,
      $add144 = 0,
      $add150$i = 0,
      $add17$i = 0,
      $add17$i158 = 0,
      $add177$i = 0,
      $add18$i = 0,
      $add19$i = 0,
      $add2 = 0,
      $add20$i = 0,
      $add206$i$i = 0,
      $add212$i = 0,
      $add215$i = 0;
    var $add22$i = 0,
      $add246$i = 0,
      $add26$i$i = 0,
      $add268$i = 0,
      $add269$i$i = 0,
      $add274$i$i = 0,
      $add278$i$i = 0,
      $add280$i$i = 0,
      $add283$i$i = 0,
      $add337$i = 0,
      $add342$i = 0,
      $add346$i = 0,
      $add348$i = 0,
      $add351$i = 0,
      $add46$i = 0,
      $add50 = 0,
      $add51$i = 0,
      $add54 = 0,
      $add54$i = 0,
      $add58 = 0;
    var $add62 = 0,
      $add64 = 0,
      $add74$i$i = 0,
      $add77$i = 0,
      $add78$i = 0,
      $add79$i$i = 0,
      $add8 = 0,
      $add82$i = 0,
      $add83$i$i = 0,
      $add85$i$i = 0,
      $add86$i = 0,
      $add88$i$i = 0,
      $add9$i = 0,
      $add90$i = 0,
      $add92$i = 0,
      $and = 0,
      $and$i = 0,
      $and$i$i = 0,
      $and$i$i$i = 0,
      $and$i14$i = 0;
    var $and$i152 = 0,
      $and$i36$i = 0,
      $and$i44$i = 0,
      $and100$i = 0,
      $and103$i = 0,
      $and104$i = 0,
      $and106 = 0,
      $and11$i = 0,
      $and119$i$i = 0,
      $and1197$i$i = 0,
      $and12$i = 0,
      $and13$i = 0,
      $and13$i$i = 0,
      $and133$i$i = 0,
      $and14 = 0,
      $and145 = 0,
      $and17$i = 0,
      $and194$i = 0,
      $and194$i191 = 0,
      $and199$i = 0;
    var $and209$i$i = 0,
      $and21$i = 0,
      $and21$i159 = 0,
      $and227$i$i = 0,
      $and236$i = 0,
      $and264$i$i = 0,
      $and268$i$i = 0,
      $and273$i$i = 0,
      $and282$i$i = 0,
      $and29$i = 0,
      $and292$i = 0,
      $and295$i$i = 0,
      $and3$i = 0,
      $and3$i$i = 0,
      $and3$i$i$i = 0,
      $and3$i39$i = 0,
      $and3$i47$i = 0,
      $and30$i = 0,
      $and318$i$i = 0,
      $and3185$i$i = 0;
    var $and32$i = 0,
      $and32$i$i = 0,
      $and33$i$i = 0,
      $and331$i = 0,
      $and336$i = 0,
      $and341$i = 0,
      $and350$i = 0,
      $and363$i = 0,
      $and37$i$i = 0,
      $and387$i = 0,
      $and38712$i = 0,
      $and4 = 0,
      $and40$i$i = 0,
      $and41 = 0,
      $and42$i = 0,
      $and43 = 0,
      $and46 = 0,
      $and49 = 0,
      $and49$i = 0,
      $and49$i$i = 0;
    var $and53 = 0,
      $and57 = 0,
      $and6$i = 0,
      $and6$i$i = 0,
      $and6$i13$i = 0,
      $and6$i18$i = 0,
      $and61 = 0,
      $and64$i = 0,
      $and68$i = 0,
      $and69$i$i = 0,
      $and7 = 0,
      $and73$i = 0,
      $and73$i$i = 0,
      $and74 = 0,
      $and77$i = 0,
      $and78$i$i = 0,
      $and8$i = 0,
      $and80$i = 0,
      $and81$i = 0,
      $and85$i = 0;
    var $and87$i$i = 0,
      $and89$i = 0,
      $and9$i = 0,
      $and96$i$i = 0,
      $arrayidx = 0,
      $arrayidx$i = 0,
      $arrayidx$i$i = 0,
      $arrayidx$i160 = 0,
      $arrayidx103 = 0,
      $arrayidx103$i$i = 0,
      $arrayidx106$i = 0,
      $arrayidx107$i$i = 0,
      $arrayidx113$i = 0,
      $arrayidx113$i173 = 0,
      $arrayidx121$i = 0,
      $arrayidx121$i$sink = 0,
      $arrayidx123$i$i = 0,
      $arrayidx126$i$i = 0,
      $arrayidx137$i = 0,
      $arrayidx143$i$i = 0;
    var $arrayidx148$i = 0,
      $arrayidx151$i = 0,
      $arrayidx151$i$i = 0,
      $arrayidx151$i$i$sink = 0,
      $arrayidx154$i = 0,
      $arrayidx155$i = 0,
      $arrayidx161$i = 0,
      $arrayidx165$i = 0,
      $arrayidx165$i185 = 0,
      $arrayidx178$i$i = 0,
      $arrayidx184$i = 0,
      $arrayidx184$i$i = 0,
      $arrayidx195$i$i = 0,
      $arrayidx196$i = 0,
      $arrayidx204$i = 0,
      $arrayidx212$i = 0,
      $arrayidx212$i$sink = 0,
      $arrayidx223$i$i = 0,
      $arrayidx228$i = 0,
      $arrayidx23$i = 0;
    var $arrayidx239$i = 0,
      $arrayidx245$i = 0,
      $arrayidx256$i = 0,
      $arrayidx27$i = 0,
      $arrayidx287$i$i = 0,
      $arrayidx289$i = 0,
      $arrayidx290$i$i = 0,
      $arrayidx325$i$i = 0,
      $arrayidx355$i = 0,
      $arrayidx358$i = 0,
      $arrayidx394$i = 0,
      $arrayidx40$i = 0,
      $arrayidx44$i = 0,
      $arrayidx61$i = 0,
      $arrayidx65$i = 0,
      $arrayidx66 = 0,
      $arrayidx71$i = 0,
      $arrayidx75$i = 0,
      $arrayidx91$i$i = 0,
      $arrayidx92$i$i = 0;
    var $arrayidx94$i = 0,
      $arrayidx94$i170 = 0,
      $arrayidx96$i$i = 0,
      $bk$i = 0,
      $bk$i$i = 0,
      $bk$i176 = 0,
      $bk$i26$i = 0,
      $bk102$i$i = 0,
      $bk122 = 0,
      $bk124 = 0,
      $bk139$i$i = 0,
      $bk145$i = 0,
      $bk158$i$i = 0,
      $bk161$i$i = 0,
      $bk18 = 0,
      $bk218$i = 0,
      $bk220$i = 0,
      $bk246$i$i = 0,
      $bk248$i$i = 0,
      $bk302$i$i = 0;
    var $bk311$i = 0,
      $bk313$i = 0,
      $bk338$i$i = 0,
      $bk357$i$i = 0,
      $bk360$i$i = 0,
      $bk370$i = 0,
      $bk407$i = 0,
      $bk429$i = 0,
      $bk432$i = 0,
      $bk55$i$i = 0,
      $bk56$i = 0,
      $bk67$i$i = 0,
      $bk74$i$i = 0,
      $bk85 = 0,
      $bk91$i$i = 0,
      $br$2$ph$i = 0,
      $call107$i = 0,
      $call131$i = 0,
      $call132$i = 0,
      $call275$i = 0;
    var $call37$i = 0,
      $call68$i = 0,
      $call83$i = 0,
      $child$i$i = 0,
      $child166$i$i = 0,
      $child289$i$i = 0,
      $child357$i = 0,
      $cmp = 0,
      $cmp$i = 0,
      $cmp$i$i$i = 0,
      $cmp$i12$i = 0,
      $cmp$i133 = 0,
      $cmp$i149 = 0,
      $cmp$i15$i = 0,
      $cmp$i3$i$i = 0,
      $cmp$i37$i = 0,
      $cmp$i45$i = 0,
      $cmp$i55$i = 0,
      $cmp1 = 0,
      $cmp1$i = 0;
    var $cmp10 = 0,
      $cmp100$i$i = 0,
      $cmp102$i = 0,
      $cmp104$i$i = 0,
      $cmp105$i = 0,
      $cmp106$i$i = 0,
      $cmp107$i = 0,
      $cmp108$i = 0,
      $cmp108$i$i = 0,
      $cmp114$i = 0,
      $cmp116$i = 0,
      $cmp118$i = 0,
      $cmp119$i = 0,
      $cmp12$i = 0,
      $cmp120$i$i = 0,
      $cmp120$i28$i = 0,
      $cmp1208$i$i = 0,
      $cmp123$i = 0,
      $cmp124$i$i = 0,
      $cmp126$i = 0;
    var $cmp127$i = 0,
      $cmp128 = 0,
      $cmp128$i = 0,
      $cmp128$i$i = 0,
      $cmp133$i = 0,
      $cmp135$i = 0,
      $cmp137$i = 0,
      $cmp138$i = 0,
      $cmp139 = 0,
      $cmp141$i = 0,
      $cmp144$i$i = 0,
      $cmp146 = 0,
      $cmp147$i = 0,
      $cmp14799$i = 0,
      $cmp15$i = 0,
      $cmp151$i = 0,
      $cmp152$i = 0,
      $cmp155$i = 0,
      $cmp156 = 0,
      $cmp156$i = 0;
    var $cmp156$i$i = 0,
      $cmp157$i = 0,
      $cmp159$i = 0,
      $cmp162 = 0,
      $cmp162$i = 0,
      $cmp162$i184 = 0,
      $cmp166$i = 0,
      $cmp168$i$i = 0,
      $cmp174$i = 0,
      $cmp180$i = 0,
      $cmp185$i = 0,
      $cmp185$i$i = 0,
      $cmp186 = 0,
      $cmp186$i = 0,
      $cmp19$i = 0,
      $cmp190$i = 0,
      $cmp191$i = 0,
      $cmp2$i$i = 0,
      $cmp2$i$i$i = 0,
      $cmp20$i$i = 0;
    var $cmp203$i = 0,
      $cmp205$i = 0,
      $cmp209$i = 0,
      $cmp21$i = 0,
      $cmp215$i$i = 0,
      $cmp217$i = 0,
      $cmp218$i = 0,
      $cmp224$i = 0,
      $cmp228$i = 0,
      $cmp229$i = 0,
      $cmp24$i = 0,
      $cmp24$i$i = 0,
      $cmp246$i = 0,
      $cmp254$i$i = 0,
      $cmp257$i = 0,
      $cmp258$i$i = 0,
      $cmp26$i = 0,
      $cmp265$i = 0,
      $cmp27$i$i = 0,
      $cmp28$i = 0;
    var $cmp28$i$i = 0,
      $cmp284$i = 0,
      $cmp29 = 0,
      $cmp3$i$i = 0,
      $cmp306$i$i = 0,
      $cmp31 = 0,
      $cmp319$i = 0,
      $cmp319$i$i = 0,
      $cmp3196$i$i = 0,
      $cmp32$i = 0,
      $cmp32$i138 = 0,
      $cmp323$i = 0,
      $cmp327$i$i = 0,
      $cmp34$i = 0,
      $cmp34$i$i = 0,
      $cmp35$i = 0,
      $cmp36$i = 0,
      $cmp36$i$i = 0,
      $cmp374$i = 0,
      $cmp38$i = 0;
    var $cmp38$i$i = 0,
      $cmp388$i = 0,
      $cmp38813$i = 0,
      $cmp396$i = 0,
      $cmp40$i = 0,
      $cmp43$i = 0,
      $cmp45$i = 0,
      $cmp46$i = 0,
      $cmp46$i$i = 0,
      $cmp49$i = 0,
      $cmp5 = 0,
      $cmp55$i = 0,
      $cmp55$i166 = 0,
      $cmp57$i = 0,
      $cmp57$i167 = 0,
      $cmp59$i$i = 0,
      $cmp60$i = 0,
      $cmp62$i = 0,
      $cmp63$i = 0,
      $cmp63$i$i = 0;
    var $cmp65$i = 0,
      $cmp66$i = 0,
      $cmp66$i140 = 0,
      $cmp69$i = 0,
      $cmp7$i$i = 0,
      $cmp70 = 0,
      $cmp72$i = 0,
      $cmp75$i$i = 0,
      $cmp76$i = 0,
      $cmp81$i = 0,
      $cmp85$i = 0,
      $cmp89$i = 0,
      $cmp9$i$i = 0,
      $cmp90$i = 0,
      $cmp91$i = 0,
      $cmp93$i = 0,
      $cmp95$i = 0,
      $cmp96$i = 0,
      $cmp97$i = 0,
      $cmp97$i$i = 0;
    var $cmp9716$i = 0,
      $cmp99 = 0,
      $cond = 0,
      $cond$i = 0,
      $cond$i$i = 0,
      $cond$i$i$i = 0,
      $cond$i17$i = 0,
      $cond$i40$i = 0,
      $cond$i48$i = 0,
      $cond1$i$i = 0,
      $cond115$i = 0,
      $cond115$i$i = 0,
      $cond13$i$i = 0,
      $cond15$i$i = 0,
      $cond2$i = 0,
      $cond3$i = 0,
      $cond315$i$i = 0,
      $cond383$i = 0,
      $cond4$i = 0,
      $fd$i = 0;
    var $fd$i$i = 0,
      $fd$i177 = 0,
      $fd103$i$i = 0,
      $fd123 = 0,
      $fd140$i$i = 0,
      $fd146$i = 0,
      $fd148$i$i = 0,
      $fd160$i$i = 0,
      $fd219$i = 0,
      $fd247$i$i = 0,
      $fd303$i$i = 0,
      $fd312$i = 0,
      $fd339$i$i = 0,
      $fd344$i$i = 0,
      $fd359$i$i = 0,
      $fd371$i = 0,
      $fd408$i = 0,
      $fd416$i = 0,
      $fd431$i = 0,
      $fd54$i$i = 0;
    var $fd57$i = 0,
      $fd68$i$i = 0,
      $fd69 = 0,
      $fd78$i$i = 0,
      $fd9 = 0,
      $fd92$i$i = 0,
      $head = 0,
      $head$i = 0,
      $head$i$i = 0,
      $head$i$i$i = 0,
      $head$i164 = 0,
      $head$i22$i = 0,
      $head$i42$i = 0,
      $head$i52$i = 0,
      $head118$i$i = 0,
      $head1186$i$i = 0,
      $head168 = 0,
      $head173 = 0,
      $head177 = 0,
      $head179 = 0;
    var $head179$i = 0,
      $head182$i = 0,
      $head187$i = 0,
      $head189$i = 0,
      $head195 = 0,
      $head198 = 0,
      $head208$i$i = 0,
      $head211$i$i = 0,
      $head23$i$i = 0,
      $head25 = 0,
      $head26$i$i = 0,
      $head265$i = 0,
      $head268$i = 0,
      $head271$i = 0,
      $head274$i = 0,
      $head279$i = 0,
      $head281$i = 0,
      $head29$i = 0,
      $head29$i$i = 0,
      $head317$i$i = 0;
    var $head3174$i$i = 0,
      $head32$i$i = 0,
      $head34$i$i = 0,
      $head386$i = 0,
      $head38611$i = 0,
      $head7$i$i = 0,
      $head7$i$i$i = 0,
      $head7$i54$i = 0,
      $head94 = 0,
      $head97 = 0,
      $head99$i = 0,
      $idx$0$i = 0,
      $index$i = 0,
      $index$i$i = 0,
      $index$i189 = 0,
      $index$i29$i = 0,
      $index288$i$i = 0,
      $index356$i = 0,
      $magic$i$i = 0,
      $nb$0 = 0;
    var $neg = 0,
      $neg$i = 0,
      $neg$i$i = 0,
      $neg$i137 = 0,
      $neg$i190 = 0,
      $neg103$i = 0,
      $neg13 = 0,
      $neg132$i$i = 0,
      $neg48$i = 0,
      $neg73 = 0,
      $next$i = 0,
      $next$i$i = 0,
      $next$i$i$i = 0,
      $next231$i = 0,
      $not$cmp141$i = 0,
      $oldfirst$0$i$i = 0,
      $or$cond$i = 0,
      $or$cond$i168 = 0,
      $or$cond1$i = 0,
      $or$cond1$i165 = 0;
    var $or$cond11$i = 0,
      $or$cond2$i = 0,
      $or$cond4$i = 0,
      $or$cond5$i = 0,
      $or$cond7$i = 0,
      $or$cond8$i = 0,
      $or$cond8$not$i = 0,
      $or$cond97$i = 0,
      $or$cond98$i = 0,
      $or$i = 0,
      $or$i$i = 0,
      $or$i$i$i = 0,
      $or$i169 = 0,
      $or$i51$i = 0,
      $or101$i$i = 0,
      $or110 = 0,
      $or167 = 0,
      $or172 = 0,
      $or176 = 0,
      $or178$i = 0;
    var $or180 = 0,
      $or183$i = 0,
      $or186$i = 0,
      $or188$i = 0,
      $or19$i$i = 0,
      $or194 = 0,
      $or197 = 0,
      $or204$i = 0,
      $or210$i$i = 0,
      $or22$i$i = 0,
      $or23 = 0,
      $or232$i$i = 0,
      $or26 = 0,
      $or264$i = 0,
      $or267$i = 0,
      $or270$i = 0,
      $or275$i = 0,
      $or278$i = 0,
      $or28$i$i = 0,
      $or280$i = 0;
    var $or297$i = 0,
      $or300$i$i = 0,
      $or33$i$i = 0,
      $or368$i = 0,
      $or40 = 0,
      $or44$i$i = 0,
      $or93 = 0,
      $or96 = 0,
      $parent$i = 0,
      $parent$i$i = 0,
      $parent$i175 = 0,
      $parent$i27$i = 0,
      $parent135$i = 0,
      $parent138$i$i = 0,
      $parent149$i = 0,
      $parent162$i$i = 0,
      $parent165$i$i = 0,
      $parent166$i = 0,
      $parent179$i$i = 0,
      $parent196$i$i = 0;
    var $parent226$i = 0,
      $parent240$i = 0,
      $parent257$i = 0,
      $parent301$i$i = 0,
      $parent337$i$i = 0,
      $parent361$i$i = 0,
      $parent369$i = 0,
      $parent406$i = 0,
      $parent433$i = 0,
      $qsize$0$i$i = 0,
      $retval$0 = 0,
      $rsize$0$i = 0,
      $rsize$0$i162 = 0,
      $rsize$1$i = 0,
      $rsize$3$i = 0,
      $rsize$4$lcssa$i = 0,
      $rsize$418$i = 0,
      $rsize$418$i$ph = 0,
      $rst$0$i = 0,
      $rst$1$i = 0;
    var $sflags193$i = 0,
      $sflags235$i = 0,
      $shl = 0,
      $shl$i = 0,
      $shl$i$i = 0,
      $shl$i153 = 0,
      $shl102 = 0,
      $shl105 = 0,
      $shl116$i$i = 0,
      $shl12 = 0,
      $shl127$i$i = 0,
      $shl131$i$i = 0,
      $shl15$i = 0,
      $shl18$i = 0,
      $shl192$i = 0,
      $shl195$i = 0,
      $shl198$i = 0,
      $shl22 = 0,
      $shl222$i$i = 0,
      $shl226$i$i = 0;
    var $shl265$i$i = 0,
      $shl270$i$i = 0,
      $shl276$i$i = 0,
      $shl279$i$i = 0,
      $shl288$i = 0,
      $shl291$i = 0,
      $shl294$i$i = 0,
      $shl31$i = 0,
      $shl316$i$i = 0,
      $shl326$i$i = 0,
      $shl333$i = 0,
      $shl338$i = 0,
      $shl344$i = 0,
      $shl347$i = 0,
      $shl35 = 0,
      $shl362$i = 0,
      $shl37 = 0,
      $shl384$i = 0,
      $shl39$i$i = 0,
      $shl395$i = 0;
    var $shl48$i$i = 0,
      $shl60$i = 0,
      $shl65 = 0,
      $shl70$i$i = 0,
      $shl72 = 0,
      $shl75$i$i = 0,
      $shl81$i$i = 0,
      $shl84$i$i = 0,
      $shl9$i = 0,
      $shl90 = 0,
      $shl95$i$i = 0,
      $shr = 0,
      $shr$i = 0,
      $shr$i$i = 0,
      $shr$i148 = 0,
      $shr$i25$i = 0,
      $shr101 = 0,
      $shr11$i = 0,
      $shr11$i156 = 0,
      $shr110$i$i = 0;
    var $shr12$i = 0,
      $shr124$i$i = 0,
      $shr15$i = 0,
      $shr16$i = 0,
      $shr16$i157 = 0,
      $shr19$i = 0,
      $shr194$i = 0,
      $shr20$i = 0,
      $shr214$i$i = 0,
      $shr253$i$i = 0,
      $shr263$i$i = 0,
      $shr267$i$i = 0,
      $shr27$i = 0,
      $shr272$i$i = 0,
      $shr277$i$i = 0,
      $shr281$i$i = 0,
      $shr283$i = 0,
      $shr3 = 0,
      $shr310$i$i = 0,
      $shr318$i = 0;
    var $shr323$i$i = 0,
      $shr330$i = 0,
      $shr335$i = 0,
      $shr340$i = 0,
      $shr345$i = 0,
      $shr349$i = 0,
      $shr378$i = 0,
      $shr392$i = 0,
      $shr4$i = 0,
      $shr42$i = 0,
      $shr45 = 0,
      $shr47 = 0,
      $shr48 = 0,
      $shr5$i = 0,
      $shr5$i151 = 0,
      $shr51 = 0,
      $shr52 = 0,
      $shr55 = 0,
      $shr56 = 0,
      $shr58$i$i = 0;
    var $shr59 = 0,
      $shr60 = 0,
      $shr63 = 0,
      $shr68$i$i = 0,
      $shr7$i = 0,
      $shr7$i154 = 0,
      $shr72$i = 0,
      $shr72$i$i = 0,
      $shr75$i = 0,
      $shr76$i = 0,
      $shr77$i$i = 0,
      $shr79$i = 0,
      $shr8$i = 0,
      $shr80$i = 0,
      $shr82$i$i = 0,
      $shr83$i = 0,
      $shr84$i = 0,
      $shr86$i$i = 0,
      $shr87$i = 0,
      $shr88$i = 0;
    var $shr91$i = 0,
      $size$i$i = 0,
      $size$i$i$i = 0,
      $size$i$i$le = 0,
      $size188$i = 0,
      $size188$i$le = 0,
      $size245$i = 0,
      $sizebits$0$i = 0,
      $sp$0$i$i = 0,
      $sp$0$i$i$i = 0,
      $sp$0112$i = 0,
      $sp$1111$i = 0,
      $spec$select$i = 0,
      $spec$select$i171 = 0,
      $spec$select1$i = 0,
      $spec$select2$i = 0,
      $spec$select5$i = 0,
      $spec$select9$i = 0,
      $spec$select96$i = 0,
      $ssize$2$ph$i = 0;
    var $sub = 0,
      $sub$i = 0,
      $sub$i$i = 0,
      $sub$i$i$i = 0,
      $sub$i136 = 0,
      $sub$i147 = 0,
      $sub$i16$i = 0,
      $sub$i38$i = 0,
      $sub$i46$i = 0,
      $sub$ptr$lhs$cast$i = 0,
      $sub$ptr$lhs$cast$i$i = 0,
      $sub$ptr$lhs$cast$i19$i = 0,
      $sub$ptr$rhs$cast$i = 0,
      $sub$ptr$rhs$cast$i$i = 0,
      $sub$ptr$rhs$cast$i20$i = 0,
      $sub$ptr$sub$i = 0,
      $sub$ptr$sub$i$i = 0,
      $sub$ptr$sub$i21$i = 0,
      $sub10$i = 0,
      $sub101$i = 0;
    var $sub112$i = 0,
      $sub113$i$i = 0,
      $sub118$i = 0,
      $sub12$i$i = 0,
      $sub14$i = 0,
      $sub16$i$i = 0,
      $sub160 = 0,
      $sub172$i = 0,
      $sub18$i$i = 0,
      $sub190 = 0,
      $sub2$i = 0,
      $sub22$i = 0,
      $sub260$i = 0,
      $sub262$i$i = 0,
      $sub266$i$i = 0,
      $sub271$i$i = 0,
      $sub275$i$i = 0,
      $sub30$i = 0,
      $sub31$i = 0,
      $sub313$i$i = 0;
    var $sub329$i = 0,
      $sub33$i = 0,
      $sub334$i = 0,
      $sub339$i = 0,
      $sub343$i = 0,
      $sub381$i = 0,
      $sub4$i = 0,
      $sub41$i = 0,
      $sub42 = 0,
      $sub44 = 0,
      $sub5$i$i = 0,
      $sub5$i$i$i = 0,
      $sub5$i50$i = 0,
      $sub50$i = 0,
      $sub6$i = 0,
      $sub63$i = 0,
      $sub67$i = 0,
      $sub67$i$i = 0,
      $sub70$i = 0,
      $sub71$i$i = 0;
    var $sub76$i$i = 0,
      $sub80$i$i = 0,
      $sub91 = 0,
      $sub99$i = 0,
      $t$0$i = 0,
      $t$0$i161 = 0,
      $t$2$i = 0,
      $t$4$i = 0,
      $t$517$i = 0,
      $t$517$i$ph = 0,
      $tbase$795$i = 0,
      $tobool$i$i = 0,
      $tobool107 = 0,
      $tobool195$i = 0,
      $tobool200$i = 0,
      $tobool228$i$i = 0,
      $tobool237$i = 0,
      $tobool293$i = 0,
      $tobool296$i$i = 0,
      $tobool30$i = 0;
    var $tobool364$i = 0,
      $tobool97$i$i = 0,
      $tsize$2647482$i = 0,
      $tsize$4$i = 0,
      $tsize$794$i = 0,
      $v$0$i = 0,
      $v$0$i163 = 0,
      $v$1$i = 0,
      $v$3$i = 0,
      $v$3$i204 = 0,
      $v$4$lcssa$i = 0,
      $v$419$i = 0,
      $v$419$i$ph = 0,
      $xor$i$i = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $magic$i$i = sp;
    $cmp = $bytes >>> 0 < 245;
    do {
      if ($cmp) {
        $cmp1 = $bytes >>> 0 < 11;
        $add2 = ($bytes + 11) | 0;
        $and = $add2 & -8;
        $cond = $cmp1 ? 16 : $and;
        $shr = $cond >>> 3;
        $0 = HEAP32[4416] | 0;
        $shr3 = $0 >>> $shr;
        $and4 = $shr3 & 3;
        $cmp5 = ($and4 | 0) == 0;
        if (!$cmp5) {
          $neg = $shr3 & 1;
          $and7 = $neg ^ 1;
          $add8 = ($and7 + $shr) | 0;
          $shl = $add8 << 1;
          $arrayidx = (17704 + ($shl << 2)) | 0;
          $1 = ($arrayidx + 8) | 0;
          $2 = HEAP32[$1 >> 2] | 0;
          $fd9 = ($2 + 8) | 0;
          $3 = HEAP32[$fd9 >> 2] | 0;
          $cmp10 = ($3 | 0) == ($arrayidx | 0);
          if ($cmp10) {
            $shl12 = 1 << $add8;
            $neg13 = $shl12 ^ -1;
            $and14 = $0 & $neg13;
            HEAP32[4416] = $and14;
          } else {
            $bk18 = ($3 + 12) | 0;
            HEAP32[$bk18 >> 2] = $arrayidx;
            HEAP32[$1 >> 2] = $3;
          }
          $shl22 = $add8 << 3;
          $or23 = $shl22 | 3;
          $head = ($2 + 4) | 0;
          HEAP32[$head >> 2] = $or23;
          $add$ptr = ($2 + $shl22) | 0;
          $head25 = ($add$ptr + 4) | 0;
          $4 = HEAP32[$head25 >> 2] | 0;
          $or26 = $4 | 1;
          HEAP32[$head25 >> 2] = $or26;
          $retval$0 = $fd9;
          STACKTOP = sp;
          return $retval$0 | 0;
        }
        $5 = HEAP32[17672 >> 2] | 0;
        $cmp29 = $cond >>> 0 > $5 >>> 0;
        if ($cmp29) {
          $cmp31 = ($shr3 | 0) == 0;
          if (!$cmp31) {
            $shl35 = $shr3 << $shr;
            $shl37 = 2 << $shr;
            $sub = (0 - $shl37) | 0;
            $or40 = $shl37 | $sub;
            $and41 = $shl35 & $or40;
            $sub42 = (0 - $and41) | 0;
            $and43 = $and41 & $sub42;
            $sub44 = ($and43 + -1) | 0;
            $shr45 = $sub44 >>> 12;
            $and46 = $shr45 & 16;
            $shr47 = $sub44 >>> $and46;
            $shr48 = $shr47 >>> 5;
            $and49 = $shr48 & 8;
            $add50 = $and49 | $and46;
            $shr51 = $shr47 >>> $and49;
            $shr52 = $shr51 >>> 2;
            $and53 = $shr52 & 4;
            $add54 = $add50 | $and53;
            $shr55 = $shr51 >>> $and53;
            $shr56 = $shr55 >>> 1;
            $and57 = $shr56 & 2;
            $add58 = $add54 | $and57;
            $shr59 = $shr55 >>> $and57;
            $shr60 = $shr59 >>> 1;
            $and61 = $shr60 & 1;
            $add62 = $add58 | $and61;
            $shr63 = $shr59 >>> $and61;
            $add64 = ($add62 + $shr63) | 0;
            $shl65 = $add64 << 1;
            $arrayidx66 = (17704 + ($shl65 << 2)) | 0;
            $6 = ($arrayidx66 + 8) | 0;
            $7 = HEAP32[$6 >> 2] | 0;
            $fd69 = ($7 + 8) | 0;
            $8 = HEAP32[$fd69 >> 2] | 0;
            $cmp70 = ($8 | 0) == ($arrayidx66 | 0);
            if ($cmp70) {
              $shl72 = 1 << $add64;
              $neg73 = $shl72 ^ -1;
              $and74 = $0 & $neg73;
              HEAP32[4416] = $and74;
              $10 = $and74;
            } else {
              $bk85 = ($8 + 12) | 0;
              HEAP32[$bk85 >> 2] = $arrayidx66;
              HEAP32[$6 >> 2] = $8;
              $10 = $0;
            }
            $shl90 = $add64 << 3;
            $sub91 = ($shl90 - $cond) | 0;
            $or93 = $cond | 3;
            $head94 = ($7 + 4) | 0;
            HEAP32[$head94 >> 2] = $or93;
            $add$ptr95 = ($7 + $cond) | 0;
            $or96 = $sub91 | 1;
            $head97 = ($add$ptr95 + 4) | 0;
            HEAP32[$head97 >> 2] = $or96;
            $add$ptr98 = ($7 + $shl90) | 0;
            HEAP32[$add$ptr98 >> 2] = $sub91;
            $cmp99 = ($5 | 0) == 0;
            if (!$cmp99) {
              $9 = HEAP32[17684 >> 2] | 0;
              $shr101 = $5 >>> 3;
              $shl102 = $shr101 << 1;
              $arrayidx103 = (17704 + ($shl102 << 2)) | 0;
              $shl105 = 1 << $shr101;
              $and106 = $10 & $shl105;
              $tobool107 = ($and106 | 0) == 0;
              if ($tobool107) {
                $or110 = $10 | $shl105;
                HEAP32[4416] = $or110;
                $$pre = ($arrayidx103 + 8) | 0;
                $$pre$phiZ2D = $$pre;
                $F104$0 = $arrayidx103;
              } else {
                $11 = ($arrayidx103 + 8) | 0;
                $12 = HEAP32[$11 >> 2] | 0;
                $$pre$phiZ2D = $11;
                $F104$0 = $12;
              }
              HEAP32[$$pre$phiZ2D >> 2] = $9;
              $bk122 = ($F104$0 + 12) | 0;
              HEAP32[$bk122 >> 2] = $9;
              $fd123 = ($9 + 8) | 0;
              HEAP32[$fd123 >> 2] = $F104$0;
              $bk124 = ($9 + 12) | 0;
              HEAP32[$bk124 >> 2] = $arrayidx103;
            }
            HEAP32[17672 >> 2] = $sub91;
            HEAP32[17684 >> 2] = $add$ptr95;
            $retval$0 = $fd69;
            STACKTOP = sp;
            return $retval$0 | 0;
          }
          $13 = HEAP32[17668 >> 2] | 0;
          $cmp128 = ($13 | 0) == 0;
          if ($cmp128) {
            $nb$0 = $cond;
          } else {
            $sub$i = (0 - $13) | 0;
            $and$i = $13 & $sub$i;
            $sub2$i = ($and$i + -1) | 0;
            $shr$i = $sub2$i >>> 12;
            $and3$i = $shr$i & 16;
            $shr4$i = $sub2$i >>> $and3$i;
            $shr5$i = $shr4$i >>> 5;
            $and6$i = $shr5$i & 8;
            $add$i = $and6$i | $and3$i;
            $shr7$i = $shr4$i >>> $and6$i;
            $shr8$i = $shr7$i >>> 2;
            $and9$i = $shr8$i & 4;
            $add10$i = $add$i | $and9$i;
            $shr11$i = $shr7$i >>> $and9$i;
            $shr12$i = $shr11$i >>> 1;
            $and13$i = $shr12$i & 2;
            $add14$i = $add10$i | $and13$i;
            $shr15$i = $shr11$i >>> $and13$i;
            $shr16$i = $shr15$i >>> 1;
            $and17$i = $shr16$i & 1;
            $add18$i = $add14$i | $and17$i;
            $shr19$i = $shr15$i >>> $and17$i;
            $add20$i = ($add18$i + $shr19$i) | 0;
            $arrayidx$i = (17968 + ($add20$i << 2)) | 0;
            $14 = HEAP32[$arrayidx$i >> 2] | 0;
            $head$i = ($14 + 4) | 0;
            $15 = HEAP32[$head$i >> 2] | 0;
            $and21$i = $15 & -8;
            $sub22$i = ($and21$i - $cond) | 0;
            $rsize$0$i = $sub22$i;
            $t$0$i = $14;
            $v$0$i = $14;
            while (1) {
              $arrayidx23$i = ($t$0$i + 16) | 0;
              $16 = HEAP32[$arrayidx23$i >> 2] | 0;
              $cmp$i = ($16 | 0) == (0 | 0);
              if ($cmp$i) {
                $arrayidx27$i = ($t$0$i + 20) | 0;
                $17 = HEAP32[$arrayidx27$i >> 2] | 0;
                $cmp28$i = ($17 | 0) == (0 | 0);
                if ($cmp28$i) {
                  break;
                } else {
                  $cond4$i = $17;
                }
              } else {
                $cond4$i = $16;
              }
              $head29$i = ($cond4$i + 4) | 0;
              $18 = HEAP32[$head29$i >> 2] | 0;
              $and30$i = $18 & -8;
              $sub31$i = ($and30$i - $cond) | 0;
              $cmp32$i = $sub31$i >>> 0 < $rsize$0$i >>> 0;
              $spec$select$i = $cmp32$i ? $sub31$i : $rsize$0$i;
              $spec$select1$i = $cmp32$i ? $cond4$i : $v$0$i;
              $rsize$0$i = $spec$select$i;
              $t$0$i = $cond4$i;
              $v$0$i = $spec$select1$i;
            }
            $add$ptr$i = ($v$0$i + $cond) | 0;
            $cmp35$i = $add$ptr$i >>> 0 > $v$0$i >>> 0;
            if ($cmp35$i) {
              $parent$i = ($v$0$i + 24) | 0;
              $19 = HEAP32[$parent$i >> 2] | 0;
              $bk$i = ($v$0$i + 12) | 0;
              $20 = HEAP32[$bk$i >> 2] | 0;
              $cmp40$i = ($20 | 0) == ($v$0$i | 0);
              do {
                if ($cmp40$i) {
                  $arrayidx61$i = ($v$0$i + 20) | 0;
                  $22 = HEAP32[$arrayidx61$i >> 2] | 0;
                  $cmp62$i = ($22 | 0) == (0 | 0);
                  if ($cmp62$i) {
                    $arrayidx65$i = ($v$0$i + 16) | 0;
                    $23 = HEAP32[$arrayidx65$i >> 2] | 0;
                    $cmp66$i = ($23 | 0) == (0 | 0);
                    if ($cmp66$i) {
                      $R$3$i = 0;
                      break;
                    } else {
                      $R$1$i$ph = $23;
                      $RP$1$i$ph = $arrayidx65$i;
                    }
                  } else {
                    $R$1$i$ph = $22;
                    $RP$1$i$ph = $arrayidx61$i;
                  }
                  $R$1$i = $R$1$i$ph;
                  $RP$1$i = $RP$1$i$ph;
                  while (1) {
                    $arrayidx71$i = ($R$1$i + 20) | 0;
                    $24 = HEAP32[$arrayidx71$i >> 2] | 0;
                    $cmp72$i = ($24 | 0) == (0 | 0);
                    if ($cmp72$i) {
                      $arrayidx75$i = ($R$1$i + 16) | 0;
                      $25 = HEAP32[$arrayidx75$i >> 2] | 0;
                      $cmp76$i = ($25 | 0) == (0 | 0);
                      if ($cmp76$i) {
                        break;
                      } else {
                        $R$1$i$be = $25;
                        $RP$1$i$be = $arrayidx75$i;
                      }
                    } else {
                      $R$1$i$be = $24;
                      $RP$1$i$be = $arrayidx71$i;
                    }
                    $R$1$i = $R$1$i$be;
                    $RP$1$i = $RP$1$i$be;
                  }
                  HEAP32[$RP$1$i >> 2] = 0;
                  $R$3$i = $R$1$i;
                } else {
                  $fd$i = ($v$0$i + 8) | 0;
                  $21 = HEAP32[$fd$i >> 2] | 0;
                  $bk56$i = ($21 + 12) | 0;
                  HEAP32[$bk56$i >> 2] = $20;
                  $fd57$i = ($20 + 8) | 0;
                  HEAP32[$fd57$i >> 2] = $21;
                  $R$3$i = $20;
                }
              } while (0);
              $cmp90$i = ($19 | 0) == (0 | 0);
              do {
                if (!$cmp90$i) {
                  $index$i = ($v$0$i + 28) | 0;
                  $26 = HEAP32[$index$i >> 2] | 0;
                  $arrayidx94$i = (17968 + ($26 << 2)) | 0;
                  $27 = HEAP32[$arrayidx94$i >> 2] | 0;
                  $cmp95$i = ($v$0$i | 0) == ($27 | 0);
                  if ($cmp95$i) {
                    HEAP32[$arrayidx94$i >> 2] = $R$3$i;
                    $cond2$i = ($R$3$i | 0) == (0 | 0);
                    if ($cond2$i) {
                      $shl$i = 1 << $26;
                      $neg$i = $shl$i ^ -1;
                      $and103$i = $13 & $neg$i;
                      HEAP32[17668 >> 2] = $and103$i;
                      break;
                    }
                  } else {
                    $arrayidx113$i = ($19 + 16) | 0;
                    $28 = HEAP32[$arrayidx113$i >> 2] | 0;
                    $cmp114$i = ($28 | 0) == ($v$0$i | 0);
                    $arrayidx121$i = ($19 + 20) | 0;
                    $arrayidx121$i$sink = $cmp114$i
                      ? $arrayidx113$i
                      : $arrayidx121$i;
                    HEAP32[$arrayidx121$i$sink >> 2] = $R$3$i;
                    $cmp126$i = ($R$3$i | 0) == (0 | 0);
                    if ($cmp126$i) {
                      break;
                    }
                  }
                  $parent135$i = ($R$3$i + 24) | 0;
                  HEAP32[$parent135$i >> 2] = $19;
                  $arrayidx137$i = ($v$0$i + 16) | 0;
                  $29 = HEAP32[$arrayidx137$i >> 2] | 0;
                  $cmp138$i = ($29 | 0) == (0 | 0);
                  if (!$cmp138$i) {
                    $arrayidx148$i = ($R$3$i + 16) | 0;
                    HEAP32[$arrayidx148$i >> 2] = $29;
                    $parent149$i = ($29 + 24) | 0;
                    HEAP32[$parent149$i >> 2] = $R$3$i;
                  }
                  $arrayidx154$i = ($v$0$i + 20) | 0;
                  $30 = HEAP32[$arrayidx154$i >> 2] | 0;
                  $cmp155$i = ($30 | 0) == (0 | 0);
                  if (!$cmp155$i) {
                    $arrayidx165$i = ($R$3$i + 20) | 0;
                    HEAP32[$arrayidx165$i >> 2] = $30;
                    $parent166$i = ($30 + 24) | 0;
                    HEAP32[$parent166$i >> 2] = $R$3$i;
                  }
                }
              } while (0);
              $cmp174$i = $rsize$0$i >>> 0 < 16;
              if ($cmp174$i) {
                $add177$i = ($rsize$0$i + $cond) | 0;
                $or178$i = $add177$i | 3;
                $head179$i = ($v$0$i + 4) | 0;
                HEAP32[$head179$i >> 2] = $or178$i;
                $add$ptr181$i = ($v$0$i + $add177$i) | 0;
                $head182$i = ($add$ptr181$i + 4) | 0;
                $31 = HEAP32[$head182$i >> 2] | 0;
                $or183$i = $31 | 1;
                HEAP32[$head182$i >> 2] = $or183$i;
              } else {
                $or186$i = $cond | 3;
                $head187$i = ($v$0$i + 4) | 0;
                HEAP32[$head187$i >> 2] = $or186$i;
                $or188$i = $rsize$0$i | 1;
                $head189$i = ($add$ptr$i + 4) | 0;
                HEAP32[$head189$i >> 2] = $or188$i;
                $add$ptr190$i = ($add$ptr$i + $rsize$0$i) | 0;
                HEAP32[$add$ptr190$i >> 2] = $rsize$0$i;
                $cmp191$i = ($5 | 0) == 0;
                if (!$cmp191$i) {
                  $32 = HEAP32[17684 >> 2] | 0;
                  $shr194$i = $5 >>> 3;
                  $shl195$i = $shr194$i << 1;
                  $arrayidx196$i = (17704 + ($shl195$i << 2)) | 0;
                  $shl198$i = 1 << $shr194$i;
                  $and199$i = $shl198$i & $0;
                  $tobool200$i = ($and199$i | 0) == 0;
                  if ($tobool200$i) {
                    $or204$i = $shl198$i | $0;
                    HEAP32[4416] = $or204$i;
                    $$pre$i = ($arrayidx196$i + 8) | 0;
                    $$pre$phi$iZ2D = $$pre$i;
                    $F197$0$i = $arrayidx196$i;
                  } else {
                    $33 = ($arrayidx196$i + 8) | 0;
                    $34 = HEAP32[$33 >> 2] | 0;
                    $$pre$phi$iZ2D = $33;
                    $F197$0$i = $34;
                  }
                  HEAP32[$$pre$phi$iZ2D >> 2] = $32;
                  $bk218$i = ($F197$0$i + 12) | 0;
                  HEAP32[$bk218$i >> 2] = $32;
                  $fd219$i = ($32 + 8) | 0;
                  HEAP32[$fd219$i >> 2] = $F197$0$i;
                  $bk220$i = ($32 + 12) | 0;
                  HEAP32[$bk220$i >> 2] = $arrayidx196$i;
                }
                HEAP32[17672 >> 2] = $rsize$0$i;
                HEAP32[17684 >> 2] = $add$ptr$i;
              }
              $add$ptr225$i = ($v$0$i + 8) | 0;
              $retval$0 = $add$ptr225$i;
              STACKTOP = sp;
              return $retval$0 | 0;
            } else {
              $nb$0 = $cond;
            }
          }
        } else {
          $nb$0 = $cond;
        }
      } else {
        $cmp139 = $bytes >>> 0 > 4294967231;
        if ($cmp139) {
          $nb$0 = -1;
        } else {
          $add144 = ($bytes + 11) | 0;
          $and145 = $add144 & -8;
          $35 = HEAP32[17668 >> 2] | 0;
          $cmp146 = ($35 | 0) == 0;
          if ($cmp146) {
            $nb$0 = $and145;
          } else {
            $sub$i147 = (0 - $and145) | 0;
            $shr$i148 = $add144 >>> 8;
            $cmp$i149 = ($shr$i148 | 0) == 0;
            if ($cmp$i149) {
              $idx$0$i = 0;
            } else {
              $cmp1$i = $and145 >>> 0 > 16777215;
              if ($cmp1$i) {
                $idx$0$i = 31;
              } else {
                $sub4$i = ($shr$i148 + 1048320) | 0;
                $shr5$i151 = $sub4$i >>> 16;
                $and$i152 = $shr5$i151 & 8;
                $shl$i153 = $shr$i148 << $and$i152;
                $sub6$i = ($shl$i153 + 520192) | 0;
                $shr7$i154 = $sub6$i >>> 16;
                $and8$i = $shr7$i154 & 4;
                $add$i155 = $and8$i | $and$i152;
                $shl9$i = $shl$i153 << $and8$i;
                $sub10$i = ($shl9$i + 245760) | 0;
                $shr11$i156 = $sub10$i >>> 16;
                $and12$i = $shr11$i156 & 2;
                $add13$i = $add$i155 | $and12$i;
                $sub14$i = (14 - $add13$i) | 0;
                $shl15$i = $shl9$i << $and12$i;
                $shr16$i157 = $shl15$i >>> 15;
                $add17$i158 = ($sub14$i + $shr16$i157) | 0;
                $shl18$i = $add17$i158 << 1;
                $add19$i = ($add17$i158 + 7) | 0;
                $shr20$i = $and145 >>> $add19$i;
                $and21$i159 = $shr20$i & 1;
                $add22$i = $and21$i159 | $shl18$i;
                $idx$0$i = $add22$i;
              }
            }
            $arrayidx$i160 = (17968 + ($idx$0$i << 2)) | 0;
            $36 = HEAP32[$arrayidx$i160 >> 2] | 0;
            $cmp24$i = ($36 | 0) == (0 | 0);
            L79: do {
              if ($cmp24$i) {
                $rsize$3$i = $sub$i147;
                $t$2$i = 0;
                $v$3$i = 0;
                label = 61;
              } else {
                $cmp26$i = ($idx$0$i | 0) == 31;
                $shr27$i = $idx$0$i >>> 1;
                $sub30$i = (25 - $shr27$i) | 0;
                $cond$i = $cmp26$i ? 0 : $sub30$i;
                $shl31$i = $and145 << $cond$i;
                $rsize$0$i162 = $sub$i147;
                $rst$0$i = 0;
                $sizebits$0$i = $shl31$i;
                $t$0$i161 = $36;
                $v$0$i163 = 0;
                while (1) {
                  $head$i164 = ($t$0$i161 + 4) | 0;
                  $37 = HEAP32[$head$i164 >> 2] | 0;
                  $and32$i = $37 & -8;
                  $sub33$i = ($and32$i - $and145) | 0;
                  $cmp34$i = $sub33$i >>> 0 < $rsize$0$i162 >>> 0;
                  if ($cmp34$i) {
                    $cmp36$i = ($sub33$i | 0) == 0;
                    if ($cmp36$i) {
                      $rsize$418$i$ph = 0;
                      $t$517$i$ph = $t$0$i161;
                      $v$419$i$ph = $t$0$i161;
                      label = 65;
                      break L79;
                    } else {
                      $rsize$1$i = $sub33$i;
                      $v$1$i = $t$0$i161;
                    }
                  } else {
                    $rsize$1$i = $rsize$0$i162;
                    $v$1$i = $v$0$i163;
                  }
                  $arrayidx40$i = ($t$0$i161 + 20) | 0;
                  $38 = HEAP32[$arrayidx40$i >> 2] | 0;
                  $shr42$i = $sizebits$0$i >>> 31;
                  $arrayidx44$i =
                    ((($t$0$i161 + 16) | 0) + ($shr42$i << 2)) | 0;
                  $39 = HEAP32[$arrayidx44$i >> 2] | 0;
                  $cmp45$i = ($38 | 0) == (0 | 0);
                  $cmp46$i = ($38 | 0) == ($39 | 0);
                  $or$cond1$i165 = $cmp45$i | $cmp46$i;
                  $rst$1$i = $or$cond1$i165 ? $rst$0$i : $38;
                  $cmp49$i = ($39 | 0) == (0 | 0);
                  $spec$select5$i = $sizebits$0$i << 1;
                  if ($cmp49$i) {
                    $rsize$3$i = $rsize$1$i;
                    $t$2$i = $rst$1$i;
                    $v$3$i = $v$1$i;
                    label = 61;
                    break;
                  } else {
                    $rsize$0$i162 = $rsize$1$i;
                    $rst$0$i = $rst$1$i;
                    $sizebits$0$i = $spec$select5$i;
                    $t$0$i161 = $39;
                    $v$0$i163 = $v$1$i;
                  }
                }
              }
            } while (0);
            if ((label | 0) == 61) {
              $cmp55$i166 = ($t$2$i | 0) == (0 | 0);
              $cmp57$i167 = ($v$3$i | 0) == (0 | 0);
              $or$cond$i168 = $cmp55$i166 & $cmp57$i167;
              if ($or$cond$i168) {
                $shl60$i = 2 << $idx$0$i;
                $sub63$i = (0 - $shl60$i) | 0;
                $or$i169 = $shl60$i | $sub63$i;
                $and64$i = $or$i169 & $35;
                $cmp65$i = ($and64$i | 0) == 0;
                if ($cmp65$i) {
                  $nb$0 = $and145;
                  break;
                }
                $sub67$i = (0 - $and64$i) | 0;
                $and68$i = $and64$i & $sub67$i;
                $sub70$i = ($and68$i + -1) | 0;
                $shr72$i = $sub70$i >>> 12;
                $and73$i = $shr72$i & 16;
                $shr75$i = $sub70$i >>> $and73$i;
                $shr76$i = $shr75$i >>> 5;
                $and77$i = $shr76$i & 8;
                $add78$i = $and77$i | $and73$i;
                $shr79$i = $shr75$i >>> $and77$i;
                $shr80$i = $shr79$i >>> 2;
                $and81$i = $shr80$i & 4;
                $add82$i = $add78$i | $and81$i;
                $shr83$i = $shr79$i >>> $and81$i;
                $shr84$i = $shr83$i >>> 1;
                $and85$i = $shr84$i & 2;
                $add86$i = $add82$i | $and85$i;
                $shr87$i = $shr83$i >>> $and85$i;
                $shr88$i = $shr87$i >>> 1;
                $and89$i = $shr88$i & 1;
                $add90$i = $add86$i | $and89$i;
                $shr91$i = $shr87$i >>> $and89$i;
                $add92$i = ($add90$i + $shr91$i) | 0;
                $arrayidx94$i170 = (17968 + ($add92$i << 2)) | 0;
                $40 = HEAP32[$arrayidx94$i170 >> 2] | 0;
                $t$4$i = $40;
                $v$3$i204 = 0;
              } else {
                $t$4$i = $t$2$i;
                $v$3$i204 = $v$3$i;
              }
              $cmp9716$i = ($t$4$i | 0) == (0 | 0);
              if ($cmp9716$i) {
                $rsize$4$lcssa$i = $rsize$3$i;
                $v$4$lcssa$i = $v$3$i204;
              } else {
                $rsize$418$i$ph = $rsize$3$i;
                $t$517$i$ph = $t$4$i;
                $v$419$i$ph = $v$3$i204;
                label = 65;
              }
            }
            if ((label | 0) == 65) {
              $rsize$418$i = $rsize$418$i$ph;
              $t$517$i = $t$517$i$ph;
              $v$419$i = $v$419$i$ph;
              while (1) {
                $head99$i = ($t$517$i + 4) | 0;
                $41 = HEAP32[$head99$i >> 2] | 0;
                $and100$i = $41 & -8;
                $sub101$i = ($and100$i - $and145) | 0;
                $cmp102$i = $sub101$i >>> 0 < $rsize$418$i >>> 0;
                $spec$select$i171 = $cmp102$i ? $sub101$i : $rsize$418$i;
                $spec$select2$i = $cmp102$i ? $t$517$i : $v$419$i;
                $arrayidx106$i = ($t$517$i + 16) | 0;
                $42 = HEAP32[$arrayidx106$i >> 2] | 0;
                $cmp107$i = ($42 | 0) == (0 | 0);
                if ($cmp107$i) {
                  $arrayidx113$i173 = ($t$517$i + 20) | 0;
                  $43 = HEAP32[$arrayidx113$i173 >> 2] | 0;
                  $cond115$i = $43;
                } else {
                  $cond115$i = $42;
                }
                $cmp97$i = ($cond115$i | 0) == (0 | 0);
                if ($cmp97$i) {
                  $rsize$4$lcssa$i = $spec$select$i171;
                  $v$4$lcssa$i = $spec$select2$i;
                  break;
                } else {
                  $rsize$418$i = $spec$select$i171;
                  $t$517$i = $cond115$i;
                  $v$419$i = $spec$select2$i;
                }
              }
            }
            $cmp116$i = ($v$4$lcssa$i | 0) == (0 | 0);
            if ($cmp116$i) {
              $nb$0 = $and145;
            } else {
              $44 = HEAP32[17672 >> 2] | 0;
              $sub118$i = ($44 - $and145) | 0;
              $cmp119$i = $rsize$4$lcssa$i >>> 0 < $sub118$i >>> 0;
              if ($cmp119$i) {
                $add$ptr$i174 = ($v$4$lcssa$i + $and145) | 0;
                $cmp123$i = $add$ptr$i174 >>> 0 > $v$4$lcssa$i >>> 0;
                if ($cmp123$i) {
                  $parent$i175 = ($v$4$lcssa$i + 24) | 0;
                  $45 = HEAP32[$parent$i175 >> 2] | 0;
                  $bk$i176 = ($v$4$lcssa$i + 12) | 0;
                  $46 = HEAP32[$bk$i176 >> 2] | 0;
                  $cmp128$i = ($46 | 0) == ($v$4$lcssa$i | 0);
                  do {
                    if ($cmp128$i) {
                      $arrayidx151$i = ($v$4$lcssa$i + 20) | 0;
                      $48 = HEAP32[$arrayidx151$i >> 2] | 0;
                      $cmp152$i = ($48 | 0) == (0 | 0);
                      if ($cmp152$i) {
                        $arrayidx155$i = ($v$4$lcssa$i + 16) | 0;
                        $49 = HEAP32[$arrayidx155$i >> 2] | 0;
                        $cmp156$i = ($49 | 0) == (0 | 0);
                        if ($cmp156$i) {
                          $R$3$i188 = 0;
                          break;
                        } else {
                          $R$1$i183$ph = $49;
                          $RP$1$i182$ph = $arrayidx155$i;
                        }
                      } else {
                        $R$1$i183$ph = $48;
                        $RP$1$i182$ph = $arrayidx151$i;
                      }
                      $R$1$i183 = $R$1$i183$ph;
                      $RP$1$i182 = $RP$1$i182$ph;
                      while (1) {
                        $arrayidx161$i = ($R$1$i183 + 20) | 0;
                        $50 = HEAP32[$arrayidx161$i >> 2] | 0;
                        $cmp162$i184 = ($50 | 0) == (0 | 0);
                        if ($cmp162$i184) {
                          $arrayidx165$i185 = ($R$1$i183 + 16) | 0;
                          $51 = HEAP32[$arrayidx165$i185 >> 2] | 0;
                          $cmp166$i = ($51 | 0) == (0 | 0);
                          if ($cmp166$i) {
                            break;
                          } else {
                            $R$1$i183$be = $51;
                            $RP$1$i182$be = $arrayidx165$i185;
                          }
                        } else {
                          $R$1$i183$be = $50;
                          $RP$1$i182$be = $arrayidx161$i;
                        }
                        $R$1$i183 = $R$1$i183$be;
                        $RP$1$i182 = $RP$1$i182$be;
                      }
                      HEAP32[$RP$1$i182 >> 2] = 0;
                      $R$3$i188 = $R$1$i183;
                    } else {
                      $fd$i177 = ($v$4$lcssa$i + 8) | 0;
                      $47 = HEAP32[$fd$i177 >> 2] | 0;
                      $bk145$i = ($47 + 12) | 0;
                      HEAP32[$bk145$i >> 2] = $46;
                      $fd146$i = ($46 + 8) | 0;
                      HEAP32[$fd146$i >> 2] = $47;
                      $R$3$i188 = $46;
                    }
                  } while (0);
                  $cmp180$i = ($45 | 0) == (0 | 0);
                  do {
                    if ($cmp180$i) {
                      $61 = $35;
                    } else {
                      $index$i189 = ($v$4$lcssa$i + 28) | 0;
                      $52 = HEAP32[$index$i189 >> 2] | 0;
                      $arrayidx184$i = (17968 + ($52 << 2)) | 0;
                      $53 = HEAP32[$arrayidx184$i >> 2] | 0;
                      $cmp185$i = ($v$4$lcssa$i | 0) == ($53 | 0);
                      if ($cmp185$i) {
                        HEAP32[$arrayidx184$i >> 2] = $R$3$i188;
                        $cond3$i = ($R$3$i188 | 0) == (0 | 0);
                        if ($cond3$i) {
                          $shl192$i = 1 << $52;
                          $neg$i190 = $shl192$i ^ -1;
                          $and194$i191 = $35 & $neg$i190;
                          HEAP32[17668 >> 2] = $and194$i191;
                          $61 = $and194$i191;
                          break;
                        }
                      } else {
                        $arrayidx204$i = ($45 + 16) | 0;
                        $54 = HEAP32[$arrayidx204$i >> 2] | 0;
                        $cmp205$i = ($54 | 0) == ($v$4$lcssa$i | 0);
                        $arrayidx212$i = ($45 + 20) | 0;
                        $arrayidx212$i$sink = $cmp205$i
                          ? $arrayidx204$i
                          : $arrayidx212$i;
                        HEAP32[$arrayidx212$i$sink >> 2] = $R$3$i188;
                        $cmp217$i = ($R$3$i188 | 0) == (0 | 0);
                        if ($cmp217$i) {
                          $61 = $35;
                          break;
                        }
                      }
                      $parent226$i = ($R$3$i188 + 24) | 0;
                      HEAP32[$parent226$i >> 2] = $45;
                      $arrayidx228$i = ($v$4$lcssa$i + 16) | 0;
                      $55 = HEAP32[$arrayidx228$i >> 2] | 0;
                      $cmp229$i = ($55 | 0) == (0 | 0);
                      if (!$cmp229$i) {
                        $arrayidx239$i = ($R$3$i188 + 16) | 0;
                        HEAP32[$arrayidx239$i >> 2] = $55;
                        $parent240$i = ($55 + 24) | 0;
                        HEAP32[$parent240$i >> 2] = $R$3$i188;
                      }
                      $arrayidx245$i = ($v$4$lcssa$i + 20) | 0;
                      $56 = HEAP32[$arrayidx245$i >> 2] | 0;
                      $cmp246$i = ($56 | 0) == (0 | 0);
                      if ($cmp246$i) {
                        $61 = $35;
                      } else {
                        $arrayidx256$i = ($R$3$i188 + 20) | 0;
                        HEAP32[$arrayidx256$i >> 2] = $56;
                        $parent257$i = ($56 + 24) | 0;
                        HEAP32[$parent257$i >> 2] = $R$3$i188;
                        $61 = $35;
                      }
                    }
                  } while (0);
                  $cmp265$i = $rsize$4$lcssa$i >>> 0 < 16;
                  L128: do {
                    if ($cmp265$i) {
                      $add268$i = ($rsize$4$lcssa$i + $and145) | 0;
                      $or270$i = $add268$i | 3;
                      $head271$i = ($v$4$lcssa$i + 4) | 0;
                      HEAP32[$head271$i >> 2] = $or270$i;
                      $add$ptr273$i = ($v$4$lcssa$i + $add268$i) | 0;
                      $head274$i = ($add$ptr273$i + 4) | 0;
                      $57 = HEAP32[$head274$i >> 2] | 0;
                      $or275$i = $57 | 1;
                      HEAP32[$head274$i >> 2] = $or275$i;
                    } else {
                      $or278$i = $and145 | 3;
                      $head279$i = ($v$4$lcssa$i + 4) | 0;
                      HEAP32[$head279$i >> 2] = $or278$i;
                      $or280$i = $rsize$4$lcssa$i | 1;
                      $head281$i = ($add$ptr$i174 + 4) | 0;
                      HEAP32[$head281$i >> 2] = $or280$i;
                      $add$ptr282$i = ($add$ptr$i174 + $rsize$4$lcssa$i) | 0;
                      HEAP32[$add$ptr282$i >> 2] = $rsize$4$lcssa$i;
                      $shr283$i = $rsize$4$lcssa$i >>> 3;
                      $cmp284$i = $rsize$4$lcssa$i >>> 0 < 256;
                      if ($cmp284$i) {
                        $shl288$i = $shr283$i << 1;
                        $arrayidx289$i = (17704 + ($shl288$i << 2)) | 0;
                        $58 = HEAP32[4416] | 0;
                        $shl291$i = 1 << $shr283$i;
                        $and292$i = $58 & $shl291$i;
                        $tobool293$i = ($and292$i | 0) == 0;
                        if ($tobool293$i) {
                          $or297$i = $58 | $shl291$i;
                          HEAP32[4416] = $or297$i;
                          $$pre$i194 = ($arrayidx289$i + 8) | 0;
                          $$pre$phi$i195Z2D = $$pre$i194;
                          $F290$0$i = $arrayidx289$i;
                        } else {
                          $59 = ($arrayidx289$i + 8) | 0;
                          $60 = HEAP32[$59 >> 2] | 0;
                          $$pre$phi$i195Z2D = $59;
                          $F290$0$i = $60;
                        }
                        HEAP32[$$pre$phi$i195Z2D >> 2] = $add$ptr$i174;
                        $bk311$i = ($F290$0$i + 12) | 0;
                        HEAP32[$bk311$i >> 2] = $add$ptr$i174;
                        $fd312$i = ($add$ptr$i174 + 8) | 0;
                        HEAP32[$fd312$i >> 2] = $F290$0$i;
                        $bk313$i = ($add$ptr$i174 + 12) | 0;
                        HEAP32[$bk313$i >> 2] = $arrayidx289$i;
                        break;
                      }
                      $shr318$i = $rsize$4$lcssa$i >>> 8;
                      $cmp319$i = ($shr318$i | 0) == 0;
                      if ($cmp319$i) {
                        $I316$0$i = 0;
                      } else {
                        $cmp323$i = $rsize$4$lcssa$i >>> 0 > 16777215;
                        if ($cmp323$i) {
                          $I316$0$i = 31;
                        } else {
                          $sub329$i = ($shr318$i + 1048320) | 0;
                          $shr330$i = $sub329$i >>> 16;
                          $and331$i = $shr330$i & 8;
                          $shl333$i = $shr318$i << $and331$i;
                          $sub334$i = ($shl333$i + 520192) | 0;
                          $shr335$i = $sub334$i >>> 16;
                          $and336$i = $shr335$i & 4;
                          $add337$i = $and336$i | $and331$i;
                          $shl338$i = $shl333$i << $and336$i;
                          $sub339$i = ($shl338$i + 245760) | 0;
                          $shr340$i = $sub339$i >>> 16;
                          $and341$i = $shr340$i & 2;
                          $add342$i = $add337$i | $and341$i;
                          $sub343$i = (14 - $add342$i) | 0;
                          $shl344$i = $shl338$i << $and341$i;
                          $shr345$i = $shl344$i >>> 15;
                          $add346$i = ($sub343$i + $shr345$i) | 0;
                          $shl347$i = $add346$i << 1;
                          $add348$i = ($add346$i + 7) | 0;
                          $shr349$i = $rsize$4$lcssa$i >>> $add348$i;
                          $and350$i = $shr349$i & 1;
                          $add351$i = $and350$i | $shl347$i;
                          $I316$0$i = $add351$i;
                        }
                      }
                      $arrayidx355$i = (17968 + ($I316$0$i << 2)) | 0;
                      $index356$i = ($add$ptr$i174 + 28) | 0;
                      HEAP32[$index356$i >> 2] = $I316$0$i;
                      $child357$i = ($add$ptr$i174 + 16) | 0;
                      $arrayidx358$i = ($child357$i + 4) | 0;
                      HEAP32[$arrayidx358$i >> 2] = 0;
                      HEAP32[$child357$i >> 2] = 0;
                      $shl362$i = 1 << $I316$0$i;
                      $and363$i = $61 & $shl362$i;
                      $tobool364$i = ($and363$i | 0) == 0;
                      if ($tobool364$i) {
                        $or368$i = $61 | $shl362$i;
                        HEAP32[17668 >> 2] = $or368$i;
                        HEAP32[$arrayidx355$i >> 2] = $add$ptr$i174;
                        $parent369$i = ($add$ptr$i174 + 24) | 0;
                        HEAP32[$parent369$i >> 2] = $arrayidx355$i;
                        $bk370$i = ($add$ptr$i174 + 12) | 0;
                        HEAP32[$bk370$i >> 2] = $add$ptr$i174;
                        $fd371$i = ($add$ptr$i174 + 8) | 0;
                        HEAP32[$fd371$i >> 2] = $add$ptr$i174;
                        break;
                      }
                      $62 = HEAP32[$arrayidx355$i >> 2] | 0;
                      $head38611$i = ($62 + 4) | 0;
                      $63 = HEAP32[$head38611$i >> 2] | 0;
                      $and38712$i = $63 & -8;
                      $cmp38813$i = ($and38712$i | 0) == ($rsize$4$lcssa$i | 0);
                      L145: do {
                        if ($cmp38813$i) {
                          $T$0$lcssa$i = $62;
                        } else {
                          $cmp374$i = ($I316$0$i | 0) == 31;
                          $shr378$i = $I316$0$i >>> 1;
                          $sub381$i = (25 - $shr378$i) | 0;
                          $cond383$i = $cmp374$i ? 0 : $sub381$i;
                          $shl384$i = $rsize$4$lcssa$i << $cond383$i;
                          $K373$015$i = $shl384$i;
                          $T$014$i = $62;
                          while (1) {
                            $shr392$i = $K373$015$i >>> 31;
                            $arrayidx394$i =
                              ((($T$014$i + 16) | 0) + ($shr392$i << 2)) | 0;
                            $64 = HEAP32[$arrayidx394$i >> 2] | 0;
                            $cmp396$i = ($64 | 0) == (0 | 0);
                            if ($cmp396$i) {
                              break;
                            }
                            $shl395$i = $K373$015$i << 1;
                            $head386$i = ($64 + 4) | 0;
                            $65 = HEAP32[$head386$i >> 2] | 0;
                            $and387$i = $65 & -8;
                            $cmp388$i =
                              ($and387$i | 0) == ($rsize$4$lcssa$i | 0);
                            if ($cmp388$i) {
                              $T$0$lcssa$i = $64;
                              break L145;
                            } else {
                              $K373$015$i = $shl395$i;
                              $T$014$i = $64;
                            }
                          }
                          HEAP32[$arrayidx394$i >> 2] = $add$ptr$i174;
                          $parent406$i = ($add$ptr$i174 + 24) | 0;
                          HEAP32[$parent406$i >> 2] = $T$014$i;
                          $bk407$i = ($add$ptr$i174 + 12) | 0;
                          HEAP32[$bk407$i >> 2] = $add$ptr$i174;
                          $fd408$i = ($add$ptr$i174 + 8) | 0;
                          HEAP32[$fd408$i >> 2] = $add$ptr$i174;
                          break L128;
                        }
                      } while (0);
                      $fd416$i = ($T$0$lcssa$i + 8) | 0;
                      $66 = HEAP32[$fd416$i >> 2] | 0;
                      $bk429$i = ($66 + 12) | 0;
                      HEAP32[$bk429$i >> 2] = $add$ptr$i174;
                      HEAP32[$fd416$i >> 2] = $add$ptr$i174;
                      $fd431$i = ($add$ptr$i174 + 8) | 0;
                      HEAP32[$fd431$i >> 2] = $66;
                      $bk432$i = ($add$ptr$i174 + 12) | 0;
                      HEAP32[$bk432$i >> 2] = $T$0$lcssa$i;
                      $parent433$i = ($add$ptr$i174 + 24) | 0;
                      HEAP32[$parent433$i >> 2] = 0;
                    }
                  } while (0);
                  $add$ptr441$i = ($v$4$lcssa$i + 8) | 0;
                  $retval$0 = $add$ptr441$i;
                  STACKTOP = sp;
                  return $retval$0 | 0;
                } else {
                  $nb$0 = $and145;
                }
              } else {
                $nb$0 = $and145;
              }
            }
          }
        }
      }
    } while (0);
    $67 = HEAP32[17672 >> 2] | 0;
    $cmp156 = $67 >>> 0 < $nb$0 >>> 0;
    if (!$cmp156) {
      $sub160 = ($67 - $nb$0) | 0;
      $68 = HEAP32[17684 >> 2] | 0;
      $cmp162 = $sub160 >>> 0 > 15;
      if ($cmp162) {
        $add$ptr166 = ($68 + $nb$0) | 0;
        HEAP32[17684 >> 2] = $add$ptr166;
        HEAP32[17672 >> 2] = $sub160;
        $or167 = $sub160 | 1;
        $head168 = ($add$ptr166 + 4) | 0;
        HEAP32[$head168 >> 2] = $or167;
        $add$ptr169 = ($68 + $67) | 0;
        HEAP32[$add$ptr169 >> 2] = $sub160;
        $or172 = $nb$0 | 3;
        $head173 = ($68 + 4) | 0;
        HEAP32[$head173 >> 2] = $or172;
      } else {
        HEAP32[17672 >> 2] = 0;
        HEAP32[17684 >> 2] = 0;
        $or176 = $67 | 3;
        $head177 = ($68 + 4) | 0;
        HEAP32[$head177 >> 2] = $or176;
        $add$ptr178 = ($68 + $67) | 0;
        $head179 = ($add$ptr178 + 4) | 0;
        $69 = HEAP32[$head179 >> 2] | 0;
        $or180 = $69 | 1;
        HEAP32[$head179 >> 2] = $or180;
      }
      $add$ptr182 = ($68 + 8) | 0;
      $retval$0 = $add$ptr182;
      STACKTOP = sp;
      return $retval$0 | 0;
    }
    $70 = HEAP32[17676 >> 2] | 0;
    $cmp186 = $70 >>> 0 > $nb$0 >>> 0;
    if ($cmp186) {
      $sub190 = ($70 - $nb$0) | 0;
      HEAP32[17676 >> 2] = $sub190;
      $71 = HEAP32[17688 >> 2] | 0;
      $add$ptr193 = ($71 + $nb$0) | 0;
      HEAP32[17688 >> 2] = $add$ptr193;
      $or194 = $sub190 | 1;
      $head195 = ($add$ptr193 + 4) | 0;
      HEAP32[$head195 >> 2] = $or194;
      $or197 = $nb$0 | 3;
      $head198 = ($71 + 4) | 0;
      HEAP32[$head198 >> 2] = $or197;
      $add$ptr199 = ($71 + 8) | 0;
      $retval$0 = $add$ptr199;
      STACKTOP = sp;
      return $retval$0 | 0;
    }
    $72 = HEAP32[4534] | 0;
    $cmp$i133 = ($72 | 0) == 0;
    if ($cmp$i133) {
      HEAP32[18144 >> 2] = 4096;
      HEAP32[18140 >> 2] = 4096;
      HEAP32[18148 >> 2] = -1;
      HEAP32[18152 >> 2] = -1;
      HEAP32[18156 >> 2] = 0;
      HEAP32[18108 >> 2] = 0;
      $73 = $magic$i$i;
      $xor$i$i = $73 & -16;
      $and6$i$i = $xor$i$i ^ 1431655768;
      HEAP32[4534] = $and6$i$i;
      $74 = 4096;
    } else {
      $$pre$i134 = HEAP32[18144 >> 2] | 0;
      $74 = $$pre$i134;
    }
    $add$i135 = ($nb$0 + 48) | 0;
    $sub$i136 = ($nb$0 + 47) | 0;
    $add9$i = ($74 + $sub$i136) | 0;
    $neg$i137 = (0 - $74) | 0;
    $and11$i = $add9$i & $neg$i137;
    $cmp12$i = $and11$i >>> 0 > $nb$0 >>> 0;
    if (!$cmp12$i) {
      $retval$0 = 0;
      STACKTOP = sp;
      return $retval$0 | 0;
    }
    $75 = HEAP32[18104 >> 2] | 0;
    $cmp15$i = ($75 | 0) == 0;
    if (!$cmp15$i) {
      $76 = HEAP32[18096 >> 2] | 0;
      $add17$i = ($76 + $and11$i) | 0;
      $cmp19$i = $add17$i >>> 0 <= $76 >>> 0;
      $cmp21$i = $add17$i >>> 0 > $75 >>> 0;
      $or$cond1$i = $cmp19$i | $cmp21$i;
      if ($or$cond1$i) {
        $retval$0 = 0;
        STACKTOP = sp;
        return $retval$0 | 0;
      }
    }
    $77 = HEAP32[18108 >> 2] | 0;
    $and29$i = $77 & 4;
    $tobool30$i = ($and29$i | 0) == 0;
    L178: do {
      if ($tobool30$i) {
        $78 = HEAP32[17688 >> 2] | 0;
        $cmp32$i138 = ($78 | 0) == (0 | 0);
        L180: do {
          if ($cmp32$i138) {
            label = 128;
          } else {
            $sp$0$i$i = 18112;
            while (1) {
              $79 = HEAP32[$sp$0$i$i >> 2] | 0;
              $cmp$i55$i = $79 >>> 0 > $78 >>> 0;
              if (!$cmp$i55$i) {
                $size$i$i = ($sp$0$i$i + 4) | 0;
                $80 = HEAP32[$size$i$i >> 2] | 0;
                $add$ptr$i57$i = ($79 + $80) | 0;
                $cmp2$i$i = $add$ptr$i57$i >>> 0 > $78 >>> 0;
                if ($cmp2$i$i) {
                  break;
                }
              }
              $next$i$i = ($sp$0$i$i + 8) | 0;
              $81 = HEAP32[$next$i$i >> 2] | 0;
              $cmp3$i$i = ($81 | 0) == (0 | 0);
              if ($cmp3$i$i) {
                label = 128;
                break L180;
              } else {
                $sp$0$i$i = $81;
              }
            }
            $add77$i = ($add9$i - $70) | 0;
            $and80$i = $add77$i & $neg$i137;
            $cmp81$i = $and80$i >>> 0 < 2147483647;
            if ($cmp81$i) {
              $size$i$i$le = ($sp$0$i$i + 4) | 0;
              $call83$i = _sbrk($and80$i | 0) | 0;
              $86 = HEAP32[$sp$0$i$i >> 2] | 0;
              $87 = HEAP32[$size$i$i$le >> 2] | 0;
              $add$ptr$i141 = ($86 + $87) | 0;
              $cmp85$i = ($call83$i | 0) == ($add$ptr$i141 | 0);
              if ($cmp85$i) {
                $cmp89$i = ($call83$i | 0) == (-1 | 0);
                if ($cmp89$i) {
                  $tsize$2647482$i = $and80$i;
                } else {
                  $tbase$795$i = $call83$i;
                  $tsize$794$i = $and80$i;
                  label = 145;
                  break L178;
                }
              } else {
                $br$2$ph$i = $call83$i;
                $ssize$2$ph$i = $and80$i;
                label = 136;
              }
            } else {
              $tsize$2647482$i = 0;
            }
          }
        } while (0);
        do {
          if ((label | 0) == 128) {
            $call37$i = _sbrk(0) | 0;
            $cmp38$i = ($call37$i | 0) == (-1 | 0);
            if ($cmp38$i) {
              $tsize$2647482$i = 0;
            } else {
              $82 = $call37$i;
              $83 = HEAP32[18140 >> 2] | 0;
              $sub41$i = ($83 + -1) | 0;
              $and42$i = $sub41$i & $82;
              $cmp43$i = ($and42$i | 0) == 0;
              $add46$i = ($sub41$i + $82) | 0;
              $neg48$i = (0 - $83) | 0;
              $and49$i = $add46$i & $neg48$i;
              $sub50$i = ($and49$i - $82) | 0;
              $add51$i = $cmp43$i ? 0 : $sub50$i;
              $spec$select96$i = ($add51$i + $and11$i) | 0;
              $84 = HEAP32[18096 >> 2] | 0;
              $add54$i = ($spec$select96$i + $84) | 0;
              $cmp55$i = $spec$select96$i >>> 0 > $nb$0 >>> 0;
              $cmp57$i = $spec$select96$i >>> 0 < 2147483647;
              $or$cond$i = $cmp55$i & $cmp57$i;
              if ($or$cond$i) {
                $85 = HEAP32[18104 >> 2] | 0;
                $cmp60$i = ($85 | 0) == 0;
                if (!$cmp60$i) {
                  $cmp63$i = $add54$i >>> 0 <= $84 >>> 0;
                  $cmp66$i140 = $add54$i >>> 0 > $85 >>> 0;
                  $or$cond2$i = $cmp63$i | $cmp66$i140;
                  if ($or$cond2$i) {
                    $tsize$2647482$i = 0;
                    break;
                  }
                }
                $call68$i = _sbrk($spec$select96$i | 0) | 0;
                $cmp69$i = ($call68$i | 0) == ($call37$i | 0);
                if ($cmp69$i) {
                  $tbase$795$i = $call37$i;
                  $tsize$794$i = $spec$select96$i;
                  label = 145;
                  break L178;
                } else {
                  $br$2$ph$i = $call68$i;
                  $ssize$2$ph$i = $spec$select96$i;
                  label = 136;
                }
              } else {
                $tsize$2647482$i = 0;
              }
            }
          }
        } while (0);
        do {
          if ((label | 0) == 136) {
            $sub112$i = (0 - $ssize$2$ph$i) | 0;
            $cmp91$i = ($br$2$ph$i | 0) != (-1 | 0);
            $cmp93$i = $ssize$2$ph$i >>> 0 < 2147483647;
            $or$cond5$i = $cmp93$i & $cmp91$i;
            $cmp96$i = $add$i135 >>> 0 > $ssize$2$ph$i >>> 0;
            $or$cond7$i = $cmp96$i & $or$cond5$i;
            if (!$or$cond7$i) {
              $cmp118$i = ($br$2$ph$i | 0) == (-1 | 0);
              if ($cmp118$i) {
                $tsize$2647482$i = 0;
                break;
              } else {
                $tbase$795$i = $br$2$ph$i;
                $tsize$794$i = $ssize$2$ph$i;
                label = 145;
                break L178;
              }
            }
            $88 = HEAP32[18144 >> 2] | 0;
            $sub99$i = ($sub$i136 - $ssize$2$ph$i) | 0;
            $add101$i = ($sub99$i + $88) | 0;
            $neg103$i = (0 - $88) | 0;
            $and104$i = $add101$i & $neg103$i;
            $cmp105$i = $and104$i >>> 0 < 2147483647;
            if (!$cmp105$i) {
              $tbase$795$i = $br$2$ph$i;
              $tsize$794$i = $ssize$2$ph$i;
              label = 145;
              break L178;
            }
            $call107$i = _sbrk($and104$i | 0) | 0;
            $cmp108$i = ($call107$i | 0) == (-1 | 0);
            if ($cmp108$i) {
              _sbrk($sub112$i | 0) | 0;
              $tsize$2647482$i = 0;
              break;
            } else {
              $add110$i = ($and104$i + $ssize$2$ph$i) | 0;
              $tbase$795$i = $br$2$ph$i;
              $tsize$794$i = $add110$i;
              label = 145;
              break L178;
            }
          }
        } while (0);
        $89 = HEAP32[18108 >> 2] | 0;
        $or$i = $89 | 4;
        HEAP32[18108 >> 2] = $or$i;
        $tsize$4$i = $tsize$2647482$i;
        label = 143;
      } else {
        $tsize$4$i = 0;
        label = 143;
      }
    } while (0);
    if ((label | 0) == 143) {
      $cmp127$i = $and11$i >>> 0 < 2147483647;
      if ($cmp127$i) {
        $call131$i = _sbrk($and11$i | 0) | 0;
        $call132$i = _sbrk(0) | 0;
        $cmp133$i = ($call131$i | 0) != (-1 | 0);
        $cmp135$i = ($call132$i | 0) != (-1 | 0);
        $or$cond4$i = $cmp133$i & $cmp135$i;
        $cmp137$i = $call131$i >>> 0 < $call132$i >>> 0;
        $or$cond8$i = $cmp137$i & $or$cond4$i;
        $sub$ptr$lhs$cast$i = $call132$i;
        $sub$ptr$rhs$cast$i = $call131$i;
        $sub$ptr$sub$i = ($sub$ptr$lhs$cast$i - $sub$ptr$rhs$cast$i) | 0;
        $add140$i = ($nb$0 + 40) | 0;
        $cmp141$i = $sub$ptr$sub$i >>> 0 > $add140$i >>> 0;
        $spec$select9$i = $cmp141$i ? $sub$ptr$sub$i : $tsize$4$i;
        $or$cond8$not$i = $or$cond8$i ^ 1;
        $cmp14799$i = ($call131$i | 0) == (-1 | 0);
        $not$cmp141$i = $cmp141$i ^ 1;
        $cmp147$i = $cmp14799$i | $not$cmp141$i;
        $or$cond97$i = $cmp147$i | $or$cond8$not$i;
        if (!$or$cond97$i) {
          $tbase$795$i = $call131$i;
          $tsize$794$i = $spec$select9$i;
          label = 145;
        }
      }
    }
    if ((label | 0) == 145) {
      $90 = HEAP32[18096 >> 2] | 0;
      $add150$i = ($90 + $tsize$794$i) | 0;
      HEAP32[18096 >> 2] = $add150$i;
      $91 = HEAP32[18100 >> 2] | 0;
      $cmp151$i = $add150$i >>> 0 > $91 >>> 0;
      if ($cmp151$i) {
        HEAP32[18100 >> 2] = $add150$i;
      }
      $92 = HEAP32[17688 >> 2] | 0;
      $cmp157$i = ($92 | 0) == (0 | 0);
      L215: do {
        if ($cmp157$i) {
          $93 = HEAP32[17680 >> 2] | 0;
          $cmp159$i = ($93 | 0) == (0 | 0);
          $cmp162$i = $tbase$795$i >>> 0 < $93 >>> 0;
          $or$cond11$i = $cmp159$i | $cmp162$i;
          if ($or$cond11$i) {
            HEAP32[17680 >> 2] = $tbase$795$i;
          }
          HEAP32[18112 >> 2] = $tbase$795$i;
          HEAP32[18116 >> 2] = $tsize$794$i;
          HEAP32[18124 >> 2] = 0;
          $94 = HEAP32[4534] | 0;
          HEAP32[17700 >> 2] = $94;
          HEAP32[17696 >> 2] = -1;
          HEAP32[17716 >> 2] = 17704;
          HEAP32[17712 >> 2] = 17704;
          HEAP32[17724 >> 2] = 17712;
          HEAP32[17720 >> 2] = 17712;
          HEAP32[17732 >> 2] = 17720;
          HEAP32[17728 >> 2] = 17720;
          HEAP32[17740 >> 2] = 17728;
          HEAP32[17736 >> 2] = 17728;
          HEAP32[17748 >> 2] = 17736;
          HEAP32[17744 >> 2] = 17736;
          HEAP32[17756 >> 2] = 17744;
          HEAP32[17752 >> 2] = 17744;
          HEAP32[17764 >> 2] = 17752;
          HEAP32[17760 >> 2] = 17752;
          HEAP32[17772 >> 2] = 17760;
          HEAP32[17768 >> 2] = 17760;
          HEAP32[17780 >> 2] = 17768;
          HEAP32[17776 >> 2] = 17768;
          HEAP32[17788 >> 2] = 17776;
          HEAP32[17784 >> 2] = 17776;
          HEAP32[17796 >> 2] = 17784;
          HEAP32[17792 >> 2] = 17784;
          HEAP32[17804 >> 2] = 17792;
          HEAP32[17800 >> 2] = 17792;
          HEAP32[17812 >> 2] = 17800;
          HEAP32[17808 >> 2] = 17800;
          HEAP32[17820 >> 2] = 17808;
          HEAP32[17816 >> 2] = 17808;
          HEAP32[17828 >> 2] = 17816;
          HEAP32[17824 >> 2] = 17816;
          HEAP32[17836 >> 2] = 17824;
          HEAP32[17832 >> 2] = 17824;
          HEAP32[17844 >> 2] = 17832;
          HEAP32[17840 >> 2] = 17832;
          HEAP32[17852 >> 2] = 17840;
          HEAP32[17848 >> 2] = 17840;
          HEAP32[17860 >> 2] = 17848;
          HEAP32[17856 >> 2] = 17848;
          HEAP32[17868 >> 2] = 17856;
          HEAP32[17864 >> 2] = 17856;
          HEAP32[17876 >> 2] = 17864;
          HEAP32[17872 >> 2] = 17864;
          HEAP32[17884 >> 2] = 17872;
          HEAP32[17880 >> 2] = 17872;
          HEAP32[17892 >> 2] = 17880;
          HEAP32[17888 >> 2] = 17880;
          HEAP32[17900 >> 2] = 17888;
          HEAP32[17896 >> 2] = 17888;
          HEAP32[17908 >> 2] = 17896;
          HEAP32[17904 >> 2] = 17896;
          HEAP32[17916 >> 2] = 17904;
          HEAP32[17912 >> 2] = 17904;
          HEAP32[17924 >> 2] = 17912;
          HEAP32[17920 >> 2] = 17912;
          HEAP32[17932 >> 2] = 17920;
          HEAP32[17928 >> 2] = 17920;
          HEAP32[17940 >> 2] = 17928;
          HEAP32[17936 >> 2] = 17928;
          HEAP32[17948 >> 2] = 17936;
          HEAP32[17944 >> 2] = 17936;
          HEAP32[17956 >> 2] = 17944;
          HEAP32[17952 >> 2] = 17944;
          HEAP32[17964 >> 2] = 17952;
          HEAP32[17960 >> 2] = 17952;
          $sub172$i = ($tsize$794$i + -40) | 0;
          $add$ptr$i43$i = ($tbase$795$i + 8) | 0;
          $95 = $add$ptr$i43$i;
          $and$i44$i = $95 & 7;
          $cmp$i45$i = ($and$i44$i | 0) == 0;
          $sub$i46$i = (0 - $95) | 0;
          $and3$i47$i = $sub$i46$i & 7;
          $cond$i48$i = $cmp$i45$i ? 0 : $and3$i47$i;
          $add$ptr4$i49$i = ($tbase$795$i + $cond$i48$i) | 0;
          $sub5$i50$i = ($sub172$i - $cond$i48$i) | 0;
          HEAP32[17688 >> 2] = $add$ptr4$i49$i;
          HEAP32[17676 >> 2] = $sub5$i50$i;
          $or$i51$i = $sub5$i50$i | 1;
          $head$i52$i = ($add$ptr4$i49$i + 4) | 0;
          HEAP32[$head$i52$i >> 2] = $or$i51$i;
          $add$ptr6$i53$i = ($tbase$795$i + $sub172$i) | 0;
          $head7$i54$i = ($add$ptr6$i53$i + 4) | 0;
          HEAP32[$head7$i54$i >> 2] = 40;
          $96 = HEAP32[18152 >> 2] | 0;
          HEAP32[17692 >> 2] = $96;
        } else {
          $sp$0112$i = 18112;
          while (1) {
            $97 = HEAP32[$sp$0112$i >> 2] | 0;
            $size188$i = ($sp$0112$i + 4) | 0;
            $98 = HEAP32[$size188$i >> 2] | 0;
            $add$ptr189$i = ($97 + $98) | 0;
            $cmp190$i = ($tbase$795$i | 0) == ($add$ptr189$i | 0);
            if ($cmp190$i) {
              label = 154;
              break;
            }
            $next$i = ($sp$0112$i + 8) | 0;
            $99 = HEAP32[$next$i >> 2] | 0;
            $cmp186$i = ($99 | 0) == (0 | 0);
            if ($cmp186$i) {
              break;
            } else {
              $sp$0112$i = $99;
            }
          }
          if ((label | 0) == 154) {
            $size188$i$le = ($sp$0112$i + 4) | 0;
            $sflags193$i = ($sp$0112$i + 12) | 0;
            $100 = HEAP32[$sflags193$i >> 2] | 0;
            $and194$i = $100 & 8;
            $tobool195$i = ($and194$i | 0) == 0;
            if ($tobool195$i) {
              $cmp203$i = $97 >>> 0 <= $92 >>> 0;
              $cmp209$i = $tbase$795$i >>> 0 > $92 >>> 0;
              $or$cond98$i = $cmp209$i & $cmp203$i;
              if ($or$cond98$i) {
                $add212$i = ($98 + $tsize$794$i) | 0;
                HEAP32[$size188$i$le >> 2] = $add212$i;
                $101 = HEAP32[17676 >> 2] | 0;
                $add215$i = ($101 + $tsize$794$i) | 0;
                $add$ptr$i35$i = ($92 + 8) | 0;
                $102 = $add$ptr$i35$i;
                $and$i36$i = $102 & 7;
                $cmp$i37$i = ($and$i36$i | 0) == 0;
                $sub$i38$i = (0 - $102) | 0;
                $and3$i39$i = $sub$i38$i & 7;
                $cond$i40$i = $cmp$i37$i ? 0 : $and3$i39$i;
                $add$ptr4$i41$i = ($92 + $cond$i40$i) | 0;
                $sub5$i$i = ($add215$i - $cond$i40$i) | 0;
                HEAP32[17688 >> 2] = $add$ptr4$i41$i;
                HEAP32[17676 >> 2] = $sub5$i$i;
                $or$i$i = $sub5$i$i | 1;
                $head$i42$i = ($add$ptr4$i41$i + 4) | 0;
                HEAP32[$head$i42$i >> 2] = $or$i$i;
                $add$ptr6$i$i = ($92 + $add215$i) | 0;
                $head7$i$i = ($add$ptr6$i$i + 4) | 0;
                HEAP32[$head7$i$i >> 2] = 40;
                $103 = HEAP32[18152 >> 2] | 0;
                HEAP32[17692 >> 2] = $103;
                break;
              }
            }
          }
          $104 = HEAP32[17680 >> 2] | 0;
          $cmp218$i = $tbase$795$i >>> 0 < $104 >>> 0;
          if ($cmp218$i) {
            HEAP32[17680 >> 2] = $tbase$795$i;
          }
          $add$ptr227$i = ($tbase$795$i + $tsize$794$i) | 0;
          $sp$1111$i = 18112;
          while (1) {
            $105 = HEAP32[$sp$1111$i >> 2] | 0;
            $cmp228$i = ($105 | 0) == ($add$ptr227$i | 0);
            if ($cmp228$i) {
              label = 162;
              break;
            }
            $next231$i = ($sp$1111$i + 8) | 0;
            $106 = HEAP32[$next231$i >> 2] | 0;
            $cmp224$i = ($106 | 0) == (0 | 0);
            if ($cmp224$i) {
              break;
            } else {
              $sp$1111$i = $106;
            }
          }
          if ((label | 0) == 162) {
            $sflags235$i = ($sp$1111$i + 12) | 0;
            $107 = HEAP32[$sflags235$i >> 2] | 0;
            $and236$i = $107 & 8;
            $tobool237$i = ($and236$i | 0) == 0;
            if ($tobool237$i) {
              HEAP32[$sp$1111$i >> 2] = $tbase$795$i;
              $size245$i = ($sp$1111$i + 4) | 0;
              $108 = HEAP32[$size245$i >> 2] | 0;
              $add246$i = ($108 + $tsize$794$i) | 0;
              HEAP32[$size245$i >> 2] = $add246$i;
              $add$ptr$i$i = ($tbase$795$i + 8) | 0;
              $109 = $add$ptr$i$i;
              $and$i14$i = $109 & 7;
              $cmp$i15$i = ($and$i14$i | 0) == 0;
              $sub$i16$i = (0 - $109) | 0;
              $and3$i$i = $sub$i16$i & 7;
              $cond$i17$i = $cmp$i15$i ? 0 : $and3$i$i;
              $add$ptr4$i$i = ($tbase$795$i + $cond$i17$i) | 0;
              $add$ptr5$i$i = ($add$ptr227$i + 8) | 0;
              $110 = $add$ptr5$i$i;
              $and6$i18$i = $110 & 7;
              $cmp7$i$i = ($and6$i18$i | 0) == 0;
              $sub12$i$i = (0 - $110) | 0;
              $and13$i$i = $sub12$i$i & 7;
              $cond15$i$i = $cmp7$i$i ? 0 : $and13$i$i;
              $add$ptr16$i$i = ($add$ptr227$i + $cond15$i$i) | 0;
              $sub$ptr$lhs$cast$i19$i = $add$ptr16$i$i;
              $sub$ptr$rhs$cast$i20$i = $add$ptr4$i$i;
              $sub$ptr$sub$i21$i =
                ($sub$ptr$lhs$cast$i19$i - $sub$ptr$rhs$cast$i20$i) | 0;
              $add$ptr17$i$i = ($add$ptr4$i$i + $nb$0) | 0;
              $sub18$i$i = ($sub$ptr$sub$i21$i - $nb$0) | 0;
              $or19$i$i = $nb$0 | 3;
              $head$i22$i = ($add$ptr4$i$i + 4) | 0;
              HEAP32[$head$i22$i >> 2] = $or19$i$i;
              $cmp20$i$i = ($92 | 0) == ($add$ptr16$i$i | 0);
              L238: do {
                if ($cmp20$i$i) {
                  $111 = HEAP32[17676 >> 2] | 0;
                  $add$i$i = ($111 + $sub18$i$i) | 0;
                  HEAP32[17676 >> 2] = $add$i$i;
                  HEAP32[17688 >> 2] = $add$ptr17$i$i;
                  $or22$i$i = $add$i$i | 1;
                  $head23$i$i = ($add$ptr17$i$i + 4) | 0;
                  HEAP32[$head23$i$i >> 2] = $or22$i$i;
                } else {
                  $112 = HEAP32[17684 >> 2] | 0;
                  $cmp24$i$i = ($112 | 0) == ($add$ptr16$i$i | 0);
                  if ($cmp24$i$i) {
                    $113 = HEAP32[17672 >> 2] | 0;
                    $add26$i$i = ($113 + $sub18$i$i) | 0;
                    HEAP32[17672 >> 2] = $add26$i$i;
                    HEAP32[17684 >> 2] = $add$ptr17$i$i;
                    $or28$i$i = $add26$i$i | 1;
                    $head29$i$i = ($add$ptr17$i$i + 4) | 0;
                    HEAP32[$head29$i$i >> 2] = $or28$i$i;
                    $add$ptr30$i$i = ($add$ptr17$i$i + $add26$i$i) | 0;
                    HEAP32[$add$ptr30$i$i >> 2] = $add26$i$i;
                    break;
                  }
                  $head32$i$i = ($add$ptr16$i$i + 4) | 0;
                  $114 = HEAP32[$head32$i$i >> 2] | 0;
                  $and33$i$i = $114 & 3;
                  $cmp34$i$i = ($and33$i$i | 0) == 1;
                  if ($cmp34$i$i) {
                    $and37$i$i = $114 & -8;
                    $shr$i25$i = $114 >>> 3;
                    $cmp38$i$i = $114 >>> 0 < 256;
                    L246: do {
                      if ($cmp38$i$i) {
                        $fd$i$i = ($add$ptr16$i$i + 8) | 0;
                        $115 = HEAP32[$fd$i$i >> 2] | 0;
                        $bk$i26$i = ($add$ptr16$i$i + 12) | 0;
                        $116 = HEAP32[$bk$i26$i >> 2] | 0;
                        $cmp46$i$i = ($116 | 0) == ($115 | 0);
                        if ($cmp46$i$i) {
                          $shl48$i$i = 1 << $shr$i25$i;
                          $neg$i$i = $shl48$i$i ^ -1;
                          $117 = HEAP32[4416] | 0;
                          $and49$i$i = $117 & $neg$i$i;
                          HEAP32[4416] = $and49$i$i;
                          break;
                        } else {
                          $bk67$i$i = ($115 + 12) | 0;
                          HEAP32[$bk67$i$i >> 2] = $116;
                          $fd68$i$i = ($116 + 8) | 0;
                          HEAP32[$fd68$i$i >> 2] = $115;
                          break;
                        }
                      } else {
                        $parent$i27$i = ($add$ptr16$i$i + 24) | 0;
                        $118 = HEAP32[$parent$i27$i >> 2] | 0;
                        $bk74$i$i = ($add$ptr16$i$i + 12) | 0;
                        $119 = HEAP32[$bk74$i$i >> 2] | 0;
                        $cmp75$i$i = ($119 | 0) == ($add$ptr16$i$i | 0);
                        do {
                          if ($cmp75$i$i) {
                            $child$i$i = ($add$ptr16$i$i + 16) | 0;
                            $arrayidx96$i$i = ($child$i$i + 4) | 0;
                            $121 = HEAP32[$arrayidx96$i$i >> 2] | 0;
                            $cmp97$i$i = ($121 | 0) == (0 | 0);
                            if ($cmp97$i$i) {
                              $122 = HEAP32[$child$i$i >> 2] | 0;
                              $cmp100$i$i = ($122 | 0) == (0 | 0);
                              if ($cmp100$i$i) {
                                $R$3$i$i = 0;
                                break;
                              } else {
                                $R$1$i$i$ph = $122;
                                $RP$1$i$i$ph = $child$i$i;
                              }
                            } else {
                              $R$1$i$i$ph = $121;
                              $RP$1$i$i$ph = $arrayidx96$i$i;
                            }
                            $R$1$i$i = $R$1$i$i$ph;
                            $RP$1$i$i = $RP$1$i$i$ph;
                            while (1) {
                              $arrayidx103$i$i = ($R$1$i$i + 20) | 0;
                              $123 = HEAP32[$arrayidx103$i$i >> 2] | 0;
                              $cmp104$i$i = ($123 | 0) == (0 | 0);
                              if ($cmp104$i$i) {
                                $arrayidx107$i$i = ($R$1$i$i + 16) | 0;
                                $124 = HEAP32[$arrayidx107$i$i >> 2] | 0;
                                $cmp108$i$i = ($124 | 0) == (0 | 0);
                                if ($cmp108$i$i) {
                                  break;
                                } else {
                                  $R$1$i$i$be = $124;
                                  $RP$1$i$i$be = $arrayidx107$i$i;
                                }
                              } else {
                                $R$1$i$i$be = $123;
                                $RP$1$i$i$be = $arrayidx103$i$i;
                              }
                              $R$1$i$i = $R$1$i$i$be;
                              $RP$1$i$i = $RP$1$i$i$be;
                            }
                            HEAP32[$RP$1$i$i >> 2] = 0;
                            $R$3$i$i = $R$1$i$i;
                          } else {
                            $fd78$i$i = ($add$ptr16$i$i + 8) | 0;
                            $120 = HEAP32[$fd78$i$i >> 2] | 0;
                            $bk91$i$i = ($120 + 12) | 0;
                            HEAP32[$bk91$i$i >> 2] = $119;
                            $fd92$i$i = ($119 + 8) | 0;
                            HEAP32[$fd92$i$i >> 2] = $120;
                            $R$3$i$i = $119;
                          }
                        } while (0);
                        $cmp120$i28$i = ($118 | 0) == (0 | 0);
                        if ($cmp120$i28$i) {
                          break;
                        }
                        $index$i29$i = ($add$ptr16$i$i + 28) | 0;
                        $125 = HEAP32[$index$i29$i >> 2] | 0;
                        $arrayidx123$i$i = (17968 + ($125 << 2)) | 0;
                        $126 = HEAP32[$arrayidx123$i$i >> 2] | 0;
                        $cmp124$i$i = ($126 | 0) == ($add$ptr16$i$i | 0);
                        do {
                          if ($cmp124$i$i) {
                            HEAP32[$arrayidx123$i$i >> 2] = $R$3$i$i;
                            $cond1$i$i = ($R$3$i$i | 0) == (0 | 0);
                            if (!$cond1$i$i) {
                              break;
                            }
                            $shl131$i$i = 1 << $125;
                            $neg132$i$i = $shl131$i$i ^ -1;
                            $127 = HEAP32[17668 >> 2] | 0;
                            $and133$i$i = $127 & $neg132$i$i;
                            HEAP32[17668 >> 2] = $and133$i$i;
                            break L246;
                          } else {
                            $arrayidx143$i$i = ($118 + 16) | 0;
                            $128 = HEAP32[$arrayidx143$i$i >> 2] | 0;
                            $cmp144$i$i = ($128 | 0) == ($add$ptr16$i$i | 0);
                            $arrayidx151$i$i = ($118 + 20) | 0;
                            $arrayidx151$i$i$sink = $cmp144$i$i
                              ? $arrayidx143$i$i
                              : $arrayidx151$i$i;
                            HEAP32[$arrayidx151$i$i$sink >> 2] = $R$3$i$i;
                            $cmp156$i$i = ($R$3$i$i | 0) == (0 | 0);
                            if ($cmp156$i$i) {
                              break L246;
                            }
                          }
                        } while (0);
                        $parent165$i$i = ($R$3$i$i + 24) | 0;
                        HEAP32[$parent165$i$i >> 2] = $118;
                        $child166$i$i = ($add$ptr16$i$i + 16) | 0;
                        $129 = HEAP32[$child166$i$i >> 2] | 0;
                        $cmp168$i$i = ($129 | 0) == (0 | 0);
                        if (!$cmp168$i$i) {
                          $arrayidx178$i$i = ($R$3$i$i + 16) | 0;
                          HEAP32[$arrayidx178$i$i >> 2] = $129;
                          $parent179$i$i = ($129 + 24) | 0;
                          HEAP32[$parent179$i$i >> 2] = $R$3$i$i;
                        }
                        $arrayidx184$i$i = ($child166$i$i + 4) | 0;
                        $130 = HEAP32[$arrayidx184$i$i >> 2] | 0;
                        $cmp185$i$i = ($130 | 0) == (0 | 0);
                        if ($cmp185$i$i) {
                          break;
                        }
                        $arrayidx195$i$i = ($R$3$i$i + 20) | 0;
                        HEAP32[$arrayidx195$i$i >> 2] = $130;
                        $parent196$i$i = ($130 + 24) | 0;
                        HEAP32[$parent196$i$i >> 2] = $R$3$i$i;
                      }
                    } while (0);
                    $add$ptr205$i$i = ($add$ptr16$i$i + $and37$i$i) | 0;
                    $add206$i$i = ($and37$i$i + $sub18$i$i) | 0;
                    $oldfirst$0$i$i = $add$ptr205$i$i;
                    $qsize$0$i$i = $add206$i$i;
                  } else {
                    $oldfirst$0$i$i = $add$ptr16$i$i;
                    $qsize$0$i$i = $sub18$i$i;
                  }
                  $head208$i$i = ($oldfirst$0$i$i + 4) | 0;
                  $131 = HEAP32[$head208$i$i >> 2] | 0;
                  $and209$i$i = $131 & -2;
                  HEAP32[$head208$i$i >> 2] = $and209$i$i;
                  $or210$i$i = $qsize$0$i$i | 1;
                  $head211$i$i = ($add$ptr17$i$i + 4) | 0;
                  HEAP32[$head211$i$i >> 2] = $or210$i$i;
                  $add$ptr212$i$i = ($add$ptr17$i$i + $qsize$0$i$i) | 0;
                  HEAP32[$add$ptr212$i$i >> 2] = $qsize$0$i$i;
                  $shr214$i$i = $qsize$0$i$i >>> 3;
                  $cmp215$i$i = $qsize$0$i$i >>> 0 < 256;
                  if ($cmp215$i$i) {
                    $shl222$i$i = $shr214$i$i << 1;
                    $arrayidx223$i$i = (17704 + ($shl222$i$i << 2)) | 0;
                    $132 = HEAP32[4416] | 0;
                    $shl226$i$i = 1 << $shr214$i$i;
                    $and227$i$i = $132 & $shl226$i$i;
                    $tobool228$i$i = ($and227$i$i | 0) == 0;
                    if ($tobool228$i$i) {
                      $or232$i$i = $132 | $shl226$i$i;
                      HEAP32[4416] = $or232$i$i;
                      $$pre$i31$i = ($arrayidx223$i$i + 8) | 0;
                      $$pre$phi$i32$iZ2D = $$pre$i31$i;
                      $F224$0$i$i = $arrayidx223$i$i;
                    } else {
                      $133 = ($arrayidx223$i$i + 8) | 0;
                      $134 = HEAP32[$133 >> 2] | 0;
                      $$pre$phi$i32$iZ2D = $133;
                      $F224$0$i$i = $134;
                    }
                    HEAP32[$$pre$phi$i32$iZ2D >> 2] = $add$ptr17$i$i;
                    $bk246$i$i = ($F224$0$i$i + 12) | 0;
                    HEAP32[$bk246$i$i >> 2] = $add$ptr17$i$i;
                    $fd247$i$i = ($add$ptr17$i$i + 8) | 0;
                    HEAP32[$fd247$i$i >> 2] = $F224$0$i$i;
                    $bk248$i$i = ($add$ptr17$i$i + 12) | 0;
                    HEAP32[$bk248$i$i >> 2] = $arrayidx223$i$i;
                    break;
                  }
                  $shr253$i$i = $qsize$0$i$i >>> 8;
                  $cmp254$i$i = ($shr253$i$i | 0) == 0;
                  do {
                    if ($cmp254$i$i) {
                      $I252$0$i$i = 0;
                    } else {
                      $cmp258$i$i = $qsize$0$i$i >>> 0 > 16777215;
                      if ($cmp258$i$i) {
                        $I252$0$i$i = 31;
                        break;
                      }
                      $sub262$i$i = ($shr253$i$i + 1048320) | 0;
                      $shr263$i$i = $sub262$i$i >>> 16;
                      $and264$i$i = $shr263$i$i & 8;
                      $shl265$i$i = $shr253$i$i << $and264$i$i;
                      $sub266$i$i = ($shl265$i$i + 520192) | 0;
                      $shr267$i$i = $sub266$i$i >>> 16;
                      $and268$i$i = $shr267$i$i & 4;
                      $add269$i$i = $and268$i$i | $and264$i$i;
                      $shl270$i$i = $shl265$i$i << $and268$i$i;
                      $sub271$i$i = ($shl270$i$i + 245760) | 0;
                      $shr272$i$i = $sub271$i$i >>> 16;
                      $and273$i$i = $shr272$i$i & 2;
                      $add274$i$i = $add269$i$i | $and273$i$i;
                      $sub275$i$i = (14 - $add274$i$i) | 0;
                      $shl276$i$i = $shl270$i$i << $and273$i$i;
                      $shr277$i$i = $shl276$i$i >>> 15;
                      $add278$i$i = ($sub275$i$i + $shr277$i$i) | 0;
                      $shl279$i$i = $add278$i$i << 1;
                      $add280$i$i = ($add278$i$i + 7) | 0;
                      $shr281$i$i = $qsize$0$i$i >>> $add280$i$i;
                      $and282$i$i = $shr281$i$i & 1;
                      $add283$i$i = $and282$i$i | $shl279$i$i;
                      $I252$0$i$i = $add283$i$i;
                    }
                  } while (0);
                  $arrayidx287$i$i = (17968 + ($I252$0$i$i << 2)) | 0;
                  $index288$i$i = ($add$ptr17$i$i + 28) | 0;
                  HEAP32[$index288$i$i >> 2] = $I252$0$i$i;
                  $child289$i$i = ($add$ptr17$i$i + 16) | 0;
                  $arrayidx290$i$i = ($child289$i$i + 4) | 0;
                  HEAP32[$arrayidx290$i$i >> 2] = 0;
                  HEAP32[$child289$i$i >> 2] = 0;
                  $135 = HEAP32[17668 >> 2] | 0;
                  $shl294$i$i = 1 << $I252$0$i$i;
                  $and295$i$i = $135 & $shl294$i$i;
                  $tobool296$i$i = ($and295$i$i | 0) == 0;
                  if ($tobool296$i$i) {
                    $or300$i$i = $135 | $shl294$i$i;
                    HEAP32[17668 >> 2] = $or300$i$i;
                    HEAP32[$arrayidx287$i$i >> 2] = $add$ptr17$i$i;
                    $parent301$i$i = ($add$ptr17$i$i + 24) | 0;
                    HEAP32[$parent301$i$i >> 2] = $arrayidx287$i$i;
                    $bk302$i$i = ($add$ptr17$i$i + 12) | 0;
                    HEAP32[$bk302$i$i >> 2] = $add$ptr17$i$i;
                    $fd303$i$i = ($add$ptr17$i$i + 8) | 0;
                    HEAP32[$fd303$i$i >> 2] = $add$ptr17$i$i;
                    break;
                  }
                  $136 = HEAP32[$arrayidx287$i$i >> 2] | 0;
                  $head3174$i$i = ($136 + 4) | 0;
                  $137 = HEAP32[$head3174$i$i >> 2] | 0;
                  $and3185$i$i = $137 & -8;
                  $cmp3196$i$i = ($and3185$i$i | 0) == ($qsize$0$i$i | 0);
                  L291: do {
                    if ($cmp3196$i$i) {
                      $T$0$lcssa$i34$i = $136;
                    } else {
                      $cmp306$i$i = ($I252$0$i$i | 0) == 31;
                      $shr310$i$i = $I252$0$i$i >>> 1;
                      $sub313$i$i = (25 - $shr310$i$i) | 0;
                      $cond315$i$i = $cmp306$i$i ? 0 : $sub313$i$i;
                      $shl316$i$i = $qsize$0$i$i << $cond315$i$i;
                      $K305$08$i$i = $shl316$i$i;
                      $T$07$i$i = $136;
                      while (1) {
                        $shr323$i$i = $K305$08$i$i >>> 31;
                        $arrayidx325$i$i =
                          ((($T$07$i$i + 16) | 0) + ($shr323$i$i << 2)) | 0;
                        $138 = HEAP32[$arrayidx325$i$i >> 2] | 0;
                        $cmp327$i$i = ($138 | 0) == (0 | 0);
                        if ($cmp327$i$i) {
                          break;
                        }
                        $shl326$i$i = $K305$08$i$i << 1;
                        $head317$i$i = ($138 + 4) | 0;
                        $139 = HEAP32[$head317$i$i >> 2] | 0;
                        $and318$i$i = $139 & -8;
                        $cmp319$i$i = ($and318$i$i | 0) == ($qsize$0$i$i | 0);
                        if ($cmp319$i$i) {
                          $T$0$lcssa$i34$i = $138;
                          break L291;
                        } else {
                          $K305$08$i$i = $shl326$i$i;
                          $T$07$i$i = $138;
                        }
                      }
                      HEAP32[$arrayidx325$i$i >> 2] = $add$ptr17$i$i;
                      $parent337$i$i = ($add$ptr17$i$i + 24) | 0;
                      HEAP32[$parent337$i$i >> 2] = $T$07$i$i;
                      $bk338$i$i = ($add$ptr17$i$i + 12) | 0;
                      HEAP32[$bk338$i$i >> 2] = $add$ptr17$i$i;
                      $fd339$i$i = ($add$ptr17$i$i + 8) | 0;
                      HEAP32[$fd339$i$i >> 2] = $add$ptr17$i$i;
                      break L238;
                    }
                  } while (0);
                  $fd344$i$i = ($T$0$lcssa$i34$i + 8) | 0;
                  $140 = HEAP32[$fd344$i$i >> 2] | 0;
                  $bk357$i$i = ($140 + 12) | 0;
                  HEAP32[$bk357$i$i >> 2] = $add$ptr17$i$i;
                  HEAP32[$fd344$i$i >> 2] = $add$ptr17$i$i;
                  $fd359$i$i = ($add$ptr17$i$i + 8) | 0;
                  HEAP32[$fd359$i$i >> 2] = $140;
                  $bk360$i$i = ($add$ptr17$i$i + 12) | 0;
                  HEAP32[$bk360$i$i >> 2] = $T$0$lcssa$i34$i;
                  $parent361$i$i = ($add$ptr17$i$i + 24) | 0;
                  HEAP32[$parent361$i$i >> 2] = 0;
                }
              } while (0);
              $add$ptr369$i$i = ($add$ptr4$i$i + 8) | 0;
              $retval$0 = $add$ptr369$i$i;
              STACKTOP = sp;
              return $retval$0 | 0;
            }
          }
          $sp$0$i$i$i = 18112;
          while (1) {
            $141 = HEAP32[$sp$0$i$i$i >> 2] | 0;
            $cmp$i$i$i = $141 >>> 0 > $92 >>> 0;
            if (!$cmp$i$i$i) {
              $size$i$i$i = ($sp$0$i$i$i + 4) | 0;
              $142 = HEAP32[$size$i$i$i >> 2] | 0;
              $add$ptr$i$i$i = ($141 + $142) | 0;
              $cmp2$i$i$i = $add$ptr$i$i$i >>> 0 > $92 >>> 0;
              if ($cmp2$i$i$i) {
                break;
              }
            }
            $next$i$i$i = ($sp$0$i$i$i + 8) | 0;
            $143 = HEAP32[$next$i$i$i >> 2] | 0;
            $sp$0$i$i$i = $143;
          }
          $add$ptr2$i$i = ($add$ptr$i$i$i + -47) | 0;
          $add$ptr3$i$i = ($add$ptr2$i$i + 8) | 0;
          $144 = $add$ptr3$i$i;
          $and$i$i = $144 & 7;
          $cmp$i12$i = ($and$i$i | 0) == 0;
          $sub$i$i = (0 - $144) | 0;
          $and6$i13$i = $sub$i$i & 7;
          $cond$i$i = $cmp$i12$i ? 0 : $and6$i13$i;
          $add$ptr7$i$i = ($add$ptr2$i$i + $cond$i$i) | 0;
          $add$ptr81$i$i = ($92 + 16) | 0;
          $cmp9$i$i = $add$ptr7$i$i >>> 0 < $add$ptr81$i$i >>> 0;
          $cond13$i$i = $cmp9$i$i ? $92 : $add$ptr7$i$i;
          $add$ptr14$i$i = ($cond13$i$i + 8) | 0;
          $add$ptr15$i$i = ($cond13$i$i + 24) | 0;
          $sub16$i$i = ($tsize$794$i + -40) | 0;
          $add$ptr$i2$i$i = ($tbase$795$i + 8) | 0;
          $145 = $add$ptr$i2$i$i;
          $and$i$i$i = $145 & 7;
          $cmp$i3$i$i = ($and$i$i$i | 0) == 0;
          $sub$i$i$i = (0 - $145) | 0;
          $and3$i$i$i = $sub$i$i$i & 7;
          $cond$i$i$i = $cmp$i3$i$i ? 0 : $and3$i$i$i;
          $add$ptr4$i$i$i = ($tbase$795$i + $cond$i$i$i) | 0;
          $sub5$i$i$i = ($sub16$i$i - $cond$i$i$i) | 0;
          HEAP32[17688 >> 2] = $add$ptr4$i$i$i;
          HEAP32[17676 >> 2] = $sub5$i$i$i;
          $or$i$i$i = $sub5$i$i$i | 1;
          $head$i$i$i = ($add$ptr4$i$i$i + 4) | 0;
          HEAP32[$head$i$i$i >> 2] = $or$i$i$i;
          $add$ptr6$i$i$i = ($tbase$795$i + $sub16$i$i) | 0;
          $head7$i$i$i = ($add$ptr6$i$i$i + 4) | 0;
          HEAP32[$head7$i$i$i >> 2] = 40;
          $146 = HEAP32[18152 >> 2] | 0;
          HEAP32[17692 >> 2] = $146;
          $head$i$i = ($cond13$i$i + 4) | 0;
          HEAP32[$head$i$i >> 2] = 27;
          HEAP32[$add$ptr14$i$i >> 2] = HEAP32[18112 >> 2] | 0;
          HEAP32[($add$ptr14$i$i + 4) >> 2] = HEAP32[(18112 + 4) >> 2] | 0;
          HEAP32[($add$ptr14$i$i + 8) >> 2] = HEAP32[(18112 + 8) >> 2] | 0;
          HEAP32[($add$ptr14$i$i + 12) >> 2] = HEAP32[(18112 + 12) >> 2] | 0;
          HEAP32[18112 >> 2] = $tbase$795$i;
          HEAP32[18116 >> 2] = $tsize$794$i;
          HEAP32[18124 >> 2] = 0;
          HEAP32[18120 >> 2] = $add$ptr14$i$i;
          $147 = $add$ptr15$i$i;
          while (1) {
            $add$ptr24$i$i = ($147 + 4) | 0;
            HEAP32[$add$ptr24$i$i >> 2] = 7;
            $head26$i$i = ($147 + 8) | 0;
            $cmp27$i$i = $head26$i$i >>> 0 < $add$ptr$i$i$i >>> 0;
            if ($cmp27$i$i) {
              $147 = $add$ptr24$i$i;
            } else {
              break;
            }
          }
          $cmp28$i$i = ($cond13$i$i | 0) == ($92 | 0);
          if (!$cmp28$i$i) {
            $sub$ptr$lhs$cast$i$i = $cond13$i$i;
            $sub$ptr$rhs$cast$i$i = $92;
            $sub$ptr$sub$i$i =
              ($sub$ptr$lhs$cast$i$i - $sub$ptr$rhs$cast$i$i) | 0;
            $148 = HEAP32[$head$i$i >> 2] | 0;
            $and32$i$i = $148 & -2;
            HEAP32[$head$i$i >> 2] = $and32$i$i;
            $or33$i$i = $sub$ptr$sub$i$i | 1;
            $head34$i$i = ($92 + 4) | 0;
            HEAP32[$head34$i$i >> 2] = $or33$i$i;
            HEAP32[$cond13$i$i >> 2] = $sub$ptr$sub$i$i;
            $shr$i$i = $sub$ptr$sub$i$i >>> 3;
            $cmp36$i$i = $sub$ptr$sub$i$i >>> 0 < 256;
            if ($cmp36$i$i) {
              $shl$i$i = $shr$i$i << 1;
              $arrayidx$i$i = (17704 + ($shl$i$i << 2)) | 0;
              $149 = HEAP32[4416] | 0;
              $shl39$i$i = 1 << $shr$i$i;
              $and40$i$i = $149 & $shl39$i$i;
              $tobool$i$i = ($and40$i$i | 0) == 0;
              if ($tobool$i$i) {
                $or44$i$i = $149 | $shl39$i$i;
                HEAP32[4416] = $or44$i$i;
                $$pre$i$i = ($arrayidx$i$i + 8) | 0;
                $$pre$phi$i$iZ2D = $$pre$i$i;
                $F$0$i$i = $arrayidx$i$i;
              } else {
                $150 = ($arrayidx$i$i + 8) | 0;
                $151 = HEAP32[$150 >> 2] | 0;
                $$pre$phi$i$iZ2D = $150;
                $F$0$i$i = $151;
              }
              HEAP32[$$pre$phi$i$iZ2D >> 2] = $92;
              $bk$i$i = ($F$0$i$i + 12) | 0;
              HEAP32[$bk$i$i >> 2] = $92;
              $fd54$i$i = ($92 + 8) | 0;
              HEAP32[$fd54$i$i >> 2] = $F$0$i$i;
              $bk55$i$i = ($92 + 12) | 0;
              HEAP32[$bk55$i$i >> 2] = $arrayidx$i$i;
              break;
            }
            $shr58$i$i = $sub$ptr$sub$i$i >>> 8;
            $cmp59$i$i = ($shr58$i$i | 0) == 0;
            if ($cmp59$i$i) {
              $I57$0$i$i = 0;
            } else {
              $cmp63$i$i = $sub$ptr$sub$i$i >>> 0 > 16777215;
              if ($cmp63$i$i) {
                $I57$0$i$i = 31;
              } else {
                $sub67$i$i = ($shr58$i$i + 1048320) | 0;
                $shr68$i$i = $sub67$i$i >>> 16;
                $and69$i$i = $shr68$i$i & 8;
                $shl70$i$i = $shr58$i$i << $and69$i$i;
                $sub71$i$i = ($shl70$i$i + 520192) | 0;
                $shr72$i$i = $sub71$i$i >>> 16;
                $and73$i$i = $shr72$i$i & 4;
                $add74$i$i = $and73$i$i | $and69$i$i;
                $shl75$i$i = $shl70$i$i << $and73$i$i;
                $sub76$i$i = ($shl75$i$i + 245760) | 0;
                $shr77$i$i = $sub76$i$i >>> 16;
                $and78$i$i = $shr77$i$i & 2;
                $add79$i$i = $add74$i$i | $and78$i$i;
                $sub80$i$i = (14 - $add79$i$i) | 0;
                $shl81$i$i = $shl75$i$i << $and78$i$i;
                $shr82$i$i = $shl81$i$i >>> 15;
                $add83$i$i = ($sub80$i$i + $shr82$i$i) | 0;
                $shl84$i$i = $add83$i$i << 1;
                $add85$i$i = ($add83$i$i + 7) | 0;
                $shr86$i$i = $sub$ptr$sub$i$i >>> $add85$i$i;
                $and87$i$i = $shr86$i$i & 1;
                $add88$i$i = $and87$i$i | $shl84$i$i;
                $I57$0$i$i = $add88$i$i;
              }
            }
            $arrayidx91$i$i = (17968 + ($I57$0$i$i << 2)) | 0;
            $index$i$i = ($92 + 28) | 0;
            HEAP32[$index$i$i >> 2] = $I57$0$i$i;
            $arrayidx92$i$i = ($92 + 20) | 0;
            HEAP32[$arrayidx92$i$i >> 2] = 0;
            HEAP32[$add$ptr81$i$i >> 2] = 0;
            $152 = HEAP32[17668 >> 2] | 0;
            $shl95$i$i = 1 << $I57$0$i$i;
            $and96$i$i = $152 & $shl95$i$i;
            $tobool97$i$i = ($and96$i$i | 0) == 0;
            if ($tobool97$i$i) {
              $or101$i$i = $152 | $shl95$i$i;
              HEAP32[17668 >> 2] = $or101$i$i;
              HEAP32[$arrayidx91$i$i >> 2] = $92;
              $parent$i$i = ($92 + 24) | 0;
              HEAP32[$parent$i$i >> 2] = $arrayidx91$i$i;
              $bk102$i$i = ($92 + 12) | 0;
              HEAP32[$bk102$i$i >> 2] = $92;
              $fd103$i$i = ($92 + 8) | 0;
              HEAP32[$fd103$i$i >> 2] = $92;
              break;
            }
            $153 = HEAP32[$arrayidx91$i$i >> 2] | 0;
            $head1186$i$i = ($153 + 4) | 0;
            $154 = HEAP32[$head1186$i$i >> 2] | 0;
            $and1197$i$i = $154 & -8;
            $cmp1208$i$i = ($and1197$i$i | 0) == ($sub$ptr$sub$i$i | 0);
            L325: do {
              if ($cmp1208$i$i) {
                $T$0$lcssa$i$i = $153;
              } else {
                $cmp106$i$i = ($I57$0$i$i | 0) == 31;
                $shr110$i$i = $I57$0$i$i >>> 1;
                $sub113$i$i = (25 - $shr110$i$i) | 0;
                $cond115$i$i = $cmp106$i$i ? 0 : $sub113$i$i;
                $shl116$i$i = $sub$ptr$sub$i$i << $cond115$i$i;
                $K105$010$i$i = $shl116$i$i;
                $T$09$i$i = $153;
                while (1) {
                  $shr124$i$i = $K105$010$i$i >>> 31;
                  $arrayidx126$i$i =
                    ((($T$09$i$i + 16) | 0) + ($shr124$i$i << 2)) | 0;
                  $155 = HEAP32[$arrayidx126$i$i >> 2] | 0;
                  $cmp128$i$i = ($155 | 0) == (0 | 0);
                  if ($cmp128$i$i) {
                    break;
                  }
                  $shl127$i$i = $K105$010$i$i << 1;
                  $head118$i$i = ($155 + 4) | 0;
                  $156 = HEAP32[$head118$i$i >> 2] | 0;
                  $and119$i$i = $156 & -8;
                  $cmp120$i$i = ($and119$i$i | 0) == ($sub$ptr$sub$i$i | 0);
                  if ($cmp120$i$i) {
                    $T$0$lcssa$i$i = $155;
                    break L325;
                  } else {
                    $K105$010$i$i = $shl127$i$i;
                    $T$09$i$i = $155;
                  }
                }
                HEAP32[$arrayidx126$i$i >> 2] = $92;
                $parent138$i$i = ($92 + 24) | 0;
                HEAP32[$parent138$i$i >> 2] = $T$09$i$i;
                $bk139$i$i = ($92 + 12) | 0;
                HEAP32[$bk139$i$i >> 2] = $92;
                $fd140$i$i = ($92 + 8) | 0;
                HEAP32[$fd140$i$i >> 2] = $92;
                break L215;
              }
            } while (0);
            $fd148$i$i = ($T$0$lcssa$i$i + 8) | 0;
            $157 = HEAP32[$fd148$i$i >> 2] | 0;
            $bk158$i$i = ($157 + 12) | 0;
            HEAP32[$bk158$i$i >> 2] = $92;
            HEAP32[$fd148$i$i >> 2] = $92;
            $fd160$i$i = ($92 + 8) | 0;
            HEAP32[$fd160$i$i >> 2] = $157;
            $bk161$i$i = ($92 + 12) | 0;
            HEAP32[$bk161$i$i >> 2] = $T$0$lcssa$i$i;
            $parent162$i$i = ($92 + 24) | 0;
            HEAP32[$parent162$i$i >> 2] = 0;
          }
        }
      } while (0);
      $158 = HEAP32[17676 >> 2] | 0;
      $cmp257$i = $158 >>> 0 > $nb$0 >>> 0;
      if ($cmp257$i) {
        $sub260$i = ($158 - $nb$0) | 0;
        HEAP32[17676 >> 2] = $sub260$i;
        $159 = HEAP32[17688 >> 2] | 0;
        $add$ptr262$i = ($159 + $nb$0) | 0;
        HEAP32[17688 >> 2] = $add$ptr262$i;
        $or264$i = $sub260$i | 1;
        $head265$i = ($add$ptr262$i + 4) | 0;
        HEAP32[$head265$i >> 2] = $or264$i;
        $or267$i = $nb$0 | 3;
        $head268$i = ($159 + 4) | 0;
        HEAP32[$head268$i >> 2] = $or267$i;
        $add$ptr269$i = ($159 + 8) | 0;
        $retval$0 = $add$ptr269$i;
        STACKTOP = sp;
        return $retval$0 | 0;
      }
    }
    $call275$i = ___errno_location() | 0;
    HEAP32[$call275$i >> 2] = 12;
    $retval$0 = 0;
    STACKTOP = sp;
    return $retval$0 | 0;
  }
  function _free($mem) {
    $mem = $mem | 0;
    var $$pre = 0,
      $$pre$phiZ2D = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0,
      $23 = 0,
      $24 = 0;
    var $25 = 0,
      $26 = 0,
      $27 = 0,
      $28 = 0,
      $29 = 0,
      $3 = 0,
      $30 = 0,
      $31 = 0,
      $32 = 0,
      $33 = 0,
      $34 = 0,
      $35 = 0,
      $36 = 0,
      $37 = 0,
      $38 = 0,
      $39 = 0,
      $4 = 0,
      $40 = 0,
      $41 = 0,
      $42 = 0;
    var $43 = 0,
      $44 = 0,
      $45 = 0,
      $46 = 0,
      $47 = 0,
      $48 = 0,
      $49 = 0,
      $5 = 0,
      $50 = 0,
      $51 = 0,
      $52 = 0,
      $53 = 0,
      $54 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $F510$0 = 0,
      $I534$0 = 0,
      $K583$0266 = 0;
    var $R$1 = 0,
      $R$1$be = 0,
      $R$1$ph = 0,
      $R$3 = 0,
      $R332$1 = 0,
      $R332$1$be = 0,
      $R332$1$ph = 0,
      $R332$3 = 0,
      $RP$1 = 0,
      $RP$1$be = 0,
      $RP$1$ph = 0,
      $RP360$1 = 0,
      $RP360$1$be = 0,
      $RP360$1$ph = 0,
      $T$0$lcssa = 0,
      $T$0265 = 0,
      $add$ptr = 0,
      $add$ptr16 = 0,
      $add$ptr217 = 0,
      $add$ptr261 = 0;
    var $add$ptr482 = 0,
      $add$ptr498 = 0,
      $add$ptr6 = 0,
      $add17 = 0,
      $add246 = 0,
      $add258 = 0,
      $add267 = 0,
      $add550 = 0,
      $add555 = 0,
      $add559 = 0,
      $add561 = 0,
      $add564 = 0,
      $and12 = 0,
      $and140 = 0,
      $and210 = 0,
      $and215 = 0,
      $and232 = 0,
      $and240 = 0,
      $and266 = 0,
      $and301 = 0;
    var $and410 = 0,
      $and46 = 0,
      $and495 = 0,
      $and5 = 0,
      $and512 = 0,
      $and545 = 0,
      $and549 = 0,
      $and554 = 0,
      $and563 = 0,
      $and574 = 0,
      $and592 = 0,
      $and592263 = 0,
      $and8 = 0,
      $arrayidx108 = 0,
      $arrayidx113 = 0,
      $arrayidx130 = 0,
      $arrayidx149 = 0,
      $arrayidx157 = 0,
      $arrayidx157$sink = 0,
      $arrayidx182 = 0;
    var $arrayidx188 = 0,
      $arrayidx198 = 0,
      $arrayidx362 = 0,
      $arrayidx374 = 0,
      $arrayidx379 = 0,
      $arrayidx400 = 0,
      $arrayidx419 = 0,
      $arrayidx427 = 0,
      $arrayidx427$sink = 0,
      $arrayidx454 = 0,
      $arrayidx460 = 0,
      $arrayidx470 = 0,
      $arrayidx509 = 0,
      $arrayidx567 = 0,
      $arrayidx570 = 0,
      $arrayidx599 = 0,
      $arrayidx99 = 0,
      $bk = 0,
      $bk275 = 0,
      $bk321 = 0;
    var $bk333 = 0,
      $bk355 = 0,
      $bk529 = 0,
      $bk531 = 0,
      $bk580 = 0,
      $bk611 = 0,
      $bk631 = 0,
      $bk634 = 0,
      $bk66 = 0,
      $bk73 = 0,
      $bk94 = 0,
      $child = 0,
      $child171 = 0,
      $child361 = 0,
      $child443 = 0,
      $child569 = 0,
      $cmp = 0,
      $cmp$i = 0,
      $cmp100 = 0,
      $cmp104 = 0;
    var $cmp109 = 0,
      $cmp114 = 0,
      $cmp127 = 0,
      $cmp13 = 0,
      $cmp131 = 0,
      $cmp150 = 0,
      $cmp162 = 0,
      $cmp173 = 0,
      $cmp18 = 0,
      $cmp189 = 0,
      $cmp211 = 0,
      $cmp22 = 0,
      $cmp228 = 0,
      $cmp243 = 0,
      $cmp249 = 0,
      $cmp25 = 0,
      $cmp255 = 0,
      $cmp269 = 0,
      $cmp296 = 0,
      $cmp334 = 0;
    var $cmp363 = 0,
      $cmp368 = 0,
      $cmp375 = 0,
      $cmp380 = 0,
      $cmp395 = 0,
      $cmp401 = 0,
      $cmp42 = 0,
      $cmp420 = 0,
      $cmp432 = 0,
      $cmp445 = 0,
      $cmp461 = 0,
      $cmp484 = 0,
      $cmp502 = 0,
      $cmp536 = 0,
      $cmp540 = 0,
      $cmp584 = 0,
      $cmp593 = 0,
      $cmp593264 = 0,
      $cmp601 = 0,
      $cmp640 = 0;
    var $cmp74 = 0,
      $cond = 0,
      $cond254 = 0,
      $cond255 = 0,
      $dec = 0,
      $fd = 0,
      $fd273 = 0,
      $fd322 = 0,
      $fd338 = 0,
      $fd356 = 0,
      $fd530 = 0,
      $fd581 = 0,
      $fd612 = 0,
      $fd620 = 0,
      $fd633 = 0,
      $fd67 = 0,
      $fd78 = 0,
      $fd95 = 0,
      $head209 = 0,
      $head216 = 0;
    var $head231 = 0,
      $head248 = 0,
      $head260 = 0,
      $head4 = 0,
      $head481 = 0,
      $head497 = 0,
      $head591 = 0,
      $head591262 = 0,
      $idx$neg = 0,
      $index = 0,
      $index399 = 0,
      $index568 = 0,
      $neg = 0,
      $neg139 = 0,
      $neg300 = 0,
      $neg409 = 0,
      $next4$i = 0,
      $or = 0,
      $or247 = 0,
      $or259 = 0;
    var $or480 = 0,
      $or496 = 0,
      $or516 = 0,
      $or578 = 0,
      $p$1 = 0,
      $parent = 0,
      $parent170 = 0,
      $parent183 = 0,
      $parent199 = 0,
      $parent331 = 0,
      $parent442 = 0,
      $parent455 = 0,
      $parent471 = 0,
      $parent579 = 0,
      $parent610 = 0,
      $parent635 = 0,
      $psize$1 = 0,
      $psize$2 = 0,
      $shl138 = 0,
      $shl299 = 0;
    var $shl408 = 0,
      $shl45 = 0,
      $shl508 = 0,
      $shl511 = 0,
      $shl546 = 0,
      $shl551 = 0,
      $shl557 = 0,
      $shl560 = 0,
      $shl573 = 0,
      $shl590 = 0,
      $shl600 = 0,
      $shr = 0,
      $shr268 = 0,
      $shr501 = 0,
      $shr535 = 0,
      $shr544 = 0,
      $shr548 = 0,
      $shr553 = 0,
      $shr558 = 0,
      $shr562 = 0;
    var $shr586 = 0,
      $shr597 = 0,
      $sp$0$i = 0,
      $sp$0$in$i = 0,
      $sub = 0,
      $sub547 = 0,
      $sub552 = 0,
      $sub556 = 0,
      $sub589 = 0,
      $tobool233 = 0,
      $tobool241 = 0,
      $tobool513 = 0,
      $tobool575 = 0,
      $tobool9 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $cmp = ($mem | 0) == (0 | 0);
    if ($cmp) {
      return;
    }
    $add$ptr = ($mem + -8) | 0;
    $0 = HEAP32[17680 >> 2] | 0;
    $head4 = ($mem + -4) | 0;
    $1 = HEAP32[$head4 >> 2] | 0;
    $and5 = $1 & -8;
    $add$ptr6 = ($add$ptr + $and5) | 0;
    $and8 = $1 & 1;
    $tobool9 = ($and8 | 0) == 0;
    do {
      if ($tobool9) {
        $2 = HEAP32[$add$ptr >> 2] | 0;
        $and12 = $1 & 3;
        $cmp13 = ($and12 | 0) == 0;
        if ($cmp13) {
          return;
        }
        $idx$neg = (0 - $2) | 0;
        $add$ptr16 = ($add$ptr + $idx$neg) | 0;
        $add17 = ($2 + $and5) | 0;
        $cmp18 = $add$ptr16 >>> 0 < $0 >>> 0;
        if ($cmp18) {
          return;
        }
        $3 = HEAP32[17684 >> 2] | 0;
        $cmp22 = ($3 | 0) == ($add$ptr16 | 0);
        if ($cmp22) {
          $head209 = ($add$ptr6 + 4) | 0;
          $20 = HEAP32[$head209 >> 2] | 0;
          $and210 = $20 & 3;
          $cmp211 = ($and210 | 0) == 3;
          if (!$cmp211) {
            $21 = $add$ptr16;
            $p$1 = $add$ptr16;
            $psize$1 = $add17;
            break;
          }
          $add$ptr217 = ($add$ptr16 + $add17) | 0;
          $head216 = ($add$ptr16 + 4) | 0;
          $or = $add17 | 1;
          $and215 = $20 & -2;
          HEAP32[17672 >> 2] = $add17;
          HEAP32[$head209 >> 2] = $and215;
          HEAP32[$head216 >> 2] = $or;
          HEAP32[$add$ptr217 >> 2] = $add17;
          return;
        }
        $shr = $2 >>> 3;
        $cmp25 = $2 >>> 0 < 256;
        if ($cmp25) {
          $fd = ($add$ptr16 + 8) | 0;
          $4 = HEAP32[$fd >> 2] | 0;
          $bk = ($add$ptr16 + 12) | 0;
          $5 = HEAP32[$bk >> 2] | 0;
          $cmp42 = ($5 | 0) == ($4 | 0);
          if ($cmp42) {
            $shl45 = 1 << $shr;
            $neg = $shl45 ^ -1;
            $6 = HEAP32[4416] | 0;
            $and46 = $6 & $neg;
            HEAP32[4416] = $and46;
            $21 = $add$ptr16;
            $p$1 = $add$ptr16;
            $psize$1 = $add17;
            break;
          } else {
            $bk66 = ($4 + 12) | 0;
            HEAP32[$bk66 >> 2] = $5;
            $fd67 = ($5 + 8) | 0;
            HEAP32[$fd67 >> 2] = $4;
            $21 = $add$ptr16;
            $p$1 = $add$ptr16;
            $psize$1 = $add17;
            break;
          }
        }
        $parent = ($add$ptr16 + 24) | 0;
        $7 = HEAP32[$parent >> 2] | 0;
        $bk73 = ($add$ptr16 + 12) | 0;
        $8 = HEAP32[$bk73 >> 2] | 0;
        $cmp74 = ($8 | 0) == ($add$ptr16 | 0);
        do {
          if ($cmp74) {
            $child = ($add$ptr16 + 16) | 0;
            $arrayidx99 = ($child + 4) | 0;
            $10 = HEAP32[$arrayidx99 >> 2] | 0;
            $cmp100 = ($10 | 0) == (0 | 0);
            if ($cmp100) {
              $11 = HEAP32[$child >> 2] | 0;
              $cmp104 = ($11 | 0) == (0 | 0);
              if ($cmp104) {
                $R$3 = 0;
                break;
              } else {
                $R$1$ph = $11;
                $RP$1$ph = $child;
              }
            } else {
              $R$1$ph = $10;
              $RP$1$ph = $arrayidx99;
            }
            $R$1 = $R$1$ph;
            $RP$1 = $RP$1$ph;
            while (1) {
              $arrayidx108 = ($R$1 + 20) | 0;
              $12 = HEAP32[$arrayidx108 >> 2] | 0;
              $cmp109 = ($12 | 0) == (0 | 0);
              if ($cmp109) {
                $arrayidx113 = ($R$1 + 16) | 0;
                $13 = HEAP32[$arrayidx113 >> 2] | 0;
                $cmp114 = ($13 | 0) == (0 | 0);
                if ($cmp114) {
                  break;
                } else {
                  $R$1$be = $13;
                  $RP$1$be = $arrayidx113;
                }
              } else {
                $R$1$be = $12;
                $RP$1$be = $arrayidx108;
              }
              $R$1 = $R$1$be;
              $RP$1 = $RP$1$be;
            }
            HEAP32[$RP$1 >> 2] = 0;
            $R$3 = $R$1;
          } else {
            $fd78 = ($add$ptr16 + 8) | 0;
            $9 = HEAP32[$fd78 >> 2] | 0;
            $bk94 = ($9 + 12) | 0;
            HEAP32[$bk94 >> 2] = $8;
            $fd95 = ($8 + 8) | 0;
            HEAP32[$fd95 >> 2] = $9;
            $R$3 = $8;
          }
        } while (0);
        $cmp127 = ($7 | 0) == (0 | 0);
        if ($cmp127) {
          $21 = $add$ptr16;
          $p$1 = $add$ptr16;
          $psize$1 = $add17;
        } else {
          $index = ($add$ptr16 + 28) | 0;
          $14 = HEAP32[$index >> 2] | 0;
          $arrayidx130 = (17968 + ($14 << 2)) | 0;
          $15 = HEAP32[$arrayidx130 >> 2] | 0;
          $cmp131 = ($15 | 0) == ($add$ptr16 | 0);
          if ($cmp131) {
            HEAP32[$arrayidx130 >> 2] = $R$3;
            $cond254 = ($R$3 | 0) == (0 | 0);
            if ($cond254) {
              $shl138 = 1 << $14;
              $neg139 = $shl138 ^ -1;
              $16 = HEAP32[17668 >> 2] | 0;
              $and140 = $16 & $neg139;
              HEAP32[17668 >> 2] = $and140;
              $21 = $add$ptr16;
              $p$1 = $add$ptr16;
              $psize$1 = $add17;
              break;
            }
          } else {
            $arrayidx149 = ($7 + 16) | 0;
            $17 = HEAP32[$arrayidx149 >> 2] | 0;
            $cmp150 = ($17 | 0) == ($add$ptr16 | 0);
            $arrayidx157 = ($7 + 20) | 0;
            $arrayidx157$sink = $cmp150 ? $arrayidx149 : $arrayidx157;
            HEAP32[$arrayidx157$sink >> 2] = $R$3;
            $cmp162 = ($R$3 | 0) == (0 | 0);
            if ($cmp162) {
              $21 = $add$ptr16;
              $p$1 = $add$ptr16;
              $psize$1 = $add17;
              break;
            }
          }
          $parent170 = ($R$3 + 24) | 0;
          HEAP32[$parent170 >> 2] = $7;
          $child171 = ($add$ptr16 + 16) | 0;
          $18 = HEAP32[$child171 >> 2] | 0;
          $cmp173 = ($18 | 0) == (0 | 0);
          if (!$cmp173) {
            $arrayidx182 = ($R$3 + 16) | 0;
            HEAP32[$arrayidx182 >> 2] = $18;
            $parent183 = ($18 + 24) | 0;
            HEAP32[$parent183 >> 2] = $R$3;
          }
          $arrayidx188 = ($child171 + 4) | 0;
          $19 = HEAP32[$arrayidx188 >> 2] | 0;
          $cmp189 = ($19 | 0) == (0 | 0);
          if ($cmp189) {
            $21 = $add$ptr16;
            $p$1 = $add$ptr16;
            $psize$1 = $add17;
          } else {
            $arrayidx198 = ($R$3 + 20) | 0;
            HEAP32[$arrayidx198 >> 2] = $19;
            $parent199 = ($19 + 24) | 0;
            HEAP32[$parent199 >> 2] = $R$3;
            $21 = $add$ptr16;
            $p$1 = $add$ptr16;
            $psize$1 = $add17;
          }
        }
      } else {
        $21 = $add$ptr;
        $p$1 = $add$ptr;
        $psize$1 = $and5;
      }
    } while (0);
    $cmp228 = $21 >>> 0 < $add$ptr6 >>> 0;
    if (!$cmp228) {
      return;
    }
    $head231 = ($add$ptr6 + 4) | 0;
    $22 = HEAP32[$head231 >> 2] | 0;
    $and232 = $22 & 1;
    $tobool233 = ($and232 | 0) == 0;
    if ($tobool233) {
      return;
    }
    $and240 = $22 & 2;
    $tobool241 = ($and240 | 0) == 0;
    if ($tobool241) {
      $23 = HEAP32[17688 >> 2] | 0;
      $cmp243 = ($23 | 0) == ($add$ptr6 | 0);
      if ($cmp243) {
        $24 = HEAP32[17676 >> 2] | 0;
        $add246 = ($24 + $psize$1) | 0;
        HEAP32[17676 >> 2] = $add246;
        HEAP32[17688 >> 2] = $p$1;
        $or247 = $add246 | 1;
        $head248 = ($p$1 + 4) | 0;
        HEAP32[$head248 >> 2] = $or247;
        $25 = HEAP32[17684 >> 2] | 0;
        $cmp249 = ($p$1 | 0) == ($25 | 0);
        if (!$cmp249) {
          return;
        }
        HEAP32[17684 >> 2] = 0;
        HEAP32[17672 >> 2] = 0;
        return;
      }
      $26 = HEAP32[17684 >> 2] | 0;
      $cmp255 = ($26 | 0) == ($add$ptr6 | 0);
      if ($cmp255) {
        $27 = HEAP32[17672 >> 2] | 0;
        $add258 = ($27 + $psize$1) | 0;
        HEAP32[17672 >> 2] = $add258;
        HEAP32[17684 >> 2] = $21;
        $or259 = $add258 | 1;
        $head260 = ($p$1 + 4) | 0;
        HEAP32[$head260 >> 2] = $or259;
        $add$ptr261 = ($21 + $add258) | 0;
        HEAP32[$add$ptr261 >> 2] = $add258;
        return;
      }
      $and266 = $22 & -8;
      $add267 = ($and266 + $psize$1) | 0;
      $shr268 = $22 >>> 3;
      $cmp269 = $22 >>> 0 < 256;
      do {
        if ($cmp269) {
          $fd273 = ($add$ptr6 + 8) | 0;
          $28 = HEAP32[$fd273 >> 2] | 0;
          $bk275 = ($add$ptr6 + 12) | 0;
          $29 = HEAP32[$bk275 >> 2] | 0;
          $cmp296 = ($29 | 0) == ($28 | 0);
          if ($cmp296) {
            $shl299 = 1 << $shr268;
            $neg300 = $shl299 ^ -1;
            $30 = HEAP32[4416] | 0;
            $and301 = $30 & $neg300;
            HEAP32[4416] = $and301;
            break;
          } else {
            $bk321 = ($28 + 12) | 0;
            HEAP32[$bk321 >> 2] = $29;
            $fd322 = ($29 + 8) | 0;
            HEAP32[$fd322 >> 2] = $28;
            break;
          }
        } else {
          $parent331 = ($add$ptr6 + 24) | 0;
          $31 = HEAP32[$parent331 >> 2] | 0;
          $bk333 = ($add$ptr6 + 12) | 0;
          $32 = HEAP32[$bk333 >> 2] | 0;
          $cmp334 = ($32 | 0) == ($add$ptr6 | 0);
          do {
            if ($cmp334) {
              $child361 = ($add$ptr6 + 16) | 0;
              $arrayidx362 = ($child361 + 4) | 0;
              $34 = HEAP32[$arrayidx362 >> 2] | 0;
              $cmp363 = ($34 | 0) == (0 | 0);
              if ($cmp363) {
                $35 = HEAP32[$child361 >> 2] | 0;
                $cmp368 = ($35 | 0) == (0 | 0);
                if ($cmp368) {
                  $R332$3 = 0;
                  break;
                } else {
                  $R332$1$ph = $35;
                  $RP360$1$ph = $child361;
                }
              } else {
                $R332$1$ph = $34;
                $RP360$1$ph = $arrayidx362;
              }
              $R332$1 = $R332$1$ph;
              $RP360$1 = $RP360$1$ph;
              while (1) {
                $arrayidx374 = ($R332$1 + 20) | 0;
                $36 = HEAP32[$arrayidx374 >> 2] | 0;
                $cmp375 = ($36 | 0) == (0 | 0);
                if ($cmp375) {
                  $arrayidx379 = ($R332$1 + 16) | 0;
                  $37 = HEAP32[$arrayidx379 >> 2] | 0;
                  $cmp380 = ($37 | 0) == (0 | 0);
                  if ($cmp380) {
                    break;
                  } else {
                    $R332$1$be = $37;
                    $RP360$1$be = $arrayidx379;
                  }
                } else {
                  $R332$1$be = $36;
                  $RP360$1$be = $arrayidx374;
                }
                $R332$1 = $R332$1$be;
                $RP360$1 = $RP360$1$be;
              }
              HEAP32[$RP360$1 >> 2] = 0;
              $R332$3 = $R332$1;
            } else {
              $fd338 = ($add$ptr6 + 8) | 0;
              $33 = HEAP32[$fd338 >> 2] | 0;
              $bk355 = ($33 + 12) | 0;
              HEAP32[$bk355 >> 2] = $32;
              $fd356 = ($32 + 8) | 0;
              HEAP32[$fd356 >> 2] = $33;
              $R332$3 = $32;
            }
          } while (0);
          $cmp395 = ($31 | 0) == (0 | 0);
          if (!$cmp395) {
            $index399 = ($add$ptr6 + 28) | 0;
            $38 = HEAP32[$index399 >> 2] | 0;
            $arrayidx400 = (17968 + ($38 << 2)) | 0;
            $39 = HEAP32[$arrayidx400 >> 2] | 0;
            $cmp401 = ($39 | 0) == ($add$ptr6 | 0);
            if ($cmp401) {
              HEAP32[$arrayidx400 >> 2] = $R332$3;
              $cond255 = ($R332$3 | 0) == (0 | 0);
              if ($cond255) {
                $shl408 = 1 << $38;
                $neg409 = $shl408 ^ -1;
                $40 = HEAP32[17668 >> 2] | 0;
                $and410 = $40 & $neg409;
                HEAP32[17668 >> 2] = $and410;
                break;
              }
            } else {
              $arrayidx419 = ($31 + 16) | 0;
              $41 = HEAP32[$arrayidx419 >> 2] | 0;
              $cmp420 = ($41 | 0) == ($add$ptr6 | 0);
              $arrayidx427 = ($31 + 20) | 0;
              $arrayidx427$sink = $cmp420 ? $arrayidx419 : $arrayidx427;
              HEAP32[$arrayidx427$sink >> 2] = $R332$3;
              $cmp432 = ($R332$3 | 0) == (0 | 0);
              if ($cmp432) {
                break;
              }
            }
            $parent442 = ($R332$3 + 24) | 0;
            HEAP32[$parent442 >> 2] = $31;
            $child443 = ($add$ptr6 + 16) | 0;
            $42 = HEAP32[$child443 >> 2] | 0;
            $cmp445 = ($42 | 0) == (0 | 0);
            if (!$cmp445) {
              $arrayidx454 = ($R332$3 + 16) | 0;
              HEAP32[$arrayidx454 >> 2] = $42;
              $parent455 = ($42 + 24) | 0;
              HEAP32[$parent455 >> 2] = $R332$3;
            }
            $arrayidx460 = ($child443 + 4) | 0;
            $43 = HEAP32[$arrayidx460 >> 2] | 0;
            $cmp461 = ($43 | 0) == (0 | 0);
            if (!$cmp461) {
              $arrayidx470 = ($R332$3 + 20) | 0;
              HEAP32[$arrayidx470 >> 2] = $43;
              $parent471 = ($43 + 24) | 0;
              HEAP32[$parent471 >> 2] = $R332$3;
            }
          }
        }
      } while (0);
      $or480 = $add267 | 1;
      $head481 = ($p$1 + 4) | 0;
      HEAP32[$head481 >> 2] = $or480;
      $add$ptr482 = ($21 + $add267) | 0;
      HEAP32[$add$ptr482 >> 2] = $add267;
      $44 = HEAP32[17684 >> 2] | 0;
      $cmp484 = ($p$1 | 0) == ($44 | 0);
      if ($cmp484) {
        HEAP32[17672 >> 2] = $add267;
        return;
      } else {
        $psize$2 = $add267;
      }
    } else {
      $and495 = $22 & -2;
      HEAP32[$head231 >> 2] = $and495;
      $or496 = $psize$1 | 1;
      $head497 = ($p$1 + 4) | 0;
      HEAP32[$head497 >> 2] = $or496;
      $add$ptr498 = ($21 + $psize$1) | 0;
      HEAP32[$add$ptr498 >> 2] = $psize$1;
      $psize$2 = $psize$1;
    }
    $shr501 = $psize$2 >>> 3;
    $cmp502 = $psize$2 >>> 0 < 256;
    if ($cmp502) {
      $shl508 = $shr501 << 1;
      $arrayidx509 = (17704 + ($shl508 << 2)) | 0;
      $45 = HEAP32[4416] | 0;
      $shl511 = 1 << $shr501;
      $and512 = $45 & $shl511;
      $tobool513 = ($and512 | 0) == 0;
      if ($tobool513) {
        $or516 = $45 | $shl511;
        HEAP32[4416] = $or516;
        $$pre = ($arrayidx509 + 8) | 0;
        $$pre$phiZ2D = $$pre;
        $F510$0 = $arrayidx509;
      } else {
        $46 = ($arrayidx509 + 8) | 0;
        $47 = HEAP32[$46 >> 2] | 0;
        $$pre$phiZ2D = $46;
        $F510$0 = $47;
      }
      HEAP32[$$pre$phiZ2D >> 2] = $p$1;
      $bk529 = ($F510$0 + 12) | 0;
      HEAP32[$bk529 >> 2] = $p$1;
      $fd530 = ($p$1 + 8) | 0;
      HEAP32[$fd530 >> 2] = $F510$0;
      $bk531 = ($p$1 + 12) | 0;
      HEAP32[$bk531 >> 2] = $arrayidx509;
      return;
    }
    $shr535 = $psize$2 >>> 8;
    $cmp536 = ($shr535 | 0) == 0;
    if ($cmp536) {
      $I534$0 = 0;
    } else {
      $cmp540 = $psize$2 >>> 0 > 16777215;
      if ($cmp540) {
        $I534$0 = 31;
      } else {
        $sub = ($shr535 + 1048320) | 0;
        $shr544 = $sub >>> 16;
        $and545 = $shr544 & 8;
        $shl546 = $shr535 << $and545;
        $sub547 = ($shl546 + 520192) | 0;
        $shr548 = $sub547 >>> 16;
        $and549 = $shr548 & 4;
        $add550 = $and549 | $and545;
        $shl551 = $shl546 << $and549;
        $sub552 = ($shl551 + 245760) | 0;
        $shr553 = $sub552 >>> 16;
        $and554 = $shr553 & 2;
        $add555 = $add550 | $and554;
        $sub556 = (14 - $add555) | 0;
        $shl557 = $shl551 << $and554;
        $shr558 = $shl557 >>> 15;
        $add559 = ($sub556 + $shr558) | 0;
        $shl560 = $add559 << 1;
        $add561 = ($add559 + 7) | 0;
        $shr562 = $psize$2 >>> $add561;
        $and563 = $shr562 & 1;
        $add564 = $and563 | $shl560;
        $I534$0 = $add564;
      }
    }
    $arrayidx567 = (17968 + ($I534$0 << 2)) | 0;
    $index568 = ($p$1 + 28) | 0;
    HEAP32[$index568 >> 2] = $I534$0;
    $child569 = ($p$1 + 16) | 0;
    $arrayidx570 = ($p$1 + 20) | 0;
    HEAP32[$arrayidx570 >> 2] = 0;
    HEAP32[$child569 >> 2] = 0;
    $48 = HEAP32[17668 >> 2] | 0;
    $shl573 = 1 << $I534$0;
    $and574 = $48 & $shl573;
    $tobool575 = ($and574 | 0) == 0;
    L112: do {
      if ($tobool575) {
        $or578 = $48 | $shl573;
        HEAP32[17668 >> 2] = $or578;
        HEAP32[$arrayidx567 >> 2] = $p$1;
        $parent579 = ($p$1 + 24) | 0;
        HEAP32[$parent579 >> 2] = $arrayidx567;
        $bk580 = ($p$1 + 12) | 0;
        HEAP32[$bk580 >> 2] = $p$1;
        $fd581 = ($p$1 + 8) | 0;
        HEAP32[$fd581 >> 2] = $p$1;
      } else {
        $49 = HEAP32[$arrayidx567 >> 2] | 0;
        $head591262 = ($49 + 4) | 0;
        $50 = HEAP32[$head591262 >> 2] | 0;
        $and592263 = $50 & -8;
        $cmp593264 = ($and592263 | 0) == ($psize$2 | 0);
        L115: do {
          if ($cmp593264) {
            $T$0$lcssa = $49;
          } else {
            $cmp584 = ($I534$0 | 0) == 31;
            $shr586 = $I534$0 >>> 1;
            $sub589 = (25 - $shr586) | 0;
            $cond = $cmp584 ? 0 : $sub589;
            $shl590 = $psize$2 << $cond;
            $K583$0266 = $shl590;
            $T$0265 = $49;
            while (1) {
              $shr597 = $K583$0266 >>> 31;
              $arrayidx599 = ((($T$0265 + 16) | 0) + ($shr597 << 2)) | 0;
              $51 = HEAP32[$arrayidx599 >> 2] | 0;
              $cmp601 = ($51 | 0) == (0 | 0);
              if ($cmp601) {
                break;
              }
              $shl600 = $K583$0266 << 1;
              $head591 = ($51 + 4) | 0;
              $52 = HEAP32[$head591 >> 2] | 0;
              $and592 = $52 & -8;
              $cmp593 = ($and592 | 0) == ($psize$2 | 0);
              if ($cmp593) {
                $T$0$lcssa = $51;
                break L115;
              } else {
                $K583$0266 = $shl600;
                $T$0265 = $51;
              }
            }
            HEAP32[$arrayidx599 >> 2] = $p$1;
            $parent610 = ($p$1 + 24) | 0;
            HEAP32[$parent610 >> 2] = $T$0265;
            $bk611 = ($p$1 + 12) | 0;
            HEAP32[$bk611 >> 2] = $p$1;
            $fd612 = ($p$1 + 8) | 0;
            HEAP32[$fd612 >> 2] = $p$1;
            break L112;
          }
        } while (0);
        $fd620 = ($T$0$lcssa + 8) | 0;
        $53 = HEAP32[$fd620 >> 2] | 0;
        $bk631 = ($53 + 12) | 0;
        HEAP32[$bk631 >> 2] = $p$1;
        HEAP32[$fd620 >> 2] = $p$1;
        $fd633 = ($p$1 + 8) | 0;
        HEAP32[$fd633 >> 2] = $53;
        $bk634 = ($p$1 + 12) | 0;
        HEAP32[$bk634 >> 2] = $T$0$lcssa;
        $parent635 = ($p$1 + 24) | 0;
        HEAP32[$parent635 >> 2] = 0;
      }
    } while (0);
    $54 = HEAP32[17696 >> 2] | 0;
    $dec = ($54 + -1) | 0;
    HEAP32[17696 >> 2] = $dec;
    $cmp640 = ($dec | 0) == 0;
    if (!$cmp640) {
      return;
    }
    $sp$0$in$i = 18120;
    while (1) {
      $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
      $cmp$i = ($sp$0$i | 0) == (0 | 0);
      $next4$i = ($sp$0$i + 8) | 0;
      if ($cmp$i) {
        break;
      } else {
        $sp$0$in$i = $next4$i;
      }
    }
    HEAP32[17696 >> 2] = -1;
    return;
  }
  function _realloc($oldmem, $bytes) {
    $oldmem = $oldmem | 0;
    $bytes = $bytes | 0;
    var $0 = 0,
      $add$ptr = 0,
      $add$ptr10 = 0,
      $add6 = 0,
      $and = 0,
      $and15 = 0,
      $and17 = 0,
      $call = 0,
      $call12 = 0,
      $call3 = 0,
      $call7 = 0,
      $cmp = 0,
      $cmp1 = 0,
      $cmp13 = 0,
      $cmp18 = 0,
      $cmp20 = 0,
      $cmp5 = 0,
      $cmp8 = 0,
      $cond = 0,
      $cond19 = 0;
    var $cond24 = 0,
      $head = 0,
      $mem$1 = 0,
      $sub = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $cmp = ($oldmem | 0) == (0 | 0);
    if ($cmp) {
      $call = _malloc($bytes) | 0;
      $mem$1 = $call;
      return $mem$1 | 0;
    }
    $cmp1 = $bytes >>> 0 > 4294967231;
    if ($cmp1) {
      $call3 = ___errno_location() | 0;
      HEAP32[$call3 >> 2] = 12;
      $mem$1 = 0;
      return $mem$1 | 0;
    }
    $cmp5 = $bytes >>> 0 < 11;
    $add6 = ($bytes + 11) | 0;
    $and = $add6 & -8;
    $cond = $cmp5 ? 16 : $and;
    $add$ptr = ($oldmem + -8) | 0;
    $call7 = _try_realloc_chunk($add$ptr, $cond) | 0;
    $cmp8 = ($call7 | 0) == (0 | 0);
    if (!$cmp8) {
      $add$ptr10 = ($call7 + 8) | 0;
      $mem$1 = $add$ptr10;
      return $mem$1 | 0;
    }
    $call12 = _malloc($bytes) | 0;
    $cmp13 = ($call12 | 0) == (0 | 0);
    if ($cmp13) {
      $mem$1 = 0;
      return $mem$1 | 0;
    }
    $head = ($oldmem + -4) | 0;
    $0 = HEAP32[$head >> 2] | 0;
    $and15 = $0 & -8;
    $and17 = $0 & 3;
    $cmp18 = ($and17 | 0) == 0;
    $cond19 = $cmp18 ? 8 : 4;
    $sub = ($and15 - $cond19) | 0;
    $cmp20 = $sub >>> 0 < $bytes >>> 0;
    $cond24 = $cmp20 ? $sub : $bytes;
    _memcpy($call12 | 0, $oldmem | 0, $cond24 | 0) | 0;
    _free($oldmem);
    $mem$1 = $call12;
    return $mem$1 | 0;
  }
  function _try_realloc_chunk($p, $nb) {
    $p = $p | 0;
    $nb = $nb | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0,
      $23 = 0,
      $24 = 0,
      $25 = 0,
      $26 = 0;
    var $27 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $R$1 = 0,
      $R$1$be = 0,
      $R$1$ph = 0,
      $R$3 = 0,
      $RP$1 = 0,
      $RP$1$be = 0,
      $RP$1$ph = 0,
      $add = 0,
      $add$i = 0,
      $add$ptr = 0,
      $add$ptr17 = 0,
      $add$ptr298 = 0;
    var $add$ptr303 = 0,
      $add$ptr317 = 0,
      $add$ptr41 = 0,
      $add$ptr66 = 0,
      $add$ptr67 = 0,
      $add$ptr91 = 0,
      $add105 = 0,
      $add58 = 0,
      $and = 0,
      $and10 = 0,
      $and100 = 0,
      $and104 = 0,
      $and128 = 0,
      $and19 = 0,
      $and216 = 0,
      $and294 = 0,
      $and305 = 0,
      $and43 = 0,
      $and69 = 0,
      $and80 = 0;
    var $and87 = 0,
      $arrayidx179 = 0,
      $arrayidx186 = 0,
      $arrayidx190 = 0,
      $arrayidx206 = 0,
      $arrayidx226 = 0,
      $arrayidx234 = 0,
      $arrayidx234$sink = 0,
      $arrayidx261 = 0,
      $arrayidx267 = 0,
      $arrayidx278 = 0,
      $bk = 0,
      $bk147 = 0,
      $bk155 = 0,
      $bk174 = 0,
      $child = 0,
      $child249 = 0,
      $cmp$i = 0,
      $cmp1$i = 0,
      $cmp106 = 0;
    var $cmp11 = 0,
      $cmp111 = 0,
      $cmp125 = 0,
      $cmp13 = 0,
      $cmp15 = 0,
      $cmp156 = 0,
      $cmp180 = 0,
      $cmp183 = 0,
      $cmp187 = 0,
      $cmp191 = 0,
      $cmp2$i = 0,
      $cmp203 = 0,
      $cmp207 = 0,
      $cmp227 = 0,
      $cmp239 = 0,
      $cmp251 = 0,
      $cmp268 = 0,
      $cmp288 = 0,
      $cmp34 = 0,
      $cmp36 = 0;
    var $cmp56 = 0,
      $cmp59 = 0,
      $cmp63 = 0,
      $cond = 0,
      $fd = 0,
      $fd148 = 0,
      $fd159 = 0,
      $fd175 = 0,
      $head = 0,
      $head23 = 0,
      $head299 = 0,
      $head31 = 0,
      $head310 = 0,
      $head318 = 0,
      $head48 = 0,
      $head74 = 0,
      $head79 = 0,
      $head92 = 0,
      $head99 = 0,
      $index = 0;
    var $neg = 0,
      $neg215 = 0,
      $newp$2 = 0,
      $or = 0,
      $or20 = 0,
      $or28 = 0,
      $or295 = 0,
      $or296 = 0,
      $or300 = 0,
      $or306 = 0,
      $or307 = 0,
      $or315 = 0,
      $or319 = 0,
      $or32 = 0,
      $or44 = 0,
      $or45 = 0,
      $or50 = 0,
      $or70 = 0,
      $or71 = 0,
      $or76 = 0;
    var $or88 = 0,
      $or89 = 0,
      $or93 = 0,
      $parent = 0,
      $parent248 = 0,
      $parent262 = 0,
      $parent279 = 0,
      $shl$i = 0,
      $shl127 = 0,
      $shl214 = 0,
      $shr = 0,
      $storemerge = 0,
      $storemerge1 = 0,
      $sub = 0,
      $sub$i = 0,
      $sub110 = 0,
      $sub40 = 0,
      $sub62 = 0,
      $tobool101 = 0,
      label = 0;
    var sp = 0;
    sp = STACKTOP;
    $head = ($p + 4) | 0;
    $0 = HEAP32[$head >> 2] | 0;
    $and = $0 & -8;
    $add$ptr = ($p + $and) | 0;
    $and10 = $0 & 3;
    $cmp11 = ($and10 | 0) == 0;
    if ($cmp11) {
      $cmp$i = $nb >>> 0 < 256;
      if ($cmp$i) {
        $newp$2 = 0;
        return $newp$2 | 0;
      }
      $add$i = ($nb + 4) | 0;
      $cmp1$i = $and >>> 0 < $add$i >>> 0;
      if (!$cmp1$i) {
        $sub$i = ($and - $nb) | 0;
        $1 = HEAP32[18144 >> 2] | 0;
        $shl$i = $1 << 1;
        $cmp2$i = $sub$i >>> 0 > $shl$i >>> 0;
        if (!$cmp2$i) {
          $newp$2 = $p;
          return $newp$2 | 0;
        }
      }
      $newp$2 = 0;
      return $newp$2 | 0;
    }
    $cmp13 = $and >>> 0 < $nb >>> 0;
    if (!$cmp13) {
      $sub = ($and - $nb) | 0;
      $cmp15 = $sub >>> 0 > 15;
      if (!$cmp15) {
        $newp$2 = $p;
        return $newp$2 | 0;
      }
      $add$ptr17 = ($p + $nb) | 0;
      $and19 = $0 & 1;
      $or = $and19 | $nb;
      $or20 = $or | 2;
      HEAP32[$head >> 2] = $or20;
      $head23 = ($add$ptr17 + 4) | 0;
      $or28 = $sub | 3;
      HEAP32[$head23 >> 2] = $or28;
      $head31 = ($add$ptr + 4) | 0;
      $2 = HEAP32[$head31 >> 2] | 0;
      $or32 = $2 | 1;
      HEAP32[$head31 >> 2] = $or32;
      _dispose_chunk($add$ptr17, $sub);
      $newp$2 = $p;
      return $newp$2 | 0;
    }
    $3 = HEAP32[17688 >> 2] | 0;
    $cmp34 = ($3 | 0) == ($add$ptr | 0);
    if ($cmp34) {
      $4 = HEAP32[17676 >> 2] | 0;
      $add = ($4 + $and) | 0;
      $cmp36 = $add >>> 0 > $nb >>> 0;
      $sub40 = ($add - $nb) | 0;
      $add$ptr41 = ($p + $nb) | 0;
      if (!$cmp36) {
        $newp$2 = 0;
        return $newp$2 | 0;
      }
      $or50 = $sub40 | 1;
      $head48 = ($add$ptr41 + 4) | 0;
      $and43 = $0 & 1;
      $or44 = $and43 | $nb;
      $or45 = $or44 | 2;
      HEAP32[$head >> 2] = $or45;
      HEAP32[$head48 >> 2] = $or50;
      HEAP32[17688 >> 2] = $add$ptr41;
      HEAP32[17676 >> 2] = $sub40;
      $newp$2 = $p;
      return $newp$2 | 0;
    }
    $5 = HEAP32[17684 >> 2] | 0;
    $cmp56 = ($5 | 0) == ($add$ptr | 0);
    if ($cmp56) {
      $6 = HEAP32[17672 >> 2] | 0;
      $add58 = ($6 + $and) | 0;
      $cmp59 = $add58 >>> 0 < $nb >>> 0;
      if ($cmp59) {
        $newp$2 = 0;
        return $newp$2 | 0;
      }
      $sub62 = ($add58 - $nb) | 0;
      $cmp63 = $sub62 >>> 0 > 15;
      if ($cmp63) {
        $add$ptr66 = ($p + $nb) | 0;
        $add$ptr67 = ($p + $add58) | 0;
        $and69 = $0 & 1;
        $or70 = $and69 | $nb;
        $or71 = $or70 | 2;
        HEAP32[$head >> 2] = $or71;
        $head74 = ($add$ptr66 + 4) | 0;
        $or76 = $sub62 | 1;
        HEAP32[$head74 >> 2] = $or76;
        HEAP32[$add$ptr67 >> 2] = $sub62;
        $head79 = ($add$ptr67 + 4) | 0;
        $7 = HEAP32[$head79 >> 2] | 0;
        $and80 = $7 & -2;
        HEAP32[$head79 >> 2] = $and80;
        $storemerge = $add$ptr66;
        $storemerge1 = $sub62;
      } else {
        $and87 = $0 & 1;
        $or88 = $and87 | $add58;
        $or89 = $or88 | 2;
        HEAP32[$head >> 2] = $or89;
        $add$ptr91 = ($p + $add58) | 0;
        $head92 = ($add$ptr91 + 4) | 0;
        $8 = HEAP32[$head92 >> 2] | 0;
        $or93 = $8 | 1;
        HEAP32[$head92 >> 2] = $or93;
        $storemerge = 0;
        $storemerge1 = 0;
      }
      HEAP32[17672 >> 2] = $storemerge1;
      HEAP32[17684 >> 2] = $storemerge;
      $newp$2 = $p;
      return $newp$2 | 0;
    }
    $head99 = ($add$ptr + 4) | 0;
    $9 = HEAP32[$head99 >> 2] | 0;
    $and100 = $9 & 2;
    $tobool101 = ($and100 | 0) == 0;
    if (!$tobool101) {
      $newp$2 = 0;
      return $newp$2 | 0;
    }
    $and104 = $9 & -8;
    $add105 = ($and104 + $and) | 0;
    $cmp106 = $add105 >>> 0 < $nb >>> 0;
    if ($cmp106) {
      $newp$2 = 0;
      return $newp$2 | 0;
    }
    $sub110 = ($add105 - $nb) | 0;
    $shr = $9 >>> 3;
    $cmp111 = $9 >>> 0 < 256;
    do {
      if ($cmp111) {
        $fd = ($add$ptr + 8) | 0;
        $10 = HEAP32[$fd >> 2] | 0;
        $bk = ($add$ptr + 12) | 0;
        $11 = HEAP32[$bk >> 2] | 0;
        $cmp125 = ($11 | 0) == ($10 | 0);
        if ($cmp125) {
          $shl127 = 1 << $shr;
          $neg = $shl127 ^ -1;
          $12 = HEAP32[4416] | 0;
          $and128 = $12 & $neg;
          HEAP32[4416] = $and128;
          break;
        } else {
          $bk147 = ($10 + 12) | 0;
          HEAP32[$bk147 >> 2] = $11;
          $fd148 = ($11 + 8) | 0;
          HEAP32[$fd148 >> 2] = $10;
          break;
        }
      } else {
        $parent = ($add$ptr + 24) | 0;
        $13 = HEAP32[$parent >> 2] | 0;
        $bk155 = ($add$ptr + 12) | 0;
        $14 = HEAP32[$bk155 >> 2] | 0;
        $cmp156 = ($14 | 0) == ($add$ptr | 0);
        do {
          if ($cmp156) {
            $child = ($add$ptr + 16) | 0;
            $arrayidx179 = ($child + 4) | 0;
            $16 = HEAP32[$arrayidx179 >> 2] | 0;
            $cmp180 = ($16 | 0) == (0 | 0);
            if ($cmp180) {
              $17 = HEAP32[$child >> 2] | 0;
              $cmp183 = ($17 | 0) == (0 | 0);
              if ($cmp183) {
                $R$3 = 0;
                break;
              } else {
                $R$1$ph = $17;
                $RP$1$ph = $child;
              }
            } else {
              $R$1$ph = $16;
              $RP$1$ph = $arrayidx179;
            }
            $R$1 = $R$1$ph;
            $RP$1 = $RP$1$ph;
            while (1) {
              $arrayidx186 = ($R$1 + 20) | 0;
              $18 = HEAP32[$arrayidx186 >> 2] | 0;
              $cmp187 = ($18 | 0) == (0 | 0);
              if ($cmp187) {
                $arrayidx190 = ($R$1 + 16) | 0;
                $19 = HEAP32[$arrayidx190 >> 2] | 0;
                $cmp191 = ($19 | 0) == (0 | 0);
                if ($cmp191) {
                  break;
                } else {
                  $R$1$be = $19;
                  $RP$1$be = $arrayidx190;
                }
              } else {
                $R$1$be = $18;
                $RP$1$be = $arrayidx186;
              }
              $R$1 = $R$1$be;
              $RP$1 = $RP$1$be;
            }
            HEAP32[$RP$1 >> 2] = 0;
            $R$3 = $R$1;
          } else {
            $fd159 = ($add$ptr + 8) | 0;
            $15 = HEAP32[$fd159 >> 2] | 0;
            $bk174 = ($15 + 12) | 0;
            HEAP32[$bk174 >> 2] = $14;
            $fd175 = ($14 + 8) | 0;
            HEAP32[$fd175 >> 2] = $15;
            $R$3 = $14;
          }
        } while (0);
        $cmp203 = ($13 | 0) == (0 | 0);
        if (!$cmp203) {
          $index = ($add$ptr + 28) | 0;
          $20 = HEAP32[$index >> 2] | 0;
          $arrayidx206 = (17968 + ($20 << 2)) | 0;
          $21 = HEAP32[$arrayidx206 >> 2] | 0;
          $cmp207 = ($21 | 0) == ($add$ptr | 0);
          if ($cmp207) {
            HEAP32[$arrayidx206 >> 2] = $R$3;
            $cond = ($R$3 | 0) == (0 | 0);
            if ($cond) {
              $shl214 = 1 << $20;
              $neg215 = $shl214 ^ -1;
              $22 = HEAP32[17668 >> 2] | 0;
              $and216 = $22 & $neg215;
              HEAP32[17668 >> 2] = $and216;
              break;
            }
          } else {
            $arrayidx226 = ($13 + 16) | 0;
            $23 = HEAP32[$arrayidx226 >> 2] | 0;
            $cmp227 = ($23 | 0) == ($add$ptr | 0);
            $arrayidx234 = ($13 + 20) | 0;
            $arrayidx234$sink = $cmp227 ? $arrayidx226 : $arrayidx234;
            HEAP32[$arrayidx234$sink >> 2] = $R$3;
            $cmp239 = ($R$3 | 0) == (0 | 0);
            if ($cmp239) {
              break;
            }
          }
          $parent248 = ($R$3 + 24) | 0;
          HEAP32[$parent248 >> 2] = $13;
          $child249 = ($add$ptr + 16) | 0;
          $24 = HEAP32[$child249 >> 2] | 0;
          $cmp251 = ($24 | 0) == (0 | 0);
          if (!$cmp251) {
            $arrayidx261 = ($R$3 + 16) | 0;
            HEAP32[$arrayidx261 >> 2] = $24;
            $parent262 = ($24 + 24) | 0;
            HEAP32[$parent262 >> 2] = $R$3;
          }
          $arrayidx267 = ($child249 + 4) | 0;
          $25 = HEAP32[$arrayidx267 >> 2] | 0;
          $cmp268 = ($25 | 0) == (0 | 0);
          if (!$cmp268) {
            $arrayidx278 = ($R$3 + 20) | 0;
            HEAP32[$arrayidx278 >> 2] = $25;
            $parent279 = ($25 + 24) | 0;
            HEAP32[$parent279 >> 2] = $R$3;
          }
        }
      }
    } while (0);
    $cmp288 = $sub110 >>> 0 < 16;
    if ($cmp288) {
      $and294 = $0 & 1;
      $or295 = $and294 | $add105;
      $or296 = $or295 | 2;
      HEAP32[$head >> 2] = $or296;
      $add$ptr298 = ($p + $add105) | 0;
      $head299 = ($add$ptr298 + 4) | 0;
      $26 = HEAP32[$head299 >> 2] | 0;
      $or300 = $26 | 1;
      HEAP32[$head299 >> 2] = $or300;
      $newp$2 = $p;
      return $newp$2 | 0;
    } else {
      $add$ptr303 = ($p + $nb) | 0;
      $and305 = $0 & 1;
      $or306 = $and305 | $nb;
      $or307 = $or306 | 2;
      HEAP32[$head >> 2] = $or307;
      $head310 = ($add$ptr303 + 4) | 0;
      $or315 = $sub110 | 3;
      HEAP32[$head310 >> 2] = $or315;
      $add$ptr317 = ($p + $add105) | 0;
      $head318 = ($add$ptr317 + 4) | 0;
      $27 = HEAP32[$head318 >> 2] | 0;
      $or319 = $27 | 1;
      HEAP32[$head318 >> 2] = $or319;
      _dispose_chunk($add$ptr303, $sub110);
      $newp$2 = $p;
      return $newp$2 | 0;
    }
    return 0 | 0;
  }
  function _dispose_chunk($p, $psize) {
    $p = $p | 0;
    $psize = $psize | 0;
    var $$pre = 0,
      $$pre$phiZ2D = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0,
      $23 = 0,
      $24 = 0;
    var $25 = 0,
      $26 = 0,
      $27 = 0,
      $28 = 0,
      $29 = 0,
      $3 = 0,
      $30 = 0,
      $31 = 0,
      $32 = 0,
      $33 = 0,
      $34 = 0,
      $35 = 0,
      $36 = 0,
      $37 = 0,
      $38 = 0,
      $39 = 0,
      $4 = 0,
      $40 = 0,
      $41 = 0,
      $42 = 0;
    var $43 = 0,
      $44 = 0,
      $45 = 0,
      $46 = 0,
      $47 = 0,
      $48 = 0,
      $49 = 0,
      $5 = 0,
      $50 = 0,
      $51 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $F517$0 = 0,
      $I545$0 = 0,
      $K597$010 = 0,
      $R$1 = 0,
      $R$1$be = 0,
      $R$1$ph = 0;
    var $R$3 = 0,
      $R328$1 = 0,
      $R328$1$be = 0,
      $R328$1$ph = 0,
      $R328$3 = 0,
      $RP$1 = 0,
      $RP$1$be = 0,
      $RP$1$ph = 0,
      $RP357$1 = 0,
      $RP357$1$be = 0,
      $RP357$1$ph = 0,
      $T$0$lcssa = 0,
      $T$09 = 0,
      $add$ptr = 0,
      $add$ptr252 = 0,
      $add$ptr486 = 0,
      $add$ptr5 = 0,
      $add$ptr504 = 0,
      $add230 = 0,
      $add248 = 0;
    var $add258 = 0,
      $add561 = 0,
      $add566 = 0,
      $add570 = 0,
      $add572 = 0,
      $add575 = 0,
      $add6 = 0,
      $and = 0,
      $and128 = 0,
      $and2 = 0,
      $and202 = 0,
      $and207 = 0,
      $and224 = 0,
      $and257 = 0,
      $and295 = 0,
      $and32 = 0,
      $and410 = 0,
      $and501 = 0,
      $and520 = 0,
      $and556 = 0;
    var $and560 = 0,
      $and565 = 0,
      $and574 = 0,
      $and587 = 0,
      $and606 = 0,
      $and6067 = 0,
      $arrayidx100 = 0,
      $arrayidx118 = 0,
      $arrayidx138 = 0,
      $arrayidx146 = 0,
      $arrayidx146$sink = 0,
      $arrayidx173 = 0,
      $arrayidx179 = 0,
      $arrayidx190 = 0,
      $arrayidx359 = 0,
      $arrayidx371 = 0,
      $arrayidx376 = 0,
      $arrayidx399 = 0,
      $arrayidx420 = 0,
      $arrayidx428 = 0;
    var $arrayidx428$sink = 0,
      $arrayidx457 = 0,
      $arrayidx463 = 0,
      $arrayidx474 = 0,
      $arrayidx516 = 0,
      $arrayidx579 = 0,
      $arrayidx582 = 0,
      $arrayidx613 = 0,
      $arrayidx86 = 0,
      $arrayidx95 = 0,
      $bk = 0,
      $bk266 = 0,
      $bk317 = 0,
      $bk329 = 0,
      $bk352 = 0,
      $bk52 = 0,
      $bk539 = 0,
      $bk541 = 0,
      $bk594 = 0,
      $bk60 = 0;
    var $bk626 = 0,
      $bk648 = 0,
      $bk651 = 0,
      $bk81 = 0,
      $child = 0,
      $child161 = 0,
      $child358 = 0,
      $child445 = 0,
      $child581 = 0,
      $cmp = 0,
      $cmp10 = 0,
      $cmp101 = 0,
      $cmp115 = 0,
      $cmp119 = 0,
      $cmp13 = 0,
      $cmp139 = 0,
      $cmp151 = 0,
      $cmp163 = 0,
      $cmp180 = 0,
      $cmp203 = 0;
    var $cmp227 = 0,
      $cmp235 = 0,
      $cmp244 = 0,
      $cmp260 = 0,
      $cmp28 = 0,
      $cmp289 = 0,
      $cmp330 = 0,
      $cmp360 = 0,
      $cmp365 = 0,
      $cmp372 = 0,
      $cmp377 = 0,
      $cmp393 = 0,
      $cmp400 = 0,
      $cmp421 = 0,
      $cmp433 = 0,
      $cmp447 = 0,
      $cmp464 = 0,
      $cmp489 = 0,
      $cmp508 = 0,
      $cmp547 = 0;
    var $cmp551 = 0,
      $cmp598 = 0,
      $cmp607 = 0,
      $cmp6078 = 0,
      $cmp61 = 0,
      $cmp615 = 0,
      $cmp87 = 0,
      $cmp91 = 0,
      $cmp96 = 0,
      $cond = 0,
      $cond2 = 0,
      $cond3 = 0,
      $fd = 0,
      $fd264 = 0,
      $fd318 = 0,
      $fd334 = 0,
      $fd353 = 0,
      $fd53 = 0,
      $fd540 = 0,
      $fd595 = 0;
    var $fd627 = 0,
      $fd635 = 0,
      $fd65 = 0,
      $fd650 = 0,
      $fd82 = 0,
      $head = 0,
      $head201 = 0,
      $head208 = 0,
      $head223 = 0,
      $head233 = 0,
      $head251 = 0,
      $head485 = 0,
      $head503 = 0,
      $head605 = 0,
      $head6056 = 0,
      $idx$neg = 0,
      $index = 0,
      $index398 = 0,
      $index580 = 0,
      $neg = 0;
    var $neg127 = 0,
      $neg293 = 0,
      $neg408 = 0,
      $or = 0,
      $or232 = 0,
      $or250 = 0,
      $or484 = 0,
      $or502 = 0,
      $or525 = 0,
      $or592 = 0,
      $p$addr$1 = 0,
      $parent = 0,
      $parent160 = 0,
      $parent174 = 0,
      $parent191 = 0,
      $parent327 = 0,
      $parent444 = 0,
      $parent458 = 0,
      $parent475 = 0,
      $parent593 = 0;
    var $parent625 = 0,
      $parent652 = 0,
      $psize$addr$1 = 0,
      $psize$addr$2 = 0,
      $shl126 = 0,
      $shl292 = 0,
      $shl31 = 0,
      $shl407 = 0,
      $shl515 = 0,
      $shl519 = 0,
      $shl557 = 0,
      $shl562 = 0,
      $shl568 = 0,
      $shl571 = 0,
      $shl586 = 0,
      $shl604 = 0,
      $shl614 = 0,
      $shr = 0,
      $shr259 = 0,
      $shr507 = 0;
    var $shr546 = 0,
      $shr555 = 0,
      $shr559 = 0,
      $shr564 = 0,
      $shr569 = 0,
      $shr573 = 0,
      $shr600 = 0,
      $shr611 = 0,
      $sub = 0,
      $sub558 = 0,
      $sub563 = 0,
      $sub567 = 0,
      $sub603 = 0,
      $tobool = 0,
      $tobool225 = 0,
      $tobool521 = 0,
      $tobool588 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $add$ptr = ($p + $psize) | 0;
    $head = ($p + 4) | 0;
    $0 = HEAP32[$head >> 2] | 0;
    $and = $0 & 1;
    $tobool = ($and | 0) == 0;
    do {
      if ($tobool) {
        $1 = HEAP32[$p >> 2] | 0;
        $and2 = $0 & 3;
        $cmp = ($and2 | 0) == 0;
        if ($cmp) {
          return;
        }
        $idx$neg = (0 - $1) | 0;
        $add$ptr5 = ($p + $idx$neg) | 0;
        $add6 = ($1 + $psize) | 0;
        $2 = HEAP32[17684 >> 2] | 0;
        $cmp10 = ($2 | 0) == ($add$ptr5 | 0);
        if ($cmp10) {
          $head201 = ($add$ptr + 4) | 0;
          $19 = HEAP32[$head201 >> 2] | 0;
          $and202 = $19 & 3;
          $cmp203 = ($and202 | 0) == 3;
          if (!$cmp203) {
            $p$addr$1 = $add$ptr5;
            $psize$addr$1 = $add6;
            break;
          }
          $head208 = ($add$ptr5 + 4) | 0;
          $or = $add6 | 1;
          $and207 = $19 & -2;
          HEAP32[17672 >> 2] = $add6;
          HEAP32[$head201 >> 2] = $and207;
          HEAP32[$head208 >> 2] = $or;
          HEAP32[$add$ptr >> 2] = $add6;
          return;
        }
        $shr = $1 >>> 3;
        $cmp13 = $1 >>> 0 < 256;
        if ($cmp13) {
          $fd = ($add$ptr5 + 8) | 0;
          $3 = HEAP32[$fd >> 2] | 0;
          $bk = ($add$ptr5 + 12) | 0;
          $4 = HEAP32[$bk >> 2] | 0;
          $cmp28 = ($4 | 0) == ($3 | 0);
          if ($cmp28) {
            $shl31 = 1 << $shr;
            $neg = $shl31 ^ -1;
            $5 = HEAP32[4416] | 0;
            $and32 = $5 & $neg;
            HEAP32[4416] = $and32;
            $p$addr$1 = $add$ptr5;
            $psize$addr$1 = $add6;
            break;
          } else {
            $bk52 = ($3 + 12) | 0;
            HEAP32[$bk52 >> 2] = $4;
            $fd53 = ($4 + 8) | 0;
            HEAP32[$fd53 >> 2] = $3;
            $p$addr$1 = $add$ptr5;
            $psize$addr$1 = $add6;
            break;
          }
        }
        $parent = ($add$ptr5 + 24) | 0;
        $6 = HEAP32[$parent >> 2] | 0;
        $bk60 = ($add$ptr5 + 12) | 0;
        $7 = HEAP32[$bk60 >> 2] | 0;
        $cmp61 = ($7 | 0) == ($add$ptr5 | 0);
        do {
          if ($cmp61) {
            $child = ($add$ptr5 + 16) | 0;
            $arrayidx86 = ($child + 4) | 0;
            $9 = HEAP32[$arrayidx86 >> 2] | 0;
            $cmp87 = ($9 | 0) == (0 | 0);
            if ($cmp87) {
              $10 = HEAP32[$child >> 2] | 0;
              $cmp91 = ($10 | 0) == (0 | 0);
              if ($cmp91) {
                $R$3 = 0;
                break;
              } else {
                $R$1$ph = $10;
                $RP$1$ph = $child;
              }
            } else {
              $R$1$ph = $9;
              $RP$1$ph = $arrayidx86;
            }
            $R$1 = $R$1$ph;
            $RP$1 = $RP$1$ph;
            while (1) {
              $arrayidx95 = ($R$1 + 20) | 0;
              $11 = HEAP32[$arrayidx95 >> 2] | 0;
              $cmp96 = ($11 | 0) == (0 | 0);
              if ($cmp96) {
                $arrayidx100 = ($R$1 + 16) | 0;
                $12 = HEAP32[$arrayidx100 >> 2] | 0;
                $cmp101 = ($12 | 0) == (0 | 0);
                if ($cmp101) {
                  break;
                } else {
                  $R$1$be = $12;
                  $RP$1$be = $arrayidx100;
                }
              } else {
                $R$1$be = $11;
                $RP$1$be = $arrayidx95;
              }
              $R$1 = $R$1$be;
              $RP$1 = $RP$1$be;
            }
            HEAP32[$RP$1 >> 2] = 0;
            $R$3 = $R$1;
          } else {
            $fd65 = ($add$ptr5 + 8) | 0;
            $8 = HEAP32[$fd65 >> 2] | 0;
            $bk81 = ($8 + 12) | 0;
            HEAP32[$bk81 >> 2] = $7;
            $fd82 = ($7 + 8) | 0;
            HEAP32[$fd82 >> 2] = $8;
            $R$3 = $7;
          }
        } while (0);
        $cmp115 = ($6 | 0) == (0 | 0);
        if ($cmp115) {
          $p$addr$1 = $add$ptr5;
          $psize$addr$1 = $add6;
        } else {
          $index = ($add$ptr5 + 28) | 0;
          $13 = HEAP32[$index >> 2] | 0;
          $arrayidx118 = (17968 + ($13 << 2)) | 0;
          $14 = HEAP32[$arrayidx118 >> 2] | 0;
          $cmp119 = ($14 | 0) == ($add$ptr5 | 0);
          if ($cmp119) {
            HEAP32[$arrayidx118 >> 2] = $R$3;
            $cond2 = ($R$3 | 0) == (0 | 0);
            if ($cond2) {
              $shl126 = 1 << $13;
              $neg127 = $shl126 ^ -1;
              $15 = HEAP32[17668 >> 2] | 0;
              $and128 = $15 & $neg127;
              HEAP32[17668 >> 2] = $and128;
              $p$addr$1 = $add$ptr5;
              $psize$addr$1 = $add6;
              break;
            }
          } else {
            $arrayidx138 = ($6 + 16) | 0;
            $16 = HEAP32[$arrayidx138 >> 2] | 0;
            $cmp139 = ($16 | 0) == ($add$ptr5 | 0);
            $arrayidx146 = ($6 + 20) | 0;
            $arrayidx146$sink = $cmp139 ? $arrayidx138 : $arrayidx146;
            HEAP32[$arrayidx146$sink >> 2] = $R$3;
            $cmp151 = ($R$3 | 0) == (0 | 0);
            if ($cmp151) {
              $p$addr$1 = $add$ptr5;
              $psize$addr$1 = $add6;
              break;
            }
          }
          $parent160 = ($R$3 + 24) | 0;
          HEAP32[$parent160 >> 2] = $6;
          $child161 = ($add$ptr5 + 16) | 0;
          $17 = HEAP32[$child161 >> 2] | 0;
          $cmp163 = ($17 | 0) == (0 | 0);
          if (!$cmp163) {
            $arrayidx173 = ($R$3 + 16) | 0;
            HEAP32[$arrayidx173 >> 2] = $17;
            $parent174 = ($17 + 24) | 0;
            HEAP32[$parent174 >> 2] = $R$3;
          }
          $arrayidx179 = ($child161 + 4) | 0;
          $18 = HEAP32[$arrayidx179 >> 2] | 0;
          $cmp180 = ($18 | 0) == (0 | 0);
          if ($cmp180) {
            $p$addr$1 = $add$ptr5;
            $psize$addr$1 = $add6;
          } else {
            $arrayidx190 = ($R$3 + 20) | 0;
            HEAP32[$arrayidx190 >> 2] = $18;
            $parent191 = ($18 + 24) | 0;
            HEAP32[$parent191 >> 2] = $R$3;
            $p$addr$1 = $add$ptr5;
            $psize$addr$1 = $add6;
          }
        }
      } else {
        $p$addr$1 = $p;
        $psize$addr$1 = $psize;
      }
    } while (0);
    $head223 = ($add$ptr + 4) | 0;
    $20 = HEAP32[$head223 >> 2] | 0;
    $and224 = $20 & 2;
    $tobool225 = ($and224 | 0) == 0;
    if ($tobool225) {
      $21 = HEAP32[17688 >> 2] | 0;
      $cmp227 = ($21 | 0) == ($add$ptr | 0);
      if ($cmp227) {
        $22 = HEAP32[17676 >> 2] | 0;
        $add230 = ($22 + $psize$addr$1) | 0;
        HEAP32[17676 >> 2] = $add230;
        HEAP32[17688 >> 2] = $p$addr$1;
        $or232 = $add230 | 1;
        $head233 = ($p$addr$1 + 4) | 0;
        HEAP32[$head233 >> 2] = $or232;
        $23 = HEAP32[17684 >> 2] | 0;
        $cmp235 = ($p$addr$1 | 0) == ($23 | 0);
        if (!$cmp235) {
          return;
        }
        HEAP32[17684 >> 2] = 0;
        HEAP32[17672 >> 2] = 0;
        return;
      }
      $24 = HEAP32[17684 >> 2] | 0;
      $cmp244 = ($24 | 0) == ($add$ptr | 0);
      if ($cmp244) {
        $25 = HEAP32[17672 >> 2] | 0;
        $add248 = ($25 + $psize$addr$1) | 0;
        HEAP32[17672 >> 2] = $add248;
        HEAP32[17684 >> 2] = $p$addr$1;
        $or250 = $add248 | 1;
        $head251 = ($p$addr$1 + 4) | 0;
        HEAP32[$head251 >> 2] = $or250;
        $add$ptr252 = ($p$addr$1 + $add248) | 0;
        HEAP32[$add$ptr252 >> 2] = $add248;
        return;
      }
      $and257 = $20 & -8;
      $add258 = ($and257 + $psize$addr$1) | 0;
      $shr259 = $20 >>> 3;
      $cmp260 = $20 >>> 0 < 256;
      do {
        if ($cmp260) {
          $fd264 = ($add$ptr + 8) | 0;
          $26 = HEAP32[$fd264 >> 2] | 0;
          $bk266 = ($add$ptr + 12) | 0;
          $27 = HEAP32[$bk266 >> 2] | 0;
          $cmp289 = ($27 | 0) == ($26 | 0);
          if ($cmp289) {
            $shl292 = 1 << $shr259;
            $neg293 = $shl292 ^ -1;
            $28 = HEAP32[4416] | 0;
            $and295 = $28 & $neg293;
            HEAP32[4416] = $and295;
            break;
          } else {
            $bk317 = ($26 + 12) | 0;
            HEAP32[$bk317 >> 2] = $27;
            $fd318 = ($27 + 8) | 0;
            HEAP32[$fd318 >> 2] = $26;
            break;
          }
        } else {
          $parent327 = ($add$ptr + 24) | 0;
          $29 = HEAP32[$parent327 >> 2] | 0;
          $bk329 = ($add$ptr + 12) | 0;
          $30 = HEAP32[$bk329 >> 2] | 0;
          $cmp330 = ($30 | 0) == ($add$ptr | 0);
          do {
            if ($cmp330) {
              $child358 = ($add$ptr + 16) | 0;
              $arrayidx359 = ($child358 + 4) | 0;
              $32 = HEAP32[$arrayidx359 >> 2] | 0;
              $cmp360 = ($32 | 0) == (0 | 0);
              if ($cmp360) {
                $33 = HEAP32[$child358 >> 2] | 0;
                $cmp365 = ($33 | 0) == (0 | 0);
                if ($cmp365) {
                  $R328$3 = 0;
                  break;
                } else {
                  $R328$1$ph = $33;
                  $RP357$1$ph = $child358;
                }
              } else {
                $R328$1$ph = $32;
                $RP357$1$ph = $arrayidx359;
              }
              $R328$1 = $R328$1$ph;
              $RP357$1 = $RP357$1$ph;
              while (1) {
                $arrayidx371 = ($R328$1 + 20) | 0;
                $34 = HEAP32[$arrayidx371 >> 2] | 0;
                $cmp372 = ($34 | 0) == (0 | 0);
                if ($cmp372) {
                  $arrayidx376 = ($R328$1 + 16) | 0;
                  $35 = HEAP32[$arrayidx376 >> 2] | 0;
                  $cmp377 = ($35 | 0) == (0 | 0);
                  if ($cmp377) {
                    break;
                  } else {
                    $R328$1$be = $35;
                    $RP357$1$be = $arrayidx376;
                  }
                } else {
                  $R328$1$be = $34;
                  $RP357$1$be = $arrayidx371;
                }
                $R328$1 = $R328$1$be;
                $RP357$1 = $RP357$1$be;
              }
              HEAP32[$RP357$1 >> 2] = 0;
              $R328$3 = $R328$1;
            } else {
              $fd334 = ($add$ptr + 8) | 0;
              $31 = HEAP32[$fd334 >> 2] | 0;
              $bk352 = ($31 + 12) | 0;
              HEAP32[$bk352 >> 2] = $30;
              $fd353 = ($30 + 8) | 0;
              HEAP32[$fd353 >> 2] = $31;
              $R328$3 = $30;
            }
          } while (0);
          $cmp393 = ($29 | 0) == (0 | 0);
          if (!$cmp393) {
            $index398 = ($add$ptr + 28) | 0;
            $36 = HEAP32[$index398 >> 2] | 0;
            $arrayidx399 = (17968 + ($36 << 2)) | 0;
            $37 = HEAP32[$arrayidx399 >> 2] | 0;
            $cmp400 = ($37 | 0) == ($add$ptr | 0);
            if ($cmp400) {
              HEAP32[$arrayidx399 >> 2] = $R328$3;
              $cond3 = ($R328$3 | 0) == (0 | 0);
              if ($cond3) {
                $shl407 = 1 << $36;
                $neg408 = $shl407 ^ -1;
                $38 = HEAP32[17668 >> 2] | 0;
                $and410 = $38 & $neg408;
                HEAP32[17668 >> 2] = $and410;
                break;
              }
            } else {
              $arrayidx420 = ($29 + 16) | 0;
              $39 = HEAP32[$arrayidx420 >> 2] | 0;
              $cmp421 = ($39 | 0) == ($add$ptr | 0);
              $arrayidx428 = ($29 + 20) | 0;
              $arrayidx428$sink = $cmp421 ? $arrayidx420 : $arrayidx428;
              HEAP32[$arrayidx428$sink >> 2] = $R328$3;
              $cmp433 = ($R328$3 | 0) == (0 | 0);
              if ($cmp433) {
                break;
              }
            }
            $parent444 = ($R328$3 + 24) | 0;
            HEAP32[$parent444 >> 2] = $29;
            $child445 = ($add$ptr + 16) | 0;
            $40 = HEAP32[$child445 >> 2] | 0;
            $cmp447 = ($40 | 0) == (0 | 0);
            if (!$cmp447) {
              $arrayidx457 = ($R328$3 + 16) | 0;
              HEAP32[$arrayidx457 >> 2] = $40;
              $parent458 = ($40 + 24) | 0;
              HEAP32[$parent458 >> 2] = $R328$3;
            }
            $arrayidx463 = ($child445 + 4) | 0;
            $41 = HEAP32[$arrayidx463 >> 2] | 0;
            $cmp464 = ($41 | 0) == (0 | 0);
            if (!$cmp464) {
              $arrayidx474 = ($R328$3 + 20) | 0;
              HEAP32[$arrayidx474 >> 2] = $41;
              $parent475 = ($41 + 24) | 0;
              HEAP32[$parent475 >> 2] = $R328$3;
            }
          }
        }
      } while (0);
      $or484 = $add258 | 1;
      $head485 = ($p$addr$1 + 4) | 0;
      HEAP32[$head485 >> 2] = $or484;
      $add$ptr486 = ($p$addr$1 + $add258) | 0;
      HEAP32[$add$ptr486 >> 2] = $add258;
      $42 = HEAP32[17684 >> 2] | 0;
      $cmp489 = ($p$addr$1 | 0) == ($42 | 0);
      if ($cmp489) {
        HEAP32[17672 >> 2] = $add258;
        return;
      } else {
        $psize$addr$2 = $add258;
      }
    } else {
      $and501 = $20 & -2;
      HEAP32[$head223 >> 2] = $and501;
      $or502 = $psize$addr$1 | 1;
      $head503 = ($p$addr$1 + 4) | 0;
      HEAP32[$head503 >> 2] = $or502;
      $add$ptr504 = ($p$addr$1 + $psize$addr$1) | 0;
      HEAP32[$add$ptr504 >> 2] = $psize$addr$1;
      $psize$addr$2 = $psize$addr$1;
    }
    $shr507 = $psize$addr$2 >>> 3;
    $cmp508 = $psize$addr$2 >>> 0 < 256;
    if ($cmp508) {
      $shl515 = $shr507 << 1;
      $arrayidx516 = (17704 + ($shl515 << 2)) | 0;
      $43 = HEAP32[4416] | 0;
      $shl519 = 1 << $shr507;
      $and520 = $43 & $shl519;
      $tobool521 = ($and520 | 0) == 0;
      if ($tobool521) {
        $or525 = $43 | $shl519;
        HEAP32[4416] = $or525;
        $$pre = ($arrayidx516 + 8) | 0;
        $$pre$phiZ2D = $$pre;
        $F517$0 = $arrayidx516;
      } else {
        $44 = ($arrayidx516 + 8) | 0;
        $45 = HEAP32[$44 >> 2] | 0;
        $$pre$phiZ2D = $44;
        $F517$0 = $45;
      }
      HEAP32[$$pre$phiZ2D >> 2] = $p$addr$1;
      $bk539 = ($F517$0 + 12) | 0;
      HEAP32[$bk539 >> 2] = $p$addr$1;
      $fd540 = ($p$addr$1 + 8) | 0;
      HEAP32[$fd540 >> 2] = $F517$0;
      $bk541 = ($p$addr$1 + 12) | 0;
      HEAP32[$bk541 >> 2] = $arrayidx516;
      return;
    }
    $shr546 = $psize$addr$2 >>> 8;
    $cmp547 = ($shr546 | 0) == 0;
    if ($cmp547) {
      $I545$0 = 0;
    } else {
      $cmp551 = $psize$addr$2 >>> 0 > 16777215;
      if ($cmp551) {
        $I545$0 = 31;
      } else {
        $sub = ($shr546 + 1048320) | 0;
        $shr555 = $sub >>> 16;
        $and556 = $shr555 & 8;
        $shl557 = $shr546 << $and556;
        $sub558 = ($shl557 + 520192) | 0;
        $shr559 = $sub558 >>> 16;
        $and560 = $shr559 & 4;
        $add561 = $and560 | $and556;
        $shl562 = $shl557 << $and560;
        $sub563 = ($shl562 + 245760) | 0;
        $shr564 = $sub563 >>> 16;
        $and565 = $shr564 & 2;
        $add566 = $add561 | $and565;
        $sub567 = (14 - $add566) | 0;
        $shl568 = $shl562 << $and565;
        $shr569 = $shl568 >>> 15;
        $add570 = ($sub567 + $shr569) | 0;
        $shl571 = $add570 << 1;
        $add572 = ($add570 + 7) | 0;
        $shr573 = $psize$addr$2 >>> $add572;
        $and574 = $shr573 & 1;
        $add575 = $and574 | $shl571;
        $I545$0 = $add575;
      }
    }
    $arrayidx579 = (17968 + ($I545$0 << 2)) | 0;
    $index580 = ($p$addr$1 + 28) | 0;
    HEAP32[$index580 >> 2] = $I545$0;
    $child581 = ($p$addr$1 + 16) | 0;
    $arrayidx582 = ($p$addr$1 + 20) | 0;
    HEAP32[$arrayidx582 >> 2] = 0;
    HEAP32[$child581 >> 2] = 0;
    $46 = HEAP32[17668 >> 2] | 0;
    $shl586 = 1 << $I545$0;
    $and587 = $46 & $shl586;
    $tobool588 = ($and587 | 0) == 0;
    if ($tobool588) {
      $or592 = $46 | $shl586;
      HEAP32[17668 >> 2] = $or592;
      HEAP32[$arrayidx579 >> 2] = $p$addr$1;
      $parent593 = ($p$addr$1 + 24) | 0;
      HEAP32[$parent593 >> 2] = $arrayidx579;
      $bk594 = ($p$addr$1 + 12) | 0;
      HEAP32[$bk594 >> 2] = $p$addr$1;
      $fd595 = ($p$addr$1 + 8) | 0;
      HEAP32[$fd595 >> 2] = $p$addr$1;
      return;
    }
    $47 = HEAP32[$arrayidx579 >> 2] | 0;
    $head6056 = ($47 + 4) | 0;
    $48 = HEAP32[$head6056 >> 2] | 0;
    $and6067 = $48 & -8;
    $cmp6078 = ($and6067 | 0) == ($psize$addr$2 | 0);
    L104: do {
      if ($cmp6078) {
        $T$0$lcssa = $47;
      } else {
        $cmp598 = ($I545$0 | 0) == 31;
        $shr600 = $I545$0 >>> 1;
        $sub603 = (25 - $shr600) | 0;
        $cond = $cmp598 ? 0 : $sub603;
        $shl604 = $psize$addr$2 << $cond;
        $K597$010 = $shl604;
        $T$09 = $47;
        while (1) {
          $shr611 = $K597$010 >>> 31;
          $arrayidx613 = ((($T$09 + 16) | 0) + ($shr611 << 2)) | 0;
          $49 = HEAP32[$arrayidx613 >> 2] | 0;
          $cmp615 = ($49 | 0) == (0 | 0);
          if ($cmp615) {
            break;
          }
          $shl614 = $K597$010 << 1;
          $head605 = ($49 + 4) | 0;
          $50 = HEAP32[$head605 >> 2] | 0;
          $and606 = $50 & -8;
          $cmp607 = ($and606 | 0) == ($psize$addr$2 | 0);
          if ($cmp607) {
            $T$0$lcssa = $49;
            break L104;
          } else {
            $K597$010 = $shl614;
            $T$09 = $49;
          }
        }
        HEAP32[$arrayidx613 >> 2] = $p$addr$1;
        $parent625 = ($p$addr$1 + 24) | 0;
        HEAP32[$parent625 >> 2] = $T$09;
        $bk626 = ($p$addr$1 + 12) | 0;
        HEAP32[$bk626 >> 2] = $p$addr$1;
        $fd627 = ($p$addr$1 + 8) | 0;
        HEAP32[$fd627 >> 2] = $p$addr$1;
        return;
      }
    } while (0);
    $fd635 = ($T$0$lcssa + 8) | 0;
    $51 = HEAP32[$fd635 >> 2] | 0;
    $bk648 = ($51 + 12) | 0;
    HEAP32[$bk648 >> 2] = $p$addr$1;
    HEAP32[$fd635 >> 2] = $p$addr$1;
    $fd650 = ($p$addr$1 + 8) | 0;
    HEAP32[$fd650 >> 2] = $51;
    $bk651 = ($p$addr$1 + 12) | 0;
    HEAP32[$bk651 >> 2] = $T$0$lcssa;
    $parent652 = ($p$addr$1 + 24) | 0;
    HEAP32[$parent652 >> 2] = 0;
    return;
  }
  function __ZSt18uncaught_exceptionv() {
    var $call = 0,
      $cmp = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZSt19uncaught_exceptionsv() | 0;
    $cmp = ($call | 0) > 0;
    return $cmp | 0;
  }
  function __ZSt19uncaught_exceptionsv() {
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = ___cxa_uncaught_exceptions() | 0;
    return $call | 0;
  }
  function __Znwm($size) {
    $size = $size | 0;
    var $call = 0,
      $call$lcssa = 0,
      $call2 = 0,
      $cmp = 0,
      $cmp1 = 0,
      $spec$store$select = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $cmp = ($size | 0) == 0;
    $spec$store$select = $cmp ? 1 : $size;
    while (1) {
      $call = _malloc($spec$store$select) | 0;
      $cmp1 = ($call | 0) == (0 | 0);
      if (!$cmp1) {
        $call$lcssa = $call;
        break;
      }
      $call2 = __ZSt15get_new_handlerv() | 0;
      $tobool = ($call2 | 0) == (0 | 0);
      if ($tobool) {
        $call$lcssa = 0;
        break;
      }
      FUNCTION_TABLE_v[$call2 & 511]();
    }
    return $call$lcssa | 0;
  }
  function __ZdlPv($ptr) {
    $ptr = $ptr | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    _free($ptr);
    return;
  }
  function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(
    $this
  ) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    _abort();
    // unreachable;
  }
  function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm(
    $this,
    $__s,
    $__sz
  ) {
    $this = $this | 0;
    $__s = $__s | 0;
    $__sz = $__sz | 0;
    var $__cap_$i = 0,
      $__p$0 = 0,
      $__size_$i = 0,
      $__size_$i12 = 0,
      $add$i$i = 0,
      $and$i$i = 0,
      $arrayidx = 0,
      $call$i$i$i = 0,
      $cmp = 0,
      $cmp2 = 0,
      $conv$i = 0,
      $or$i = 0,
      $ref$tmp = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ref$tmp = sp;
    $cmp = $__sz >>> 0 > 4294967279;
    if ($cmp) {
      __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
      // unreachable;
    }
    $cmp2 = $__sz >>> 0 < 11;
    if ($cmp2) {
      $conv$i = $__sz & 255;
      $__size_$i = ($this + 11) | 0;
      HEAP8[$__size_$i >> 0] = $conv$i;
      $__p$0 = $this;
    } else {
      $add$i$i = ($__sz + 16) | 0;
      $and$i$i = $add$i$i & -16;
      $call$i$i$i = __Znwm($and$i$i) | 0;
      HEAP32[$this >> 2] = $call$i$i$i;
      $or$i = $and$i$i | -2147483648;
      $__cap_$i = ($this + 8) | 0;
      HEAP32[$__cap_$i >> 2] = $or$i;
      $__size_$i12 = ($this + 4) | 0;
      HEAP32[$__size_$i12 >> 2] = $__sz;
      $__p$0 = $call$i$i$i;
    }
    __ZNSt3__211char_traitsIcE4copyEPcPKcm($__p$0, $__s, $__sz) | 0;
    $arrayidx = ($__p$0 + $__sz) | 0;
    HEAP8[$ref$tmp >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx, $ref$tmp);
    STACKTOP = sp;
    return;
  }
  function __ZNSt3__211char_traitsIcE4copyEPcPKcm($__s1, $__s2, $__n) {
    $__s1 = $__s1 | 0;
    $__s2 = $__s2 | 0;
    $__n = $__n | 0;
    var $cmp = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $cmp = ($__n | 0) == 0;
    if (!$cmp) {
      _memcpy($__s1 | 0, $__s2 | 0, $__n | 0) | 0;
    }
    return $__s1 | 0;
  }
  function __ZNSt3__211char_traitsIcE6assignERcRKc($__c1, $__c2) {
    $__c1 = $__c1 | 0;
    $__c2 = $__c2 | 0;
    var $0 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP8[$__c2 >> 0] | 0;
    HEAP8[$__c1 >> 0] = $0;
    return;
  }
  function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $__cap_$i = 0,
      $__size_$i = 0,
      $and$i = 0,
      $tobool$i = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $__size_$i = ($this + 11) | 0;
    $0 = HEAP8[$__size_$i >> 0] | 0;
    $tobool$i = ($0 << 24) >> 24 < 0;
    if ($tobool$i) {
      $1 = HEAP32[$this >> 2] | 0;
      $__cap_$i = ($this + 8) | 0;
      $2 = HEAP32[$__cap_$i >> 2] | 0;
      $and$i = $2 & 2147483647;
      __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm(
        $1,
        $and$i
      );
    }
    return;
  }
  function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(
    $this
  ) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    _abort();
    // unreachable;
  }
  function __ZL28demangling_terminate_handlerv() {
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $__type_name$i = 0,
      $add$ptr = 0,
      $buf = 0,
      $call = 0,
      $call13 = 0;
    var $call17 = 0,
      $call4 = 0,
      $call9 = 0,
      $cmp10 = 0,
      $cond = 0,
      $len = 0,
      $name$0 = 0,
      $primaryException = 0,
      $status = 0,
      $thrown_object = 0,
      $tobool = 0,
      $tobool1 = 0,
      $vararg_buffer = 0,
      $vararg_buffer10 = 0,
      $vararg_buffer3 = 0,
      $vararg_buffer7 = 0,
      $vararg_ptr1 = 0,
      $vararg_ptr2 = 0,
      $vararg_ptr6 = 0,
      $vfn = 0;
    var $vfn16 = 0,
      $vtable = 0,
      $vtable15 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 1072) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1072 | 0);
    $vararg_buffer10 = (sp + 1056) | 0;
    $vararg_buffer7 = (sp + 1048) | 0;
    $vararg_buffer3 = (sp + 1040) | 0;
    $vararg_buffer = (sp + 1024) | 0;
    $thrown_object = (sp + 1068) | 0;
    $status = (sp + 1064) | 0;
    $buf = sp;
    $len = (sp + 1060) | 0;
    $call = ___cxa_get_globals_fast() | 0;
    $tobool = ($call | 0) == (0 | 0);
    if (!$tobool) {
      $0 = HEAP32[$call >> 2] | 0;
      $tobool1 = ($0 | 0) == (0 | 0);
      if (!$tobool1) {
        $add$ptr = ($0 + 80) | 0;
        $1 = ($0 + 48) | 0;
        $call4 =
          __ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception($1) | 0;
        if (!$call4) {
          HEAP32[$vararg_buffer7 >> 2] = 10250;
          _abort_message(10200, $vararg_buffer7);
          // unreachable;
        }
        $2 =
          __ZN10__cxxabiv119__getExceptionClassEPK17_Unwind_Exception($1) | 0;
        $3 = getTempRet0() | 0;
        $4 = ($2 | 0) == 1126902529;
        $5 = ($3 | 0) == 1129074247;
        $6 = $4 & $5;
        if ($6) {
          $primaryException = ($0 + 44) | 0;
          $7 = HEAP32[$primaryException >> 2] | 0;
          $cond = $7;
        } else {
          $cond = $add$ptr;
        }
        HEAP32[$thrown_object >> 2] = $cond;
        $8 = HEAP32[$0 >> 2] | 0;
        HEAP32[$len >> 2] = 1024;
        $__type_name$i = ($8 + 4) | 0;
        $9 = HEAP32[$__type_name$i >> 2] | 0;
        $call9 = ___cxa_demangle($9, $buf, $len, $status) | 0;
        $10 = HEAP32[$status >> 2] | 0;
        $cmp10 = ($10 | 0) == 0;
        if ($cmp10) {
          $name$0 = $call9;
        } else {
          $11 = HEAP32[$__type_name$i >> 2] | 0;
          $name$0 = $11;
        }
        $vtable = HEAP32[362] | 0;
        $vfn = ($vtable + 16) | 0;
        $12 = HEAP32[$vfn >> 2] | 0;
        $call13 = FUNCTION_TABLE_iiii[$12 & 511](1448, $8, $thrown_object) | 0;
        if ($call13) {
          $13 = HEAP32[$thrown_object >> 2] | 0;
          $vtable15 = HEAP32[$13 >> 2] | 0;
          $vfn16 = ($vtable15 + 8) | 0;
          $14 = HEAP32[$vfn16 >> 2] | 0;
          $call17 = FUNCTION_TABLE_ii[$14 & 511]($13) | 0;
          HEAP32[$vararg_buffer >> 2] = 10250;
          $vararg_ptr1 = ($vararg_buffer + 4) | 0;
          HEAP32[$vararg_ptr1 >> 2] = $name$0;
          $vararg_ptr2 = ($vararg_buffer + 8) | 0;
          HEAP32[$vararg_ptr2 >> 2] = $call17;
          _abort_message(10114, $vararg_buffer);
          // unreachable;
        } else {
          HEAP32[$vararg_buffer3 >> 2] = 10250;
          $vararg_ptr6 = ($vararg_buffer3 + 4) | 0;
          HEAP32[$vararg_ptr6 >> 2] = $name$0;
          _abort_message(10159, $vararg_buffer3);
          // unreachable;
        }
      }
    }
    _abort_message(10238, $vararg_buffer10);
    // unreachable;
  }
  function ___cxa_get_globals_fast() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 18160 | 0;
  }
  function __ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception(
    $unwind_exception
  ) {
    $unwind_exception = $unwind_exception | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 =
      __ZN10__cxxabiv119__getExceptionClassEPK17_Unwind_Exception(
        $unwind_exception
      ) | 0;
    $1 = getTempRet0() | 0;
    $2 = $0 & -256;
    $3 = ($2 | 0) == 1126902528;
    $4 = ($1 | 0) == 1129074247;
    $5 = $3 & $4;
    return $5 | 0;
  }
  function __ZN10__cxxabiv119__getExceptionClassEPK17_Unwind_Exception(
    $unwind_exception
  ) {
    $unwind_exception = $unwind_exception | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = $unwind_exception;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    setTempRet0($5 | 0);
    return $2 | 0;
  }
  function ___cxa_demangle($MangledName, $Buf, $N, $Status) {
    $MangledName = $MangledName | 0;
    $Buf = $Buf | 0;
    $N = $N | 0;
    $Status = $Status | 0;
    var $Buf$addr$0 = 0,
      $InternalStatus$0 = 0,
      $Parser = 0,
      $S = 0,
      $add$ptr = 0,
      $call = 0,
      $call18 = 0,
      $call21 = 0,
      $call5 = 0,
      $call9 = 0,
      $cmp = 0,
      $cmp1 = 0,
      $cmp2 = 0,
      $cmp27 = 0,
      $cmp6 = 0,
      $cond = 0,
      $or$cond = 0,
      $retval$0 = 0,
      $tobool = 0,
      $tobool24 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 4496) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(4496 | 0);
    $Parser = sp;
    $S = (sp + 4472) | 0;
    $cmp = ($MangledName | 0) == (0 | 0);
    if ($cmp) {
      label = 3;
    } else {
      $cmp1 = ($Buf | 0) != (0 | 0);
      $cmp2 = ($N | 0) == (0 | 0);
      $or$cond = $cmp1 & $cmp2;
      if ($or$cond) {
        label = 3;
      } else {
        $call = _strlen($MangledName) | 0;
        $add$ptr = ($MangledName + $call) | 0;
        __ZN12_GLOBAL__N_116itanium_demangle14ManglingParserINS_16DefaultAllocatorEECI2NS0_22AbstractManglingParserIS3_S2_EEEPKcS6_(
          $Parser,
          $MangledName,
          $add$ptr
        );
        __ZN12_GLOBAL__N_112OutputStreamC2Ev($S);
        $call5 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E5parseEv(
            $Parser
          ) | 0;
        $cmp6 = ($call5 | 0) == (0 | 0);
        if ($cmp6) {
          $Buf$addr$0 = $Buf;
          $InternalStatus$0 = -2;
        } else {
          $call9 =
            __ZN12_GLOBAL__N_122initializeOutputStreamEPcPmRNS_12OutputStreamEm(
              $Buf,
              $N,
              $S
            ) | 0;
          if ($call9) {
            __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
              $call5,
              $S
            );
            __ZN12_GLOBAL__N_112OutputStreampLEc($S, 0);
            if (!$cmp2) {
              $call18 =
                __ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S) | 0;
              HEAP32[$N >> 2] = $call18;
            }
            $call21 = __ZN12_GLOBAL__N_112OutputStream9getBufferEv($S) | 0;
            $Buf$addr$0 = $call21;
            $InternalStatus$0 = 0;
          } else {
            $Buf$addr$0 = $Buf;
            $InternalStatus$0 = -1;
          }
        }
        $tobool24 = ($Status | 0) == (0 | 0);
        if (!$tobool24) {
          HEAP32[$Status >> 2] = $InternalStatus$0;
        }
        $cmp27 = ($InternalStatus$0 | 0) == 0;
        $cond = $cmp27 ? $Buf$addr$0 : 0;
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_ED2Ev(
          $Parser
        );
        $retval$0 = $cond;
      }
    }
    if ((label | 0) == 3) {
      $tobool = ($Status | 0) == (0 | 0);
      if ($tobool) {
        $retval$0 = 0;
      } else {
        HEAP32[$Status >> 2] = -3;
        $retval$0 = 0;
      }
    }
    STACKTOP = sp;
    return $retval$0 | 0;
  }
  function _abort_message($format, $varargs) {
    $format = $format | 0;
    $varargs = $varargs | 0;
    var $0 = 0,
      $list = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $list = sp;
    HEAP32[$list >> 2] = $varargs;
    $0 = HEAP32[726] | 0;
    _vfprintf($0, $format, $list) | 0;
    _fputc(10, $0) | 0;
    _abort();
    // unreachable;
  }
  function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return;
  }
  function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
    __ZdlPv($this);
    return;
  }
  function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return;
  }
  function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return;
  }
  function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv(
    $this,
    $thrown_type,
    $adjustedPtr
  ) {
    $this = $this | 0;
    $thrown_type = $thrown_type | 0;
    $adjustedPtr = $adjustedPtr | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $call = 0,
      $cmp = 0,
      $cmp6 = 0,
      $dst_ptr_leading_to_static_ptr = 0,
      $info = 0,
      $number_of_dst_type = 0,
      $path_dst_ptr_to_static_ptr = 0,
      $retval$0 = 0,
      $retval$2 = 0,
      $src2dst_offset = 0,
      $static_ptr = 0,
      $static_type = 0,
      $vfn = 0,
      $vtable = 0;
    var dest = 0,
      label = 0,
      sp = 0,
      stop = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 64) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
    $info = sp;
    $call = __ZL8is_equalPKSt9type_infoS1_b($this, $thrown_type, 0) | 0;
    if ($call) {
      $retval$2 = 1;
    } else {
      $0 = ($thrown_type | 0) == (0 | 0);
      if ($0) {
        $retval$2 = 0;
      } else {
        $1 = ___dynamic_cast($thrown_type, 1472, 1456, 0) | 0;
        $cmp = ($1 | 0) == (0 | 0);
        if ($cmp) {
          $retval$2 = 0;
        } else {
          HEAP32[$info >> 2] = $1;
          $static_ptr = ($info + 4) | 0;
          HEAP32[$static_ptr >> 2] = 0;
          $static_type = ($info + 8) | 0;
          HEAP32[$static_type >> 2] = $this;
          $src2dst_offset = ($info + 12) | 0;
          HEAP32[$src2dst_offset >> 2] = -1;
          $dst_ptr_leading_to_static_ptr = ($info + 16) | 0;
          $path_dst_ptr_to_static_ptr = ($info + 24) | 0;
          $number_of_dst_type = ($info + 48) | 0;
          dest = $dst_ptr_leading_to_static_ptr;
          stop = (dest + 36) | 0;
          do {
            HEAP32[dest >> 2] = 0 | 0;
            dest = (dest + 4) | 0;
          } while ((dest | 0) < (stop | 0));
          HEAP16[($dst_ptr_leading_to_static_ptr + 36) >> 1] = 0 | 0;
          HEAP8[($dst_ptr_leading_to_static_ptr + 38) >> 0] = 0 | 0;
          HEAP32[$number_of_dst_type >> 2] = 1;
          $vtable = HEAP32[$1 >> 2] | 0;
          $vfn = ($vtable + 28) | 0;
          $2 = HEAP32[$vfn >> 2] | 0;
          $3 = HEAP32[$adjustedPtr >> 2] | 0;
          FUNCTION_TABLE_viiii[$2 & 511]($1, $info, $3, 1);
          $4 = HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0;
          $cmp6 = ($4 | 0) == 1;
          if ($cmp6) {
            $5 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
            HEAP32[$adjustedPtr >> 2] = $5;
            $retval$0 = 1;
          } else {
            $retval$0 = 0;
          }
          $retval$2 = $retval$0;
        }
      }
    }
    STACKTOP = sp;
    return $retval$2 | 0;
  }
  function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(
    $this,
    $info,
    $dst_ptr,
    $current_ptr,
    $path_below,
    $use_strcmp
  ) {
    $this = $this | 0;
    $info = $info | 0;
    $dst_ptr = $dst_ptr | 0;
    $current_ptr = $current_ptr | 0;
    $path_below = $path_below | 0;
    $use_strcmp = $use_strcmp | 0;
    var $0 = 0,
      $call = 0,
      $static_type = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $static_type = ($info + 8) | 0;
    $0 = HEAP32[$static_type >> 2] | 0;
    $call = __ZL8is_equalPKSt9type_infoS1_b($this, $0, $use_strcmp) | 0;
    if ($call) {
      __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(
        0,
        $info,
        $dst_ptr,
        $current_ptr,
        $path_below
      );
    }
    return;
  }
  function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(
    $this,
    $info,
    $current_ptr,
    $path_below,
    $use_strcmp
  ) {
    $this = $this | 0;
    $info = $info | 0;
    $current_ptr = $current_ptr | 0;
    $path_below = $path_below | 0;
    $use_strcmp = $use_strcmp | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $add = 0,
      $call = 0,
      $call3 = 0,
      $cmp = 0,
      $cmp12 = 0,
      $cmp13 = 0,
      $cmp5 = 0,
      $cmp7 = 0,
      $dst_ptr_leading_to_static_ptr = 0,
      $dst_ptr_not_leading_to_static_ptr = 0,
      $is_dst_type_derived_from_static_type = 0,
      $number_to_dst_ptr = 0,
      $number_to_static_ptr = 0;
    var $path_dst_ptr_to_static_ptr = 0,
      $path_dynamic_ptr_to_dst_ptr = 0,
      $path_dynamic_ptr_to_dst_ptr10 = 0,
      $search_done = 0,
      $static_type = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $static_type = ($info + 8) | 0;
    $0 = HEAP32[$static_type >> 2] | 0;
    $call = __ZL8is_equalPKSt9type_infoS1_b($this, $0, $use_strcmp) | 0;
    do {
      if ($call) {
        __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(
          0,
          $info,
          $current_ptr,
          $path_below
        );
      } else {
        $1 = HEAP32[$info >> 2] | 0;
        $call3 = __ZL8is_equalPKSt9type_infoS1_b($this, $1, $use_strcmp) | 0;
        if ($call3) {
          $dst_ptr_leading_to_static_ptr = ($info + 16) | 0;
          $2 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
          $cmp = ($2 | 0) == ($current_ptr | 0);
          if (!$cmp) {
            $dst_ptr_not_leading_to_static_ptr = ($info + 20) | 0;
            $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0;
            $cmp5 = ($3 | 0) == ($current_ptr | 0);
            if (!$cmp5) {
              $path_dynamic_ptr_to_dst_ptr10 = ($info + 32) | 0;
              HEAP32[$path_dynamic_ptr_to_dst_ptr10 >> 2] = $path_below;
              HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
              $number_to_dst_ptr = ($info + 40) | 0;
              $4 = HEAP32[$number_to_dst_ptr >> 2] | 0;
              $add = ($4 + 1) | 0;
              HEAP32[$number_to_dst_ptr >> 2] = $add;
              $number_to_static_ptr = ($info + 36) | 0;
              $5 = HEAP32[$number_to_static_ptr >> 2] | 0;
              $cmp12 = ($5 | 0) == 1;
              if ($cmp12) {
                $path_dst_ptr_to_static_ptr = ($info + 24) | 0;
                $6 = HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0;
                $cmp13 = ($6 | 0) == 2;
                if ($cmp13) {
                  $search_done = ($info + 54) | 0;
                  HEAP8[$search_done >> 0] = 1;
                }
              }
              $is_dst_type_derived_from_static_type = ($info + 44) | 0;
              HEAP32[$is_dst_type_derived_from_static_type >> 2] = 4;
              break;
            }
          }
          $cmp7 = ($path_below | 0) == 1;
          if ($cmp7) {
            $path_dynamic_ptr_to_dst_ptr = ($info + 32) | 0;
            HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] = 1;
          }
        }
      }
    } while (0);
    return;
  }
  function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(
    $this,
    $info,
    $adjustedPtr,
    $path_below
  ) {
    $this = $this | 0;
    $info = $info | 0;
    $adjustedPtr = $adjustedPtr | 0;
    $path_below = $path_below | 0;
    var $0 = 0,
      $call = 0,
      $static_type = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $static_type = ($info + 8) | 0;
    $0 = HEAP32[$static_type >> 2] | 0;
    $call = __ZL8is_equalPKSt9type_infoS1_b($this, $0, 0) | 0;
    if ($call) {
      __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(
        0,
        $info,
        $adjustedPtr,
        $path_below
      );
    }
    return;
  }
  function __ZL8is_equalPKSt9type_infoS1_b($x, $y, $use_strcmp) {
    $x = $x | 0;
    $y = $y | 0;
    $use_strcmp = $use_strcmp | 0;
    var $0 = 0,
      $1 = 0,
      $__type_name$i = 0,
      $__type_name$i2 = 0,
      $call2 = 0,
      $cmp = 0,
      $cmp3 = 0,
      $retval$0 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    if ($use_strcmp) {
      $__type_name$i = ($x + 4) | 0;
      $0 = HEAP32[$__type_name$i >> 2] | 0;
      $__type_name$i2 = ($y + 4) | 0;
      $1 = HEAP32[$__type_name$i2 >> 2] | 0;
      $call2 = _strcmp($0, $1) | 0;
      $cmp3 = ($call2 | 0) == 0;
      $retval$0 = $cmp3;
    } else {
      $cmp = ($x | 0) == ($y | 0);
      $retval$0 = $cmp;
    }
    return $retval$0 | 0;
  }
  function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(
    $this,
    $info,
    $adjustedPtr,
    $path_below
  ) {
    $this = $this | 0;
    $info = $info | 0;
    $adjustedPtr = $adjustedPtr | 0;
    $path_below = $path_below | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $add = 0,
      $cmp = 0,
      $cmp4 = 0,
      $cmp7 = 0,
      $dst_ptr_leading_to_static_ptr = 0,
      $number_to_static_ptr = 0,
      $number_to_static_ptr11 = 0,
      $path_dst_ptr_to_static_ptr = 0,
      $path_dst_ptr_to_static_ptr12 = 0,
      $path_dst_ptr_to_static_ptr6 = 0,
      $search_done = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $dst_ptr_leading_to_static_ptr = ($info + 16) | 0;
    $0 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
    $cmp = ($0 | 0) == (0 | 0);
    do {
      if ($cmp) {
        HEAP32[$dst_ptr_leading_to_static_ptr >> 2] = $adjustedPtr;
        $path_dst_ptr_to_static_ptr = ($info + 24) | 0;
        HEAP32[$path_dst_ptr_to_static_ptr >> 2] = $path_below;
        $number_to_static_ptr = ($info + 36) | 0;
        HEAP32[$number_to_static_ptr >> 2] = 1;
      } else {
        $cmp4 = ($0 | 0) == ($adjustedPtr | 0);
        if (!$cmp4) {
          $number_to_static_ptr11 = ($info + 36) | 0;
          $2 = HEAP32[$number_to_static_ptr11 >> 2] | 0;
          $add = ($2 + 1) | 0;
          HEAP32[$number_to_static_ptr11 >> 2] = $add;
          $path_dst_ptr_to_static_ptr12 = ($info + 24) | 0;
          HEAP32[$path_dst_ptr_to_static_ptr12 >> 2] = 2;
          $search_done = ($info + 54) | 0;
          HEAP8[$search_done >> 0] = 1;
          break;
        }
        $path_dst_ptr_to_static_ptr6 = ($info + 24) | 0;
        $1 = HEAP32[$path_dst_ptr_to_static_ptr6 >> 2] | 0;
        $cmp7 = ($1 | 0) == 2;
        if ($cmp7) {
          HEAP32[$path_dst_ptr_to_static_ptr6 >> 2] = $path_below;
        }
      }
    } while (0);
    return;
  }
  function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(
    $this,
    $info,
    $current_ptr,
    $path_below
  ) {
    $this = $this | 0;
    $info = $info | 0;
    $current_ptr = $current_ptr | 0;
    $path_below = $path_below | 0;
    var $0 = 0,
      $1 = 0,
      $cmp = 0,
      $cmp2 = 0,
      $path_dynamic_ptr_to_static_ptr = 0,
      $static_ptr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $static_ptr = ($info + 4) | 0;
    $0 = HEAP32[$static_ptr >> 2] | 0;
    $cmp = ($0 | 0) == ($current_ptr | 0);
    if ($cmp) {
      $path_dynamic_ptr_to_static_ptr = ($info + 28) | 0;
      $1 = HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0;
      $cmp2 = ($1 | 0) == 1;
      if (!$cmp2) {
        HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] = $path_below;
      }
    }
    return;
  }
  function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(
    $this,
    $info,
    $dst_ptr,
    $current_ptr,
    $path_below
  ) {
    $this = $this | 0;
    $info = $info | 0;
    $dst_ptr = $dst_ptr | 0;
    $current_ptr = $current_ptr | 0;
    $path_below = $path_below | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $add = 0,
      $cmp = 0,
      $cmp10 = 0,
      $cmp13 = 0,
      $cmp18 = 0,
      $cmp2 = 0,
      $cmp21 = 0,
      $cmp5 = 0,
      $cmp7 = 0,
      $dst_ptr_leading_to_static_ptr = 0,
      $found_any_static_type = 0,
      $found_our_static_ptr = 0,
      $number_of_dst_type = 0;
    var $number_of_dst_type17 = 0,
      $number_to_static_ptr = 0,
      $number_to_static_ptr26 = 0,
      $or$cond = 0,
      $or$cond19 = 0,
      $path_dst_ptr_to_static_ptr = 0,
      $path_dst_ptr_to_static_ptr12 = 0,
      $search_done = 0,
      $search_done23 = 0,
      $search_done27 = 0,
      $static_ptr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $found_any_static_type = ($info + 53) | 0;
    HEAP8[$found_any_static_type >> 0] = 1;
    $static_ptr = ($info + 4) | 0;
    $0 = HEAP32[$static_ptr >> 2] | 0;
    $cmp = ($0 | 0) == ($current_ptr | 0);
    do {
      if ($cmp) {
        $found_our_static_ptr = ($info + 52) | 0;
        HEAP8[$found_our_static_ptr >> 0] = 1;
        $dst_ptr_leading_to_static_ptr = ($info + 16) | 0;
        $1 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
        $cmp2 = ($1 | 0) == (0 | 0);
        if ($cmp2) {
          HEAP32[$dst_ptr_leading_to_static_ptr >> 2] = $dst_ptr;
          $path_dst_ptr_to_static_ptr = ($info + 24) | 0;
          HEAP32[$path_dst_ptr_to_static_ptr >> 2] = $path_below;
          $number_to_static_ptr = ($info + 36) | 0;
          HEAP32[$number_to_static_ptr >> 2] = 1;
          $number_of_dst_type = ($info + 48) | 0;
          $2 = HEAP32[$number_of_dst_type >> 2] | 0;
          $cmp5 = ($2 | 0) == 1;
          $cmp7 = ($path_below | 0) == 1;
          $or$cond = $cmp7 & $cmp5;
          if (!$or$cond) {
            break;
          }
          $search_done = ($info + 54) | 0;
          HEAP8[$search_done >> 0] = 1;
          break;
        }
        $cmp10 = ($1 | 0) == ($dst_ptr | 0);
        if (!$cmp10) {
          $number_to_static_ptr26 = ($info + 36) | 0;
          $6 = HEAP32[$number_to_static_ptr26 >> 2] | 0;
          $add = ($6 + 1) | 0;
          HEAP32[$number_to_static_ptr26 >> 2] = $add;
          $search_done27 = ($info + 54) | 0;
          HEAP8[$search_done27 >> 0] = 1;
          break;
        }
        $path_dst_ptr_to_static_ptr12 = ($info + 24) | 0;
        $3 = HEAP32[$path_dst_ptr_to_static_ptr12 >> 2] | 0;
        $cmp13 = ($3 | 0) == 2;
        if ($cmp13) {
          HEAP32[$path_dst_ptr_to_static_ptr12 >> 2] = $path_below;
          $5 = $path_below;
        } else {
          $5 = $3;
        }
        $number_of_dst_type17 = ($info + 48) | 0;
        $4 = HEAP32[$number_of_dst_type17 >> 2] | 0;
        $cmp18 = ($4 | 0) == 1;
        $cmp21 = ($5 | 0) == 1;
        $or$cond19 = $cmp18 & $cmp21;
        if ($or$cond19) {
          $search_done23 = ($info + 54) | 0;
          HEAP8[$search_done23 >> 0] = 1;
        }
      }
    } while (0);
    return;
  }
  function ___dynamic_cast(
    $static_ptr,
    $static_type,
    $dst_type,
    $src2dst_offset
  ) {
    $static_ptr = $static_ptr | 0;
    $static_type = $static_type | 0;
    $dst_type = $dst_type | 0;
    $src2dst_offset = $src2dst_offset | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $add$ptr = 0,
      $arrayidx = 0,
      $arrayidx1 = 0,
      $call = 0;
    var $cmp = 0,
      $cmp14 = 0,
      $cmp16 = 0,
      $cmp19 = 0,
      $cmp25 = 0,
      $cmp27 = 0,
      $cmp30 = 0,
      $cmp33 = 0,
      $dst_ptr$0 = 0,
      $dst_ptr_leading_to_static_ptr = 0,
      $dst_ptr_not_leading_to_static_ptr = 0,
      $info = 0,
      $number_of_dst_type = 0,
      $number_to_dst_ptr = 0,
      $number_to_static_ptr = 0,
      $or$cond = 0,
      $or$cond15 = 0,
      $or$cond16 = 0,
      $or$cond17 = 0,
      $path_dst_ptr_to_static_ptr = 0;
    var $path_dynamic_ptr_to_dst_ptr = 0,
      $path_dynamic_ptr_to_static_ptr = 0,
      $spec$select = 0,
      $spec$select18 = 0,
      $src2dst_offset5 = 0,
      $static_ptr3 = 0,
      $static_type4 = 0,
      $vfn = 0,
      $vfn11 = 0,
      $vtable10 = 0,
      $vtable7 = 0,
      dest = 0,
      label = 0,
      sp = 0,
      stop = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 64) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
    $info = sp;
    $0 = HEAP32[$static_ptr >> 2] | 0;
    $arrayidx = ($0 + -8) | 0;
    $1 = HEAP32[$arrayidx >> 2] | 0;
    $add$ptr = ($static_ptr + $1) | 0;
    $arrayidx1 = ($0 + -4) | 0;
    $2 = HEAP32[$arrayidx1 >> 2] | 0;
    HEAP32[$info >> 2] = $dst_type;
    $static_ptr3 = ($info + 4) | 0;
    HEAP32[$static_ptr3 >> 2] = $static_ptr;
    $static_type4 = ($info + 8) | 0;
    HEAP32[$static_type4 >> 2] = $static_type;
    $src2dst_offset5 = ($info + 12) | 0;
    HEAP32[$src2dst_offset5 >> 2] = $src2dst_offset;
    $dst_ptr_leading_to_static_ptr = ($info + 16) | 0;
    $dst_ptr_not_leading_to_static_ptr = ($info + 20) | 0;
    $path_dst_ptr_to_static_ptr = ($info + 24) | 0;
    $path_dynamic_ptr_to_static_ptr = ($info + 28) | 0;
    $path_dynamic_ptr_to_dst_ptr = ($info + 32) | 0;
    $number_to_dst_ptr = ($info + 40) | 0;
    dest = $dst_ptr_leading_to_static_ptr;
    stop = (dest + 36) | 0;
    do {
      HEAP32[dest >> 2] = 0 | 0;
      dest = (dest + 4) | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP16[($dst_ptr_leading_to_static_ptr + 36) >> 1] = 0 | 0;
    HEAP8[($dst_ptr_leading_to_static_ptr + 38) >> 0] = 0 | 0;
    $call = __ZL8is_equalPKSt9type_infoS1_b($2, $dst_type, 0) | 0;
    L1: do {
      if ($call) {
        $number_of_dst_type = ($info + 48) | 0;
        HEAP32[$number_of_dst_type >> 2] = 1;
        $vtable7 = HEAP32[$2 >> 2] | 0;
        $vfn = ($vtable7 + 20) | 0;
        $3 = HEAP32[$vfn >> 2] | 0;
        FUNCTION_TABLE_viiiiii[$3 & 255]($2, $info, $add$ptr, $add$ptr, 1, 0);
        $4 = HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0;
        $cmp = ($4 | 0) == 1;
        $spec$select = $cmp ? $add$ptr : 0;
        $dst_ptr$0 = $spec$select;
      } else {
        $number_to_static_ptr = ($info + 36) | 0;
        $vtable10 = HEAP32[$2 >> 2] | 0;
        $vfn11 = ($vtable10 + 24) | 0;
        $5 = HEAP32[$vfn11 >> 2] | 0;
        FUNCTION_TABLE_viiiii[$5 & 255]($2, $info, $add$ptr, 1, 0);
        $6 = HEAP32[$number_to_static_ptr >> 2] | 0;
        switch ($6 | 0) {
          case 0: {
            $7 = HEAP32[$number_to_dst_ptr >> 2] | 0;
            $cmp14 = ($7 | 0) == 1;
            $8 = HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0;
            $cmp16 = ($8 | 0) == 1;
            $or$cond = $cmp14 & $cmp16;
            $9 = HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] | 0;
            $cmp19 = ($9 | 0) == 1;
            $or$cond15 = $or$cond & $cmp19;
            $10 = HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0;
            $spec$select18 = $or$cond15 ? $10 : 0;
            $dst_ptr$0 = $spec$select18;
            break L1;
            break;
          }
          case 1: {
            break;
          }
          default: {
            $dst_ptr$0 = 0;
            break L1;
          }
        }
        $11 = HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0;
        $cmp25 = ($11 | 0) == 1;
        if (!$cmp25) {
          $12 = HEAP32[$number_to_dst_ptr >> 2] | 0;
          $cmp27 = ($12 | 0) == 0;
          $13 = HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0;
          $cmp30 = ($13 | 0) == 1;
          $or$cond16 = $cmp27 & $cmp30;
          $14 = HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] | 0;
          $cmp33 = ($14 | 0) == 1;
          $or$cond17 = $or$cond16 & $cmp33;
          if (!$or$cond17) {
            $dst_ptr$0 = 0;
            break;
          }
        }
        $15 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
        $dst_ptr$0 = $15;
      }
    } while (0);
    STACKTOP = sp;
    return $dst_ptr$0 | 0;
  }
  function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
    __ZdlPv($this);
    return;
  }
  function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(
    $this,
    $info,
    $dst_ptr,
    $current_ptr,
    $path_below,
    $use_strcmp
  ) {
    $this = $this | 0;
    $info = $info | 0;
    $dst_ptr = $dst_ptr | 0;
    $current_ptr = $current_ptr | 0;
    $path_below = $path_below | 0;
    $use_strcmp = $use_strcmp | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $__base_type = 0,
      $call = 0,
      $static_type = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $static_type = ($info + 8) | 0;
    $0 = HEAP32[$static_type >> 2] | 0;
    $call = __ZL8is_equalPKSt9type_infoS1_b($this, $0, $use_strcmp) | 0;
    if ($call) {
      __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(
        0,
        $info,
        $dst_ptr,
        $current_ptr,
        $path_below
      );
    } else {
      $__base_type = ($this + 8) | 0;
      $1 = HEAP32[$__base_type >> 2] | 0;
      $vtable = HEAP32[$1 >> 2] | 0;
      $vfn = ($vtable + 20) | 0;
      $2 = HEAP32[$vfn >> 2] | 0;
      FUNCTION_TABLE_viiiiii[$2 & 255](
        $1,
        $info,
        $dst_ptr,
        $current_ptr,
        $path_below,
        $use_strcmp
      );
    }
    return;
  }
  function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(
    $this,
    $info,
    $current_ptr,
    $path_below,
    $use_strcmp
  ) {
    $this = $this | 0;
    $info = $info | 0;
    $current_ptr = $current_ptr | 0;
    $path_below = $path_below | 0;
    $use_strcmp = $use_strcmp | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $__base_type = 0,
      $__base_type40 = 0,
      $add = 0,
      $call = 0,
      $call3 = 0,
      $cmp = 0;
    var $cmp11 = 0,
      $cmp33 = 0,
      $cmp34 = 0,
      $cmp5 = 0,
      $cmp7 = 0,
      $dst_ptr_leading_to_static_ptr = 0,
      $dst_ptr_not_leading_to_static_ptr = 0,
      $found_any_static_type = 0,
      $found_our_static_ptr = 0,
      $is_dst_type_derived_from_static_type = 0,
      $number_to_dst_ptr = 0,
      $number_to_static_ptr = 0,
      $path_dst_ptr_to_static_ptr = 0,
      $path_dynamic_ptr_to_dst_ptr = 0,
      $path_dynamic_ptr_to_dst_ptr10 = 0,
      $search_done = 0,
      $static_type = 0,
      $tobool16 = 0,
      $tobool19 = 0,
      $vfn = 0;
    var $vfn42 = 0,
      $vtable = 0,
      $vtable41 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $static_type = ($info + 8) | 0;
    $0 = HEAP32[$static_type >> 2] | 0;
    $call = __ZL8is_equalPKSt9type_infoS1_b($this, $0, $use_strcmp) | 0;
    L1: do {
      if ($call) {
        __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(
          0,
          $info,
          $current_ptr,
          $path_below
        );
      } else {
        $1 = HEAP32[$info >> 2] | 0;
        $call3 = __ZL8is_equalPKSt9type_infoS1_b($this, $1, $use_strcmp) | 0;
        if (!$call3) {
          $__base_type40 = ($this + 8) | 0;
          $12 = HEAP32[$__base_type40 >> 2] | 0;
          $vtable41 = HEAP32[$12 >> 2] | 0;
          $vfn42 = ($vtable41 + 24) | 0;
          $13 = HEAP32[$vfn42 >> 2] | 0;
          FUNCTION_TABLE_viiiii[$13 & 255](
            $12,
            $info,
            $current_ptr,
            $path_below,
            $use_strcmp
          );
          break;
        }
        $dst_ptr_leading_to_static_ptr = ($info + 16) | 0;
        $2 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
        $cmp = ($2 | 0) == ($current_ptr | 0);
        if (!$cmp) {
          $dst_ptr_not_leading_to_static_ptr = ($info + 20) | 0;
          $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0;
          $cmp5 = ($3 | 0) == ($current_ptr | 0);
          if (!$cmp5) {
            $path_dynamic_ptr_to_dst_ptr10 = ($info + 32) | 0;
            HEAP32[$path_dynamic_ptr_to_dst_ptr10 >> 2] = $path_below;
            $is_dst_type_derived_from_static_type = ($info + 44) | 0;
            $4 = HEAP32[$is_dst_type_derived_from_static_type >> 2] | 0;
            $cmp11 = ($4 | 0) == 4;
            do {
              if (!$cmp11) {
                $found_our_static_ptr = ($info + 52) | 0;
                HEAP8[$found_our_static_ptr >> 0] = 0;
                $found_any_static_type = ($info + 53) | 0;
                HEAP8[$found_any_static_type >> 0] = 0;
                $__base_type = ($this + 8) | 0;
                $5 = HEAP32[$__base_type >> 2] | 0;
                $vtable = HEAP32[$5 >> 2] | 0;
                $vfn = ($vtable + 20) | 0;
                $6 = HEAP32[$vfn >> 2] | 0;
                FUNCTION_TABLE_viiiiii[$6 & 255](
                  $5,
                  $info,
                  $current_ptr,
                  $current_ptr,
                  1,
                  $use_strcmp
                );
                $7 = HEAP8[$found_any_static_type >> 0] | 0;
                $tobool16 = ($7 << 24) >> 24 == 0;
                if ($tobool16) {
                  HEAP32[$is_dst_type_derived_from_static_type >> 2] = 4;
                  break;
                } else {
                  $8 = HEAP8[$found_our_static_ptr >> 0] | 0;
                  $tobool19 = ($8 << 24) >> 24 == 0;
                  HEAP32[$is_dst_type_derived_from_static_type >> 2] = 3;
                  if ($tobool19) {
                    break;
                  } else {
                    break L1;
                  }
                }
              }
            } while (0);
            HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
            $number_to_dst_ptr = ($info + 40) | 0;
            $9 = HEAP32[$number_to_dst_ptr >> 2] | 0;
            $add = ($9 + 1) | 0;
            HEAP32[$number_to_dst_ptr >> 2] = $add;
            $number_to_static_ptr = ($info + 36) | 0;
            $10 = HEAP32[$number_to_static_ptr >> 2] | 0;
            $cmp33 = ($10 | 0) == 1;
            if (!$cmp33) {
              break;
            }
            $path_dst_ptr_to_static_ptr = ($info + 24) | 0;
            $11 = HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0;
            $cmp34 = ($11 | 0) == 2;
            if (!$cmp34) {
              break;
            }
            $search_done = ($info + 54) | 0;
            HEAP8[$search_done >> 0] = 1;
            break;
          }
        }
        $cmp7 = ($path_below | 0) == 1;
        if ($cmp7) {
          $path_dynamic_ptr_to_dst_ptr = ($info + 32) | 0;
          HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] = 1;
        }
      }
    } while (0);
    return;
  }
  function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(
    $this,
    $info,
    $adjustedPtr,
    $path_below
  ) {
    $this = $this | 0;
    $info = $info | 0;
    $adjustedPtr = $adjustedPtr | 0;
    $path_below = $path_below | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $__base_type = 0,
      $call = 0,
      $static_type = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $static_type = ($info + 8) | 0;
    $0 = HEAP32[$static_type >> 2] | 0;
    $call = __ZL8is_equalPKSt9type_infoS1_b($this, $0, 0) | 0;
    if ($call) {
      __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(
        0,
        $info,
        $adjustedPtr,
        $path_below
      );
    } else {
      $__base_type = ($this + 8) | 0;
      $1 = HEAP32[$__base_type >> 2] | 0;
      $vtable = HEAP32[$1 >> 2] | 0;
      $vfn = ($vtable + 28) | 0;
      $2 = HEAP32[$vfn >> 2] | 0;
      FUNCTION_TABLE_viiii[$2 & 511]($1, $info, $adjustedPtr, $path_below);
    }
    return;
  }
  function __ZNSt9type_infoD2Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14ManglingParserINS_16DefaultAllocatorEECI2NS0_22AbstractManglingParserIS3_S2_EEEPKcS6_(
    $this,
    $0,
    $1
  ) {
    $this = $this | 0;
    $0 = $0 | 0;
    $1 = $1 | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_EC2EPKcS7_(
      $this,
      $0,
      $1
    );
    return;
  }
  function __ZN12_GLOBAL__N_112OutputStreamC2Ev($this) {
    $this = $this | 0;
    var $CurrentPackIndex = 0,
      $CurrentPackMax = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $CurrentPackIndex = ($this + 12) | 0;
    HEAP32[$CurrentPackIndex >> 2] = -1;
    $CurrentPackMax = ($this + 16) | 0;
    HEAP32[$CurrentPackMax >> 2] = -1;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E5parseEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $Encoding = 0,
      $Encoding20 = 0,
      $Last = 0,
      $Last37 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp17 = 0,
      $agg$tmp17$byval_copy = 0,
      $agg$tmp24 = 0,
      $agg$tmp24$byval_copy = 0,
      $call = 0,
      $call12 = 0,
      $call18 = 0,
      $call2 = 0;
    var $call21 = 0,
      $call22 = 0,
      $call25 = 0,
      $call28 = 0,
      $call3 = 0,
      $call30 = 0,
      $call33 = 0,
      $call40 = 0,
      $call44 = 0,
      $call48 = 0,
      $call49 = 0,
      $call49$ = 0,
      $call5 = 0,
      $call50 = 0,
      $call8 = 0,
      $cmp = 0,
      $cmp13 = 0,
      $cmp23 = 0,
      $cmp35 = 0,
      $cmp41 = 0;
    var $cmp51 = 0,
      $cmp6 = 0,
      $ref$tmp = 0,
      $ref$tmp29 = 0,
      $retval$0 = 0,
      $retval$2 = 0,
      $retval$4 = 0,
      $spec$select = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 80) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
    $agg$tmp24$byval_copy = (sp + 72) | 0;
    $agg$tmp17$byval_copy = (sp + 64) | 0;
    $agg$tmp$byval_copy = (sp + 56) | 0;
    $agg$tmp = (sp + 48) | 0;
    $Encoding = (sp + 40) | 0;
    $ref$tmp = (sp + 32) | 0;
    $agg$tmp17 = (sp + 24) | 0;
    $Encoding20 = (sp + 16) | 0;
    $agg$tmp24 = (sp + 8) | 0;
    $ref$tmp29 = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 10429);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
        $this,
        $agg$tmp$byval_copy
      ) | 0;
    do {
      if ($call) {
        $call2 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
            $this
          ) | 0;
        $call3 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv(
            $call2
          ) | 0;
        HEAP32[$Encoding >> 2] = $call3;
        $cmp = ($call3 | 0) == (0 | 0);
        if ($cmp) {
          $retval$0 = 0;
        } else {
          $call5 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              0
            ) | 0;
          $cmp6 = ($call5 << 24) >> 24 == 46;
          if ($cmp6) {
            $0 = HEAP32[$this >> 2] | 0;
            $Last = ($this + 4) | 0;
            $1 = HEAP32[$Last >> 2] | 0;
            __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($ref$tmp, $0, $1);
            $call8 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9DotSuffixEJRPNS0_4NodeENS_10StringViewEEEES9_DpOT0_(
                $this,
                $Encoding,
                $ref$tmp
              ) | 0;
            HEAP32[$Encoding >> 2] = $call8;
            $2 = HEAP32[$Last >> 2] | 0;
            HEAP32[$this >> 2] = $2;
            $3 = $call8;
          } else {
            $3 = $call3;
          }
          $call12 =
            __ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv(
              $this
            ) | 0;
          $cmp13 = ($call12 | 0) == 0;
          $spec$select = $cmp13 ? $3 : 0;
          $retval$0 = $spec$select;
        }
        $retval$4 = $retval$0;
      } else {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp17, 10432);
        HEAP32[$agg$tmp17$byval_copy >> 2] = HEAP32[$agg$tmp17 >> 2] | 0;
        HEAP32[($agg$tmp17$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp17 + 4) >> 2] | 0;
        $call18 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
            $this,
            $agg$tmp17$byval_copy
          ) | 0;
        if (!$call18) {
          $call48 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call49 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
              $call48
            ) | 0;
          $call50 =
            __ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv(
              $this
            ) | 0;
          $cmp51 = ($call50 | 0) == 0;
          $call49$ = $cmp51 ? $call49 : 0;
          $retval$4 = $call49$;
          break;
        }
        $call21 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
            $this
          ) | 0;
        $call22 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv(
            $call21
          ) | 0;
        HEAP32[$Encoding20 >> 2] = $call22;
        $cmp23 = ($call22 | 0) == (0 | 0);
        if ($cmp23) {
          $retval$2 = 0;
        } else {
          __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp24, 10437);
          HEAP32[$agg$tmp24$byval_copy >> 2] = HEAP32[$agg$tmp24 >> 2] | 0;
          HEAP32[($agg$tmp24$byval_copy + 4) >> 2] =
            HEAP32[($agg$tmp24 + 4) >> 2] | 0;
          $call25 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
              $this,
              $agg$tmp24$byval_copy
            ) | 0;
          if ($call25) {
            $call28 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                $this,
                95
              ) | 0;
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb(
              $ref$tmp29,
              $this,
              0
            );
            $call30 = __ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp29) | 0;
            $4 = $call28 & $call30;
            if ($4) {
              $retval$2 = 0;
            } else {
              $call33 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
                  $this,
                  0
                ) | 0;
              $cmp35 = ($call33 << 24) >> 24 == 46;
              if ($cmp35) {
                $Last37 = ($this + 4) | 0;
                $5 = HEAP32[$Last37 >> 2] | 0;
                HEAP32[$this >> 2] = $5;
              }
              $call40 =
                __ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv(
                  $this
                ) | 0;
              $cmp41 = ($call40 | 0) == 0;
              if ($cmp41) {
                $call44 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA34_KcRPNS0_4NodeEEEESC_DpOT0_(
                    $this,
                    10451,
                    $Encoding20
                  ) | 0;
                $retval$2 = $call44;
              } else {
                $retval$2 = 0;
              }
            }
          } else {
            $retval$2 = 0;
          }
        }
        $retval$4 = $retval$2;
      }
    } while (0);
    STACKTOP = sp;
    return $retval$4 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_ED2Ev(
    $this
  ) {
    $this = $this | 0;
    var $ASTAllocator = 0,
      $ForwardTemplateRefs = 0,
      $Names = 0,
      $Subs = 0,
      $TemplateParams = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    __ZN12_GLOBAL__N_116DefaultAllocatorD2Ev($ASTAllocator);
    $ForwardTemplateRefs = ($this + 332) | 0;
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EED2Ev(
      $ForwardTemplateRefs
    );
    $TemplateParams = ($this + 288) | 0;
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EED2Ev(
      $TemplateParams
    );
    $Subs = ($this + 148) | 0;
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EED2Ev(
      $Subs
    );
    $Names = ($this + 8) | 0;
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EED2Ev(
      $Names
    );
    return;
  }
  function __ZN12_GLOBAL__N_122initializeOutputStreamEPcPmRNS_12OutputStreamEm(
    $Buf,
    $N,
    $S
  ) {
    $Buf = $Buf | 0;
    $N = $N | 0;
    $S = $S | 0;
    var $0 = 0,
      $Buf$addr$0 = 0,
      $BufferSize$0 = 0,
      $call = 0,
      $cmp = 0,
      $cmp1 = 0,
      $retval$0 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $cmp = ($Buf | 0) == (0 | 0);
    if ($cmp) {
      $call = _malloc(1024) | 0;
      $cmp1 = ($call | 0) == (0 | 0);
      if ($cmp1) {
        $retval$0 = 0;
      } else {
        $Buf$addr$0 = $call;
        $BufferSize$0 = 1024;
        label = 4;
      }
    } else {
      $0 = HEAP32[$N >> 2] | 0;
      $Buf$addr$0 = $Buf;
      $BufferSize$0 = $0;
      label = 4;
    }
    if ((label | 0) == 4) {
      __ZN12_GLOBAL__N_112OutputStream5resetEPcm(
        $S,
        $Buf$addr$0,
        $BufferSize$0
      );
      $retval$0 = 1;
    }
    return $retval$0 | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $RHSComponentCache = 0,
      $cmp = 0,
      $vfn = 0,
      $vfn3 = 0,
      $vtable = 0,
      $vtable2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $vtable = HEAP32[$this >> 2] | 0;
    $vfn = ($vtable + 16) | 0;
    $0 = HEAP32[$vfn >> 2] | 0;
    FUNCTION_TABLE_vii[$0 & 511]($this, $S);
    $RHSComponentCache = ($this + 5) | 0;
    $1 = HEAP8[$RHSComponentCache >> 0] | 0;
    $cmp = ($1 << 24) >> 24 == 1;
    if (!$cmp) {
      $vtable2 = HEAP32[$this >> 2] | 0;
      $vfn3 = ($vtable2 + 20) | 0;
      $2 = HEAP32[$vfn3 >> 2] | 0;
      FUNCTION_TABLE_vii[$2 & 511]($this, $S);
    }
    return;
  }
  function __ZN12_GLOBAL__N_112OutputStreampLEc($this, $C) {
    $this = $this | 0;
    $C = $C | 0;
    var $0 = 0,
      $1 = 0,
      $CurrentPosition = 0,
      $arrayidx = 0,
      $inc = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_112OutputStream4growEm($this, 1);
    $0 = HEAP32[$this >> 2] | 0;
    $CurrentPosition = ($this + 4) | 0;
    $1 = HEAP32[$CurrentPosition >> 2] | 0;
    $inc = ($1 + 1) | 0;
    HEAP32[$CurrentPosition >> 2] = $inc;
    $arrayidx = ($0 + $1) | 0;
    HEAP8[$arrayidx >> 0] = $C;
    return;
  }
  function __ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($this) {
    $this = $this | 0;
    var $0 = 0,
      $CurrentPosition = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $CurrentPosition = ($this + 4) | 0;
    $0 = HEAP32[$CurrentPosition >> 2] | 0;
    return $0 | 0;
  }
  function __ZN12_GLOBAL__N_112OutputStream9getBufferEv($this) {
    $this = $this | 0;
    var $0 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$this >> 2] | 0;
    return $0 | 0;
  }
  function __ZN12_GLOBAL__N_112OutputStream4growEm($this, $N) {
    $this = $this | 0;
    $N = $N | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $BufferCapacity = 0,
      $CurrentPosition = 0,
      $add = 0,
      $call = 0,
      $cmp = 0,
      $cmp14 = 0,
      $cmp6 = 0,
      $mul = 0,
      $spec$store$select = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $CurrentPosition = ($this + 4) | 0;
    $0 = HEAP32[$CurrentPosition >> 2] | 0;
    $add = ($0 + $N) | 0;
    $BufferCapacity = ($this + 8) | 0;
    $1 = HEAP32[$BufferCapacity >> 2] | 0;
    $cmp = $add >>> 0 < $1 >>> 0;
    if (!$cmp) {
      $mul = $1 << 1;
      $cmp6 = $mul >>> 0 < $add >>> 0;
      $spec$store$select = $cmp6 ? $add : $mul;
      HEAP32[$BufferCapacity >> 2] = $spec$store$select;
      $2 = HEAP32[$this >> 2] | 0;
      $call = _realloc($2, $spec$store$select) | 0;
      HEAP32[$this >> 2] = $call;
      $cmp14 = ($call | 0) == (0 | 0);
      if ($cmp14) {
        __ZSt9terminatev();
        // unreachable;
      }
    }
    return;
  }
  function __ZSt9terminatev() {
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $call10 = 0,
      $call6 = 0,
      $terminateHandler = 0,
      $tobool = 0,
      $tobool1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = ___cxa_get_globals_fast() | 0;
    $tobool = ($call | 0) == (0 | 0);
    if (!$tobool) {
      $0 = HEAP32[$call >> 2] | 0;
      $tobool1 = ($0 | 0) == (0 | 0);
      if (!$tobool1) {
        $1 = ($0 + 48) | 0;
        $call6 =
          __ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception($1) | 0;
        if ($call6) {
          $terminateHandler = ($0 + 12) | 0;
          $2 = HEAP32[$terminateHandler >> 2] | 0;
          __ZSt11__terminatePFvvE($2);
          // unreachable;
        }
      }
    }
    $call10 = __ZSt13get_terminatev() | 0;
    __ZSt11__terminatePFvvE($call10);
    // unreachable;
  }
  function __ZSt11__terminatePFvvE($func) {
    $func = $func | 0;
    var $vararg_buffer = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $vararg_buffer = sp;
    FUNCTION_TABLE_v[$func & 511]();
    _abort_message(10389, $vararg_buffer);
    // unreachable;
  }
  function __ZSt13get_terminatev() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 354 | 0;
  }
  function __ZN12_GLOBAL__N_112OutputStream5resetEPcm(
    $this,
    $Buffer_,
    $BufferCapacity_
  ) {
    $this = $this | 0;
    $Buffer_ = $Buffer_ | 0;
    $BufferCapacity_ = $BufferCapacity_ | 0;
    var $BufferCapacity = 0,
      $CurrentPosition = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $CurrentPosition = ($this + 4) | 0;
    HEAP32[$CurrentPosition >> 2] = 0;
    HEAP32[$this >> 2] = $Buffer_;
    $BufferCapacity = ($this + 8) | 0;
    HEAP32[$BufferCapacity >> 2] = $BufferCapacity_;
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocatorD2Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_120BumpPointerAllocatorD2Ev($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EED2Ev(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8isInlineEv(
        $this
      ) | 0;
    if (!$call) {
      $0 = HEAP32[$this >> 2] | 0;
      _free($0);
    }
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EED2Ev(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv(
        $this
      ) | 0;
    if (!$call) {
      $0 = HEAP32[$this >> 2] | 0;
      _free($0);
    }
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EED2Ev(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8isInlineEv(
        $this
      ) | 0;
    if (!$call) {
      $0 = HEAP32[$this >> 2] | 0;
      _free($0);
    }
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8isInlineEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $arraydecay = 0,
      $cmp = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$this >> 2] | 0;
    $arraydecay = ($this + 12) | 0;
    $cmp = ($0 | 0) == ($arraydecay | 0);
    return $cmp | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $arraydecay = 0,
      $cmp = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$this >> 2] | 0;
    $arraydecay = ($this + 12) | 0;
    $cmp = ($0 | 0) == ($arraydecay | 0);
    return $cmp | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8isInlineEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $arraydecay = 0,
      $cmp = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$this >> 2] | 0;
    $arraydecay = ($this + 12) | 0;
    $cmp = ($0 | 0) == ($arraydecay | 0);
    return $cmp | 0;
  }
  function __ZN12_GLOBAL__N_120BumpPointerAllocatorD2Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_120BumpPointerAllocator5resetEv($this);
    return;
  }
  function __ZN12_GLOBAL__N_120BumpPointerAllocator5resetEv($this) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $BlockList = 0,
      $Current = 0,
      $cmp = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $BlockList = ($this + 4096) | 0;
    while (1) {
      $0 = HEAP32[$BlockList >> 2] | 0;
      $tobool = ($0 | 0) == (0 | 0);
      if ($tobool) {
        break;
      }
      $1 = HEAP32[$0 >> 2] | 0;
      HEAP32[$BlockList >> 2] = $1;
      $cmp = ($this | 0) == ($0 | 0);
      if (!$cmp) {
        _free($0);
      }
    }
    HEAP32[$this >> 2] = 0;
    $Current = ($this + 4) | 0;
    HEAP32[$Current >> 2] = 0;
    HEAP32[$BlockList >> 2] = $this;
    return;
  }
  function __ZN12_GLOBAL__N_110StringViewC2EPKc($this, $Str) {
    $this = $this | 0;
    $Str = $Str | 0;
    var $Last = 0,
      $add$ptr = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    HEAP32[$this >> 2] = $Str;
    $Last = ($this + 4) | 0;
    $call = _strlen($Str) | 0;
    $add$ptr = ($Str + $call) | 0;
    HEAP32[$Last >> 2] = $add$ptr;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Last = 0,
      $add$ptr = 0,
      $agg$tmp = 0,
      $call = 0,
      $call2 = 0,
      $ref$tmp = 0,
      $retval$0 = 0;
    var $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $tmpcast$byval_copy = (sp + 16) | 0;
    $ref$tmp = (sp + 8) | 0;
    $agg$tmp = sp;
    $0 = HEAP32[$this >> 2] | 0;
    $Last = ($this + 4) | 0;
    $1 = HEAP32[$Last >> 2] | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($ref$tmp, $0, $1);
    $2 = $S;
    $3 = $2;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($2 + 4) | 0;
    $6 = $5;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $agg$tmp;
    $9 = $8;
    HEAP32[$9 >> 2] = $4;
    $10 = ($8 + 4) | 0;
    $11 = $10;
    HEAP32[$11 >> 2] = $7;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    $call =
      __ZNK12_GLOBAL__N_110StringView10startsWithES0_(
        $ref$tmp,
        $tmpcast$byval_copy
      ) | 0;
    if ($call) {
      $call2 = __ZNK12_GLOBAL__N_110StringView4sizeEv($S) | 0;
      $12 = HEAP32[$this >> 2] | 0;
      $add$ptr = ($12 + $call2) | 0;
      HEAP32[$this >> 2] = $add$ptr;
      $retval$0 = 1;
    } else {
      $retval$0 = 0;
    }
    STACKTOP = sp;
    return $retval$0 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
    $this
  ) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return $this | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $Arg = 0,
      $Attrs = 0,
      $CVQualifiers = 0,
      $CVQualifiers63 = 0,
      $EndsWithTemplateArgs = 0,
      $IsEndOfEncoding = 0,
      $Name = 0,
      $NameInfo = 0,
      $Names = 0,
      $Names49 = 0,
      $ReferenceQualifier = 0,
      $ReferenceQualifier64 = 0,
      $ReturnType = 0,
      $Ty = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      $call12 = 0;
    var $call15 = 0,
      $call18 = 0,
      $call20 = 0,
      $call21 = 0,
      $call23 = 0,
      $call28 = 0,
      $call39 = 0,
      $call44 = 0,
      $call47 = 0,
      $call5 = 0,
      $call50 = 0,
      $call52 = 0,
      $call6 = 0,
      $call60 = 0,
      $call65 = 0,
      $call7 = 0,
      $call8 = 0,
      $cmp24 = 0,
      $cmp40 = 0,
      $cmp53 = 0;
    var $cmp9 = 0,
      $ref$tmp = 0,
      $ref$tmp46 = 0,
      $ref$tmp62 = 0,
      $retval$10 = 0,
      $retval$7 = 0,
      $retval$8 = 0,
      $retval$9 = 0,
      $tobool35 = 0,
      $tobool36 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 96) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96 | 0);
    $agg$tmp$byval_copy = (sp + 88) | 0;
    $IsEndOfEncoding = (sp + 80) | 0;
    $NameInfo = (sp + 64) | 0;
    $Name = (sp + 60) | 0;
    $Attrs = (sp + 56) | 0;
    $agg$tmp = (sp + 48) | 0;
    $Arg = (sp + 40) | 0;
    $ref$tmp = (sp + 32) | 0;
    $ReturnType = (sp + 24) | 0;
    $ref$tmp46 = (sp + 16) | 0;
    $Ty = (sp + 8) | 0;
    $ref$tmp62 = sp;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
        $this,
        0
      ) | 0;
    switch (($call << 24) >> 24) {
      case 84:
      case 71: {
        $call5 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
            $this
          ) | 0;
        $call6 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseSpecialNameEv(
            $call5
          ) | 0;
        $retval$10 = $call6;
        break;
      }
      default: {
        HEAP32[$IsEndOfEncoding >> 2] = $this;
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9NameStateC2EPS5_(
          $NameInfo,
          $this
        );
        $call7 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
            $this
          ) | 0;
        $call8 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE(
            $call7,
            $NameInfo
          ) | 0;
        HEAP32[$Name >> 2] = $call8;
        $cmp9 = ($call8 | 0) == (0 | 0);
        if ($cmp9) {
          $retval$9 = 0;
        } else {
          $call12 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E26resolveForwardTemplateRefsERNS5_9NameStateE(
              $this,
              $NameInfo
            ) | 0;
          if ($call12) {
            $retval$9 = 0;
          } else {
            $call15 =
              __ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEvENKUlvE_clEv(
                $IsEndOfEncoding
              ) | 0;
            if ($call15) {
              $retval$9 = $call8;
            } else {
              HEAP32[$Attrs >> 2] = 0;
              __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 15784);
              HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
              HEAP32[($agg$tmp$byval_copy + 4) >> 2] =
                HEAP32[($agg$tmp + 4) >> 2] | 0;
              $call18 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                  $this,
                  $agg$tmp$byval_copy
                ) | 0;
              do {
                if ($call18) {
                  $Names = ($this + 8) | 0;
                  $call20 =
                    __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv(
                      $Names
                    ) | 0;
                  while (1) {
                    $call21 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                        $this,
                        69
                      ) | 0;
                    if ($call21) {
                      label = 11;
                      break;
                    }
                    $call23 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv(
                        $call7
                      ) | 0;
                    HEAP32[$Arg >> 2] = $call23;
                    $cmp24 = ($call23 | 0) == (0 | 0);
                    if ($cmp24) {
                      label = 12;
                      break;
                    }
                    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
                      $Names,
                      $Arg
                    );
                  }
                  if ((label | 0) == 11) {
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm(
                      $ref$tmp,
                      $this,
                      $call20
                    );
                    $call28 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12EnableIfAttrEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_(
                        $this,
                        $ref$tmp
                      ) | 0;
                    HEAP32[$Attrs >> 2] = $call28;
                    label = 13;
                    break;
                  } else if ((label | 0) == 12) {
                    $retval$8 = 0;
                    break;
                  }
                } else {
                  label = 13;
                }
              } while (0);
              if ((label | 0) == 13) {
                HEAP32[$ReturnType >> 2] = 0;
                $0 = HEAP8[$NameInfo >> 0] | 0;
                $tobool35 = ($0 << 24) >> 24 == 0;
                if ($tobool35) {
                  $EndsWithTemplateArgs = ($NameInfo + 1) | 0;
                  $1 = HEAP8[$EndsWithTemplateArgs >> 0] | 0;
                  $tobool36 = ($1 << 24) >> 24 == 0;
                  if ($tobool36) {
                    label = 16;
                  } else {
                    $call39 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
                        $call7
                      ) | 0;
                    HEAP32[$ReturnType >> 2] = $call39;
                    $cmp40 = ($call39 | 0) == (0 | 0);
                    if ($cmp40) {
                      $retval$7 = 0;
                    } else {
                      label = 16;
                    }
                  }
                } else {
                  label = 16;
                }
                do {
                  if ((label | 0) == 16) {
                    $call44 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                        $this,
                        118
                      ) | 0;
                    if ($call44) {
                      __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2Ev(
                        $ref$tmp46
                      );
                      $CVQualifiers = ($NameInfo + 4) | 0;
                      $ReferenceQualifier = ($NameInfo + 8) | 0;
                      $call47 =
                        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FunctionEncodingEJRPNS0_4NodeESA_NS0_9NodeArrayESA_RNS0_10QualifiersERNS0_15FunctionRefQualEEEES9_DpOT0_(
                          $this,
                          $ReturnType,
                          $Name,
                          $ref$tmp46,
                          $Attrs,
                          $CVQualifiers,
                          $ReferenceQualifier
                        ) | 0;
                      $retval$7 = $call47;
                      break;
                    }
                    $Names49 = ($this + 8) | 0;
                    $call50 =
                      __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv(
                        $Names49
                      ) | 0;
                    while (1) {
                      $call52 =
                        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
                          $call7
                        ) | 0;
                      HEAP32[$Ty >> 2] = $call52;
                      $cmp53 = ($call52 | 0) == (0 | 0);
                      if ($cmp53) {
                        label = 21;
                        break;
                      }
                      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
                        $Names49,
                        $Ty
                      );
                      $call60 =
                        __ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEvENKUlvE_clEv(
                          $IsEndOfEncoding
                        ) | 0;
                      if ($call60) {
                        label = 22;
                        break;
                      }
                    }
                    if ((label | 0) == 21) {
                      $retval$7 = 0;
                      break;
                    } else if ((label | 0) == 22) {
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm(
                        $ref$tmp62,
                        $this,
                        $call50
                      );
                      $CVQualifiers63 = ($NameInfo + 4) | 0;
                      $ReferenceQualifier64 = ($NameInfo + 8) | 0;
                      $call65 =
                        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FunctionEncodingEJRPNS0_4NodeESA_NS0_9NodeArrayESA_RNS0_10QualifiersERNS0_15FunctionRefQualEEEES9_DpOT0_(
                          $this,
                          $ReturnType,
                          $Name,
                          $ref$tmp62,
                          $Attrs,
                          $CVQualifiers63,
                          $ReferenceQualifier64
                        ) | 0;
                      $retval$7 = $call65;
                      break;
                    }
                  }
                } while (0);
                $retval$8 = $retval$7;
              }
              $retval$9 = $retval$8;
            }
          }
        }
        $retval$10 = $retval$9;
      }
    }
    STACKTOP = sp;
    return $retval$10 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
    $this,
    $Lookahead
  ) {
    $this = $this | 0;
    $Lookahead = $Lookahead | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $Last = 0,
      $arrayidx = 0,
      $cmp = 0,
      $retval$0 = 0,
      $sub$ptr$rhs$cast = 0,
      $sub$ptr$sub = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Last = ($this + 4) | 0;
    $0 = HEAP32[$Last >> 2] | 0;
    $1 = HEAP32[$this >> 2] | 0;
    $sub$ptr$rhs$cast = $1;
    $sub$ptr$sub = ($0 - $sub$ptr$rhs$cast) | 0;
    $cmp = $sub$ptr$sub >>> 0 > $Lookahead >>> 0;
    if ($cmp) {
      $arrayidx = ($1 + $Lookahead) | 0;
      $2 = HEAP8[$arrayidx >> 0] | 0;
      $retval$0 = $2;
    } else {
      $retval$0 = 0;
    }
    return $retval$0 | 0;
  }
  function __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($this, $First_, $Last_) {
    $this = $this | 0;
    $First_ = $First_ | 0;
    $Last_ = $Last_ | 0;
    var $Last = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    HEAP32[$this >> 2] = $First_;
    $Last = ($this + 4) | 0;
    HEAP32[$Last >> 2] = $Last_;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9DotSuffixEJRPNS0_4NodeENS_10StringViewEEEES9_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9DotSuffixEJRPNS2_4NodeENS_10StringViewEEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $Last = 0,
      $sub$ptr$sub = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Last = ($this + 4) | 0;
    $0 = HEAP32[$Last >> 2] | 0;
    $1 = HEAP32[$this >> 2] | 0;
    $sub$ptr$sub = ($0 - $1) | 0;
    return $sub$ptr$sub | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
    $this,
    $C
  ) {
    $this = $this | 0;
    $C = $C | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $Last = 0,
      $cmp = 0,
      $cmp4 = 0,
      $incdec$ptr = 0,
      $retval$0 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$this >> 2] | 0;
    $Last = ($this + 4) | 0;
    $1 = HEAP32[$Last >> 2] | 0;
    $cmp = ($0 | 0) == ($1 | 0);
    if ($cmp) {
      $retval$0 = 0;
    } else {
      $2 = HEAP8[$0 >> 0] | 0;
      $cmp4 = ($2 << 24) >> 24 == ($C << 24) >> 24;
      if ($cmp4) {
        $incdec$ptr = ($0 + 1) | 0;
        HEAP32[$this >> 2] = $incdec$ptr;
        $retval$0 = 1;
      } else {
        $retval$0 = 0;
      }
    }
    return $retval$0 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb(
    $agg$result,
    $this,
    $AllowNegative
  ) {
    $agg$result = $agg$result | 0;
    $this = $this | 0;
    $AllowNegative = $AllowNegative | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $call2 = 0,
      $call8 = 0,
      $cmp = 0,
      $cmp9 = 0,
      $conv = 0,
      $conv11 = 0,
      $incdec$ptr = 0,
      $isdigit = 0,
      $isdigit3 = 0,
      $isdigittmp = 0,
      $isdigittmp2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$this >> 2] | 0;
    if ($AllowNegative) {
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
        $this,
        110
      ) | 0;
    }
    $call2 =
      __ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv(
        $this
      ) | 0;
    $cmp = ($call2 | 0) == 0;
    if ($cmp) {
      label = 6;
    } else {
      $1 = HEAP32[$this >> 2] | 0;
      $2 = HEAP8[$1 >> 0] | 0;
      $conv = ($2 << 24) >> 24;
      $isdigittmp = ($conv + -48) | 0;
      $isdigit = $isdigittmp >>> 0 < 10;
      if ($isdigit) {
        $4 = $1;
        while (1) {
          $call8 =
            __ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv(
              $this
            ) | 0;
          $cmp9 = ($call8 | 0) == 0;
          if ($cmp9) {
            break;
          }
          $3 = HEAP8[$4 >> 0] | 0;
          $conv11 = ($3 << 24) >> 24;
          $isdigittmp2 = ($conv11 + -48) | 0;
          $isdigit3 = $isdigittmp2 >>> 0 < 10;
          if (!$isdigit3) {
            break;
          }
          $incdec$ptr = ($4 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr;
          $4 = $incdec$ptr;
        }
        __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$result, $0, $4);
      } else {
        label = 6;
      }
    }
    if ((label | 0) == 6) {
      __ZN12_GLOBAL__N_110StringViewC2Ev($agg$result);
    }
    return;
  }
  function __ZNK12_GLOBAL__N_110StringView5emptyEv($this) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $Last = 0,
      $cmp = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$this >> 2] | 0;
    $Last = ($this + 4) | 0;
    $1 = HEAP32[$Last >> 2] | 0;
    $cmp = ($0 | 0) == ($1 | 0);
    return $cmp | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA34_KcRPNS0_4NodeEEEESC_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA34_KcRPNS2_4NodeEEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
    $this
  ) {
    $this = $this | 0;
    var $$pre = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0,
      $23 = 0,
      $24 = 0,
      $25 = 0;
    var $26 = 0,
      $27 = 0,
      $28 = 0,
      $29 = 0,
      $3 = 0,
      $30 = 0,
      $31 = 0,
      $32 = 0,
      $33 = 0,
      $34 = 0,
      $35 = 0,
      $36 = 0,
      $37 = 0,
      $38 = 0,
      $39 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0;
    var $9 = 0,
      $AfterQuals$1 = 0,
      $Child = 0,
      $P = 0,
      $P289 = 0,
      $Ptr = 0,
      $Ref = 0,
      $Ref265 = 0,
      $Res = 0,
      $Result = 0,
      $Sub = 0,
      $Subs = 0,
      $TA = 0,
      $TA318 = 0,
      $TryToParseTemplateArgs = 0,
      $TryToParseTemplateArgs311 = 0,
      $add = 0,
      $add$ptr = 0,
      $add$ptr145 = 0,
      $add$ptr149 = 0;
    var $add$ptr153 = 0,
      $add$ptr157 = 0,
      $add$ptr161 = 0,
      $add$ptr165 = 0,
      $add$ptr169 = 0,
      $add$ptr173 = 0,
      $add$ptr183 = 0,
      $call = 0,
      $call10 = 0,
      $call100 = 0,
      $call104 = 0,
      $call108 = 0,
      $call112 = 0,
      $call116 = 0,
      $call120 = 0,
      $call124 = 0,
      $call128 = 0,
      $call132 = 0,
      $call135 = 0,
      $call138 = 0;
    var $call142 = 0,
      $call146 = 0,
      $call150 = 0,
      $call154 = 0,
      $call158 = 0,
      $call16 = 0,
      $call162 = 0,
      $call166 = 0,
      $call170 = 0,
      $call174 = 0,
      $call176 = 0,
      $call177 = 0,
      $call179 = 0,
      $call180 = 0,
      $call184 = 0,
      $call185 = 0,
      $call188 = 0,
      $call192 = 0,
      $call193 = 0,
      $call195 = 0;
    var $call196 = 0,
      $call198 = 0,
      $call199 = 0,
      $call201 = 0,
      $call202 = 0,
      $call204 = 0,
      $call216 = 0,
      $call217 = 0,
      $call219 = 0,
      $call22 = 0,
      $call220 = 0,
      $call226 = 0,
      $call231 = 0,
      $call235 = 0,
      $call243 = 0,
      $call244 = 0,
      $call248 = 0,
      $call254 = 0,
      $call255 = 0,
      $call259 = 0;
    var $call266 = 0,
      $call267 = 0,
      $call272 = 0,
      $call278 = 0,
      $call279 = 0,
      $call283 = 0,
      $call290 = 0,
      $call291 = 0,
      $call295 = 0,
      $call299 = 0,
      $call306 = 0,
      $call307 = 0,
      $call314 = 0,
      $call320 = 0,
      $call324 = 0,
      $call330 = 0,
      $call331 = 0,
      $call4 = 0,
      $call41 = 0,
      $call42 = 0;
    var $call45 = 0,
      $call46 = 0,
      $call48 = 0,
      $call52 = 0,
      $call56 = 0,
      $call60 = 0,
      $call64 = 0,
      $call68 = 0,
      $call72 = 0,
      $call76 = 0,
      $call80 = 0,
      $call84 = 0,
      $call88 = 0,
      $call92 = 0,
      $call96 = 0,
      $cmp = 0,
      $cmp12 = 0,
      $cmp221 = 0,
      $cmp228 = 0,
      $cmp232 = 0;
    var $cmp245 = 0,
      $cmp256 = 0,
      $cmp268 = 0,
      $cmp280 = 0,
      $cmp292 = 0,
      $cmp308 = 0,
      $cmp316 = 0,
      $cmp321 = 0,
      $cmp333 = 0,
      $cmp6 = 0,
      $conv = 0,
      $conv139 = 0,
      $inc14 = 0,
      $inc8 = 0,
      $incdec$ptr = 0,
      $incdec$ptr103 = 0,
      $incdec$ptr107 = 0,
      $incdec$ptr111 = 0,
      $incdec$ptr115 = 0,
      $incdec$ptr119 = 0;
    var $incdec$ptr123 = 0,
      $incdec$ptr127 = 0,
      $incdec$ptr131 = 0,
      $incdec$ptr242 = 0,
      $incdec$ptr253 = 0,
      $incdec$ptr264 = 0,
      $incdec$ptr277 = 0,
      $incdec$ptr288 = 0,
      $incdec$ptr51 = 0,
      $incdec$ptr55 = 0,
      $incdec$ptr59 = 0,
      $incdec$ptr63 = 0,
      $incdec$ptr67 = 0,
      $incdec$ptr71 = 0,
      $incdec$ptr75 = 0,
      $incdec$ptr79 = 0,
      $incdec$ptr83 = 0,
      $incdec$ptr87 = 0,
      $incdec$ptr91 = 0,
      $incdec$ptr95 = 0;
    var $incdec$ptr99 = 0,
      $ref$tmp = 0,
      $ref$tmp271 = 0,
      $retval$0 = 0,
      $retval$10 = 0,
      $retval$9$ph = 0,
      $spec$select = 0,
      $spec$select28 = 0,
      $tobool = 0,
      $tobool224 = 0,
      $tobool312 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 64) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
    $Result = (sp + 56) | 0;
    $Res = (sp + 48) | 0;
    $Child = (sp + 40) | 0;
    $TA = (sp + 36) | 0;
    $Ptr = (sp + 32) | 0;
    $Ref = (sp + 28) | 0;
    $ref$tmp = (sp + 24) | 0;
    $Ref265 = (sp + 20) | 0;
    $ref$tmp271 = (sp + 16) | 0;
    $P = (sp + 12) | 0;
    $P289 = (sp + 8) | 0;
    $Sub = (sp + 4) | 0;
    $TA318 = sp;
    HEAP32[$Result >> 2] = 0;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
        $this,
        0
      ) | 0;
    $conv = ($call << 24) >> 24;
    L1: do {
      switch ($conv | 0) {
        case 75:
        case 86:
        case 114: {
          $cmp = ($call << 24) >> 24 == 114;
          $spec$select = $cmp & 1;
          $call4 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              $spec$select
            ) | 0;
          $cmp6 = ($call4 << 24) >> 24 == 86;
          $inc8 = $cmp ? 2 : 1;
          $AfterQuals$1 = $cmp6 ? $inc8 : $spec$select;
          $call10 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              $AfterQuals$1
            ) | 0;
          $cmp12 = ($call10 << 24) >> 24 == 75;
          $inc14 = $cmp12 & 1;
          $spec$select28 = ($AfterQuals$1 + $inc14) | 0;
          $call16 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              $spec$select28
            ) | 0;
          switch (($call16 << 24) >> 24) {
            case 70: {
              break;
            }
            case 68: {
              $add = ($spec$select28 + 1) | 0;
              $call22 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
                  $this,
                  $add
                ) | 0;
              switch (($call22 << 24) >> 24) {
                case 120:
                case 119:
                case 79:
                case 111: {
                  break;
                }
                default: {
                  label = 5;
                  break L1;
                }
              }
              break;
            }
            default: {
              label = 5;
              break L1;
            }
          }
          $call41 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call42 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseFunctionTypeEv(
              $call41
            ) | 0;
          HEAP32[$Result >> 2] = $call42;
          $39 = $call42;
          label = 81;
          break;
        }
        case 85: {
          label = 5;
          break;
        }
        case 118: {
          $0 = HEAP32[$this >> 2] | 0;
          $incdec$ptr = ($0 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr;
          $call48 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_(
              $this,
              10485
            ) | 0;
          $retval$10 = $call48;
          break;
        }
        case 119: {
          $1 = HEAP32[$this >> 2] | 0;
          $incdec$ptr51 = ($1 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr51;
          $call52 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA8_KcEEEPNS0_4NodeEDpOT0_(
              $this
            ) | 0;
          $retval$10 = $call52;
          break;
        }
        case 98: {
          $2 = HEAP32[$this >> 2] | 0;
          $incdec$ptr55 = ($2 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr55;
          $call56 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_(
              $this,
              10490
            ) | 0;
          $retval$10 = $call56;
          break;
        }
        case 99: {
          $3 = HEAP32[$this >> 2] | 0;
          $incdec$ptr59 = ($3 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr59;
          $call60 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_(
              $this,
              10495
            ) | 0;
          $retval$10 = $call60;
          break;
        }
        case 97: {
          $4 = HEAP32[$this >> 2] | 0;
          $incdec$ptr63 = ($4 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr63;
          $call64 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_(
              $this,
              10500
            ) | 0;
          $retval$10 = $call64;
          break;
        }
        case 104: {
          $5 = HEAP32[$this >> 2] | 0;
          $incdec$ptr67 = ($5 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr67;
          $call68 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA14_KcEEEPNS0_4NodeEDpOT0_(
              $this,
              10512
            ) | 0;
          $retval$10 = $call68;
          break;
        }
        case 115: {
          $6 = HEAP32[$this >> 2] | 0;
          $incdec$ptr71 = ($6 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr71;
          $call72 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA6_KcEEEPNS0_4NodeEDpOT0_(
              $this,
              10526
            ) | 0;
          $retval$10 = $call72;
          break;
        }
        case 116: {
          $7 = HEAP32[$this >> 2] | 0;
          $incdec$ptr75 = ($7 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr75;
          $call76 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_(
              $this,
              10532
            ) | 0;
          $retval$10 = $call76;
          break;
        }
        case 105: {
          $8 = HEAP32[$this >> 2] | 0;
          $incdec$ptr79 = ($8 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr79;
          $call80 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA4_KcEEEPNS0_4NodeEDpOT0_(
              $this,
              10547
            ) | 0;
          $retval$10 = $call80;
          break;
        }
        case 106: {
          $9 = HEAP32[$this >> 2] | 0;
          $incdec$ptr83 = ($9 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr83;
          $call84 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA13_KcEEEPNS0_4NodeEDpOT0_(
              $this,
              10551
            ) | 0;
          $retval$10 = $call84;
          break;
        }
        case 108: {
          $10 = HEAP32[$this >> 2] | 0;
          $incdec$ptr87 = ($10 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr87;
          $call88 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_(
              $this,
              10564
            ) | 0;
          $retval$10 = $call88;
          break;
        }
        case 109: {
          $11 = HEAP32[$this >> 2] | 0;
          $incdec$ptr91 = ($11 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr91;
          $call92 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA14_KcEEEPNS0_4NodeEDpOT0_(
              $this,
              10569
            ) | 0;
          $retval$10 = $call92;
          break;
        }
        case 120: {
          $12 = HEAP32[$this >> 2] | 0;
          $incdec$ptr95 = ($12 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr95;
          $call96 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_(
              $this,
              10583
            ) | 0;
          $retval$10 = $call96;
          break;
        }
        case 121: {
          $13 = HEAP32[$this >> 2] | 0;
          $incdec$ptr99 = ($13 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr99;
          $call100 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA19_KcEEEPNS0_4NodeEDpOT0_(
              $this
            ) | 0;
          $retval$10 = $call100;
          break;
        }
        case 110: {
          $14 = HEAP32[$this >> 2] | 0;
          $incdec$ptr103 = ($14 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr103;
          $call104 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_(
              $this,
              10593
            ) | 0;
          $retval$10 = $call104;
          break;
        }
        case 111: {
          $15 = HEAP32[$this >> 2] | 0;
          $incdec$ptr107 = ($15 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr107;
          $call108 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA18_KcEEEPNS0_4NodeEDpOT0_(
              $this,
              10602
            ) | 0;
          $retval$10 = $call108;
          break;
        }
        case 102: {
          $16 = HEAP32[$this >> 2] | 0;
          $incdec$ptr111 = ($16 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr111;
          $call112 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA6_KcEEEPNS0_4NodeEDpOT0_(
              $this,
              10620
            ) | 0;
          $retval$10 = $call112;
          break;
        }
        case 100: {
          $17 = HEAP32[$this >> 2] | 0;
          $incdec$ptr115 = ($17 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr115;
          $call116 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA7_KcEEEPNS0_4NodeEDpOT0_(
              $this
            ) | 0;
          $retval$10 = $call116;
          break;
        }
        case 101: {
          $18 = HEAP32[$this >> 2] | 0;
          $incdec$ptr119 = ($18 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr119;
          $call120 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_(
              $this,
              10626
            ) | 0;
          $retval$10 = $call120;
          break;
        }
        case 103: {
          $19 = HEAP32[$this >> 2] | 0;
          $incdec$ptr123 = ($19 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr123;
          $call124 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_(
              $this,
              10638
            ) | 0;
          $retval$10 = $call124;
          break;
        }
        case 122: {
          $20 = HEAP32[$this >> 2] | 0;
          $incdec$ptr127 = ($20 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr127;
          $call128 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA4_KcEEEPNS0_4NodeEDpOT0_(
              $this,
              10649
            ) | 0;
          $retval$10 = $call128;
          break;
        }
        case 117: {
          $21 = HEAP32[$this >> 2] | 0;
          $incdec$ptr131 = ($21 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr131;
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv(
            $Res,
            $this
          );
          $call132 = __ZNK12_GLOBAL__N_110StringView5emptyEv($Res) | 0;
          if ($call132) {
            $retval$0 = 0;
          } else {
            $call135 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_(
                $this,
                $Res
              ) | 0;
            $retval$0 = $call135;
          }
          $retval$10 = $retval$0;
          break;
        }
        case 68: {
          $call138 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              1
            ) | 0;
          $conv139 = ($call138 << 24) >> 24;
          do {
            switch ($conv139 | 0) {
              case 100: {
                $22 = HEAP32[$this >> 2] | 0;
                $add$ptr = ($22 + 2) | 0;
                HEAP32[$this >> 2] = $add$ptr;
                $call142 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_(
                    $this,
                    10653
                  ) | 0;
                $retval$10 = $call142;
                break L1;
                break;
              }
              case 101: {
                $23 = HEAP32[$this >> 2] | 0;
                $add$ptr145 = ($23 + 2) | 0;
                HEAP32[$this >> 2] = $add$ptr145;
                $call146 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_(
                    $this,
                    10663
                  ) | 0;
                $retval$10 = $call146;
                break L1;
                break;
              }
              case 102: {
                $24 = HEAP32[$this >> 2] | 0;
                $add$ptr149 = ($24 + 2) | 0;
                HEAP32[$this >> 2] = $add$ptr149;
                $call150 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_(
                    $this,
                    10674
                  ) | 0;
                $retval$10 = $call150;
                break L1;
                break;
              }
              case 104: {
                $25 = HEAP32[$this >> 2] | 0;
                $add$ptr153 = ($25 + 2) | 0;
                HEAP32[$this >> 2] = $add$ptr153;
                $call154 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_(
                    $this,
                    10684
                  ) | 0;
                $retval$10 = $call154;
                break L1;
                break;
              }
              case 105: {
                $26 = HEAP32[$this >> 2] | 0;
                $add$ptr157 = ($26 + 2) | 0;
                HEAP32[$this >> 2] = $add$ptr157;
                $call158 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_(
                    $this,
                    10694
                  ) | 0;
                $retval$10 = $call158;
                break L1;
                break;
              }
              case 115: {
                $27 = HEAP32[$this >> 2] | 0;
                $add$ptr161 = ($27 + 2) | 0;
                HEAP32[$this >> 2] = $add$ptr161;
                $call162 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_(
                    $this,
                    10703
                  ) | 0;
                $retval$10 = $call162;
                break L1;
                break;
              }
              case 97: {
                $28 = HEAP32[$this >> 2] | 0;
                $add$ptr165 = ($28 + 2) | 0;
                HEAP32[$this >> 2] = $add$ptr165;
                $call166 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_(
                    $this,
                    10712
                  ) | 0;
                $retval$10 = $call166;
                break L1;
                break;
              }
              case 99: {
                $29 = HEAP32[$this >> 2] | 0;
                $add$ptr169 = ($29 + 2) | 0;
                HEAP32[$this >> 2] = $add$ptr169;
                $call170 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_(
                    $this,
                    10717
                  ) | 0;
                $retval$10 = $call170;
                break L1;
                break;
              }
              case 110: {
                $30 = HEAP32[$this >> 2] | 0;
                $add$ptr173 = ($30 + 2) | 0;
                HEAP32[$this >> 2] = $add$ptr173;
                $call174 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_(
                    $this,
                    10732
                  ) | 0;
                $retval$10 = $call174;
                break L1;
                break;
              }
              case 84:
              case 116: {
                $call176 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                    $this
                  ) | 0;
                $call177 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseDecltypeEv(
                    $call176
                  ) | 0;
                HEAP32[$Result >> 2] = $call177;
                $39 = $call177;
                label = 81;
                break L1;
                break;
              }
              case 118: {
                $call179 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                    $this
                  ) | 0;
                $call180 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseVectorTypeEv(
                    $call179
                  ) | 0;
                HEAP32[$Result >> 2] = $call180;
                $39 = $call180;
                label = 81;
                break L1;
                break;
              }
              case 112: {
                $31 = HEAP32[$this >> 2] | 0;
                $add$ptr183 = ($31 + 2) | 0;
                HEAP32[$this >> 2] = $add$ptr183;
                $call184 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                    $this
                  ) | 0;
                $call185 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
                    $call184
                  ) | 0;
                HEAP32[$Child >> 2] = $call185;
                $tobool = ($call185 | 0) == (0 | 0);
                if ($tobool) {
                  $retval$10 = 0;
                  break L1;
                } else {
                  $call188 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ParameterPackExpansionEJRPNS0_4NodeEEEES9_DpOT0_(
                      $this,
                      $Child
                    ) | 0;
                  HEAP32[$Result >> 2] = $call188;
                  label = 82;
                  break L1;
                }
                break;
              }
              case 120:
              case 119:
              case 79:
              case 111: {
                $call192 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                    $this
                  ) | 0;
                $call193 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseFunctionTypeEv(
                    $call192
                  ) | 0;
                HEAP32[$Result >> 2] = $call193;
                $39 = $call193;
                label = 81;
                break L1;
                break;
              }
              default: {
                $retval$10 = 0;
                break L1;
              }
            }
          } while (0);
          break;
        }
        case 70: {
          $call195 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call196 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseFunctionTypeEv(
              $call195
            ) | 0;
          HEAP32[$Result >> 2] = $call196;
          $39 = $call196;
          label = 81;
          break;
        }
        case 65: {
          $call198 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call199 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E14parseArrayTypeEv(
              $call198
            ) | 0;
          HEAP32[$Result >> 2] = $call199;
          $39 = $call199;
          label = 81;
          break;
        }
        case 77: {
          $call201 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call202 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E24parsePointerToMemberTypeEv(
              $call201
            ) | 0;
          HEAP32[$Result >> 2] = $call202;
          $39 = $call202;
          label = 81;
          break;
        }
        case 84: {
          $call204 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              1
            ) | 0;
          switch (($call204 << 24) >> 24) {
            case 101:
            case 117:
            case 115: {
              $call216 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call217 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseClassEnumTypeEv(
                  $call216
                ) | 0;
              HEAP32[$Result >> 2] = $call217;
              $39 = $call217;
              label = 81;
              break L1;
              break;
            }
            default: {
            }
          }
          $call219 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call220 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv(
              $call219
            ) | 0;
          HEAP32[$Result >> 2] = $call220;
          $cmp221 = ($call220 | 0) == (0 | 0);
          if ($cmp221) {
            $retval$10 = 0;
          } else {
            $TryToParseTemplateArgs = ($this + 360) | 0;
            $32 = HEAP8[$TryToParseTemplateArgs >> 0] | 0;
            $tobool224 = ($32 << 24) >> 24 == 0;
            if ($tobool224) {
              label = 82;
            } else {
              $call226 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
                  $this,
                  0
                ) | 0;
              $cmp228 = ($call226 << 24) >> 24 == 73;
              if ($cmp228) {
                $call231 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb(
                    $call219,
                    0
                  ) | 0;
                HEAP32[$TA >> 2] = $call231;
                $cmp232 = ($call231 | 0) == (0 | 0);
                if ($cmp232) {
                  $retval$10 = 0;
                  break L1;
                } else {
                  $call235 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_(
                      $this,
                      $Result,
                      $TA
                    ) | 0;
                  HEAP32[$Result >> 2] = $call235;
                  label = 82;
                  break L1;
                }
              } else {
                label = 82;
              }
            }
          }
          break;
        }
        case 80: {
          $33 = HEAP32[$this >> 2] | 0;
          $incdec$ptr242 = ($33 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr242;
          $call243 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call244 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
              $call243
            ) | 0;
          HEAP32[$Ptr >> 2] = $call244;
          $cmp245 = ($call244 | 0) == (0 | 0);
          if ($cmp245) {
            $retval$10 = 0;
            break L1;
          } else {
            $call248 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PointerTypeEJRPNS0_4NodeEEEES9_DpOT0_(
                $this,
                $Ptr
              ) | 0;
            HEAP32[$Result >> 2] = $call248;
            label = 82;
            break L1;
          }
          break;
        }
        case 82: {
          $34 = HEAP32[$this >> 2] | 0;
          $incdec$ptr253 = ($34 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr253;
          $call254 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call255 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
              $call254
            ) | 0;
          HEAP32[$Ref >> 2] = $call255;
          $cmp256 = ($call255 | 0) == (0 | 0);
          if ($cmp256) {
            $retval$10 = 0;
            break L1;
          } else {
            HEAP32[$ref$tmp >> 2] = 0;
            $call259 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ReferenceTypeEJRPNS0_4NodeENS0_13ReferenceKindEEEES9_DpOT0_(
                $this,
                $Ref,
                $ref$tmp
              ) | 0;
            HEAP32[$Result >> 2] = $call259;
            label = 82;
            break L1;
          }
          break;
        }
        case 79: {
          $35 = HEAP32[$this >> 2] | 0;
          $incdec$ptr264 = ($35 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr264;
          $call266 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call267 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
              $call266
            ) | 0;
          HEAP32[$Ref265 >> 2] = $call267;
          $cmp268 = ($call267 | 0) == (0 | 0);
          if ($cmp268) {
            $retval$10 = 0;
            break L1;
          } else {
            HEAP32[$ref$tmp271 >> 2] = 1;
            $call272 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ReferenceTypeEJRPNS0_4NodeENS0_13ReferenceKindEEEES9_DpOT0_(
                $this,
                $Ref265,
                $ref$tmp271
              ) | 0;
            HEAP32[$Result >> 2] = $call272;
            label = 82;
            break L1;
          }
          break;
        }
        case 67: {
          $36 = HEAP32[$this >> 2] | 0;
          $incdec$ptr277 = ($36 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr277;
          $call278 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call279 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
              $call278
            ) | 0;
          HEAP32[$P >> 2] = $call279;
          $cmp280 = ($call279 | 0) == (0 | 0);
          if ($cmp280) {
            $retval$10 = 0;
            break L1;
          } else {
            $call283 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20PostfixQualifiedTypeEJRPNS0_4NodeERA9_KcEEES9_DpOT0_(
                $this,
                $P
              ) | 0;
            HEAP32[$Result >> 2] = $call283;
            label = 82;
            break L1;
          }
          break;
        }
        case 71: {
          $37 = HEAP32[$this >> 2] | 0;
          $incdec$ptr288 = ($37 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr288;
          $call290 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call291 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
              $call290
            ) | 0;
          HEAP32[$P289 >> 2] = $call291;
          $cmp292 = ($call291 | 0) == (0 | 0);
          if ($cmp292) {
            $retval$10 = 0;
            break L1;
          } else {
            $call295 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20PostfixQualifiedTypeEJRPNS0_4NodeERA11_KcEEES9_DpOT0_(
                $this,
                $P289
              ) | 0;
            HEAP32[$Result >> 2] = $call295;
            label = 82;
            break L1;
          }
          break;
        }
        case 83: {
          $call299 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              1
            ) | 0;
          switch (($call299 << 24) >> 24) {
            case 116:
            case 0: {
              label = 80;
              break L1;
              break;
            }
            default: {
            }
          }
          $call306 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call307 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv(
              $call306
            ) | 0;
          HEAP32[$Sub >> 2] = $call307;
          $cmp308 = ($call307 | 0) == (0 | 0);
          if ($cmp308) {
            $retval$9$ph = 0;
          } else {
            $TryToParseTemplateArgs311 = ($this + 360) | 0;
            $38 = HEAP8[$TryToParseTemplateArgs311 >> 0] | 0;
            $tobool312 = ($38 << 24) >> 24 == 0;
            if ($tobool312) {
              $retval$9$ph = $call307;
            } else {
              $call314 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
                  $this,
                  0
                ) | 0;
              $cmp316 = ($call314 << 24) >> 24 == 73;
              if ($cmp316) {
                $call320 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb(
                    $call306,
                    0
                  ) | 0;
                HEAP32[$TA318 >> 2] = $call320;
                $cmp321 = ($call320 | 0) == (0 | 0);
                if ($cmp321) {
                  $retval$10 = 0;
                  break L1;
                } else {
                  $call324 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_(
                      $this,
                      $Sub,
                      $TA318
                    ) | 0;
                  HEAP32[$Result >> 2] = $call324;
                  label = 82;
                  break L1;
                }
              } else {
                $retval$9$ph = $call307;
              }
            }
          }
          $retval$10 = $retval$9$ph;
          break;
        }
        default: {
          label = 80;
        }
      }
    } while (0);
    if ((label | 0) == 5) {
      $call45 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
          $this
        ) | 0;
      $call46 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseQualifiedTypeEv(
          $call45
        ) | 0;
      HEAP32[$Result >> 2] = $call46;
      $39 = $call46;
      label = 81;
    } else if ((label | 0) == 80) {
      $call330 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
          $this
        ) | 0;
      $call331 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseClassEnumTypeEv(
          $call330
        ) | 0;
      HEAP32[$Result >> 2] = $call331;
      $39 = $call331;
      label = 81;
    }
    if ((label | 0) == 81) {
      $cmp333 = ($39 | 0) == (0 | 0);
      if ($cmp333) {
        $retval$10 = 0;
      } else {
        label = 82;
      }
    }
    if ((label | 0) == 82) {
      $Subs = ($this + 148) | 0;
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
        $Subs,
        $Result
      );
      $$pre = HEAP32[$Result >> 2] | 0;
      $retval$10 = $$pre;
    }
    STACKTOP = sp;
    return $retval$10 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseFunctionTypeEv(
    $this
  ) {
    $this = $this | 0;
    var $CVQuals = 0,
      $E = 0,
      $ExceptionSpec = 0,
      $Names = 0,
      $Names53 = 0,
      $Params = 0,
      $ReferenceQualifier = 0,
      $ReturnType = 0,
      $T = 0,
      $T71 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp18 = 0,
      $agg$tmp18$byval_copy = 0,
      $agg$tmp42 = 0,
      $agg$tmp42$byval_copy = 0,
      $agg$tmp5 = 0,
      $agg$tmp5$byval_copy = 0,
      $agg$tmp63 = 0,
      $agg$tmp63$byval_copy = 0;
    var $agg$tmp67 = 0,
      $agg$tmp67$byval_copy = 0,
      $call = 0,
      $call10 = 0,
      $call13 = 0,
      $call19 = 0,
      $call2 = 0,
      $call21 = 0,
      $call22 = 0,
      $call23 = 0,
      $call24 = 0,
      $call3 = 0,
      $call32 = 0,
      $call44 = 0,
      $call48 = 0,
      $call49 = 0,
      $call54 = 0,
      $call57 = 0,
      $call6 = 0,
      $call60 = 0;
    var $call64 = 0,
      $call68 = 0,
      $call73 = 0,
      $call8 = 0,
      $call82 = 0,
      $call9 = 0,
      $cmp = 0,
      $cmp25 = 0,
      $cmp50 = 0,
      $cmp74 = 0,
      $ref$tmp = 0,
      $retval$7 = 0,
      $retval$8 = 0,
      $retval$9 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 160) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160 | 0);
    $agg$tmp67$byval_copy = (sp + 144) | 0;
    $agg$tmp63$byval_copy = (sp + 136) | 0;
    $agg$tmp42$byval_copy = (sp + 128) | 0;
    $agg$tmp18$byval_copy = (sp + 120) | 0;
    $agg$tmp5$byval_copy = (sp + 112) | 0;
    $agg$tmp$byval_copy = (sp + 104) | 0;
    $CVQuals = (sp + 100) | 0;
    $ExceptionSpec = (sp + 96) | 0;
    $agg$tmp = (sp + 88) | 0;
    $agg$tmp5 = (sp + 80) | 0;
    $E = (sp + 72) | 0;
    $agg$tmp18 = (sp + 64) | 0;
    $T = (sp + 56) | 0;
    $ref$tmp = (sp + 48) | 0;
    $agg$tmp42 = (sp + 40) | 0;
    $ReturnType = (sp + 32) | 0;
    $ReferenceQualifier = (sp + 152) | 0;
    $agg$tmp63 = (sp + 24) | 0;
    $agg$tmp67 = (sp + 16) | 0;
    $T71 = (sp + 8) | 0;
    $Params = sp;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv(
        $this
      ) | 0;
    HEAP32[$CVQuals >> 2] = $call;
    HEAP32[$ExceptionSpec >> 2] = 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 15485);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    $call2 =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
        $this,
        $agg$tmp$byval_copy
      ) | 0;
    do {
      if ($call2) {
        $call3 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_(
            $this,
            15488
          ) | 0;
        HEAP32[$ExceptionSpec >> 2] = $call3;
        label = 14;
      } else {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp5, 15497);
        HEAP32[$agg$tmp5$byval_copy >> 2] = HEAP32[$agg$tmp5 >> 2] | 0;
        HEAP32[($agg$tmp5$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp5 + 4) >> 2] | 0;
        $call6 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
            $this,
            $agg$tmp5$byval_copy
          ) | 0;
        if ($call6) {
          $call8 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call9 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
              $call8
            ) | 0;
          HEAP32[$E >> 2] = $call9;
          $cmp = ($call9 | 0) == (0 | 0);
          if ($cmp) {
            $retval$9 = 0;
            break;
          }
          $call10 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
              $this,
              69
            ) | 0;
          if ($call10) {
            $call13 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12NoexceptSpecEJRPNS0_4NodeEEEES9_DpOT0_(
                $this,
                $E
              ) | 0;
            HEAP32[$ExceptionSpec >> 2] = $call13;
            label = 14;
            break;
          } else {
            $retval$9 = 0;
            break;
          }
        }
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp18, 15500);
        HEAP32[$agg$tmp18$byval_copy >> 2] = HEAP32[$agg$tmp18 >> 2] | 0;
        HEAP32[($agg$tmp18$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp18 + 4) >> 2] | 0;
        $call19 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
            $this,
            $agg$tmp18$byval_copy
          ) | 0;
        if ($call19) {
          $Names = ($this + 8) | 0;
          $call21 =
            __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv(
              $Names
            ) | 0;
          while (1) {
            $call22 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                $this,
                69
              ) | 0;
            if ($call22) {
              label = 12;
              break;
            }
            $call23 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                $this
              ) | 0;
            $call24 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
                $call23
              ) | 0;
            HEAP32[$T >> 2] = $call24;
            $cmp25 = ($call24 | 0) == (0 | 0);
            if ($cmp25) {
              label = 13;
              break;
            }
            __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
              $Names,
              $T
            );
          }
          if ((label | 0) == 12) {
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm(
              $ref$tmp,
              $this,
              $call21
            );
            $call32 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20DynamicExceptionSpecEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_(
                $this,
                $ref$tmp
              ) | 0;
            HEAP32[$ExceptionSpec >> 2] = $call32;
            label = 14;
            break;
          } else if ((label | 0) == 13) {
            $retval$9 = 0;
            break;
          }
        } else {
          label = 14;
        }
      }
    } while (0);
    if ((label | 0) == 14) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp42, 15503);
      HEAP32[$agg$tmp42$byval_copy >> 2] = HEAP32[$agg$tmp42 >> 2] | 0;
      HEAP32[($agg$tmp42$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp42 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
        $this,
        $agg$tmp42$byval_copy
      ) | 0;
      $call44 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
          $this,
          70
        ) | 0;
      if ($call44) {
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
          $this,
          89
        ) | 0;
        $call48 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
            $this
          ) | 0;
        $call49 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
            $call48
          ) | 0;
        HEAP32[$ReturnType >> 2] = $call49;
        $cmp50 = ($call49 | 0) == (0 | 0);
        if ($cmp50) {
          $retval$8 = 0;
        } else {
          HEAP8[$ReferenceQualifier >> 0] = 0;
          $Names53 = ($this + 8) | 0;
          $call54 =
            __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv(
              $Names53
            ) | 0;
          while (1) {
            $call57 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                $this,
                69
              ) | 0;
            if ($call57) {
              label = 27;
              break;
            }
            $call60 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                $this,
                118
              ) | 0;
            if (!$call60) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp63, 15506);
              HEAP32[$agg$tmp63$byval_copy >> 2] = HEAP32[$agg$tmp63 >> 2] | 0;
              HEAP32[($agg$tmp63$byval_copy + 4) >> 2] =
                HEAP32[($agg$tmp63 + 4) >> 2] | 0;
              $call64 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                  $this,
                  $agg$tmp63$byval_copy
                ) | 0;
              if ($call64) {
                label = 21;
                break;
              }
              __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp67, 15509);
              HEAP32[$agg$tmp67$byval_copy >> 2] = HEAP32[$agg$tmp67 >> 2] | 0;
              HEAP32[($agg$tmp67$byval_copy + 4) >> 2] =
                HEAP32[($agg$tmp67 + 4) >> 2] | 0;
              $call68 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                  $this,
                  $agg$tmp67$byval_copy
                ) | 0;
              if ($call68) {
                label = 23;
                break;
              }
              $call73 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
                  $call48
                ) | 0;
              HEAP32[$T71 >> 2] = $call73;
              $cmp74 = ($call73 | 0) == (0 | 0);
              if ($cmp74) {
                label = 26;
                break;
              }
              __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
                $Names53,
                $T71
              );
            }
          }
          if ((label | 0) == 21) {
            HEAP8[$ReferenceQualifier >> 0] = 1;
            label = 27;
          } else if ((label | 0) == 23) {
            HEAP8[$ReferenceQualifier >> 0] = 2;
            label = 27;
          } else if ((label | 0) == 26) {
            $retval$7 = 0;
          }
          if ((label | 0) == 27) {
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm(
              $Params,
              $this,
              $call54
            );
            $call82 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12FunctionTypeEJRPNS0_4NodeERNS0_9NodeArrayERNS0_10QualifiersERNS0_15FunctionRefQualESA_EEES9_DpOT0_(
                $this,
                $ReturnType,
                $Params,
                $CVQuals,
                $ReferenceQualifier,
                $ExceptionSpec
              ) | 0;
            $retval$7 = $call82;
          }
          $retval$8 = $retval$7;
        }
        $retval$9 = $retval$8;
      } else {
        $retval$9 = 0;
      }
    }
    STACKTOP = sp;
    return $retval$9 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseQualifiedTypeEv(
    $this
  ) {
    $this = $this | 0;
    var $Child = 0,
      $Child26 = 0,
      $Last = 0,
      $Proto = 0,
      $ProtoSourceName = 0,
      $Qual = 0,
      $Quals = 0,
      $SaveFirst = 0,
      $SaveLast = 0,
      $Ty = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      $call13 = 0,
      $call16 = 0,
      $call17 = 0,
      $call2 = 0,
      $call20 = 0,
      $call27 = 0,
      $call28 = 0;
    var $call32 = 0,
      $call37 = 0,
      $call38 = 0,
      $call39 = 0,
      $call4 = 0,
      $call45 = 0,
      $call6 = 0,
      $call7 = 0,
      $cmp = 0,
      $cmp29 = 0,
      $cmp40 = 0,
      $cmp43 = 0,
      $retval$0 = 0,
      $retval$1 = 0,
      $retval$2 = 0,
      $retval$3 = 0,
      $retval$4 = 0,
      $retval$5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 80) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
    $agg$tmp$byval_copy = (sp + 72) | 0;
    $Qual = (sp + 64) | 0;
    $agg$tmp = (sp + 56) | 0;
    $ProtoSourceName = (sp + 48) | 0;
    $Proto = sp;
    $SaveFirst = (sp + 36) | 0;
    $SaveLast = (sp + 24) | 0;
    $Child = (sp + 20) | 0;
    $Child26 = (sp + 16) | 0;
    $Quals = (sp + 12) | 0;
    $Ty = (sp + 8) | 0;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
        $this,
        85
      ) | 0;
    if ($call) {
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv(
        $Qual,
        $this
      );
      $call2 = __ZNK12_GLOBAL__N_110StringView5emptyEv($Qual) | 0;
      do {
        if ($call2) {
          $retval$3 = 0;
        } else {
          __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 15300);
          HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
          HEAP32[($agg$tmp$byval_copy + 4) >> 2] =
            HEAP32[($agg$tmp + 4) >> 2] | 0;
          $call4 =
            __ZNK12_GLOBAL__N_110StringView10startsWithES0_(
              $Qual,
              $agg$tmp$byval_copy
            ) | 0;
          if (!$call4) {
            $call27 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                $this
              ) | 0;
            $call28 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseQualifiedTypeEv(
                $call27
              ) | 0;
            HEAP32[$Child26 >> 2] = $call28;
            $cmp29 = ($call28 | 0) == (0 | 0);
            if ($cmp29) {
              $retval$2 = 0;
            } else {
              $call32 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_17VendorExtQualTypeEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_(
                  $this,
                  $Child26,
                  $Qual
                ) | 0;
              $retval$2 = $call32;
            }
            $retval$3 = $retval$2;
            break;
          }
          __ZNK12_GLOBAL__N_110StringView9dropFrontEm(
            $ProtoSourceName,
            $Qual,
            9
          );
          __ZN12_GLOBAL__N_110StringViewC2Ev($Proto);
          $call6 =
            __ZNK12_GLOBAL__N_110StringView5beginEv($ProtoSourceName) | 0;
          __ZN12_GLOBAL__N_114SwapAndRestoreIPKcEC2ERS2_S2_(
            $SaveFirst,
            $this,
            $call6
          );
          $Last = ($this + 4) | 0;
          $call7 = __ZNK12_GLOBAL__N_110StringView3endEv($ProtoSourceName) | 0;
          __ZN12_GLOBAL__N_114SwapAndRestoreIPKcEC2ERS2_S2_(
            $SaveLast,
            $Last,
            $call7
          );
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv(
            $Proto,
            $this
          );
          __ZN12_GLOBAL__N_114SwapAndRestoreIPKcED2Ev($SaveLast);
          __ZN12_GLOBAL__N_114SwapAndRestoreIPKcED2Ev($SaveFirst);
          $call13 = __ZNK12_GLOBAL__N_110StringView5emptyEv($Proto) | 0;
          if ($call13) {
            $retval$1 = 0;
          } else {
            $call16 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                $this
              ) | 0;
            $call17 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseQualifiedTypeEv(
                $call16
              ) | 0;
            HEAP32[$Child >> 2] = $call17;
            $cmp = ($call17 | 0) == (0 | 0);
            if ($cmp) {
              $retval$0 = 0;
            } else {
              $call20 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ObjCProtoNameEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_(
                  $this,
                  $Child,
                  $Proto
                ) | 0;
              $retval$0 = $call20;
            }
            $retval$1 = $retval$0;
          }
          $retval$3 = $retval$1;
        }
      } while (0);
      $retval$5 = $retval$3;
    } else {
      $call37 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv(
          $this
        ) | 0;
      HEAP32[$Quals >> 2] = $call37;
      $call38 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
          $this
        ) | 0;
      $call39 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
          $call38
        ) | 0;
      HEAP32[$Ty >> 2] = $call39;
      $cmp40 = ($call39 | 0) == (0 | 0);
      if ($cmp40) {
        $retval$4 = 0;
      } else {
        $cmp43 = ($call37 | 0) == 0;
        if ($cmp43) {
          $retval$4 = $call39;
        } else {
          $call45 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8QualTypeEJRPNS0_4NodeERNS0_10QualifiersEEEES9_DpOT0_(
              $this,
              $Ty,
              $Quals
            ) | 0;
          HEAP32[$Ty >> 2] = $call45;
          $retval$4 = $call45;
        }
      }
      $retval$5 = $retval$4;
    }
    STACKTOP = sp;
    return $retval$5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA5_KcEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA8_KcEEEPNS0_4NodeEDpOT0_(
    $this
  ) {
    $this = $this | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA8_KcEEEPT_DpOT0_(
        $ASTAllocator,
        11405
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA12_KcEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA14_KcEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA14_KcEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA6_KcEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA6_KcEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA15_KcEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA4_KcEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA4_KcEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA13_KcEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA13_KcEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA10_KcEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA19_KcEEEPNS0_4NodeEDpOT0_(
    $this
  ) {
    $this = $this | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA19_KcEEEPT_DpOT0_(
        $ASTAllocator,
        15281
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA9_KcEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA18_KcEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA18_KcEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA7_KcEEEPNS0_4NodeEDpOT0_(
    $this
  ) {
    $this = $this | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA7_KcEEEPT_DpOT0_(
        $ASTAllocator,
        15274
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA11_KcEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv(
    $agg$result,
    $this
  ) {
    $agg$result = $agg$result | 0;
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Int = 0,
      $R = 0,
      $add$ptr = 0,
      $add$ptr5 = 0,
      $call = 0,
      $call2 = 0,
      $cmp = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $Int = (sp + 8) | 0;
    $R = sp;
    HEAP32[$Int >> 2] = 0;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parsePositiveIntegerEPm(
        $this,
        $Int
      ) | 0;
    if ($call) {
      label = 3;
    } else {
      $call2 =
        __ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv(
          $this
        ) | 0;
      $0 = HEAP32[$Int >> 2] | 0;
      $cmp = $call2 >>> 0 < $0 >>> 0;
      if ($cmp) {
        label = 3;
      } else {
        $1 = HEAP32[$this >> 2] | 0;
        $add$ptr = ($1 + $0) | 0;
        __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($R, $1, $add$ptr);
        $2 = HEAP32[$this >> 2] | 0;
        $add$ptr5 = ($2 + $0) | 0;
        HEAP32[$this >> 2] = $add$ptr5;
        $3 = $R;
        $4 = $3;
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ($3 + 4) | 0;
        $7 = $6;
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = $agg$result;
        $10 = $9;
        HEAP32[$10 >> 2] = $5;
        $11 = ($9 + 4) | 0;
        $12 = $11;
        HEAP32[$12 >> 2] = $8;
      }
    }
    if ((label | 0) == 3) {
      __ZN12_GLOBAL__N_110StringViewC2Ev($agg$result);
    }
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRNS_10StringViewEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseDecltypeEv(
    $this
  ) {
    $this = $this | 0;
    var $E = 0,
      $call = 0,
      $call10 = 0,
      $call13 = 0,
      $call2 = 0,
      $call3 = 0,
      $call6 = 0,
      $call7 = 0,
      $cmp = 0,
      $retval$0 = 0,
      $retval$1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $E = sp;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
        $this,
        68
      ) | 0;
    do {
      if ($call) {
        $call2 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
            $this,
            116
          ) | 0;
        if (!$call2) {
          $call3 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
              $this,
              84
            ) | 0;
          if (!$call3) {
            $retval$1 = 0;
            break;
          }
        }
        $call6 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
            $this
          ) | 0;
        $call7 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
            $call6
          ) | 0;
        HEAP32[$E >> 2] = $call7;
        $cmp = ($call7 | 0) == (0 | 0);
        if ($cmp) {
          $retval$0 = 0;
        } else {
          $call10 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
              $this,
              69
            ) | 0;
          if ($call10) {
            $call13 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA10_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_(
                $this,
                15264,
                $E
              ) | 0;
            $retval$0 = $call13;
          } else {
            $retval$0 = 0;
          }
        }
        $retval$1 = $retval$0;
      } else {
        $retval$1 = 0;
      }
    } while (0);
    STACKTOP = sp;
    return $retval$1 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseVectorTypeEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $DimExpr = 0,
      $DimensionNumber = 0,
      $ElemType = 0,
      $ElemType31 = 0,
      $ElemType41 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      $call10 = 0,
      $call12 = 0,
      $call14 = 0,
      $call15 = 0,
      $call19 = 0,
      $call2 = 0,
      $call2$off = 0,
      $call22 = 0,
      $call24 = 0,
      $call25 = 0,
      $call28 = 0;
    var $call33 = 0,
      $call37 = 0,
      $call42 = 0,
      $call43 = 0,
      $call47 = 0,
      $call7 = 0,
      $cmp16 = 0,
      $ref$tmp = 0,
      $retval$0 = 0,
      $retval$1 = 0,
      $retval$2 = 0,
      $retval$3 = 0,
      $retval$4 = 0,
      $retval$5 = 0,
      $tobool = 0,
      $tobool34 = 0,
      $tobool44 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 48) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
    $agg$tmp$byval_copy = (sp + 40) | 0;
    $agg$tmp = (sp + 32) | 0;
    $DimensionNumber = (sp + 24) | 0;
    $ElemType = (sp + 20) | 0;
    $DimExpr = (sp + 16) | 0;
    $ElemType31 = (sp + 12) | 0;
    $ElemType41 = (sp + 8) | 0;
    $ref$tmp = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 15139);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
        $this,
        $agg$tmp$byval_copy
      ) | 0;
    do {
      if ($call) {
        $call2 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
            $this,
            0
          ) | 0;
        $call2$off = (($call2 + -49) << 24) >> 24;
        $0 = ($call2$off & 255) < 9;
        if ($0) {
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb(
            $DimensionNumber,
            $this,
            0
          );
          $call7 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
              $this,
              95
            ) | 0;
          do {
            if ($call7) {
              $call10 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                  $this,
                  112
                ) | 0;
              if ($call10) {
                $call12 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15PixelVectorTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_(
                    $this,
                    $DimensionNumber
                  ) | 0;
                $retval$1 = $call12;
                break;
              }
              $call14 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call15 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
                  $call14
                ) | 0;
              HEAP32[$ElemType >> 2] = $call15;
              $cmp16 = ($call15 | 0) == (0 | 0);
              if ($cmp16) {
                $retval$0 = 0;
              } else {
                $call19 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_(
                    $this,
                    $ElemType,
                    $DimensionNumber
                  ) | 0;
                $retval$0 = $call19;
              }
              $retval$1 = $retval$0;
            } else {
              $retval$1 = 0;
            }
          } while (0);
          $retval$5 = $retval$1;
          break;
        }
        $call22 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
            $this,
            95
          ) | 0;
        if ($call22) {
          $call42 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call43 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
              $call42
            ) | 0;
          HEAP32[$ElemType41 >> 2] = $call43;
          $tobool44 = ($call43 | 0) == (0 | 0);
          if ($tobool44) {
            $retval$4 = 0;
          } else {
            __ZN12_GLOBAL__N_110StringViewC2Ev($ref$tmp);
            $call47 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeENS_10StringViewEEEES9_DpOT0_(
                $this,
                $ElemType41,
                $ref$tmp
              ) | 0;
            $retval$4 = $call47;
          }
          $retval$5 = $retval$4;
          break;
        }
        $call24 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
            $this
          ) | 0;
        $call25 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
            $call24
          ) | 0;
        HEAP32[$DimExpr >> 2] = $call25;
        $tobool = ($call25 | 0) == (0 | 0);
        if ($tobool) {
          $retval$3 = 0;
        } else {
          $call28 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
              $this,
              95
            ) | 0;
          if ($call28) {
            $call33 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
                $call24
              ) | 0;
            HEAP32[$ElemType31 >> 2] = $call33;
            $tobool34 = ($call33 | 0) == (0 | 0);
            if ($tobool34) {
              $retval$2 = 0;
            } else {
              $call37 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeESA_EEES9_DpOT0_(
                  $this,
                  $ElemType31,
                  $DimExpr
                ) | 0;
              $retval$2 = $call37;
            }
            $retval$3 = $retval$2;
          } else {
            $retval$3 = 0;
          }
        }
        $retval$5 = $retval$3;
      } else {
        $retval$5 = 0;
      }
    } while (0);
    STACKTOP = sp;
    return $retval$5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ParameterPackExpansionEJRPNS0_4NodeEEEES9_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ParameterPackExpansionEJRPNS2_4NodeEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E14parseArrayTypeEv(
    $this
  ) {
    $this = $this | 0;
    var $Dimension = 0,
      $Ty = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      $call10 = 0,
      $call11 = 0,
      $call14 = 0,
      $call2 = 0,
      $call20 = 0,
      $call21 = 0,
      $call25 = 0,
      $call5 = 0,
      $call8 = 0,
      $cmp = 0,
      $cmp22 = 0,
      $conv = 0,
      $isdigit = 0,
      $isdigittmp = 0,
      $retval$1 = 0;
    var $retval$2 = 0,
      $retval$3 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $agg$tmp$byval_copy = (sp + 24) | 0;
    $Dimension = sp;
    $agg$tmp = (sp + 16) | 0;
    $Ty = (sp + 8) | 0;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
        $this,
        65
      ) | 0;
    if ($call) {
      __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2Ev($Dimension);
      $call2 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
          $this,
          0
        ) | 0;
      $conv = ($call2 << 24) >> 24;
      $isdigittmp = ($conv + -48) | 0;
      $isdigit = $isdigittmp >>> 0 < 10;
      if ($isdigit) {
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb(
          $agg$tmp,
          $this,
          0
        );
        HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
        HEAP32[($agg$tmp$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE(
          $Dimension,
          $agg$tmp$byval_copy
        );
        $call5 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
            $this,
            95
          ) | 0;
        if ($call5) {
          label = 8;
        } else {
          $retval$2 = 0;
        }
      } else {
        $call8 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
            $this,
            95
          ) | 0;
        if ($call8) {
          label = 8;
        } else {
          $call10 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call11 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
              $call10
            ) | 0;
          $cmp = ($call11 | 0) == (0 | 0);
          if ($cmp) {
            $retval$2 = 0;
          } else {
            $call14 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                $this,
                95
              ) | 0;
            if ($call14) {
              __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2EPNS0_4NodeE(
                $Dimension,
                $call11
              );
              label = 8;
            } else {
              $retval$2 = 0;
            }
          }
        }
      }
      if ((label | 0) == 8) {
        $call20 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
            $this
          ) | 0;
        $call21 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
            $call20
          ) | 0;
        HEAP32[$Ty >> 2] = $call21;
        $cmp22 = ($call21 | 0) == (0 | 0);
        if ($cmp22) {
          $retval$1 = 0;
        } else {
          $call25 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9ArrayTypeEJRPNS0_4NodeERNS0_12NodeOrStringEEEES9_DpOT0_(
              $this,
              $Ty,
              $Dimension
            ) | 0;
          $retval$1 = $call25;
        }
        $retval$2 = $retval$1;
      }
      $retval$3 = $retval$2;
    } else {
      $retval$3 = 0;
    }
    STACKTOP = sp;
    return $retval$3 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E24parsePointerToMemberTypeEv(
    $this
  ) {
    $this = $this | 0;
    var $ClassType = 0,
      $MemberType = 0,
      $call = 0,
      $call11 = 0,
      $call2 = 0,
      $call3 = 0,
      $call7 = 0,
      $cmp = 0,
      $cmp8 = 0,
      $retval$0 = 0,
      $retval$1 = 0,
      $retval$2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ClassType = (sp + 4) | 0;
    $MemberType = sp;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
        $this,
        77
      ) | 0;
    if ($call) {
      $call2 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
          $this
        ) | 0;
      $call3 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
          $call2
        ) | 0;
      HEAP32[$ClassType >> 2] = $call3;
      $cmp = ($call3 | 0) == (0 | 0);
      if ($cmp) {
        $retval$1 = 0;
      } else {
        $call7 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
            $call2
          ) | 0;
        HEAP32[$MemberType >> 2] = $call7;
        $cmp8 = ($call7 | 0) == (0 | 0);
        if ($cmp8) {
          $retval$0 = 0;
        } else {
          $call11 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19PointerToMemberTypeEJRPNS0_4NodeESA_EEES9_DpOT0_(
              $this,
              $ClassType,
              $MemberType
            ) | 0;
          $retval$0 = $call11;
        }
        $retval$1 = $retval$0;
      }
      $retval$2 = $retval$1;
    } else {
      $retval$2 = 0;
    }
    STACKTOP = sp;
    return $retval$2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseClassEnumTypeEv(
    $this
  ) {
    $this = $this | 0;
    var $ElabSpef = 0,
      $Name = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp2 = 0,
      $agg$tmp2$byval_copy = 0,
      $agg$tmp7 = 0,
      $agg$tmp7$byval_copy = 0,
      $call = 0,
      $call13 = 0,
      $call14 = 0,
      $call17 = 0,
      $call19 = 0,
      $call3 = 0,
      $call8 = 0,
      $cmp = 0,
      $retval$0 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 64) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
    $agg$tmp7$byval_copy = (sp + 56) | 0;
    $agg$tmp2$byval_copy = (sp + 48) | 0;
    $agg$tmp$byval_copy = (sp + 40) | 0;
    $ElabSpef = sp;
    $agg$tmp = (sp + 32) | 0;
    $agg$tmp2 = (sp + 24) | 0;
    $agg$tmp7 = (sp + 16) | 0;
    $Name = (sp + 8) | 0;
    __ZN12_GLOBAL__N_110StringViewC2Ev($ElabSpef);
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 14195);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
        $this,
        $agg$tmp$byval_copy
      ) | 0;
    do {
      if ($call) {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($ElabSpef, 14198);
      } else {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 14205);
        HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
        HEAP32[($agg$tmp2$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp2 + 4) >> 2] | 0;
        $call3 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
            $this,
            $agg$tmp2$byval_copy
          ) | 0;
        if ($call3) {
          __ZN12_GLOBAL__N_110StringViewC2EPKc($ElabSpef, 14208);
          break;
        }
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp7, 14214);
        HEAP32[$agg$tmp7$byval_copy >> 2] = HEAP32[$agg$tmp7 >> 2] | 0;
        HEAP32[($agg$tmp7$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp7 + 4) >> 2] | 0;
        $call8 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
            $this,
            $agg$tmp7$byval_copy
          ) | 0;
        if ($call8) {
          __ZN12_GLOBAL__N_110StringViewC2EPKc($ElabSpef, 14217);
        }
      }
    } while (0);
    $call13 =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
        $this
      ) | 0;
    $call14 =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE(
        $call13,
        0
      ) | 0;
    HEAP32[$Name >> 2] = $call14;
    $cmp = ($call14 | 0) == (0 | 0);
    if ($cmp) {
      $retval$0 = 0;
    } else {
      $call17 = __ZNK12_GLOBAL__N_110StringView5emptyEv($ElabSpef) | 0;
      if ($call17) {
        $retval$0 = $call14;
      } else {
        $call19 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ElaboratedTypeSpefTypeEJRNS_10StringViewERPNS0_4NodeEEEESB_DpOT0_(
            $this,
            $ElabSpef,
            $Name
          ) | 0;
        $retval$0 = $call19;
      }
    }
    STACKTOP = sp;
    return $retval$0 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $ForwardTemplateRefs = 0,
      $Index = 0,
      $ParsingLambdaParams = 0,
      $PermitForwardTemplateReferences = 0,
      $TemplateParams = 0,
      $call = 0,
      $call12 = 0,
      $call16 = 0,
      $call2 = 0,
      $call21 = 0,
      $call25 = 0,
      $call4 = 0,
      $call7 = 0,
      $cmp = 0,
      $inc = 0;
    var $ref$tmp = 0,
      $retval$1 = 0,
      $retval$2 = 0,
      $tobool = 0,
      $tobool14 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $Index = (sp + 4) | 0;
    $ref$tmp = sp;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
        $this,
        84
      ) | 0;
    if ($call) {
      HEAP32[$Index >> 2] = 0;
      $call2 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
          $this,
          95
        ) | 0;
      if ($call2) {
        $3 = 0;
        label = 5;
      } else {
        $call4 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parsePositiveIntegerEPm(
            $this,
            $Index
          ) | 0;
        if ($call4) {
          $retval$1 = 0;
        } else {
          $0 = HEAP32[$Index >> 2] | 0;
          $inc = ($0 + 1) | 0;
          HEAP32[$Index >> 2] = $inc;
          $call7 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
              $this,
              95
            ) | 0;
          if ($call7) {
            $3 = $inc;
            label = 5;
          } else {
            $retval$1 = 0;
          }
        }
      }
      do {
        if ((label | 0) == 5) {
          $ParsingLambdaParams = ($this + 362) | 0;
          $1 = HEAP8[$ParsingLambdaParams >> 0] | 0;
          $tobool = ($1 << 24) >> 24 == 0;
          if (!$tobool) {
            $call12 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_(
                $this,
                10712
              ) | 0;
            $retval$1 = $call12;
            break;
          }
          $PermitForwardTemplateReferences = ($this + 361) | 0;
          $2 = HEAP8[$PermitForwardTemplateReferences >> 0] | 0;
          $tobool14 = ($2 << 24) >> 24 == 0;
          if (!$tobool14) {
            $call16 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_24ForwardTemplateReferenceEJRmEEEPNS0_4NodeEDpOT0_(
                $this,
                $Index
              ) | 0;
            $ForwardTemplateRefs = ($this + 332) | 0;
            HEAP32[$ref$tmp >> 2] = $call16;
            __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE9push_backERKS3_(
              $ForwardTemplateRefs,
              $ref$tmp
            );
            $retval$1 = $call16;
            break;
          }
          $TemplateParams = ($this + 288) | 0;
          $call21 =
            __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv(
              $TemplateParams
            ) | 0;
          $cmp = $3 >>> 0 < $call21 >>> 0;
          if ($cmp) {
            $call25 =
              __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEixEm(
                $TemplateParams,
                $3
              ) | 0;
            $4 = HEAP32[$call25 >> 2] | 0;
            $retval$1 = $4;
          } else {
            $retval$1 = 0;
          }
        }
      } while (0);
      $retval$2 = $retval$1;
    } else {
      $retval$2 = 0;
    }
    STACKTOP = sp;
    return $retval$2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb(
    $this,
    $TagTemplates
  ) {
    $this = $this | 0;
    $TagTemplates = $TagTemplates | 0;
    var $0 = 0,
      $Arg = 0,
      $Arg42 = 0,
      $Names = 0,
      $OldParams = 0,
      $TableEntry = 0,
      $TemplateParams = 0,
      $call = 0,
      $call10 = 0,
      $call12 = 0,
      $call23 = 0,
      $call29 = 0,
      $call4 = 0,
      $call43 = 0,
      $call44 = 0,
      $call5 = 0,
      $call54 = 0,
      $cmp = 0,
      $cmp24 = 0,
      $cmp45 = 0;
    var $ref$tmp = 0,
      $ref$tmp53 = 0,
      $retval$6 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 80) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
    $OldParams = (sp + 32) | 0;
    $Arg = (sp + 28) | 0;
    $TableEntry = (sp + 24) | 0;
    $ref$tmp = (sp + 16) | 0;
    $Arg42 = (sp + 8) | 0;
    $ref$tmp53 = sp;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
        $this,
        73
      ) | 0;
    do {
      if ($call) {
        $TemplateParams = ($this + 288) | 0;
        if ($TagTemplates) {
          __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv(
            $TemplateParams
          );
        }
        $Names = ($this + 8) | 0;
        $call4 =
          __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv(
            $Names
          ) | 0;
        while (1) {
          $call5 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
              $this,
              69
            ) | 0;
          if ($call5) {
            label = 16;
            break;
          }
          if ($TagTemplates) {
            __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2EOS4_(
              $OldParams,
              $TemplateParams
            );
            $call10 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                $this
              ) | 0;
            $call12 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv(
                $call10
              ) | 0;
            HEAP32[$Arg >> 2] = $call12;
            __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEaSEOS4_(
              $TemplateParams,
              $OldParams
            );
            $cmp = ($call12 | 0) == (0 | 0);
            if ($cmp) {
              label = 12;
              break;
            }
            $0 = $call12;
            __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
              $Names,
              $Arg
            );
            HEAP32[$TableEntry >> 2] = $0;
            $call23 =
              __ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($call12) | 0;
            $cmp24 = ($call23 << 24) >> 24 == 28;
            if ($cmp24) {
              __ZNK12_GLOBAL__N_116itanium_demangle20TemplateArgumentPack11getElementsEv(
                $ref$tmp,
                $call12
              );
              $call29 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ParameterPackEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_(
                  $this,
                  $ref$tmp
                ) | 0;
              HEAP32[$TableEntry >> 2] = $call29;
            }
            __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE9push_backERKS3_(
              $TemplateParams,
              $TableEntry
            );
            __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EED2Ev(
              $OldParams
            );
          } else {
            $call43 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                $this
              ) | 0;
            $call44 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv(
                $call43
              ) | 0;
            HEAP32[$Arg42 >> 2] = $call44;
            $cmp45 = ($call44 | 0) == (0 | 0);
            if ($cmp45) {
              label = 15;
              break;
            }
            __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
              $Names,
              $Arg42
            );
          }
        }
        if ((label | 0) == 12) {
          __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EED2Ev(
            $OldParams
          );
          $retval$6 = 0;
          break;
        } else if ((label | 0) == 15) {
          $retval$6 = 0;
          break;
        } else if ((label | 0) == 16) {
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm(
            $ref$tmp53,
            $this,
            $call4
          );
          $call54 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12TemplateArgsEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_(
              $this,
              $ref$tmp53
            ) | 0;
          $retval$6 = $call54;
          break;
        }
      } else {
        $retval$6 = 0;
      }
    } while (0);
    STACKTOP = sp;
    return $retval$6 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20NameWithTemplateArgsEJRPNS2_4NodeES6_EEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PointerTypeEJRPNS0_4NodeEEEES9_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11PointerTypeEJRPNS2_4NodeEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ReferenceTypeEJRPNS0_4NodeENS0_13ReferenceKindEEEES9_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ReferenceTypeEJRPNS2_4NodeENS2_13ReferenceKindEEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20PostfixQualifiedTypeEJRPNS0_4NodeERA9_KcEEES9_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20PostfixQualifiedTypeEJRPNS2_4NodeERA9_KcEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        11106
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20PostfixQualifiedTypeEJRPNS0_4NodeERA11_KcEEES9_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20PostfixQualifiedTypeEJRPNS2_4NodeERA11_KcEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        11038
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $Index = 0,
      $SpecialSub$0 = 0,
      $SpecialSub$1 = 0,
      $Subs = 0,
      $Subs43 = 0,
      $Subs54 = 0,
      $WithTags = 0,
      $call = 0,
      $call12 = 0,
      $call17 = 0,
      $call2 = 0;
    var $call22 = 0,
      $call27 = 0,
      $call3 = 0,
      $call32 = 0,
      $call36 = 0,
      $call37 = 0,
      $call41 = 0,
      $call44 = 0,
      $call48 = 0,
      $call50 = 0,
      $call53 = 0,
      $call55 = 0,
      $call60 = 0,
      $call7 = 0,
      $cmp = 0,
      $cmp56 = 0,
      $conv = 0,
      $inc = 0,
      $incdec$ptr = 0,
      $incdec$ptr10 = 0;
    var $incdec$ptr15 = 0,
      $incdec$ptr20 = 0,
      $incdec$ptr25 = 0,
      $incdec$ptr30 = 0,
      $ref$tmp = 0,
      $ref$tmp11 = 0,
      $ref$tmp16 = 0,
      $ref$tmp21 = 0,
      $ref$tmp26 = 0,
      $ref$tmp31 = 0,
      $retval$1 = 0,
      $retval$2 = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $ref$tmp = (sp + 28) | 0;
    $ref$tmp11 = (sp + 24) | 0;
    $ref$tmp16 = (sp + 20) | 0;
    $ref$tmp21 = (sp + 16) | 0;
    $ref$tmp26 = (sp + 12) | 0;
    $ref$tmp31 = (sp + 8) | 0;
    $WithTags = (sp + 4) | 0;
    $Index = sp;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
        $this,
        83
      ) | 0;
    L1: do {
      if ($call) {
        $call2 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
            $this,
            0
          ) | 0;
        $conv = ($call2 << 24) >> 24;
        $call3 = _islower($conv) | 0;
        $tobool = ($call3 | 0) == 0;
        if ($tobool) {
          $call41 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
              $this,
              95
            ) | 0;
          if ($call41) {
            $Subs43 = ($this + 148) | 0;
            $call44 =
              __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5emptyEv(
                $Subs43
              ) | 0;
            if ($call44) {
              $retval$2 = 0;
              break;
            }
            $call48 =
              __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEixEm(
                $Subs43,
                0
              ) | 0;
            $6 = HEAP32[$call48 >> 2] | 0;
            $retval$2 = $6;
            break;
          }
          HEAP32[$Index >> 2] = 0;
          $call50 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10parseSeqIdEPm(
              $this,
              $Index
            ) | 0;
          if ($call50) {
            $retval$1 = 0;
          } else {
            $7 = HEAP32[$Index >> 2] | 0;
            $inc = ($7 + 1) | 0;
            HEAP32[$Index >> 2] = $inc;
            $call53 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                $this,
                95
              ) | 0;
            if ($call53) {
              $Subs54 = ($this + 148) | 0;
              $call55 =
                __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv(
                  $Subs54
                ) | 0;
              $cmp56 = $inc >>> 0 < $call55 >>> 0;
              if ($cmp56) {
                $call60 =
                  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEixEm(
                    $Subs54,
                    $inc
                  ) | 0;
                $8 = HEAP32[$call60 >> 2] | 0;
                $retval$1 = $8;
              } else {
                $retval$1 = 0;
              }
            } else {
              $retval$1 = 0;
            }
          }
          $retval$2 = $retval$1;
          break;
        }
        switch ($conv | 0) {
          case 97: {
            $0 = HEAP32[$this >> 2] | 0;
            $incdec$ptr = ($0 + 1) | 0;
            HEAP32[$this >> 2] = $incdec$ptr;
            HEAP32[$ref$tmp >> 2] = 0;
            $call7 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_(
                $this,
                $ref$tmp
              ) | 0;
            $SpecialSub$0 = $call7;
            break;
          }
          case 98: {
            $1 = HEAP32[$this >> 2] | 0;
            $incdec$ptr10 = ($1 + 1) | 0;
            HEAP32[$this >> 2] = $incdec$ptr10;
            HEAP32[$ref$tmp11 >> 2] = 1;
            $call12 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_(
                $this,
                $ref$tmp11
              ) | 0;
            $SpecialSub$0 = $call12;
            break;
          }
          case 115: {
            $2 = HEAP32[$this >> 2] | 0;
            $incdec$ptr15 = ($2 + 1) | 0;
            HEAP32[$this >> 2] = $incdec$ptr15;
            HEAP32[$ref$tmp16 >> 2] = 2;
            $call17 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_(
                $this,
                $ref$tmp16
              ) | 0;
            $SpecialSub$0 = $call17;
            break;
          }
          case 105: {
            $3 = HEAP32[$this >> 2] | 0;
            $incdec$ptr20 = ($3 + 1) | 0;
            HEAP32[$this >> 2] = $incdec$ptr20;
            HEAP32[$ref$tmp21 >> 2] = 3;
            $call22 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_(
                $this,
                $ref$tmp21
              ) | 0;
            $SpecialSub$0 = $call22;
            break;
          }
          case 111: {
            $4 = HEAP32[$this >> 2] | 0;
            $incdec$ptr25 = ($4 + 1) | 0;
            HEAP32[$this >> 2] = $incdec$ptr25;
            HEAP32[$ref$tmp26 >> 2] = 4;
            $call27 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_(
                $this,
                $ref$tmp26
              ) | 0;
            $SpecialSub$0 = $call27;
            break;
          }
          case 100: {
            $5 = HEAP32[$this >> 2] | 0;
            $incdec$ptr30 = ($5 + 1) | 0;
            HEAP32[$this >> 2] = $incdec$ptr30;
            HEAP32[$ref$tmp31 >> 2] = 5;
            $call32 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_(
                $this,
                $ref$tmp31
              ) | 0;
            $SpecialSub$0 = $call32;
            break;
          }
          default: {
            $retval$2 = 0;
            break L1;
          }
        }
        $call36 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
            $this
          ) | 0;
        $call37 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseAbiTagsEPNS0_4NodeE(
            $call36,
            $SpecialSub$0
          ) | 0;
        HEAP32[$WithTags >> 2] = $call37;
        $cmp = ($call37 | 0) == ($SpecialSub$0 | 0);
        if ($cmp) {
          $SpecialSub$1 = $SpecialSub$0;
        } else {
          $Subs = ($this + 148) | 0;
          __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
            $Subs,
            $WithTags
          );
          $SpecialSub$1 = $call37;
        }
        $retval$2 = $SpecialSub$1;
      } else {
        $retval$2 = 0;
      }
    } while (0);
    STACKTOP = sp;
    return $retval$2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
    $this,
    $Elem
  ) {
    $this = $this | 0;
    $Elem = $Elem | 0;
    var $$pre = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $Cap = 0,
      $Last = 0,
      $call = 0,
      $cmp = 0,
      $incdec$ptr = 0,
      $mul = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Last = ($this + 4) | 0;
    $0 = HEAP32[$Last >> 2] | 0;
    $Cap = ($this + 8) | 0;
    $1 = HEAP32[$Cap >> 2] | 0;
    $cmp = ($0 | 0) == ($1 | 0);
    if ($cmp) {
      $call =
        __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv(
          $this
        ) | 0;
      $mul = $call << 1;
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE7reserveEm(
        $this,
        $mul
      );
      $$pre = HEAP32[$Last >> 2] | 0;
      $3 = $$pre;
    } else {
      $3 = $0;
    }
    $2 = HEAP32[$Elem >> 2] | 0;
    $incdec$ptr = ($3 + 4) | 0;
    HEAP32[$Last >> 2] = $incdec$ptr;
    HEAP32[$3 >> 2] = $2;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $Last = 0,
      $sub$ptr$div = 0,
      $sub$ptr$sub = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Last = ($this + 4) | 0;
    $0 = HEAP32[$Last >> 2] | 0;
    $1 = HEAP32[$this >> 2] | 0;
    $sub$ptr$sub = ($0 - $1) | 0;
    $sub$ptr$div = $sub$ptr$sub >> 2;
    return $sub$ptr$div | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE7reserveEm(
    $this,
    $NewCap
  ) {
    $this = $this | 0;
    $NewCap = $NewCap | 0;
    var $$in = 0,
      $$pre7 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $Cap = 0,
      $Last = 0,
      $Last17$pre$phiZ2D = 0,
      $add$ptr = 0,
      $add$ptr19 = 0,
      $call = 0,
      $call2 = 0,
      $call3 = 0,
      $call9 = 0,
      $cmp = 0,
      $cmp$i$i = 0,
      $cmp12 = 0,
      $mul = 0,
      $mul8 = 0,
      $sub$ptr$rhs$cast$i$i = 0;
    var $sub$ptr$sub$i$i = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv(
        $this
      ) | 0;
    $call2 =
      __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8isInlineEv(
        $this
      ) | 0;
    do {
      if ($call2) {
        $mul = $NewCap << 2;
        $call3 = _malloc($mul) | 0;
        $cmp = ($call3 | 0) == (0 | 0);
        if ($cmp) {
          __ZSt9terminatev();
          // unreachable;
        }
        $0 = HEAP32[$this >> 2] | 0;
        $Last = ($this + 4) | 0;
        $1 = HEAP32[$Last >> 2] | 0;
        $sub$ptr$rhs$cast$i$i = $0;
        $sub$ptr$sub$i$i = ($1 - $sub$ptr$rhs$cast$i$i) | 0;
        $cmp$i$i = ($sub$ptr$sub$i$i | 0) == 0;
        if (!$cmp$i$i) {
          _memmove($call3 | 0, $0 | 0, $sub$ptr$sub$i$i | 0) | 0;
        }
        HEAP32[$this >> 2] = $call3;
        $$in = $call3;
        $Last17$pre$phiZ2D = $Last;
      } else {
        $2 = HEAP32[$this >> 2] | 0;
        $mul8 = $NewCap << 2;
        $call9 = _realloc($2, $mul8) | 0;
        HEAP32[$this >> 2] = $call9;
        $cmp12 = ($call9 | 0) == (0 | 0);
        if ($cmp12) {
          __ZSt9terminatev();
          // unreachable;
        } else {
          $$pre7 = ($this + 4) | 0;
          $$in = $call9;
          $Last17$pre$phiZ2D = $$pre7;
          break;
        }
      }
    } while (0);
    $add$ptr = ($$in + ($call << 2)) | 0;
    HEAP32[$Last17$pre$phiZ2D >> 2] = $add$ptr;
    $add$ptr19 = ($$in + ($NewCap << 2)) | 0;
    $Cap = ($this + 8) | 0;
    HEAP32[$Cap >> 2] = $add$ptr19;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19SpecialSubstitutionEJNS2_14SpecialSubKindEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseAbiTagsEPNS0_4NodeE(
    $this,
    $N
  ) {
    $this = $this | 0;
    $N = $N | 0;
    var $0 = 0,
      $N$addr = 0,
      $SN = 0,
      $call = 0,
      $call2 = 0,
      $call3 = 0,
      $retval$2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $N$addr = (sp + 8) | 0;
    $SN = sp;
    HEAP32[$N$addr >> 2] = $N;
    $0 = $N;
    while (1) {
      $call =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
          $this,
          66
        ) | 0;
      if (!$call) {
        $retval$2 = $0;
        break;
      }
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv(
        $SN,
        $this
      );
      $call2 = __ZNK12_GLOBAL__N_110StringView5emptyEv($SN) | 0;
      if ($call2) {
        label = 5;
        break;
      }
      $call3 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10AbiTagAttrEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_(
          $this,
          $N$addr,
          $SN
        ) | 0;
      HEAP32[$N$addr >> 2] = $call3;
      $0 = $call3;
    }
    if ((label | 0) == 5) {
      $retval$2 = 0;
    }
    STACKTOP = sp;
    return $retval$2 | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5emptyEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $Last = 0,
      $cmp = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$this >> 2] | 0;
    $Last = ($this + 4) | 0;
    $1 = HEAP32[$Last >> 2] | 0;
    $cmp = ($0 | 0) == ($1 | 0);
    return $cmp | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEixEm(
    $this,
    $Index
  ) {
    $this = $this | 0;
    $Index = $Index | 0;
    var $add$ptr = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5beginEv(
        $this
      ) | 0;
    $add$ptr = ($call + ($Index << 2)) | 0;
    return $add$ptr | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10parseSeqIdEPm(
    $this,
    $Out
  ) {
    $this = $this | 0;
    $Out = $Out | 0;
    var $$sink = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $Id$0 = 0,
      $add35 = 0,
      $add36 = 0,
      $call = 0,
      $call$off = 0,
      $call13 = 0,
      $call13$off = 0,
      $cmp = 0,
      $cmp15 = 0,
      $cmp19 = 0,
      $cmp4 = 0,
      $conv33 = 0,
      $incdec$ptr = 0,
      $mul31 = 0,
      $or$cond = 0,
      $retval$0 = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
        $this,
        0
      ) | 0;
    $cmp = ($call << 24) >> 24 > 47;
    if ($cmp) {
      $cmp4 = ($call << 24) >> 24 < 58;
      $call$off = (($call + -65) << 24) >> 24;
      $0 = ($call$off & 255) < 26;
      $or$cond = $cmp4 | $0;
      if ($or$cond) {
        $Id$0 = 0;
        while (1) {
          $call13 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              0
            ) | 0;
          $cmp15 = ($call13 << 24) >> 24 > 47;
          if (!$cmp15) {
            break;
          }
          $cmp19 = ($call13 << 24) >> 24 < 58;
          if ($cmp19) {
            $$sink = -48;
          } else {
            $call13$off = (($call13 + -65) << 24) >> 24;
            $1 = ($call13$off & 255) < 26;
            if ($1) {
              $$sink = -55;
            } else {
              break;
            }
          }
          $mul31 = ($Id$0 * 36) | 0;
          $conv33 = ($call13 << 24) >> 24;
          $add35 = ($mul31 + $$sink) | 0;
          $add36 = ($add35 + $conv33) | 0;
          $2 = HEAP32[$this >> 2] | 0;
          $incdec$ptr = ($2 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr;
          $Id$0 = $add36;
        }
        HEAP32[$Out >> 2] = $Id$0;
        $retval$0 = 0;
      } else {
        $retval$0 = 1;
      }
    } else {
      $retval$0 = 1;
    }
    return $retval$0 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5beginEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$this >> 2] | 0;
    return $0 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10AbiTagAttrEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10AbiTagAttrEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10AbiTagAttrEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = $args1;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $agg$tmp;
    $8 = $7;
    HEAP32[$8 >> 2] = $3;
    $9 = ($7 + 4) | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $6;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle10AbiTagAttrC2EPNS0_4NodeENS_10StringViewE(
      $call,
      $0,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, $N) {
    $this = $this | 0;
    $N = $N | 0;
    var $$pre = 0,
      $$pre6 = 0,
      $$pre7 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $BlockList = 0,
      $Current = 0,
      $Current7$phi$trans$insert = 0,
      $Current7$pre$phiZ2D = 0,
      $add = 0,
      $add$ptr = 0,
      $add$ptr13 = 0,
      $add2 = 0,
      $add8$pre$phiZ2D = 0,
      $and = 0,
      $call = 0,
      $cmp = 0,
      $cmp3 = 0;
    var $retval$0 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $add = ($N + 15) | 0;
    $and = $add & -16;
    $BlockList = ($this + 4096) | 0;
    $0 = HEAP32[$BlockList >> 2] | 0;
    $Current = ($0 + 4) | 0;
    $1 = HEAP32[$Current >> 2] | 0;
    $add2 = ($1 + $and) | 0;
    $cmp = $add2 >>> 0 > 4087;
    do {
      if ($cmp) {
        $cmp3 = $and >>> 0 > 4088;
        if ($cmp3) {
          $call =
            __ZN12_GLOBAL__N_120BumpPointerAllocator15allocateMassiveEm(
              $this,
              $and
            ) | 0;
          $retval$0 = $call;
          break;
        } else {
          __ZN12_GLOBAL__N_120BumpPointerAllocator4growEv($this);
          $$pre = HEAP32[$BlockList >> 2] | 0;
          $Current7$phi$trans$insert = ($$pre + 4) | 0;
          $$pre6 = HEAP32[$Current7$phi$trans$insert >> 2] | 0;
          $$pre7 = ($$pre6 + $and) | 0;
          $2 = $$pre;
          $3 = $$pre6;
          $Current7$pre$phiZ2D = $Current7$phi$trans$insert;
          $add8$pre$phiZ2D = $$pre7;
          label = 5;
          break;
        }
      } else {
        $2 = $0;
        $3 = $1;
        $Current7$pre$phiZ2D = $Current;
        $add8$pre$phiZ2D = $add2;
        label = 5;
      }
    } while (0);
    if ((label | 0) == 5) {
      HEAP32[$Current7$pre$phiZ2D >> 2] = $add8$pre$phiZ2D;
      $add$ptr = ($2 + 8) | 0;
      $add$ptr13 = ($add$ptr + $3) | 0;
      $retval$0 = $add$ptr13;
    }
    return $retval$0 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle10AbiTagAttrC2EPNS0_4NodeENS_10StringViewE(
    $this,
    $Base_,
    $Tag_
  ) {
    $this = $this | 0;
    $Base_ = $Base_ | 0;
    $Tag_ = $Tag_ | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $ArrayCache = 0,
      $Base = 0,
      $FunctionCache = 0,
      $RHSComponentCache = 0,
      $Tag = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $RHSComponentCache = ($Base_ + 5) | 0;
    $0 = HEAP8[$RHSComponentCache >> 0] | 0;
    $ArrayCache = ($Base_ + 6) | 0;
    $1 = HEAP8[$ArrayCache >> 0] | 0;
    $FunctionCache = ($Base_ + 7) | 0;
    $2 = HEAP8[$FunctionCache >> 0] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      8,
      $0,
      $1,
      $2
    );
    HEAP32[$this >> 2] = 3240;
    $Base = ($this + 8) | 0;
    HEAP32[$Base >> 2] = $Base_;
    $Tag = ($this + 12) | 0;
    $3 = $Tag_;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = ($3 + 4) | 0;
    $7 = $6;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = $Tag;
    $10 = $9;
    HEAP32[$10 >> 2] = $5;
    $11 = ($9 + 4) | 0;
    $12 = $11;
    HEAP32[$12 >> 2] = $8;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
    $this,
    $K_,
    $RHSComponentCache_,
    $ArrayCache_,
    $FunctionCache_
  ) {
    $this = $this | 0;
    $K_ = $K_ | 0;
    $RHSComponentCache_ = $RHSComponentCache_ | 0;
    $ArrayCache_ = $ArrayCache_ | 0;
    $FunctionCache_ = $FunctionCache_ | 0;
    var $ArrayCache = 0,
      $FunctionCache = 0,
      $K = 0,
      $RHSComponentCache = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    HEAP32[$this >> 2] = 3284;
    $K = ($this + 4) | 0;
    HEAP8[$K >> 0] = $K_;
    $RHSComponentCache = ($this + 5) | 0;
    HEAP8[$RHSComponentCache >> 0] = $RHSComponentCache_;
    $ArrayCache = ($this + 6) | 0;
    HEAP8[$ArrayCache >> 0] = $ArrayCache_;
    $FunctionCache = ($this + 7) | 0;
    HEAP8[$FunctionCache >> 0] = $FunctionCache_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle4Node19hasRHSComponentSlowERNS_12OutputStreamE(
    $this,
    $0
  ) {
    $this = $this | 0;
    $0 = $0 | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle4Node12hasArraySlowERNS_12OutputStreamE(
    $this,
    $0
  ) {
    $this = $this | 0;
    $0 = $0 | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasFunctionSlowERNS_12OutputStreamE(
    $this,
    $0
  ) {
    $this = $this | 0;
    $0 = $0 | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle4Node13getSyntaxNodeERNS_12OutputStreamE(
    $this,
    $0
  ) {
    $this = $this | 0;
    $0 = $0 | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return $this | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle10AbiTagAttr9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Base = 0,
      $Tag = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp2 = 0,
      $agg$tmp4 = 0,
      $agg$tmp4$byval_copy = 0,
      $tmpcast$byval_copy = 0;
    var $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 48) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
    $agg$tmp4$byval_copy = (sp + 40) | 0;
    $tmpcast$byval_copy = (sp + 32) | 0;
    $agg$tmp$byval_copy = (sp + 24) | 0;
    $agg$tmp = (sp + 16) | 0;
    $agg$tmp2 = sp;
    $agg$tmp4 = (sp + 8) | 0;
    $Base = ($this + 8) | 0;
    $0 = HEAP32[$Base >> 2] | 0;
    $vtable = HEAP32[$0 >> 2] | 0;
    $vfn = ($vtable + 16) | 0;
    $1 = HEAP32[$vfn >> 2] | 0;
    FUNCTION_TABLE_vii[$1 & 511]($0, $S);
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 10747);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Tag = ($this + 12) | 0;
    $2 = $Tag;
    $3 = $2;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($2 + 4) | 0;
    $6 = $5;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $agg$tmp2;
    $9 = $8;
    HEAP32[$9 >> 2] = $4;
    $10 = ($8 + 4) | 0;
    $11 = $10;
    HEAP32[$11 >> 2] = $7;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $tmpcast$byval_copy
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 10753);
    HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2] | 0;
    HEAP32[($agg$tmp4$byval_copy + 4) >> 2] = HEAP32[($agg$tmp4 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp4$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle4Node10printRightERNS_12OutputStreamE(
    $this,
    $0
  ) {
    $this = $this | 0;
    $0 = $0 | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle4Node11getBaseNameEv(
    $agg$result,
    $this
  ) {
    $agg$result = $agg$result | 0;
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_110StringViewC2Ev($agg$result);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle4NodeD2Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle10AbiTagAttrD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_110StringViewC2Ev($this) {
    $this = $this | 0;
    var $Last = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    HEAP32[$this >> 2] = 0;
    $Last = ($this + 4) | 0;
    HEAP32[$Last >> 2] = 0;
    return;
  }
  function __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($this, $R) {
    $this = $this | 0;
    $R = $R | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $CurrentPosition = 0,
      $add = 0,
      $add$ptr = 0,
      $call = 0,
      $call2 = 0,
      $cmp = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZNK12_GLOBAL__N_110StringView4sizeEv($R) | 0;
    $cmp = ($call | 0) == 0;
    if (!$cmp) {
      __ZN12_GLOBAL__N_112OutputStream4growEm($this, $call);
      $0 = HEAP32[$this >> 2] | 0;
      $CurrentPosition = ($this + 4) | 0;
      $1 = HEAP32[$CurrentPosition >> 2] | 0;
      $add$ptr = ($0 + $1) | 0;
      $call2 = __ZNK12_GLOBAL__N_110StringView5beginEv($R) | 0;
      _memmove($add$ptr | 0, $call2 | 0, $call | 0) | 0;
      $2 = HEAP32[$CurrentPosition >> 2] | 0;
      $add = ($2 + $call) | 0;
      HEAP32[$CurrentPosition >> 2] = $add;
    }
    return;
  }
  function __ZNK12_GLOBAL__N_110StringView4sizeEv($this) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $Last = 0,
      $sub$ptr$sub = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Last = ($this + 4) | 0;
    $0 = HEAP32[$Last >> 2] | 0;
    $1 = HEAP32[$this >> 2] | 0;
    $sub$ptr$sub = ($0 - $1) | 0;
    return $sub$ptr$sub | 0;
  }
  function __ZNK12_GLOBAL__N_110StringView5beginEv($this) {
    $this = $this | 0;
    var $0 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$this >> 2] | 0;
    return $0 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle4NodeD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    _llvm_trap();
    // unreachable;
  }
  function __ZN12_GLOBAL__N_120BumpPointerAllocator15allocateMassiveEm(
    $this,
    $NBytes
  ) {
    $this = $this | 0;
    $NBytes = $NBytes | 0;
    var $0 = 0,
      $1 = 0,
      $BlockList = 0,
      $Current = 0,
      $add = 0,
      $add$ptr = 0,
      $call = 0,
      $cmp = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $add = ($NBytes + 8) | 0;
    $call = _malloc($add) | 0;
    $cmp = ($call | 0) == (0 | 0);
    if ($cmp) {
      __ZSt9terminatev();
      // unreachable;
    } else {
      $BlockList = ($this + 4096) | 0;
      $0 = HEAP32[$BlockList >> 2] | 0;
      $1 = HEAP32[$0 >> 2] | 0;
      HEAP32[$call >> 2] = $1;
      $Current = ($call + 4) | 0;
      HEAP32[$Current >> 2] = 0;
      HEAP32[$0 >> 2] = $call;
      $add$ptr = ($call + 8) | 0;
      return $add$ptr | 0;
    }
    return 0 | 0;
  }
  function __ZN12_GLOBAL__N_120BumpPointerAllocator4growEv($this) {
    $this = $this | 0;
    var $0 = 0,
      $BlockList = 0,
      $Current = 0,
      $call = 0,
      $cmp = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = _malloc(4096) | 0;
    $cmp = ($call | 0) == (0 | 0);
    if ($cmp) {
      __ZSt9terminatev();
      // unreachable;
    } else {
      $BlockList = ($this + 4096) | 0;
      $0 = HEAP32[$BlockList >> 2] | 0;
      HEAP32[$call >> 2] = $0;
      $Current = ($call + 4) | 0;
      HEAP32[$Current >> 2] = 0;
      HEAP32[$BlockList >> 2] = $call;
      return;
    }
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19SpecialSubstitutionEJNS2_14SpecialSubKindEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle19SpecialSubstitutionC2ENS0_14SpecialSubKindE(
      $call,
      $0
    );
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle19SpecialSubstitutionC2ENS0_14SpecialSubKindE(
    $this,
    $SSK_
  ) {
    $this = $this | 0;
    $SSK_ = $SSK_ | 0;
    var $SSK = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      36,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 3328;
    $SSK = ($this + 8) | 0;
    HEAP32[$SSK >> 2] = $SSK_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle19SpecialSubstitution9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $SSK = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp12 = 0,
      $agg$tmp12$byval_copy = 0,
      $agg$tmp15 = 0,
      $agg$tmp15$byval_copy = 0,
      $agg$tmp3 = 0,
      $agg$tmp3$byval_copy = 0,
      $agg$tmp6 = 0,
      $agg$tmp6$byval_copy = 0,
      $agg$tmp9 = 0,
      $agg$tmp9$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 96) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96 | 0);
    $agg$tmp15$byval_copy = (sp + 88) | 0;
    $agg$tmp12$byval_copy = (sp + 80) | 0;
    $agg$tmp9$byval_copy = (sp + 72) | 0;
    $agg$tmp6$byval_copy = (sp + 64) | 0;
    $agg$tmp3$byval_copy = (sp + 56) | 0;
    $agg$tmp$byval_copy = (sp + 48) | 0;
    $agg$tmp = (sp + 40) | 0;
    $agg$tmp3 = (sp + 32) | 0;
    $agg$tmp6 = (sp + 24) | 0;
    $agg$tmp9 = (sp + 16) | 0;
    $agg$tmp12 = (sp + 8) | 0;
    $agg$tmp15 = sp;
    $SSK = ($this + 8) | 0;
    $0 = HEAP32[$SSK >> 2] | 0;
    switch ($0 | 0) {
      case 0: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 10897);
        HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
        HEAP32[($agg$tmp$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $S,
          $agg$tmp$byval_copy
        );
        break;
      }
      case 1: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3, 10912);
        HEAP32[$agg$tmp3$byval_copy >> 2] = HEAP32[$agg$tmp3 >> 2] | 0;
        HEAP32[($agg$tmp3$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp3 + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $S,
          $agg$tmp3$byval_copy
        );
        break;
      }
      case 2: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 10930);
        HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2] | 0;
        HEAP32[($agg$tmp6$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp6 + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $S,
          $agg$tmp6$byval_copy
        );
        break;
      }
      case 3: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp9, 10942);
        HEAP32[$agg$tmp9$byval_copy >> 2] = HEAP32[$agg$tmp9 >> 2] | 0;
        HEAP32[($agg$tmp9$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp9 + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $S,
          $agg$tmp9$byval_copy
        );
        break;
      }
      case 4: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12, 10955);
        HEAP32[$agg$tmp12$byval_copy >> 2] = HEAP32[$agg$tmp12 >> 2] | 0;
        HEAP32[($agg$tmp12$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp12 + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $S,
          $agg$tmp12$byval_copy
        );
        break;
      }
      case 5: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp15, 10968);
        HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp15 >> 2] | 0;
        HEAP32[($agg$tmp15$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp15 + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $S,
          $agg$tmp15$byval_copy
        );
        break;
      }
      default: {
      }
    }
    STACKTOP = sp;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle19SpecialSubstitution11getBaseNameEv(
    $agg$result,
    $this
  ) {
    $agg$result = $agg$result | 0;
    $this = $this | 0;
    var $0 = 0,
      $SSK = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $SSK = ($this + 8) | 0;
    $0 = HEAP32[$SSK >> 2] | 0;
    switch ($0 | 0) {
      case 0: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 10842);
        break;
      }
      case 1: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 10852);
        break;
      }
      case 2: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 10865);
        break;
      }
      case 3: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 10872);
        break;
      }
      case 4: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 10880);
        break;
      }
      case 5: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 10888);
        break;
      }
      default: {
        // unreachable;
      }
    }
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle19SpecialSubstitutionD0Ev(
    $this
  ) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20PostfixQualifiedTypeEJRPNS2_4NodeERA11_KcEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args1);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeC2EPNS0_4NodeENS_10StringViewE(
      $call,
      $0,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeC2EPNS0_4NodeENS_10StringViewE(
    $this,
    $Ty_,
    $Postfix_
  ) {
    $this = $this | 0;
    $Ty_ = $Ty_ | 0;
    $Postfix_ = $Postfix_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Postfix = 0,
      $Ty = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      5,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 3372;
    $Ty = ($this + 8) | 0;
    HEAP32[$Ty >> 2] = $Ty_;
    $Postfix = ($this + 12) | 0;
    $0 = $Postfix_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Postfix;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle20PostfixQualifiedType9printLeftERNS_12OutputStreamE(
    $this,
    $s
  ) {
    $this = $this | 0;
    $s = $s | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Postfix = 0,
      $Ty = 0,
      $agg$tmp = 0,
      $tmpcast$byval_copy = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $Ty = ($this + 8) | 0;
    $0 = HEAP32[$Ty >> 2] | 0;
    $vtable = HEAP32[$0 >> 2] | 0;
    $vfn = ($vtable + 16) | 0;
    $1 = HEAP32[$vfn >> 2] | 0;
    FUNCTION_TABLE_vii[$1 & 511]($0, $s);
    $Postfix = ($this + 12) | 0;
    $2 = $Postfix;
    $3 = $2;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($2 + 4) | 0;
    $6 = $5;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $agg$tmp;
    $9 = $8;
    HEAP32[$9 >> 2] = $4;
    $10 = ($8 + 4) | 0;
    $11 = $10;
    HEAP32[$11 >> 2] = $7;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $s,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeD0Ev(
    $this
  ) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20PostfixQualifiedTypeEJRPNS2_4NodeERA9_KcEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args1);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeC2EPNS0_4NodeENS_10StringViewE(
      $call,
      $0,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ReferenceTypeEJRPNS2_4NodeENS2_13ReferenceKindEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = HEAP32[$args1 >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle13ReferenceTypeC2EPKNS0_4NodeENS0_13ReferenceKindE(
      $call,
      $0,
      $1
    );
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle13ReferenceTypeC2EPKNS0_4NodeENS0_13ReferenceKindE(
    $this,
    $Pointee_,
    $RK_
  ) {
    $this = $this | 0;
    $Pointee_ = $Pointee_ | 0;
    $RK_ = $RK_ | 0;
    var $0 = 0,
      $Pointee = 0,
      $Printing = 0,
      $RHSComponentCache = 0,
      $RK = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $RHSComponentCache = ($Pointee_ + 5) | 0;
    $0 = HEAP8[$RHSComponentCache >> 0] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      12,
      $0,
      1,
      1
    );
    HEAP32[$this >> 2] = 3416;
    $Pointee = ($this + 8) | 0;
    HEAP32[$Pointee >> 2] = $Pointee_;
    $RK = ($this + 12) | 0;
    HEAP32[$RK >> 2] = $RK_;
    $Printing = ($this + 16) | 0;
    HEAP8[$Printing >> 0] = 0;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType19hasRHSComponentSlowERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $Pointee = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Pointee = ($this + 8) | 0;
    $0 = HEAP32[$Pointee >> 2] | 0;
    $call =
      __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE(
        $0,
        $S
      ) | 0;
    return $call | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType9printLeftERNS_12OutputStreamE(
    $this,
    $s
  ) {
    $this = $this | 0;
    $s = $s | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $Collapsed = 0,
      $Printing = 0,
      $SavePrinting = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp18 = 0,
      $agg$tmp18$byval_copy = 0,
      $agg$tmp23 = 0,
      $agg$tmp23$byval_copy = 0,
      $call = 0,
      $call13 = 0,
      $call16 = 0,
      $cmp = 0,
      $cond = 0,
      $second = 0,
      $tobool = 0;
    var $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 64) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
    $agg$tmp23$byval_copy = (sp + 56) | 0;
    $agg$tmp18$byval_copy = (sp + 48) | 0;
    $agg$tmp$byval_copy = (sp + 40) | 0;
    $SavePrinting = (sp + 32) | 0;
    $Collapsed = (sp + 24) | 0;
    $agg$tmp = (sp + 16) | 0;
    $agg$tmp18 = (sp + 8) | 0;
    $agg$tmp23 = sp;
    $Printing = ($this + 16) | 0;
    $0 = HEAP8[$Printing >> 0] | 0;
    $tobool = ($0 << 24) >> 24 == 0;
    if ($tobool) {
      __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting, $Printing, 1);
      __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType8collapseERNS_12OutputStreamE(
        $Collapsed,
        $this,
        $s
      );
      $second = ($Collapsed + 4) | 0;
      $1 = HEAP32[$second >> 2] | 0;
      $vtable = HEAP32[$1 >> 2] | 0;
      $vfn = ($vtable + 16) | 0;
      $2 = HEAP32[$vfn >> 2] | 0;
      FUNCTION_TABLE_vii[$2 & 511]($1, $s);
      $call =
        __ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(
          $1,
          $s
        ) | 0;
      if ($call) {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11117);
        HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
        HEAP32[($agg$tmp$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $s,
          $agg$tmp$byval_copy
        );
      }
      $call13 =
        __ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(
          $1,
          $s
        ) | 0;
      if ($call13) {
        label = 6;
      } else {
        $call16 =
          __ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE(
            $1,
            $s
          ) | 0;
        if ($call16) {
          label = 6;
        }
      }
      if ((label | 0) == 6) {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp18, 11119);
        HEAP32[$agg$tmp18$byval_copy >> 2] = HEAP32[$agg$tmp18 >> 2] | 0;
        HEAP32[($agg$tmp18$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp18 + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $s,
          $agg$tmp18$byval_copy
        );
      }
      $3 = HEAP32[$Collapsed >> 2] | 0;
      $cmp = ($3 | 0) == 0;
      $cond = $cmp ? 11121 : 11123;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp23, $cond);
      HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp23 >> 2] | 0;
      HEAP32[($agg$tmp23$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp23 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $s,
        $agg$tmp23$byval_copy
      );
      __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
    }
    STACKTOP = sp;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType10printRightERNS_12OutputStreamE(
    $this,
    $s
  ) {
    $this = $this | 0;
    $s = $s | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $Collapsed = 0,
      $Printing = 0,
      $SavePrinting = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      $call6 = 0,
      $second = 0,
      $tobool = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $agg$tmp$byval_copy = (sp + 24) | 0;
    $SavePrinting = (sp + 16) | 0;
    $Collapsed = (sp + 8) | 0;
    $agg$tmp = sp;
    $Printing = ($this + 16) | 0;
    $0 = HEAP8[$Printing >> 0] | 0;
    $tobool = ($0 << 24) >> 24 == 0;
    if ($tobool) {
      __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting, $Printing, 1);
      __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType8collapseERNS_12OutputStreamE(
        $Collapsed,
        $this,
        $s
      );
      $second = ($Collapsed + 4) | 0;
      $1 = HEAP32[$second >> 2] | 0;
      $call =
        __ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(
          $1,
          $s
        ) | 0;
      if ($call) {
        label = 4;
      } else {
        $call6 =
          __ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE(
            $1,
            $s
          ) | 0;
        if ($call6) {
          label = 4;
        }
      }
      if ((label | 0) == 4) {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11115);
        HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
        HEAP32[($agg$tmp$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $s,
          $agg$tmp$byval_copy
        );
      }
      $vtable = HEAP32[$1 >> 2] | 0;
      $vfn = ($vtable + 20) | 0;
      $2 = HEAP32[$vfn >> 2] | 0;
      FUNCTION_TABLE_vii[$2 & 511]($1, $s);
      __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
    }
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle13ReferenceTypeD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb(
    $this,
    $Restore_,
    $NewVal
  ) {
    $this = $this | 0;
    $Restore_ = $Restore_ | 0;
    $NewVal = $NewVal | 0;
    var $0 = 0,
      $OriginalValue = 0,
      $ShouldRestore = 0,
      $frombool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $frombool = $NewVal & 1;
    HEAP32[$this >> 2] = $Restore_;
    $OriginalValue = ($this + 4) | 0;
    $0 = HEAP8[$Restore_ >> 0] | 0;
    HEAP8[$OriginalValue >> 0] = $0;
    $ShouldRestore = ($this + 5) | 0;
    HEAP8[$ShouldRestore >> 0] = 1;
    HEAP8[$Restore_ >> 0] = $frombool;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType8collapseERNS_12OutputStreamE(
    $agg$result,
    $this,
    $S
  ) {
    $agg$result = $agg$result | 0;
    $this = $this | 0;
    $S = $S | 0;
    var $$in = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $Pointee = 0,
      $Pointee3 = 0,
      $RK = 0,
      $RK5 = 0,
      $call = 0,
      $call2 = 0,
      $cmp = 0,
      $cmp$i$i$i = 0,
      $second$i$i = 0,
      $vfn = 0;
    var $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $RK = ($this + 12) | 0;
    $Pointee = ($this + 8) | 0;
    $0 = HEAP32[$RK >> 2] | 0;
    HEAP32[$agg$result >> 2] = $0;
    $second$i$i = ($agg$result + 4) | 0;
    $1 = HEAP32[$Pointee >> 2] | 0;
    HEAP32[$second$i$i >> 2] = $1;
    $$in = $1;
    $7 = $0;
    while (1) {
      $2 = $$in;
      $3 = $$in;
      $vtable = HEAP32[$3 >> 2] | 0;
      $vfn = ($vtable + 12) | 0;
      $4 = HEAP32[$vfn >> 2] | 0;
      $call = FUNCTION_TABLE_iii[$4 & 511]($2, $S) | 0;
      $call2 = __ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($call) | 0;
      $cmp = ($call2 << 24) >> 24 == 12;
      if (!$cmp) {
        break;
      }
      $Pointee3 = ($call + 8) | 0;
      $5 = HEAP32[$Pointee3 >> 2] | 0;
      HEAP32[$second$i$i >> 2] = $5;
      $RK5 = ($call + 12) | 0;
      $6 = HEAP32[$RK5 >> 2] | 0;
      $cmp$i$i$i = ($6 | 0) < ($7 | 0);
      $8 = $cmp$i$i$i ? $6 : $7;
      HEAP32[$agg$result >> 2] = $8;
      $$in = $5;
      $7 = $8;
    }
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $ArrayCache = 0,
      $call = 0,
      $cmp = 0,
      $cmp3 = 0,
      $retval$0 = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ArrayCache = ($this + 6) | 0;
    $0 = HEAP8[$ArrayCache >> 0] | 0;
    $cmp = ($0 << 24) >> 24 == 2;
    if ($cmp) {
      $vtable = HEAP32[$this >> 2] | 0;
      $vfn = ($vtable + 4) | 0;
      $1 = HEAP32[$vfn >> 2] | 0;
      $call = FUNCTION_TABLE_iii[$1 & 511]($this, $S) | 0;
      $retval$0 = $call;
    } else {
      $cmp3 = ($0 << 24) >> 24 == 0;
      $retval$0 = $cmp3;
    }
    return $retval$0 | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $FunctionCache = 0,
      $call = 0,
      $cmp = 0,
      $cmp3 = 0,
      $retval$0 = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $FunctionCache = ($this + 7) | 0;
    $0 = HEAP8[$FunctionCache >> 0] | 0;
    $cmp = ($0 << 24) >> 24 == 2;
    if ($cmp) {
      $vtable = HEAP32[$this >> 2] | 0;
      $vfn = ($vtable + 8) | 0;
      $1 = HEAP32[$vfn >> 2] | 0;
      $call = FUNCTION_TABLE_iii[$1 & 511]($this, $S) | 0;
      $retval$0 = $call;
    } else {
      $cmp3 = ($0 << 24) >> 24 == 0;
      $retval$0 = $cmp3;
    }
    return $retval$0 | 0;
  }
  function __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($this) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $OriginalValue = 0,
      $ShouldRestore = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ShouldRestore = ($this + 5) | 0;
    $0 = HEAP8[$ShouldRestore >> 0] | 0;
    $tobool = ($0 << 24) >> 24 == 0;
    if (!$tobool) {
      $OriginalValue = ($this + 4) | 0;
      $1 = HEAP8[$OriginalValue >> 0] | 0;
      $2 = HEAP32[$this >> 2] | 0;
      HEAP8[$2 >> 0] = $1;
    }
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($this) {
    $this = $this | 0;
    var $0 = 0,
      $K = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $K = ($this + 4) | 0;
    $0 = HEAP8[$K >> 0] | 0;
    return $0 | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $RHSComponentCache = 0,
      $call = 0,
      $cmp = 0,
      $cmp3 = 0,
      $retval$0 = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $RHSComponentCache = ($this + 5) | 0;
    $0 = HEAP8[$RHSComponentCache >> 0] | 0;
    $cmp = ($0 << 24) >> 24 == 2;
    if ($cmp) {
      $vtable = HEAP32[$this >> 2] | 0;
      $1 = HEAP32[$vtable >> 2] | 0;
      $call = FUNCTION_TABLE_iii[$1 & 511]($this, $S) | 0;
      $retval$0 = $call;
    } else {
      $cmp3 = ($0 << 24) >> 24 == 0;
      $retval$0 = $cmp3;
    }
    return $retval$0 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11PointerTypeEJRPNS2_4NodeEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle11PointerTypeC2EPKNS0_4NodeE($call, $0);
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle11PointerTypeC2EPKNS0_4NodeE(
    $this,
    $Pointee_
  ) {
    $this = $this | 0;
    $Pointee_ = $Pointee_ | 0;
    var $0 = 0,
      $Pointee = 0,
      $RHSComponentCache = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $RHSComponentCache = ($Pointee_ + 5) | 0;
    $0 = HEAP8[$RHSComponentCache >> 0] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      11,
      $0,
      1,
      1
    );
    HEAP32[$this >> 2] = 3460;
    $Pointee = ($this + 8) | 0;
    HEAP32[$Pointee >> 2] = $Pointee_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle11PointerType19hasRHSComponentSlowERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $Pointee = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Pointee = ($this + 8) | 0;
    $0 = HEAP32[$Pointee >> 2] | 0;
    $call =
      __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE(
        $0,
        $S
      ) | 0;
    return $call | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle11PointerType9printLeftERNS_12OutputStreamE(
    $this,
    $s
  ) {
    $this = $this | 0;
    $s = $s | 0;
    var $$pre = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Pointee = 0,
      $Protocol = 0;
    var $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp15 = 0,
      $agg$tmp15$byval_copy = 0,
      $agg$tmp18 = 0,
      $agg$tmp18$byval_copy = 0,
      $agg$tmp21 = 0,
      $agg$tmp21$byval_copy = 0,
      $agg$tmp23 = 0,
      $agg$tmp25 = 0,
      $agg$tmp25$byval_copy = 0,
      $call = 0,
      $call10 = 0,
      $call13 = 0,
      $call3 = 0,
      $call6 = 0,
      $cmp = 0,
      $tmpcast$byval_copy = 0,
      $vfn = 0,
      $vtable = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 96) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96 | 0);
    $agg$tmp25$byval_copy = (sp + 88) | 0;
    $tmpcast$byval_copy = (sp + 80) | 0;
    $agg$tmp21$byval_copy = (sp + 72) | 0;
    $agg$tmp18$byval_copy = (sp + 64) | 0;
    $agg$tmp15$byval_copy = (sp + 56) | 0;
    $agg$tmp$byval_copy = (sp + 48) | 0;
    $agg$tmp = (sp + 40) | 0;
    $agg$tmp15 = (sp + 32) | 0;
    $agg$tmp18 = (sp + 24) | 0;
    $agg$tmp21 = (sp + 16) | 0;
    $agg$tmp23 = sp;
    $agg$tmp25 = (sp + 8) | 0;
    $Pointee = ($this + 8) | 0;
    $0 = HEAP32[$Pointee >> 2] | 0;
    $call = __ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($0) | 0;
    $cmp = ($call << 24) >> 24 == 10;
    do {
      if ($cmp) {
        $call3 =
          __ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName12isObjCObjectEv(
            $0
          ) | 0;
        if ($call3) {
          $6 = HEAP32[$Pointee >> 2] | 0;
          __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp21, 11190);
          HEAP32[$agg$tmp21$byval_copy >> 2] = HEAP32[$agg$tmp21 >> 2] | 0;
          HEAP32[($agg$tmp21$byval_copy + 4) >> 2] =
            HEAP32[($agg$tmp21 + 4) >> 2] | 0;
          __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
            $s,
            $agg$tmp21$byval_copy
          );
          $Protocol = ($6 + 12) | 0;
          $7 = $Protocol;
          $8 = $7;
          $9 = HEAP32[$8 >> 2] | 0;
          $10 = ($7 + 4) | 0;
          $11 = $10;
          $12 = HEAP32[$11 >> 2] | 0;
          $13 = $agg$tmp23;
          $14 = $13;
          HEAP32[$14 >> 2] = $9;
          $15 = ($13 + 4) | 0;
          $16 = $15;
          HEAP32[$16 >> 2] = $12;
          HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp23 >> 2] | 0;
          HEAP32[($tmpcast$byval_copy + 4) >> 2] =
            HEAP32[($agg$tmp23 + 4) >> 2] | 0;
          __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
            $s,
            $tmpcast$byval_copy
          );
          __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp25, 11194);
          HEAP32[$agg$tmp25$byval_copy >> 2] = HEAP32[$agg$tmp25 >> 2] | 0;
          HEAP32[($agg$tmp25$byval_copy + 4) >> 2] =
            HEAP32[($agg$tmp25 + 4) >> 2] | 0;
          __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
            $s,
            $agg$tmp25$byval_copy
          );
          break;
        } else {
          $$pre = HEAP32[$Pointee >> 2] | 0;
          $1 = $$pre;
          label = 4;
          break;
        }
      } else {
        $1 = $0;
        label = 4;
      }
    } while (0);
    if ((label | 0) == 4) {
      $vtable = HEAP32[$1 >> 2] | 0;
      $vfn = ($vtable + 16) | 0;
      $2 = HEAP32[$vfn >> 2] | 0;
      FUNCTION_TABLE_vii[$2 & 511]($1, $s);
      $3 = HEAP32[$Pointee >> 2] | 0;
      $call6 =
        __ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(
          $3,
          $s
        ) | 0;
      if ($call6) {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11117);
        HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
        HEAP32[($agg$tmp$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $s,
          $agg$tmp$byval_copy
        );
      }
      $4 = HEAP32[$Pointee >> 2] | 0;
      $call10 =
        __ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(
          $4,
          $s
        ) | 0;
      if ($call10) {
        label = 8;
      } else {
        $5 = HEAP32[$Pointee >> 2] | 0;
        $call13 =
          __ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE(
            $5,
            $s
          ) | 0;
        if ($call13) {
          label = 8;
        }
      }
      if ((label | 0) == 8) {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp15, 11119);
        HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp15 >> 2] | 0;
        HEAP32[($agg$tmp15$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp15 + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $s,
          $agg$tmp15$byval_copy
        );
      }
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp18, 11188);
      HEAP32[$agg$tmp18$byval_copy >> 2] = HEAP32[$agg$tmp18 >> 2] | 0;
      HEAP32[($agg$tmp18$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp18 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $s,
        $agg$tmp18$byval_copy
      );
    }
    STACKTOP = sp;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle11PointerType10printRightERNS_12OutputStreamE(
    $this,
    $s
  ) {
    $this = $this | 0;
    $s = $s | 0;
    var $$pre = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $Pointee = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      $call3 = 0,
      $call5 = 0,
      $call8 = 0,
      $cmp = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $Pointee = ($this + 8) | 0;
    $0 = HEAP32[$Pointee >> 2] | 0;
    $call = __ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($0) | 0;
    $cmp = ($call << 24) >> 24 == 10;
    if ($cmp) {
      $call3 =
        __ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName12isObjCObjectEv(
          $0
        ) | 0;
      if (!$call3) {
        $$pre = HEAP32[$Pointee >> 2] | 0;
        $1 = $$pre;
        label = 4;
      }
    } else {
      $1 = $0;
      label = 4;
    }
    if ((label | 0) == 4) {
      $call5 =
        __ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(
          $1,
          $s
        ) | 0;
      if ($call5) {
        label = 6;
      } else {
        $2 = HEAP32[$Pointee >> 2] | 0;
        $call8 =
          __ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE(
            $2,
            $s
          ) | 0;
        if ($call8) {
          label = 6;
        }
      }
      if ((label | 0) == 6) {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11115);
        HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
        HEAP32[($agg$tmp$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $s,
          $agg$tmp$byval_copy
        );
      }
      $3 = HEAP32[$Pointee >> 2] | 0;
      $vtable = HEAP32[$3 >> 2] | 0;
      $vfn = ($vtable + 20) | 0;
      $4 = HEAP32[$vfn >> 2] | 0;
      FUNCTION_TABLE_vii[$4 & 511]($3, $s);
    }
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle11PointerTypeD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName12isObjCObjectEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $Ty = 0,
      $call = 0,
      $call5 = 0,
      $cmp = 0,
      $ref$tmp = 0,
      $ref$tmp3 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ref$tmp = (sp + 8) | 0;
    $ref$tmp3 = sp;
    $Ty = ($this + 8) | 0;
    $0 = HEAP32[$Ty >> 2] | 0;
    $call = __ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($0) | 0;
    $cmp = ($call << 24) >> 24 == 7;
    if ($cmp) {
      __ZNK12_GLOBAL__N_116itanium_demangle8NameType7getNameEv($ref$tmp, $0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp3, 11176);
      $call5 =
        __ZN12_GLOBAL__N_1eqERKNS_10StringViewES2_($ref$tmp, $ref$tmp3) | 0;
      $1 = $call5;
    } else {
      $1 = 0;
    }
    STACKTOP = sp;
    return $1 | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle8NameType7getNameEv(
    $agg$result,
    $this
  ) {
    $agg$result = $agg$result | 0;
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Name = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Name = ($this + 8) | 0;
    $0 = $Name;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$result;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZN12_GLOBAL__N_1eqERKNS_10StringViewES2_($LHS, $RHS) {
    $LHS = $LHS | 0;
    $RHS = $RHS | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $__first1$addr$0$i$i = 0,
      $__first2$addr$0$i$i = 0,
      $call = 0,
      $call1 = 0,
      $call2 = 0,
      $call3 = 0,
      $call4 = 0,
      $cmp = 0,
      $cmp$i$i = 0,
      $cmp$i$i$i = 0,
      $incdec$ptr$i$i = 0,
      $incdec$ptr1$i$i = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZNK12_GLOBAL__N_110StringView4sizeEv($LHS) | 0;
    $call1 = __ZNK12_GLOBAL__N_110StringView4sizeEv($RHS) | 0;
    $cmp = ($call | 0) == ($call1 | 0);
    L1: do {
      if ($cmp) {
        $call2 = __ZNK12_GLOBAL__N_110StringView5beginEv($LHS) | 0;
        $call3 = __ZNK12_GLOBAL__N_110StringView3endEv($LHS) | 0;
        $call4 = __ZNK12_GLOBAL__N_110StringView5beginEv($RHS) | 0;
        $__first1$addr$0$i$i = $call2;
        $__first2$addr$0$i$i = $call4;
        while (1) {
          $cmp$i$i = ($__first1$addr$0$i$i | 0) == ($call3 | 0);
          if ($cmp$i$i) {
            $2 = 1;
            break L1;
          }
          $0 = HEAP8[$__first1$addr$0$i$i >> 0] | 0;
          $1 = HEAP8[$__first2$addr$0$i$i >> 0] | 0;
          $cmp$i$i$i = ($0 << 24) >> 24 == ($1 << 24) >> 24;
          if (!$cmp$i$i$i) {
            $2 = 0;
            break L1;
          }
          $incdec$ptr$i$i = ($__first1$addr$0$i$i + 1) | 0;
          $incdec$ptr1$i$i = ($__first2$addr$0$i$i + 1) | 0;
          $__first1$addr$0$i$i = $incdec$ptr$i$i;
          $__first2$addr$0$i$i = $incdec$ptr1$i$i;
        }
      } else {
        $2 = 0;
      }
    } while (0);
    return $2 | 0;
  }
  function __ZNK12_GLOBAL__N_110StringView3endEv($this) {
    $this = $this | 0;
    var $0 = 0,
      $Last = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Last = ($this + 4) | 0;
    $0 = HEAP32[$Last >> 2] | 0;
    return $0 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20NameWithTemplateArgsEJRPNS2_4NodeES6_EEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = HEAP32[$args1 >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgsC2EPNS0_4NodeES3_(
      $call,
      $0,
      $1
    );
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgsC2EPNS0_4NodeES3_(
    $this,
    $Name_,
    $TemplateArgs_
  ) {
    $this = $this | 0;
    $Name_ = $Name_ | 0;
    $TemplateArgs_ = $TemplateArgs_ | 0;
    var $Name = 0,
      $TemplateArgs = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      32,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 3504;
    $Name = ($this + 8) | 0;
    HEAP32[$Name >> 2] = $Name_;
    $TemplateArgs = ($this + 12) | 0;
    HEAP32[$TemplateArgs >> 2] = $TemplateArgs_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgs9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $Name = 0,
      $TemplateArgs = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Name = ($this + 8) | 0;
    $0 = HEAP32[$Name >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $S
    );
    $TemplateArgs = ($this + 12) | 0;
    $1 = HEAP32[$TemplateArgs >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $1,
      $S
    );
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgs11getBaseNameEv(
    $agg$result,
    $this
  ) {
    $agg$result = $agg$result | 0;
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $Name = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Name = ($this + 8) | 0;
    $0 = HEAP32[$Name >> 2] | 0;
    $vtable = HEAP32[$0 >> 2] | 0;
    $vfn = ($vtable + 24) | 0;
    $1 = HEAP32[$vfn >> 2] | 0;
    FUNCTION_TABLE_vii[$1 & 511]($agg$result, $0);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgsD0Ev(
    $this
  ) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $Last = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$this >> 2] | 0;
    $Last = ($this + 4) | 0;
    HEAP32[$Last >> 2] = $0;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2EOS4_(
    $this,
    $Other
  ) {
    $this = $this | 0;
    $Other = $Other | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $Cap = 0,
      $Cap16 = 0,
      $Last = 0,
      $Last14 = 0,
      $Last15 = 0,
      $add$ptr = 0,
      $call = 0,
      $call10 = 0,
      $call3 = 0,
      $call5 = 0,
      $cmp$i$i = 0,
      $sub$ptr$lhs$cast$i$i = 0,
      $sub$ptr$rhs$cast$i$i = 0,
      $sub$ptr$sub$i$i = 0,
      label = 0;
    var sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2Ev(
      $this
    );
    $call =
      __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv(
        $Other
      ) | 0;
    if ($call) {
      $call3 =
        __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5beginEv(
          $Other
        ) | 0;
      $call5 =
        __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE3endEv(
          $Other
        ) | 0;
      $sub$ptr$lhs$cast$i$i = $call5;
      $sub$ptr$rhs$cast$i$i = $call3;
      $sub$ptr$sub$i$i = ($sub$ptr$lhs$cast$i$i - $sub$ptr$rhs$cast$i$i) | 0;
      $cmp$i$i = ($sub$ptr$sub$i$i | 0) == 0;
      if (!$cmp$i$i) {
        $0 = HEAP32[$this >> 2] | 0;
        _memmove($0 | 0, $call3 | 0, $sub$ptr$sub$i$i | 0) | 0;
      }
      $1 = HEAP32[$this >> 2] | 0;
      $call10 =
        __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv(
          $Other
        ) | 0;
      $add$ptr = ($1 + ($call10 << 2)) | 0;
      $Last = ($this + 4) | 0;
      HEAP32[$Last >> 2] = $add$ptr;
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv(
        $Other
      );
    } else {
      $2 = HEAP32[$Other >> 2] | 0;
      HEAP32[$this >> 2] = $2;
      $Last14 = ($Other + 4) | 0;
      $3 = HEAP32[$Last14 >> 2] | 0;
      $Last15 = ($this + 4) | 0;
      HEAP32[$Last15 >> 2] = $3;
      $Cap = ($Other + 8) | 0;
      $4 = HEAP32[$Cap >> 2] | 0;
      $Cap16 = ($this + 8) | 0;
      HEAP32[$Cap16 >> 2] = $4;
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE11clearInlineEv(
        $Other
      );
    }
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $Arg10 = 0,
      $Args = 0,
      $Names = 0,
      $add$ptr = 0,
      $call = 0,
      $call11 = 0,
      $call12 = 0,
      $call18 = 0,
      $call2 = 0,
      $call22 = 0,
      $call28 = 0,
      $call29 = 0,
      $call3 = 0,
      $call32 = 0,
      $call37 = 0,
      $call38 = 0,
      $call39 = 0;
    var $call4 = 0,
      $call40 = 0,
      $call8 = 0,
      $call9 = 0,
      $cmp = 0,
      $cmp13 = 0,
      $cmp24 = 0,
      $cmp30 = 0,
      $conv = 0,
      $incdec$ptr = 0,
      $incdec$ptr7 = 0,
      $retval$5 = 0,
      $spec$select = 0,
      $spec$select6 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $Arg10 = (sp + 8) | 0;
    $Args = sp;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
        $this,
        0
      ) | 0;
    $conv = ($call << 24) >> 24;
    L1: do {
      switch ($conv | 0) {
        case 88: {
          $0 = HEAP32[$this >> 2] | 0;
          $incdec$ptr = ($0 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr;
          $call2 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call3 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
              $call2
            ) | 0;
          $cmp = ($call3 | 0) == (0 | 0);
          if ($cmp) {
            $retval$5 = 0;
          } else {
            $call4 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                $this,
                69
              ) | 0;
            $spec$select = $call4 ? $call3 : 0;
            STACKTOP = sp;
            return $spec$select | 0;
          }
          break;
        }
        case 74: {
          $1 = HEAP32[$this >> 2] | 0;
          $incdec$ptr7 = ($1 + 1) | 0;
          HEAP32[$this >> 2] = $incdec$ptr7;
          $Names = ($this + 8) | 0;
          $call8 =
            __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv(
              $Names
            ) | 0;
          while (1) {
            $call9 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                $this,
                69
              ) | 0;
            if ($call9) {
              label = 9;
              break;
            }
            $call11 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                $this
              ) | 0;
            $call12 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv(
                $call11
              ) | 0;
            HEAP32[$Arg10 >> 2] = $call12;
            $cmp13 = ($call12 | 0) == (0 | 0);
            if ($cmp13) {
              label = 8;
              break;
            }
            __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
              $Names,
              $Arg10
            );
          }
          if ((label | 0) == 8) {
            $retval$5 = 0;
            break L1;
          } else if ((label | 0) == 9) {
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm(
              $Args,
              $this,
              $call8
            );
            $call18 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20TemplateArgumentPackEJRNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_(
                $this,
                $Args
              ) | 0;
            $retval$5 = $call18;
            break L1;
          }
          break;
        }
        case 76: {
          $call22 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              1
            ) | 0;
          $cmp24 = ($call22 << 24) >> 24 == 90;
          if (!$cmp24) {
            $call37 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                $this
              ) | 0;
            $call38 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseExprPrimaryEv(
                $call37
              ) | 0;
            $retval$5 = $call38;
            break L1;
          }
          $2 = HEAP32[$this >> 2] | 0;
          $add$ptr = ($2 + 2) | 0;
          HEAP32[$this >> 2] = $add$ptr;
          $call28 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call29 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv(
              $call28
            ) | 0;
          $cmp30 = ($call29 | 0) == (0 | 0);
          if ($cmp30) {
            $retval$5 = 0;
          } else {
            $call32 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                $this,
                69
              ) | 0;
            $spec$select6 = $call32 ? $call29 : 0;
            $retval$5 = $spec$select6;
          }
          break;
        }
        default: {
          $call39 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call40 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
              $call39
            ) | 0;
          $retval$5 = $call40;
        }
      }
    } while (0);
    STACKTOP = sp;
    return $retval$5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEaSEOS4_(
    $this,
    $Other
  ) {
    $this = $this | 0;
    $Other = $Other | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Cap = 0,
      $Cap17 = 0,
      $Cap23 = 0,
      $Cap24 = 0,
      $Last = 0,
      $Last15 = 0,
      $Last16 = 0,
      $Last21 = 0;
    var $Last22 = 0,
      $add$ptr = 0,
      $call = 0,
      $call2 = 0,
      $call4 = 0,
      $call5 = 0,
      $call9 = 0,
      $cmp$i$i = 0,
      $sub$ptr$lhs$cast$i$i = 0,
      $sub$ptr$rhs$cast$i$i = 0,
      $sub$ptr$sub$i$i = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv(
        $Other
      ) | 0;
    $call2 =
      __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv(
        $this
      ) | 0;
    do {
      if ($call) {
        if (!$call2) {
          $0 = HEAP32[$this >> 2] | 0;
          _free($0);
          __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE11clearInlineEv(
            $this
          );
        }
        $call4 =
          __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5beginEv(
            $Other
          ) | 0;
        $call5 =
          __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE3endEv(
            $Other
          ) | 0;
        $sub$ptr$lhs$cast$i$i = $call5;
        $sub$ptr$rhs$cast$i$i = $call4;
        $sub$ptr$sub$i$i = ($sub$ptr$lhs$cast$i$i - $sub$ptr$rhs$cast$i$i) | 0;
        $cmp$i$i = ($sub$ptr$sub$i$i | 0) == 0;
        if (!$cmp$i$i) {
          $1 = HEAP32[$this >> 2] | 0;
          _memmove($1 | 0, $call4 | 0, $sub$ptr$sub$i$i | 0) | 0;
        }
        $2 = HEAP32[$this >> 2] | 0;
        $call9 =
          __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv(
            $Other
          ) | 0;
        $add$ptr = ($2 + ($call9 << 2)) | 0;
        $Last = ($this + 4) | 0;
        HEAP32[$Last >> 2] = $add$ptr;
        __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv(
          $Other
        );
      } else {
        if ($call2) {
          $3 = HEAP32[$Other >> 2] | 0;
          HEAP32[$this >> 2] = $3;
          $Last15 = ($Other + 4) | 0;
          $4 = HEAP32[$Last15 >> 2] | 0;
          $Last16 = ($this + 4) | 0;
          HEAP32[$Last16 >> 2] = $4;
          $Cap = ($Other + 8) | 0;
          $5 = HEAP32[$Cap >> 2] | 0;
          $Cap17 = ($this + 8) | 0;
          HEAP32[$Cap17 >> 2] = $5;
          __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE11clearInlineEv(
            $Other
          );
          break;
        } else {
          $6 = HEAP32[$this >> 2] | 0;
          $7 = HEAP32[$Other >> 2] | 0;
          HEAP32[$this >> 2] = $7;
          HEAP32[$Other >> 2] = $6;
          $Last21 = ($this + 4) | 0;
          $Last22 = ($Other + 4) | 0;
          $8 = HEAP32[$Last21 >> 2] | 0;
          $9 = HEAP32[$Last22 >> 2] | 0;
          HEAP32[$Last21 >> 2] = $9;
          HEAP32[$Last22 >> 2] = $8;
          $Cap23 = ($this + 8) | 0;
          $Cap24 = ($Other + 8) | 0;
          $10 = HEAP32[$Cap23 >> 2] | 0;
          $11 = HEAP32[$Cap24 >> 2] | 0;
          HEAP32[$Cap23 >> 2] = $11;
          HEAP32[$Cap24 >> 2] = $10;
          __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv(
            $Other
          );
          break;
        }
      }
    } while (0);
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle20TemplateArgumentPack11getElementsEv(
    $agg$result,
    $this
  ) {
    $agg$result = $agg$result | 0;
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Elements = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Elements = ($this + 8) | 0;
    $0 = $Elements;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$result;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ParameterPackEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ParameterPackEJNS2_9NodeArrayEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE9push_backERKS3_(
    $this,
    $Elem
  ) {
    $this = $this | 0;
    $Elem = $Elem | 0;
    var $$pre = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $Cap = 0,
      $Last = 0,
      $call = 0,
      $cmp = 0,
      $incdec$ptr = 0,
      $mul = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Last = ($this + 4) | 0;
    $0 = HEAP32[$Last >> 2] | 0;
    $Cap = ($this + 8) | 0;
    $1 = HEAP32[$Cap >> 2] | 0;
    $cmp = ($0 | 0) == ($1 | 0);
    if ($cmp) {
      $call =
        __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv(
          $this
        ) | 0;
      $mul = $call << 1;
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE7reserveEm(
        $this,
        $mul
      );
      $$pre = HEAP32[$Last >> 2] | 0;
      $3 = $$pre;
    } else {
      $3 = $0;
    }
    $2 = HEAP32[$Elem >> 2] | 0;
    $incdec$ptr = ($3 + 4) | 0;
    HEAP32[$Last >> 2] = $incdec$ptr;
    HEAP32[$3 >> 2] = $2;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm(
    $agg$result,
    $this,
    $FromPosition
  ) {
    $agg$result = $agg$result | 0;
    $this = $this | 0;
    $FromPosition = $FromPosition | 0;
    var $Names = 0,
      $add$ptr = 0,
      $call = 0,
      $call3 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Names = ($this + 8) | 0;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5beginEv(
        $Names
      ) | 0;
    $add$ptr = ($call + ($FromPosition << 2)) | 0;
    $call3 =
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE3endEv(
        $Names
      ) | 0;
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13makeNodeArrayIPPNS0_4NodeEEENS0_9NodeArrayET_SB_(
      $agg$result,
      $this,
      $add$ptr,
      $call3
    );
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8dropBackEm(
      $Names,
      $FromPosition
    );
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12TemplateArgsEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12TemplateArgsEJNS2_9NodeArrayEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12TemplateArgsEJNS2_9NodeArrayEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    $0 = $args;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle12TemplateArgsC2ENS0_9NodeArrayE(
      $call,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle12TemplateArgsC2ENS0_9NodeArrayE(
    $this,
    $Params_
  ) {
    $this = $this | 0;
    $Params_ = $Params_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Params = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      30,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 3548;
    $Params = ($this + 8) | 0;
    $0 = $Params_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Params;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle12TemplateArgs9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $Params = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp3 = 0,
      $agg$tmp3$byval_copy = 0,
      $agg$tmp5 = 0,
      $agg$tmp5$byval_copy = 0,
      $call2 = 0,
      $cmp = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 48) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
    $agg$tmp5$byval_copy = (sp + 40) | 0;
    $agg$tmp3$byval_copy = (sp + 32) | 0;
    $agg$tmp$byval_copy = (sp + 24) | 0;
    $agg$tmp = (sp + 16) | 0;
    $agg$tmp3 = (sp + 8) | 0;
    $agg$tmp5 = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11301);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Params = ($this + 8) | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE(
      $Params,
      $S
    );
    $call2 = __ZNK12_GLOBAL__N_112OutputStream4backEv($S) | 0;
    $cmp = ($call2 << 24) >> 24 == 62;
    if ($cmp) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3, 11117);
      HEAP32[$agg$tmp3$byval_copy >> 2] = HEAP32[$agg$tmp3 >> 2] | 0;
      HEAP32[($agg$tmp3$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp3 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp3$byval_copy
      );
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp5, 11194);
    HEAP32[$agg$tmp5$byval_copy >> 2] = HEAP32[$agg$tmp5 >> 2] | 0;
    HEAP32[($agg$tmp5$byval_copy + 4) >> 2] = HEAP32[($agg$tmp5 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp5$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle12TemplateArgsD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $FirstElement$0$off0 = 0,
      $FirstElement$1$off0 = 0,
      $Idx$0 = 0,
      $NumElements = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $arrayidx = 0,
      $call = 0,
      $call3 = 0,
      $call4 = 0,
      $cmp = 0,
      $cmp5 = 0,
      $inc = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $NumElements = ($this + 4) | 0;
    $FirstElement$0$off0 = 1;
    $Idx$0 = 0;
    while (1) {
      $0 = HEAP32[$NumElements >> 2] | 0;
      $cmp = ($Idx$0 | 0) == ($0 | 0);
      if ($cmp) {
        break;
      }
      $call = __ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S) | 0;
      if (!$FirstElement$0$off0) {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11303);
        HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
        HEAP32[($agg$tmp$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $S,
          $agg$tmp$byval_copy
        );
      }
      $call3 = __ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S) | 0;
      $1 = HEAP32[$this >> 2] | 0;
      $arrayidx = ($1 + ($Idx$0 << 2)) | 0;
      $2 = HEAP32[$arrayidx >> 2] | 0;
      __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
        $2,
        $S
      );
      $call4 = __ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S) | 0;
      $cmp5 = ($call3 | 0) == ($call4 | 0);
      if ($cmp5) {
        __ZN12_GLOBAL__N_112OutputStream18setCurrentPositionEm($S, $call);
        $FirstElement$1$off0 = $FirstElement$0$off0;
      } else {
        $FirstElement$1$off0 = 0;
      }
      $inc = ($Idx$0 + 1) | 0;
      $FirstElement$0$off0 = $FirstElement$1$off0;
      $Idx$0 = $inc;
    }
    STACKTOP = sp;
    return;
  }
  function __ZNK12_GLOBAL__N_112OutputStream4backEv($this) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $CurrentPosition = 0,
      $arrayidx = 0,
      $cond = 0,
      $sub = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $CurrentPosition = ($this + 4) | 0;
    $0 = HEAP32[$CurrentPosition >> 2] | 0;
    $tobool = ($0 | 0) == 0;
    if ($tobool) {
      $cond = 0;
    } else {
      $sub = ($0 + -1) | 0;
      $1 = HEAP32[$this >> 2] | 0;
      $arrayidx = ($1 + $sub) | 0;
      $2 = HEAP8[$arrayidx >> 0] | 0;
      $cond = $2;
    }
    return $cond | 0;
  }
  function __ZN12_GLOBAL__N_112OutputStream18setCurrentPositionEm(
    $this,
    $NewPos
  ) {
    $this = $this | 0;
    $NewPos = $NewPos | 0;
    var $CurrentPosition = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $CurrentPosition = ($this + 4) | 0;
    HEAP32[$CurrentPosition >> 2] = $NewPos;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE3endEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $Last = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Last = ($this + 4) | 0;
    $0 = HEAP32[$Last >> 2] | 0;
    return $0 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13makeNodeArrayIPPNS0_4NodeEEENS0_9NodeArrayET_SB_(
    $agg$result,
    $this,
    $begin,
    $end
  ) {
    $agg$result = $agg$result | 0;
    $this = $this | 0;
    $begin = $begin | 0;
    $end = $end | 0;
    var $ASTAllocator = 0,
      $call = 0,
      $cmp$i$i = 0,
      $sub$ptr$div = 0,
      $sub$ptr$lhs$cast = 0,
      $sub$ptr$rhs$cast = 0,
      $sub$ptr$sub = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $sub$ptr$lhs$cast = $end;
    $sub$ptr$rhs$cast = $begin;
    $sub$ptr$sub = ($sub$ptr$lhs$cast - $sub$ptr$rhs$cast) | 0;
    $sub$ptr$div = $sub$ptr$sub >> 2;
    $ASTAllocator = ($this + 368) | 0;
    $call =
      __ZN12_GLOBAL__N_116DefaultAllocator17allocateNodeArrayEm(
        $ASTAllocator,
        $sub$ptr$div
      ) | 0;
    $cmp$i$i = ($sub$ptr$sub | 0) == 0;
    if (!$cmp$i$i) {
      _memmove($call | 0, $begin | 0, $sub$ptr$sub | 0) | 0;
    }
    __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2EPPNS0_4NodeEm(
      $agg$result,
      $call,
      $sub$ptr$div
    );
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8dropBackEm(
    $this,
    $Index
  ) {
    $this = $this | 0;
    $Index = $Index | 0;
    var $0 = 0,
      $Last = 0,
      $add$ptr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$this >> 2] | 0;
    $add$ptr = ($0 + ($Index << 2)) | 0;
    $Last = ($this + 4) | 0;
    HEAP32[$Last >> 2] = $add$ptr;
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator17allocateNodeArrayEm(
    $this,
    $sz
  ) {
    $this = $this | 0;
    $sz = $sz | 0;
    var $call = 0,
      $mul = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $mul = $sz << 2;
    $call =
      __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, $mul) | 0;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2EPPNS0_4NodeEm(
    $this,
    $Elements_,
    $NumElements_
  ) {
    $this = $this | 0;
    $Elements_ = $Elements_ | 0;
    $NumElements_ = $NumElements_ | 0;
    var $NumElements = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    HEAP32[$this >> 2] = $Elements_;
    $NumElements = ($this + 4) | 0;
    HEAP32[$NumElements >> 2] = $NumElements_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $Last = 0,
      $sub$ptr$div = 0,
      $sub$ptr$sub = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Last = ($this + 4) | 0;
    $0 = HEAP32[$Last >> 2] | 0;
    $1 = HEAP32[$this >> 2] | 0;
    $sub$ptr$sub = ($0 - $1) | 0;
    $sub$ptr$div = $sub$ptr$sub >> 2;
    return $sub$ptr$div | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE7reserveEm(
    $this,
    $NewCap
  ) {
    $this = $this | 0;
    $NewCap = $NewCap | 0;
    var $$in = 0,
      $$pre7 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $Cap = 0,
      $Last = 0,
      $Last17$pre$phiZ2D = 0,
      $add$ptr = 0,
      $add$ptr19 = 0,
      $call = 0,
      $call2 = 0,
      $call3 = 0,
      $call9 = 0,
      $cmp = 0,
      $cmp$i$i = 0,
      $cmp12 = 0,
      $mul = 0,
      $mul8 = 0,
      $sub$ptr$rhs$cast$i$i = 0;
    var $sub$ptr$sub$i$i = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv(
        $this
      ) | 0;
    $call2 =
      __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv(
        $this
      ) | 0;
    do {
      if ($call2) {
        $mul = $NewCap << 2;
        $call3 = _malloc($mul) | 0;
        $cmp = ($call3 | 0) == (0 | 0);
        if ($cmp) {
          __ZSt9terminatev();
          // unreachable;
        }
        $0 = HEAP32[$this >> 2] | 0;
        $Last = ($this + 4) | 0;
        $1 = HEAP32[$Last >> 2] | 0;
        $sub$ptr$rhs$cast$i$i = $0;
        $sub$ptr$sub$i$i = ($1 - $sub$ptr$rhs$cast$i$i) | 0;
        $cmp$i$i = ($sub$ptr$sub$i$i | 0) == 0;
        if (!$cmp$i$i) {
          _memmove($call3 | 0, $0 | 0, $sub$ptr$sub$i$i | 0) | 0;
        }
        HEAP32[$this >> 2] = $call3;
        $$in = $call3;
        $Last17$pre$phiZ2D = $Last;
      } else {
        $2 = HEAP32[$this >> 2] | 0;
        $mul8 = $NewCap << 2;
        $call9 = _realloc($2, $mul8) | 0;
        HEAP32[$this >> 2] = $call9;
        $cmp12 = ($call9 | 0) == (0 | 0);
        if ($cmp12) {
          __ZSt9terminatev();
          // unreachable;
        } else {
          $$pre7 = ($this + 4) | 0;
          $$in = $call9;
          $Last17$pre$phiZ2D = $$pre7;
          break;
        }
      }
    } while (0);
    $add$ptr = ($$in + ($call << 2)) | 0;
    HEAP32[$Last17$pre$phiZ2D >> 2] = $add$ptr;
    $add$ptr19 = ($$in + ($NewCap << 2)) | 0;
    $Cap = ($this + 8) | 0;
    HEAP32[$Cap >> 2] = $add$ptr19;
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ParameterPackEJNS2_9NodeArrayEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    $0 = $args;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle13ParameterPackC2ENS0_9NodeArrayE(
      $call,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle13ParameterPackC2ENS0_9NodeArrayE(
    $this,
    $Data_
  ) {
    $this = $this | 0;
    $Data_ = $Data_ | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $ArrayCache = 0,
      $Data = 0,
      $FunctionCache = 0,
      $RHSComponentCache = 0,
      $__first$addr$0$i = 0,
      $__first$addr$0$i1 = 0,
      $__first$addr$0$i8 = 0;
    var $call = 0,
      $call$i = 0,
      $call$i11 = 0,
      $call$i4 = 0,
      $call11 = 0,
      $call14 = 0,
      $call23 = 0,
      $call26 = 0,
      $call5 = 0,
      $cmp$i = 0,
      $cmp$i2 = 0,
      $cmp$i9 = 0,
      $incdec$ptr$i = 0,
      $incdec$ptr$i12 = 0,
      $incdec$ptr$i5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      27,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 3592;
    $Data = ($this + 8) | 0;
    $0 = $Data_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Data;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    $RHSComponentCache = ($this + 5) | 0;
    HEAP8[$RHSComponentCache >> 0] = 2;
    $FunctionCache = ($this + 7) | 0;
    HEAP8[$FunctionCache >> 0] = 2;
    $ArrayCache = ($this + 6) | 0;
    HEAP8[$ArrayCache >> 0] = 2;
    $call = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5beginEv($Data) | 0;
    $call5 = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray3endEv($Data) | 0;
    $__first$addr$0$i = $call;
    while (1) {
      $cmp$i = ($__first$addr$0$i | 0) == ($call5 | 0);
      if ($cmp$i) {
        label = 4;
        break;
      }
      $10 = HEAP32[$__first$addr$0$i >> 2] | 0;
      $call$i =
        __ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE_clES4_(
          $10
        ) | 0;
      $incdec$ptr$i = ($__first$addr$0$i + 4) | 0;
      if ($call$i) {
        $__first$addr$0$i = $incdec$ptr$i;
      } else {
        break;
      }
    }
    if ((label | 0) == 4) {
      HEAP8[$ArrayCache >> 0] = 1;
    }
    $call11 =
      __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5beginEv($Data) | 0;
    $call14 = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray3endEv($Data) | 0;
    $__first$addr$0$i1 = $call11;
    while (1) {
      $cmp$i2 = ($__first$addr$0$i1 | 0) == ($call14 | 0);
      if ($cmp$i2) {
        label = 8;
        break;
      }
      $11 = HEAP32[$__first$addr$0$i1 >> 2] | 0;
      $call$i4 =
        __ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE0_clES4_(
          $11
        ) | 0;
      $incdec$ptr$i5 = ($__first$addr$0$i1 + 4) | 0;
      if ($call$i4) {
        $__first$addr$0$i1 = $incdec$ptr$i5;
      } else {
        break;
      }
    }
    if ((label | 0) == 8) {
      HEAP8[$FunctionCache >> 0] = 1;
    }
    $call23 =
      __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5beginEv($Data) | 0;
    $call26 = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray3endEv($Data) | 0;
    $__first$addr$0$i8 = $call23;
    while (1) {
      $cmp$i9 = ($__first$addr$0$i8 | 0) == ($call26 | 0);
      if ($cmp$i9) {
        label = 12;
        break;
      }
      $12 = HEAP32[$__first$addr$0$i8 >> 2] | 0;
      $call$i11 =
        __ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE1_clES4_(
          $12
        ) | 0;
      $incdec$ptr$i12 = ($__first$addr$0$i8 + 4) | 0;
      if ($call$i11) {
        $__first$addr$0$i8 = $incdec$ptr$i12;
      } else {
        break;
      }
    }
    if ((label | 0) == 12) {
      HEAP8[$RHSComponentCache >> 0] = 1;
    }
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5beginEv($this) {
    $this = $this | 0;
    var $0 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$this >> 2] | 0;
    return $0 | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray3endEv($this) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $NumElements = 0,
      $add$ptr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$this >> 2] | 0;
    $NumElements = ($this + 4) | 0;
    $1 = HEAP32[$NumElements >> 2] | 0;
    $add$ptr = ($0 + ($1 << 2)) | 0;
    return $add$ptr | 0;
  }
  function __ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE_clES4_(
    $P
  ) {
    $P = $P | 0;
    var $0 = 0,
      $ArrayCache = 0,
      $cmp = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ArrayCache = ($P + 6) | 0;
    $0 = HEAP8[$ArrayCache >> 0] | 0;
    $cmp = ($0 << 24) >> 24 == 1;
    return $cmp | 0;
  }
  function __ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE0_clES4_(
    $P
  ) {
    $P = $P | 0;
    var $0 = 0,
      $FunctionCache = 0,
      $cmp = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $FunctionCache = ($P + 7) | 0;
    $0 = HEAP8[$FunctionCache >> 0] | 0;
    $cmp = ($0 << 24) >> 24 == 1;
    return $cmp | 0;
  }
  function __ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE1_clES4_(
    $P
  ) {
    $P = $P | 0;
    var $0 = 0,
      $RHSComponentCache = 0,
      $cmp = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $RHSComponentCache = ($P + 5) | 0;
    $0 = HEAP8[$RHSComponentCache >> 0] | 0;
    $cmp = ($0 << 24) >> 24 == 1;
    return $cmp | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack19hasRHSComponentSlowERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $CurrentPackIndex = 0,
      $Data = 0,
      $call = 0,
      $call3 = 0,
      $call4 = 0,
      $cmp = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE(
      $this,
      $S
    );
    $CurrentPackIndex = ($S + 12) | 0;
    $0 = HEAP32[$CurrentPackIndex >> 2] | 0;
    $Data = ($this + 8) | 0;
    $call = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data) | 0;
    $cmp = $0 >>> 0 < $call >>> 0;
    if ($cmp) {
      $call3 =
        __ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data, $0) | 0;
      $call4 =
        __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE(
          $call3,
          $S
        ) | 0;
      $1 = $call4;
    } else {
      $1 = 0;
    }
    return $1 | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack12hasArraySlowERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $CurrentPackIndex = 0,
      $Data = 0,
      $call = 0,
      $call3 = 0,
      $call4 = 0,
      $cmp = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE(
      $this,
      $S
    );
    $CurrentPackIndex = ($S + 12) | 0;
    $0 = HEAP32[$CurrentPackIndex >> 2] | 0;
    $Data = ($this + 8) | 0;
    $call = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data) | 0;
    $cmp = $0 >>> 0 < $call >>> 0;
    if ($cmp) {
      $call3 =
        __ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data, $0) | 0;
      $call4 =
        __ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(
          $call3,
          $S
        ) | 0;
      $1 = $call4;
    } else {
      $1 = 0;
    }
    return $1 | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack15hasFunctionSlowERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $CurrentPackIndex = 0,
      $Data = 0,
      $call = 0,
      $call3 = 0,
      $call4 = 0,
      $cmp = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE(
      $this,
      $S
    );
    $CurrentPackIndex = ($S + 12) | 0;
    $0 = HEAP32[$CurrentPackIndex >> 2] | 0;
    $Data = ($this + 8) | 0;
    $call = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data) | 0;
    $cmp = $0 >>> 0 < $call >>> 0;
    if ($cmp) {
      $call3 =
        __ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data, $0) | 0;
      $call4 =
        __ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE(
          $call3,
          $S
        ) | 0;
      $1 = $call4;
    } else {
      $1 = 0;
    }
    return $1 | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack13getSyntaxNodeERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $CurrentPackIndex = 0,
      $Data = 0,
      $call = 0,
      $call3 = 0,
      $call4 = 0,
      $cmp = 0,
      $cond = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE(
      $this,
      $S
    );
    $CurrentPackIndex = ($S + 12) | 0;
    $0 = HEAP32[$CurrentPackIndex >> 2] | 0;
    $Data = ($this + 8) | 0;
    $call = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data) | 0;
    $cmp = $0 >>> 0 < $call >>> 0;
    if ($cmp) {
      $call3 =
        __ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data, $0) | 0;
      $vtable = HEAP32[$call3 >> 2] | 0;
      $vfn = ($vtable + 12) | 0;
      $1 = HEAP32[$vfn >> 2] | 0;
      $call4 = FUNCTION_TABLE_iii[$1 & 511]($call3, $S) | 0;
      $cond = $call4;
    } else {
      $cond = $this;
    }
    return $cond | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $CurrentPackIndex = 0,
      $Data = 0,
      $call = 0,
      $call3 = 0,
      $cmp = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE(
      $this,
      $S
    );
    $CurrentPackIndex = ($S + 12) | 0;
    $0 = HEAP32[$CurrentPackIndex >> 2] | 0;
    $Data = ($this + 8) | 0;
    $call = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data) | 0;
    $cmp = $0 >>> 0 < $call >>> 0;
    if ($cmp) {
      $call3 =
        __ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data, $0) | 0;
      $vtable = HEAP32[$call3 >> 2] | 0;
      $vfn = ($vtable + 16) | 0;
      $1 = HEAP32[$vfn >> 2] | 0;
      FUNCTION_TABLE_vii[$1 & 511]($call3, $S);
    }
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack10printRightERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $CurrentPackIndex = 0,
      $Data = 0,
      $call = 0,
      $call3 = 0,
      $cmp = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE(
      $this,
      $S
    );
    $CurrentPackIndex = ($S + 12) | 0;
    $0 = HEAP32[$CurrentPackIndex >> 2] | 0;
    $Data = ($this + 8) | 0;
    $call = __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data) | 0;
    $cmp = $0 >>> 0 < $call >>> 0;
    if ($cmp) {
      $call3 =
        __ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data, $0) | 0;
      $vtable = HEAP32[$call3 >> 2] | 0;
      $vfn = ($vtable + 20) | 0;
      $1 = HEAP32[$vfn >> 2] | 0;
      FUNCTION_TABLE_vii[$1 & 511]($call3, $S);
    }
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle13ParameterPackD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $CurrentPackIndex = 0,
      $CurrentPackMax = 0,
      $Data = 0,
      $call2 = 0,
      $cmp = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $CurrentPackMax = ($S + 16) | 0;
    $0 = HEAP32[$CurrentPackMax >> 2] | 0;
    $cmp = ($0 | 0) == -1;
    if ($cmp) {
      $Data = ($this + 8) | 0;
      $call2 =
        __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data) | 0;
      HEAP32[$CurrentPackMax >> 2] = $call2;
      $CurrentPackIndex = ($S + 12) | 0;
      HEAP32[$CurrentPackIndex >> 2] = 0;
    }
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($this) {
    $this = $this | 0;
    var $0 = 0,
      $NumElements = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $NumElements = ($this + 4) | 0;
    $0 = HEAP32[$NumElements >> 2] | 0;
    return $0 | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($this, $Idx) {
    $this = $this | 0;
    $Idx = $Idx | 0;
    var $0 = 0,
      $1 = 0,
      $arrayidx = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$this >> 2] | 0;
    $arrayidx = ($0 + ($Idx << 2)) | 0;
    $1 = HEAP32[$arrayidx >> 2] | 0;
    return $1 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE11clearInlineEv(
    $this
  ) {
    $this = $this | 0;
    var $Cap = 0,
      $Last = 0,
      $add$ptr = 0,
      $arraydecay = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $arraydecay = ($this + 12) | 0;
    HEAP32[$this >> 2] = $arraydecay;
    $Last = ($this + 4) | 0;
    HEAP32[$Last >> 2] = $arraydecay;
    $add$ptr = ($this + 44) | 0;
    $Cap = ($this + 8) | 0;
    HEAP32[$Cap >> 2] = $add$ptr;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5beginEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$this >> 2] | 0;
    return $0 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE3endEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $Last = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Last = ($this + 4) | 0;
    $0 = HEAP32[$Last >> 2] | 0;
    return $0 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Arg = 0,
      $Base = 0,
      $Callee = 0;
    var $Child = 0,
      $Cond = 0,
      $E = 0,
      $E175 = 0,
      $E303 = 0,
      $E751 = 0,
      $Ex = 0,
      $Ex140 = 0,
      $Ex157 = 0,
      $Ex385 = 0,
      $Ex422 = 0,
      $Ex488 = 0,
      $Ex562 = 0,
      $Ex609 = 0,
      $Ex645 = 0,
      $Ex716 = 0,
      $Ex773 = 0,
      $FP = 0,
      $Global = 0,
      $Index = 0;
    var $L = 0,
      $LHS = 0,
      $LHS206 = 0,
      $LHS532 = 0,
      $Names = 0,
      $Names297 = 0,
      $Names684 = 0,
      $Names745 = 0,
      $Pack = 0,
      $R = 0,
      $R660 = 0,
      $RHS = 0,
      $RHS212 = 0,
      $RHS538 = 0,
      $T = 0,
      $T556 = 0,
      $T603 = 0,
      $Ty = 0,
      $Ty634 = 0,
      $Ty68 = 0;
    var $Ty727 = 0,
      $Ty738 = 0,
      $Ty83 = 0,
      $add$ptr = 0,
      $add$ptr119 = 0,
      $add$ptr125 = 0,
      $add$ptr139 = 0,
      $add$ptr151 = 0,
      $add$ptr168 = 0,
      $add$ptr174 = 0,
      $add$ptr189 = 0,
      $add$ptr205 = 0,
      $add$ptr223 = 0,
      $add$ptr229 = 0,
      $add$ptr240 = 0,
      $add$ptr246 = 0,
      $add$ptr252 = 0,
      $add$ptr263 = 0,
      $add$ptr269 = 0,
      $add$ptr280 = 0;
    var $add$ptr296 = 0,
      $add$ptr325 = 0,
      $add$ptr331 = 0,
      $add$ptr337 = 0,
      $add$ptr34 = 0,
      $add$ptr343 = 0,
      $add$ptr354 = 0,
      $add$ptr360 = 0,
      $add$ptr366 = 0,
      $add$ptr372 = 0,
      $add$ptr378 = 0,
      $add$ptr40 = 0,
      $add$ptr403 = 0,
      $add$ptr409 = 0,
      $add$ptr415 = 0,
      $add$ptr421 = 0,
      $add$ptr440 = 0,
      $add$ptr446 = 0,
      $add$ptr452 = 0,
      $add$ptr46 = 0;
    var $add$ptr463 = 0,
      $add$ptr469 = 0,
      $add$ptr475 = 0,
      $add$ptr481 = 0,
      $add$ptr498 = 0,
      $add$ptr504 = 0,
      $add$ptr52 = 0,
      $add$ptr526 = 0,
      $add$ptr555 = 0,
      $add$ptr573 = 0,
      $add$ptr579 = 0,
      $add$ptr58 = 0,
      $add$ptr585 = 0,
      $add$ptr591 = 0,
      $add$ptr602 = 0,
      $add$ptr620 = 0,
      $add$ptr633 = 0,
      $add$ptr644 = 0,
      $add$ptr655 = 0,
      $add$ptr67 = 0;
    var $add$ptr683 = 0,
      $add$ptr715 = 0,
      $add$ptr726 = 0,
      $add$ptr737 = 0,
      $add$ptr768 = 0,
      $add$ptr772 = 0,
      $add$ptr82 = 0,
      $add$ptr99 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp121 = 0,
      $agg$tmp121$byval_copy = 0,
      $agg$tmp127 = 0,
      $agg$tmp127$byval_copy = 0,
      $agg$tmp170 = 0,
      $agg$tmp170$byval_copy = 0,
      $agg$tmp225 = 0,
      $agg$tmp225$byval_copy = 0,
      $agg$tmp231 = 0,
      $agg$tmp231$byval_copy = 0;
    var $agg$tmp242 = 0,
      $agg$tmp242$byval_copy = 0,
      $agg$tmp248 = 0,
      $agg$tmp248$byval_copy = 0,
      $agg$tmp254 = 0,
      $agg$tmp254$byval_copy = 0,
      $agg$tmp265 = 0,
      $agg$tmp265$byval_copy = 0,
      $agg$tmp271 = 0,
      $agg$tmp271$byval_copy = 0,
      $agg$tmp30 = 0,
      $agg$tmp30$byval_copy = 0,
      $agg$tmp327 = 0,
      $agg$tmp327$byval_copy = 0,
      $agg$tmp333 = 0,
      $agg$tmp333$byval_copy = 0,
      $agg$tmp339 = 0,
      $agg$tmp339$byval_copy = 0,
      $agg$tmp345 = 0,
      $agg$tmp345$byval_copy = 0;
    var $agg$tmp356 = 0,
      $agg$tmp356$byval_copy = 0,
      $agg$tmp36 = 0,
      $agg$tmp36$byval_copy = 0,
      $agg$tmp362 = 0,
      $agg$tmp362$byval_copy = 0,
      $agg$tmp368 = 0,
      $agg$tmp368$byval_copy = 0,
      $agg$tmp374 = 0,
      $agg$tmp374$byval_copy = 0,
      $agg$tmp382 = 0,
      $agg$tmp382$byval_copy = 0,
      $agg$tmp405 = 0,
      $agg$tmp405$byval_copy = 0,
      $agg$tmp411 = 0,
      $agg$tmp411$byval_copy = 0,
      $agg$tmp417 = 0,
      $agg$tmp417$byval_copy = 0,
      $agg$tmp42 = 0,
      $agg$tmp42$byval_copy = 0;
    var $agg$tmp442 = 0,
      $agg$tmp442$byval_copy = 0,
      $agg$tmp448 = 0,
      $agg$tmp448$byval_copy = 0,
      $agg$tmp454 = 0,
      $agg$tmp454$byval_copy = 0,
      $agg$tmp465 = 0,
      $agg$tmp465$byval_copy = 0,
      $agg$tmp471 = 0,
      $agg$tmp471$byval_copy = 0,
      $agg$tmp477 = 0,
      $agg$tmp477$byval_copy = 0,
      $agg$tmp48 = 0,
      $agg$tmp48$byval_copy = 0,
      $agg$tmp485 = 0,
      $agg$tmp485$byval_copy = 0,
      $agg$tmp500 = 0,
      $agg$tmp500$byval_copy = 0,
      $agg$tmp54 = 0,
      $agg$tmp54$byval_copy = 0;
    var $agg$tmp575 = 0,
      $agg$tmp575$byval_copy = 0,
      $agg$tmp581 = 0,
      $agg$tmp581$byval_copy = 0,
      $agg$tmp587 = 0,
      $agg$tmp587$byval_copy = 0,
      $agg$tmp593 = 0,
      $agg$tmp593$byval_copy = 0,
      $arrayidx = 0,
      $arrayidx135 = 0,
      $arrayidx236 = 0,
      $arrayidx259 = 0,
      $arrayidx276 = 0,
      $arrayidx321 = 0,
      $arrayidx350 = 0,
      $arrayidx396 = 0,
      $arrayidx433 = 0,
      $arrayidx459 = 0,
      $arrayidx521 = 0,
      $arrayidx551 = 0;
    var $arrayidx598 = 0,
      $arrayidx711 = 0,
      $arrayidx78 = 0,
      $call = 0,
      $call100 = 0,
      $call101 = 0,
      $call105 = 0,
      $call106 = 0,
      $call108 = 0,
      $call114 = 0,
      $call120 = 0,
      $call122 = 0,
      $call126 = 0,
      $call128 = 0,
      $call130 = 0,
      $call131 = 0,
      $call141 = 0,
      $call142 = 0,
      $call147 = 0,
      $call15 = 0;
    var $call152 = 0,
      $call153 = 0,
      $call159 = 0,
      $call163 = 0,
      $call169 = 0,
      $call171 = 0,
      $call176 = 0,
      $call177 = 0,
      $call182 = 0,
      $call185 = 0,
      $call186 = 0,
      $call19 = 0,
      $call190 = 0,
      $call191 = 0,
      $call196 = 0,
      $call2 = 0,
      $call20 = 0,
      $call200 = 0,
      $call207 = 0,
      $call208 = 0;
    var $call214 = 0,
      $call218 = 0,
      $call22 = 0,
      $call224 = 0,
      $call226 = 0,
      $call23 = 0,
      $call230 = 0,
      $call232 = 0,
      $call241 = 0,
      $call243 = 0,
      $call247 = 0,
      $call249 = 0,
      $call253 = 0,
      $call255 = 0,
      $call264 = 0,
      $call266 = 0,
      $call270 = 0,
      $call272 = 0,
      $call281 = 0,
      $call282 = 0;
    var $call287 = 0,
      $call29 = 0,
      $call291 = 0,
      $call298 = 0,
      $call3 = 0,
      $call300 = 0,
      $call304 = 0,
      $call305 = 0,
      $call31 = 0,
      $call316 = 0,
      $call326 = 0,
      $call328 = 0,
      $call332 = 0,
      $call334 = 0,
      $call338 = 0,
      $call340 = 0,
      $call344 = 0,
      $call346 = 0,
      $call35 = 0,
      $call355 = 0;
    var $call357 = 0,
      $call361 = 0,
      $call363 = 0,
      $call367 = 0,
      $call369 = 0,
      $call37 = 0,
      $call373 = 0,
      $call375 = 0,
      $call379 = 0,
      $call381 = 0,
      $call383 = 0,
      $call386 = 0,
      $call387 = 0,
      $call391 = 0,
      $call399 = 0,
      $call4 = 0,
      $call400 = 0,
      $call404 = 0,
      $call406 = 0,
      $call41 = 0;
    var $call410 = 0,
      $call412 = 0,
      $call416 = 0,
      $call418 = 0,
      $call423 = 0,
      $call424 = 0,
      $call428 = 0,
      $call43 = 0,
      $call436 = 0,
      $call437 = 0,
      $call441 = 0,
      $call443 = 0,
      $call447 = 0,
      $call449 = 0,
      $call453 = 0,
      $call455 = 0,
      $call464 = 0,
      $call466 = 0,
      $call47 = 0,
      $call470 = 0;
    var $call472 = 0,
      $call476 = 0,
      $call478 = 0,
      $call482 = 0,
      $call484 = 0,
      $call486 = 0,
      $call489 = 0,
      $call49 = 0,
      $call490 = 0,
      $call494 = 0,
      $call499 = 0,
      $call501 = 0,
      $call505 = 0,
      $call506 = 0,
      $call511 = 0,
      $call515 = 0,
      $call527 = 0,
      $call528 = 0,
      $call53 = 0,
      $call534 = 0;
    var $call540 = 0,
      $call544 = 0,
      $call55 = 0,
      $call557 = 0,
      $call558 = 0,
      $call564 = 0,
      $call568 = 0,
      $call574 = 0,
      $call576 = 0,
      $call580 = 0,
      $call582 = 0,
      $call586 = 0,
      $call588 = 0,
      $call59 = 0,
      $call592 = 0,
      $call594 = 0,
      $call6 = 0,
      $call60 = 0,
      $call604 = 0,
      $call605 = 0;
    var $call611 = 0,
      $call615 = 0,
      $call621 = 0,
      $call622 = 0,
      $call626 = 0,
      $call629 = 0,
      $call630 = 0,
      $call635 = 0,
      $call636 = 0,
      $call64 = 0,
      $call640 = 0,
      $call646 = 0,
      $call647 = 0,
      $call651 = 0,
      $call656 = 0,
      $call661 = 0,
      $call662 = 0,
      $call666 = 0,
      $call672 = 0,
      $call673 = 0;
    var $call677 = 0,
      $call685 = 0,
      $call687 = 0,
      $call69 = 0,
      $call690 = 0,
      $call691 = 0,
      $call7 = 0,
      $call70 = 0,
      $call701 = 0,
      $call705 = 0,
      $call717 = 0,
      $call718 = 0,
      $call722 = 0,
      $call728 = 0,
      $call729 = 0,
      $call733 = 0,
      $call739 = 0,
      $call74 = 0,
      $call740 = 0,
      $call746 = 0;
    var $call748 = 0,
      $call753 = 0,
      $call763 = 0,
      $call769 = 0,
      $call774 = 0,
      $call775 = 0,
      $call779 = 0,
      $call783 = 0,
      $call784 = 0,
      $call84 = 0,
      $call85 = 0,
      $call9 = 0,
      $call90 = 0,
      $call94 = 0,
      $cmp = 0,
      $cmp102 = 0,
      $cmp109 = 0,
      $cmp143 = 0,
      $cmp154 = 0,
      $cmp160 = 0;
    var $cmp178 = 0,
      $cmp192 = 0,
      $cmp197 = 0,
      $cmp209 = 0,
      $cmp215 = 0,
      $cmp283 = 0,
      $cmp288 = 0,
      $cmp306 = 0,
      $cmp388 = 0,
      $cmp425 = 0,
      $cmp491 = 0,
      $cmp507 = 0,
      $cmp512 = 0,
      $cmp523 = 0,
      $cmp529 = 0,
      $cmp535 = 0,
      $cmp541 = 0,
      $cmp559 = 0,
      $cmp565 = 0,
      $cmp606 = 0;
    var $cmp61 = 0,
      $cmp612 = 0,
      $cmp623 = 0,
      $cmp637 = 0,
      $cmp648 = 0,
      $cmp663 = 0,
      $cmp674 = 0,
      $cmp692 = 0,
      $cmp71 = 0,
      $cmp719 = 0,
      $cmp730 = 0,
      $cmp741 = 0,
      $cmp754 = 0,
      $cmp776 = 0,
      $cmp86 = 0,
      $cmp91 = 0,
      $conv = 0,
      $conv136 = 0,
      $conv16 = 0,
      $conv237 = 0;
    var $conv26 = 0,
      $conv260 = 0,
      $conv277 = 0,
      $conv322 = 0,
      $conv351 = 0,
      $conv397 = 0,
      $conv434 = 0,
      $conv460 = 0,
      $conv552 = 0,
      $conv599 = 0,
      $conv712 = 0,
      $conv79 = 0,
      $frombool = 0,
      $isdigit = 0,
      $isdigittmp = 0,
      $ref$tmp = 0,
      $ref$tmp146 = 0,
      $ref$tmp181 = 0,
      $ref$tmp314 = 0,
      $ref$tmp315 = 0;
    var $ref$tmp700 = 0,
      $ref$tmp762 = 0,
      $retval$0 = 0,
      $retval$1 = 0,
      $retval$10 = 0,
      $retval$11 = 0,
      $retval$12 = 0,
      $retval$13 = 0,
      $retval$14 = 0,
      $retval$15 = 0,
      $retval$16 = 0,
      $retval$17 = 0,
      $retval$2 = 0,
      $retval$21 = 0,
      $retval$22 = 0,
      $retval$23 = 0,
      $retval$24 = 0,
      $retval$25 = 0,
      $retval$26 = 0,
      $retval$27 = 0;
    var $retval$28 = 0,
      $retval$29 = 0,
      $retval$3 = 0,
      $retval$30 = 0,
      $retval$31 = 0,
      $retval$32 = 0,
      $retval$33 = 0,
      $retval$34 = 0,
      $retval$35 = 0,
      $retval$36 = 0,
      $retval$37 = 0,
      $retval$42 = 0,
      $retval$43 = 0,
      $retval$47 = 0,
      $retval$48 = 0,
      $retval$49 = 0,
      $retval$7 = 0,
      $retval$8 = 0,
      $retval$9 = 0,
      label = 0;
    var sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 880) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(880 | 0);
    $agg$tmp593$byval_copy = (sp + 864) | 0;
    $agg$tmp587$byval_copy = (sp + 856) | 0;
    $agg$tmp581$byval_copy = (sp + 848) | 0;
    $agg$tmp575$byval_copy = (sp + 840) | 0;
    $agg$tmp500$byval_copy = (sp + 832) | 0;
    $agg$tmp485$byval_copy = (sp + 824) | 0;
    $agg$tmp477$byval_copy = (sp + 816) | 0;
    $agg$tmp471$byval_copy = (sp + 808) | 0;
    $agg$tmp465$byval_copy = (sp + 800) | 0;
    $agg$tmp454$byval_copy = (sp + 792) | 0;
    $agg$tmp448$byval_copy = (sp + 784) | 0;
    $agg$tmp442$byval_copy = (sp + 776) | 0;
    $agg$tmp417$byval_copy = (sp + 768) | 0;
    $agg$tmp411$byval_copy = (sp + 760) | 0;
    $agg$tmp405$byval_copy = (sp + 752) | 0;
    $agg$tmp382$byval_copy = (sp + 744) | 0;
    $agg$tmp374$byval_copy = (sp + 736) | 0;
    $agg$tmp368$byval_copy = (sp + 728) | 0;
    $agg$tmp362$byval_copy = (sp + 720) | 0;
    $agg$tmp356$byval_copy = (sp + 712) | 0;
    $agg$tmp345$byval_copy = (sp + 704) | 0;
    $agg$tmp339$byval_copy = (sp + 696) | 0;
    $agg$tmp333$byval_copy = (sp + 688) | 0;
    $agg$tmp327$byval_copy = (sp + 680) | 0;
    $agg$tmp271$byval_copy = (sp + 672) | 0;
    $agg$tmp265$byval_copy = (sp + 664) | 0;
    $agg$tmp254$byval_copy = (sp + 656) | 0;
    $agg$tmp248$byval_copy = (sp + 648) | 0;
    $agg$tmp242$byval_copy = (sp + 640) | 0;
    $agg$tmp231$byval_copy = (sp + 632) | 0;
    $agg$tmp225$byval_copy = (sp + 624) | 0;
    $agg$tmp170$byval_copy = (sp + 616) | 0;
    $agg$tmp127$byval_copy = (sp + 608) | 0;
    $agg$tmp121$byval_copy = (sp + 600) | 0;
    $agg$tmp54$byval_copy = (sp + 592) | 0;
    $agg$tmp48$byval_copy = (sp + 584) | 0;
    $agg$tmp42$byval_copy = (sp + 576) | 0;
    $agg$tmp36$byval_copy = (sp + 568) | 0;
    $agg$tmp30$byval_copy = (sp + 560) | 0;
    $agg$tmp$byval_copy = (sp + 552) | 0;
    $Global = (sp + 874) | 0;
    $agg$tmp = (sp + 544) | 0;
    $agg$tmp30 = (sp + 536) | 0;
    $agg$tmp36 = (sp + 528) | 0;
    $agg$tmp42 = (sp + 520) | 0;
    $agg$tmp48 = (sp + 512) | 0;
    $agg$tmp54 = (sp + 504) | 0;
    $Ty = (sp + 500) | 0;
    $Ty68 = (sp + 496) | 0;
    $Ty83 = (sp + 492) | 0;
    $Ex = (sp + 488) | 0;
    $Callee = (sp + 484) | 0;
    $E = (sp + 480) | 0;
    $ref$tmp = (sp + 472) | 0;
    $agg$tmp121 = (sp + 464) | 0;
    $agg$tmp127 = (sp + 456) | 0;
    $Ex140 = (sp + 448) | 0;
    $ref$tmp146 = (sp + 873) | 0;
    $T = (sp + 444) | 0;
    $Ex157 = (sp + 440) | 0;
    $agg$tmp170 = (sp + 432) | 0;
    $E175 = (sp + 424) | 0;
    $ref$tmp181 = (sp + 872) | 0;
    $LHS = (sp + 420) | 0;
    $RHS = (sp + 416) | 0;
    $LHS206 = (sp + 412) | 0;
    $RHS212 = (sp + 408) | 0;
    $agg$tmp225 = (sp + 400) | 0;
    $agg$tmp231 = (sp + 392) | 0;
    $agg$tmp242 = (sp + 384) | 0;
    $agg$tmp248 = (sp + 376) | 0;
    $agg$tmp254 = (sp + 368) | 0;
    $agg$tmp265 = (sp + 360) | 0;
    $agg$tmp271 = (sp + 352) | 0;
    $Base = (sp + 348) | 0;
    $Index = (sp + 344) | 0;
    $E303 = (sp + 340) | 0;
    $ref$tmp314 = (sp + 336) | 0;
    $ref$tmp315 = (sp + 328) | 0;
    $agg$tmp327 = (sp + 320) | 0;
    $agg$tmp333 = (sp + 312) | 0;
    $agg$tmp339 = (sp + 304) | 0;
    $agg$tmp345 = (sp + 296) | 0;
    $agg$tmp356 = (sp + 288) | 0;
    $agg$tmp362 = (sp + 280) | 0;
    $agg$tmp368 = (sp + 272) | 0;
    $agg$tmp374 = (sp + 264) | 0;
    $agg$tmp382 = (sp + 256) | 0;
    $Ex385 = (sp + 248) | 0;
    $agg$tmp405 = (sp + 240) | 0;
    $agg$tmp411 = (sp + 232) | 0;
    $agg$tmp417 = (sp + 224) | 0;
    $Ex422 = (sp + 216) | 0;
    $agg$tmp442 = (sp + 208) | 0;
    $agg$tmp448 = (sp + 200) | 0;
    $agg$tmp454 = (sp + 192) | 0;
    $agg$tmp465 = (sp + 184) | 0;
    $agg$tmp471 = (sp + 176) | 0;
    $agg$tmp477 = (sp + 168) | 0;
    $agg$tmp485 = (sp + 160) | 0;
    $Ex488 = (sp + 152) | 0;
    $agg$tmp500 = (sp + 144) | 0;
    $L = (sp + 136) | 0;
    $R = (sp + 132) | 0;
    $Cond = (sp + 128) | 0;
    $LHS532 = (sp + 124) | 0;
    $RHS538 = (sp + 120) | 0;
    $T556 = (sp + 116) | 0;
    $Ex562 = (sp + 112) | 0;
    $agg$tmp575 = (sp + 104) | 0;
    $agg$tmp581 = (sp + 96) | 0;
    $agg$tmp587 = (sp + 88) | 0;
    $agg$tmp593 = (sp + 80) | 0;
    $T603 = (sp + 72) | 0;
    $Ex609 = (sp + 68) | 0;
    $Child = (sp + 64) | 0;
    $Ty634 = (sp + 60) | 0;
    $Ex645 = (sp + 56) | 0;
    $R660 = (sp + 52) | 0;
    $FP = (sp + 48) | 0;
    $Arg = (sp + 44) | 0;
    $Pack = (sp + 40) | 0;
    $ref$tmp700 = (sp + 32) | 0;
    $Ex716 = (sp + 28) | 0;
    $Ty727 = (sp + 24) | 0;
    $Ty738 = (sp + 20) | 0;
    $E751 = (sp + 16) | 0;
    $ref$tmp762 = (sp + 8) | 0;
    $Ex773 = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11832);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
        $this,
        $agg$tmp$byval_copy
      ) | 0;
    $frombool = $call & 1;
    HEAP8[$Global >> 0] = $frombool;
    $call2 =
      __ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv(
        $this
      ) | 0;
    $cmp = $call2 >>> 0 < 2;
    L1: do {
      if ($cmp) {
        $retval$49 = 0;
      } else {
        $0 = HEAP32[$this >> 2] | 0;
        $1 = HEAP8[$0 >> 0] | 0;
        $conv = ($1 << 24) >> 24;
        do {
          switch ($conv | 0) {
            case 76: {
              $call3 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call4 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseExprPrimaryEv(
                  $call3
                ) | 0;
              $retval$49 = $call4;
              break L1;
              break;
            }
            case 84: {
              $call6 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call7 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv(
                  $call6
                ) | 0;
              $retval$49 = $call7;
              break L1;
              break;
            }
            case 102: {
              $call9 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
                  $this,
                  1
                ) | 0;
              switch (($call9 << 24) >> 24) {
                case 112: {
                  label = 7;
                  break;
                }
                case 76: {
                  $call15 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
                      $this,
                      2
                    ) | 0;
                  $conv16 = ($call15 << 24) >> 24;
                  $isdigittmp = ($conv16 + -48) | 0;
                  $isdigit = $isdigittmp >>> 0 < 10;
                  if ($isdigit) {
                    label = 7;
                  } else {
                    label = 8;
                  }
                  break;
                }
                default: {
                  label = 8;
                }
              }
              if ((label | 0) == 7) {
                $call19 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                    $this
                  ) | 0;
                $call20 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseFunctionParamEv(
                    $call19
                  ) | 0;
                $retval$49 = $call20;
                break L1;
              } else if ((label | 0) == 8) {
                $call22 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                    $this
                  ) | 0;
                $call23 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseFoldExprEv(
                    $call22
                  ) | 0;
                $retval$49 = $call23;
                break L1;
              }
              break;
            }
            case 97: {
              $arrayidx = ($0 + 1) | 0;
              $2 = HEAP8[$arrayidx >> 0] | 0;
              $conv26 = ($2 << 24) >> 24;
              switch ($conv26 | 0) {
                case 97: {
                  $add$ptr = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr;
                  $call29 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp30, 11123);
                  HEAP32[$agg$tmp30$byval_copy >> 2] =
                    HEAP32[$agg$tmp30 >> 2] | 0;
                  HEAP32[($agg$tmp30$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp30 + 4) >> 2] | 0;
                  $call31 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call29,
                      $agg$tmp30$byval_copy
                    ) | 0;
                  $retval$49 = $call31;
                  break L1;
                  break;
                }
                case 100: {
                  $add$ptr34 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr34;
                  $call35 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp36, 11121);
                  HEAP32[$agg$tmp36$byval_copy >> 2] =
                    HEAP32[$agg$tmp36 >> 2] | 0;
                  HEAP32[($agg$tmp36$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp36 + 4) >> 2] | 0;
                  $call37 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE(
                      $call35,
                      $agg$tmp36$byval_copy
                    ) | 0;
                  $retval$49 = $call37;
                  break L1;
                  break;
                }
                case 110: {
                  $add$ptr40 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr40;
                  $call41 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp42, 11121);
                  HEAP32[$agg$tmp42$byval_copy >> 2] =
                    HEAP32[$agg$tmp42 >> 2] | 0;
                  HEAP32[($agg$tmp42$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp42 + 4) >> 2] | 0;
                  $call43 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call41,
                      $agg$tmp42$byval_copy
                    ) | 0;
                  $retval$49 = $call43;
                  break L1;
                  break;
                }
                case 78: {
                  $add$ptr46 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr46;
                  $call47 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp48, 11835);
                  HEAP32[$agg$tmp48$byval_copy >> 2] =
                    HEAP32[$agg$tmp48 >> 2] | 0;
                  HEAP32[($agg$tmp48$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp48 + 4) >> 2] | 0;
                  $call49 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call47,
                      $agg$tmp48$byval_copy
                    ) | 0;
                  $retval$49 = $call49;
                  break L1;
                  break;
                }
                case 83: {
                  $add$ptr52 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr52;
                  $call53 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp54, 11838);
                  HEAP32[$agg$tmp54$byval_copy >> 2] =
                    HEAP32[$agg$tmp54 >> 2] | 0;
                  HEAP32[($agg$tmp54$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp54 + 4) >> 2] | 0;
                  $call55 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call53,
                      $agg$tmp54$byval_copy
                    ) | 0;
                  $retval$49 = $call55;
                  break L1;
                  break;
                }
                case 116: {
                  $add$ptr58 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr58;
                  $call59 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call60 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
                      $call59
                    ) | 0;
                  HEAP32[$Ty >> 2] = $call60;
                  $cmp61 = ($call60 | 0) == (0 | 0);
                  if ($cmp61) {
                    $retval$0 = 0;
                  } else {
                    $call64 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA10_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_(
                        $this,
                        11840,
                        $Ty
                      ) | 0;
                    $retval$0 = $call64;
                  }
                  $retval$49 = $retval$0;
                  break L1;
                  break;
                }
                case 122: {
                  $add$ptr67 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr67;
                  $call69 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call70 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                      $call69
                    ) | 0;
                  HEAP32[$Ty68 >> 2] = $call70;
                  $cmp71 = ($call70 | 0) == (0 | 0);
                  if ($cmp71) {
                    $retval$1 = 0;
                  } else {
                    $call74 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA10_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_(
                        $this,
                        11840,
                        $Ty68
                      ) | 0;
                    $retval$1 = $call74;
                  }
                  $retval$49 = $retval$1;
                  break L1;
                  break;
                }
                default: {
                  $retval$49 = 0;
                  break L1;
                }
              }
              break;
            }
            case 99: {
              $arrayidx78 = ($0 + 1) | 0;
              $3 = HEAP8[$arrayidx78 >> 0] | 0;
              $conv79 = ($3 << 24) >> 24;
              switch ($conv79 | 0) {
                case 99: {
                  $add$ptr82 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr82;
                  $call84 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call85 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
                      $call84
                    ) | 0;
                  HEAP32[$Ty83 >> 2] = $call85;
                  $cmp86 = ($call85 | 0) == (0 | 0);
                  if ($cmp86) {
                    $retval$3 = 0;
                  } else {
                    $call90 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                        $call84
                      ) | 0;
                    HEAP32[$Ex >> 2] = $call90;
                    $cmp91 = ($call90 | 0) == (0 | 0);
                    if ($cmp91) {
                      $retval$2 = 0;
                    } else {
                      $call94 =
                        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA11_KcRPNS0_4NodeESD_EEESC_DpOT0_(
                          $this,
                          $Ty83,
                          $Ex
                        ) | 0;
                      $retval$2 = $call94;
                    }
                    $retval$3 = $retval$2;
                  }
                  $retval$49 = $retval$3;
                  break L1;
                  break;
                }
                case 108: {
                  $add$ptr99 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr99;
                  $call100 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call101 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                      $call100
                    ) | 0;
                  HEAP32[$Callee >> 2] = $call101;
                  $cmp102 = ($call101 | 0) == (0 | 0);
                  do {
                    if ($cmp102) {
                      $retval$7 = 0;
                    } else {
                      $Names = ($this + 8) | 0;
                      $call105 =
                        __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv(
                          $Names
                        ) | 0;
                      while (1) {
                        $call106 =
                          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                            $this,
                            69
                          ) | 0;
                        if ($call106) {
                          label = 33;
                          break;
                        }
                        $call108 =
                          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                            $call100
                          ) | 0;
                        HEAP32[$E >> 2] = $call108;
                        $cmp109 = ($call108 | 0) == (0 | 0);
                        if ($cmp109) {
                          label = 31;
                          break;
                        }
                        __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
                          $Names,
                          $E
                        );
                      }
                      if ((label | 0) == 31) {
                        $retval$7 = 0;
                        break;
                      } else if ((label | 0) == 33) {
                        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm(
                          $ref$tmp,
                          $this,
                          $call105
                        );
                        $call114 =
                          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CallExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_(
                            $this,
                            $Callee,
                            $ref$tmp
                          ) | 0;
                        $retval$7 = $call114;
                        break;
                      }
                    }
                  } while (0);
                  $retval$49 = $retval$7;
                  break L1;
                  break;
                }
                case 109: {
                  $add$ptr119 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr119;
                  $call120 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp121, 11850);
                  HEAP32[$agg$tmp121$byval_copy >> 2] =
                    HEAP32[$agg$tmp121 >> 2] | 0;
                  HEAP32[($agg$tmp121$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp121 + 4) >> 2] | 0;
                  $call122 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call120,
                      $agg$tmp121$byval_copy
                    ) | 0;
                  $retval$49 = $call122;
                  break L1;
                  break;
                }
                case 111: {
                  $add$ptr125 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr125;
                  $call126 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp127, 11852);
                  HEAP32[$agg$tmp127$byval_copy >> 2] =
                    HEAP32[$agg$tmp127 >> 2] | 0;
                  HEAP32[($agg$tmp127$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp127 + 4) >> 2] | 0;
                  $call128 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE(
                      $call126,
                      $agg$tmp127$byval_copy
                    ) | 0;
                  $retval$49 = $call128;
                  break L1;
                  break;
                }
                case 118: {
                  $call130 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call131 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseConversionExprEv(
                      $call130
                    ) | 0;
                  $retval$49 = $call131;
                  break L1;
                  break;
                }
                default: {
                  $retval$49 = 0;
                  break L1;
                }
              }
              break;
            }
            case 100: {
              $arrayidx135 = ($0 + 1) | 0;
              $4 = HEAP8[$arrayidx135 >> 0] | 0;
              $conv136 = ($4 << 24) >> 24;
              switch ($conv136 | 0) {
                case 97: {
                  $add$ptr139 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr139;
                  $call141 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call142 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                      $call141
                    ) | 0;
                  HEAP32[$Ex140 >> 2] = $call142;
                  $cmp143 = ($call142 | 0) == (0 | 0);
                  if ($cmp143) {
                    $retval$8 = 0;
                  } else {
                    HEAP8[$ref$tmp146 >> 0] = 1;
                    $call147 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10DeleteExprEJRPNS0_4NodeERbbEEES9_DpOT0_(
                        $this,
                        $Ex140,
                        $Global,
                        $ref$tmp146
                      ) | 0;
                    $retval$8 = $call147;
                  }
                  $retval$49 = $retval$8;
                  break L1;
                  break;
                }
                case 99: {
                  $add$ptr151 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr151;
                  $call152 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call153 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
                      $call152
                    ) | 0;
                  HEAP32[$T >> 2] = $call153;
                  $cmp154 = ($call153 | 0) == (0 | 0);
                  if ($cmp154) {
                    $retval$10 = 0;
                  } else {
                    $call159 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                        $call152
                      ) | 0;
                    HEAP32[$Ex157 >> 2] = $call159;
                    $cmp160 = ($call159 | 0) == (0 | 0);
                    if ($cmp160) {
                      $retval$9 = 0;
                    } else {
                      $call163 =
                        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA13_KcRPNS0_4NodeESD_EEESC_DpOT0_(
                          $this,
                          $T,
                          $Ex157
                        ) | 0;
                      $retval$9 = $call163;
                    }
                    $retval$10 = $retval$9;
                  }
                  $retval$49 = $retval$10;
                  break L1;
                  break;
                }
                case 101: {
                  $add$ptr168 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr168;
                  $call169 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp170, 11188);
                  HEAP32[$agg$tmp170$byval_copy >> 2] =
                    HEAP32[$agg$tmp170 >> 2] | 0;
                  HEAP32[($agg$tmp170$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp170 + 4) >> 2] | 0;
                  $call171 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE(
                      $call169,
                      $agg$tmp170$byval_copy
                    ) | 0;
                  $retval$49 = $call171;
                  break L1;
                  break;
                }
                case 108: {
                  $add$ptr174 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr174;
                  $call176 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call177 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                      $call176
                    ) | 0;
                  HEAP32[$E175 >> 2] = $call177;
                  $cmp178 = ($call177 | 0) == (0 | 0);
                  if ($cmp178) {
                    $retval$11 = 0;
                  } else {
                    HEAP8[$ref$tmp181 >> 0] = 0;
                    $call182 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10DeleteExprEJRPNS0_4NodeERbbEEES9_DpOT0_(
                        $this,
                        $E175,
                        $Global,
                        $ref$tmp181
                      ) | 0;
                    $retval$11 = $call182;
                  }
                  $retval$49 = $retval$11;
                  break L1;
                  break;
                }
                case 110: {
                  $call185 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call186 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv(
                      $call185
                    ) | 0;
                  $retval$49 = $call186;
                  break L1;
                  break;
                }
                case 115: {
                  $add$ptr189 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr189;
                  $call190 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call191 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                      $call190
                    ) | 0;
                  HEAP32[$LHS >> 2] = $call191;
                  $cmp192 = ($call191 | 0) == (0 | 0);
                  if ($cmp192) {
                    $retval$13 = 0;
                  } else {
                    $call196 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                        $call190
                      ) | 0;
                    HEAP32[$RHS >> 2] = $call196;
                    $cmp197 = ($call196 | 0) == (0 | 0);
                    if ($cmp197) {
                      $retval$12 = 0;
                    } else {
                      $call200 =
                        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA3_KcSA_EEES9_DpOT0_(
                          $this,
                          $LHS,
                          11854,
                          $RHS
                        ) | 0;
                      $retval$12 = $call200;
                    }
                    $retval$13 = $retval$12;
                  }
                  $retval$49 = $retval$13;
                  break L1;
                  break;
                }
                case 116: {
                  $add$ptr205 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr205;
                  $call207 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call208 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                      $call207
                    ) | 0;
                  HEAP32[$LHS206 >> 2] = $call208;
                  $cmp209 = ($call208 | 0) == (0 | 0);
                  if ($cmp209) {
                    $retval$15 = 0;
                  } else {
                    $call214 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                        $call207
                      ) | 0;
                    HEAP32[$RHS212 >> 2] = $call214;
                    $cmp215 = ($call214 | 0) == (0 | 0);
                    if ($cmp215) {
                      $retval$14 = 0;
                    } else {
                      $call218 =
                        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA2_KcSA_EEES9_DpOT0_(
                          $this,
                          $LHS206,
                          $RHS212
                        ) | 0;
                      $retval$14 = $call218;
                    }
                    $retval$15 = $retval$14;
                  }
                  $retval$49 = $retval$15;
                  break L1;
                  break;
                }
                case 118: {
                  $add$ptr223 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr223;
                  $call224 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp225, 11857);
                  HEAP32[$agg$tmp225$byval_copy >> 2] =
                    HEAP32[$agg$tmp225 >> 2] | 0;
                  HEAP32[($agg$tmp225$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp225 + 4) >> 2] | 0;
                  $call226 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call224,
                      $agg$tmp225$byval_copy
                    ) | 0;
                  $retval$49 = $call226;
                  break L1;
                  break;
                }
                case 86: {
                  $add$ptr229 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr229;
                  $call230 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp231, 11859);
                  HEAP32[$agg$tmp231$byval_copy >> 2] =
                    HEAP32[$agg$tmp231 >> 2] | 0;
                  HEAP32[($agg$tmp231$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp231 + 4) >> 2] | 0;
                  $call232 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call230,
                      $agg$tmp231$byval_copy
                    ) | 0;
                  $retval$49 = $call232;
                  break L1;
                  break;
                }
                default: {
                  $retval$49 = 0;
                  break L1;
                }
              }
              break;
            }
            case 101: {
              $arrayidx236 = ($0 + 1) | 0;
              $5 = HEAP8[$arrayidx236 >> 0] | 0;
              $conv237 = ($5 << 24) >> 24;
              switch ($conv237 | 0) {
                case 111: {
                  $add$ptr240 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr240;
                  $call241 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp242, 11862);
                  HEAP32[$agg$tmp242$byval_copy >> 2] =
                    HEAP32[$agg$tmp242 >> 2] | 0;
                  HEAP32[($agg$tmp242$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp242 + 4) >> 2] | 0;
                  $call243 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call241,
                      $agg$tmp242$byval_copy
                    ) | 0;
                  $retval$49 = $call243;
                  break L1;
                  break;
                }
                case 79: {
                  $add$ptr246 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr246;
                  $call247 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp248, 11864);
                  HEAP32[$agg$tmp248$byval_copy >> 2] =
                    HEAP32[$agg$tmp248 >> 2] | 0;
                  HEAP32[($agg$tmp248$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp248 + 4) >> 2] | 0;
                  $call249 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call247,
                      $agg$tmp248$byval_copy
                    ) | 0;
                  $retval$49 = $call249;
                  break L1;
                  break;
                }
                case 113: {
                  $add$ptr252 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr252;
                  $call253 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp254, 11867);
                  HEAP32[$agg$tmp254$byval_copy >> 2] =
                    HEAP32[$agg$tmp254 >> 2] | 0;
                  HEAP32[($agg$tmp254$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp254 + 4) >> 2] | 0;
                  $call255 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call253,
                      $agg$tmp254$byval_copy
                    ) | 0;
                  $retval$49 = $call255;
                  break L1;
                  break;
                }
                default: {
                  $retval$49 = 0;
                  break L1;
                }
              }
              break;
            }
            case 103: {
              $arrayidx259 = ($0 + 1) | 0;
              $6 = HEAP8[$arrayidx259 >> 0] | 0;
              $conv260 = ($6 << 24) >> 24;
              switch ($conv260 | 0) {
                case 101: {
                  $add$ptr263 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr263;
                  $call264 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp265, 11870);
                  HEAP32[$agg$tmp265$byval_copy >> 2] =
                    HEAP32[$agg$tmp265 >> 2] | 0;
                  HEAP32[($agg$tmp265$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp265 + 4) >> 2] | 0;
                  $call266 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call264,
                      $agg$tmp265$byval_copy
                    ) | 0;
                  $retval$49 = $call266;
                  break L1;
                  break;
                }
                case 116: {
                  $add$ptr269 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr269;
                  $call270 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp271, 11194);
                  HEAP32[$agg$tmp271$byval_copy >> 2] =
                    HEAP32[$agg$tmp271 >> 2] | 0;
                  HEAP32[($agg$tmp271$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp271 + 4) >> 2] | 0;
                  $call272 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call270,
                      $agg$tmp271$byval_copy
                    ) | 0;
                  $retval$49 = $call272;
                  break L1;
                  break;
                }
                default: {
                  $retval$49 = 0;
                  break L1;
                }
              }
              break;
            }
            case 105: {
              $arrayidx276 = ($0 + 1) | 0;
              $7 = HEAP8[$arrayidx276 >> 0] | 0;
              $conv277 = ($7 << 24) >> 24;
              switch ($conv277 | 0) {
                case 120: {
                  $add$ptr280 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr280;
                  $call281 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call282 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                      $call281
                    ) | 0;
                  HEAP32[$Base >> 2] = $call282;
                  $cmp283 = ($call282 | 0) == (0 | 0);
                  if ($cmp283) {
                    $retval$17 = 0;
                  } else {
                    $call287 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                        $call281
                      ) | 0;
                    HEAP32[$Index >> 2] = $call287;
                    $cmp288 = ($call287 | 0) == (0 | 0);
                    if ($cmp288) {
                      $retval$16 = 0;
                    } else {
                      $call291 =
                        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_18ArraySubscriptExprEJRPNS0_4NodeESA_EEES9_DpOT0_(
                          $this,
                          $Base,
                          $Index
                        ) | 0;
                      $retval$16 = $call291;
                    }
                    $retval$17 = $retval$16;
                  }
                  $retval$49 = $retval$17;
                  break L1;
                  break;
                }
                case 108: {
                  break;
                }
                default: {
                  $retval$49 = 0;
                  break L1;
                }
              }
              $add$ptr296 = ($0 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr296;
              $Names297 = ($this + 8) | 0;
              $call298 =
                __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv(
                  $Names297
                ) | 0;
              while (1) {
                $call300 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                    $this,
                    69
                  ) | 0;
                if ($call300) {
                  label = 82;
                  break;
                }
                $call304 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                    $this
                  ) | 0;
                $call305 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv(
                    $call304
                  ) | 0;
                HEAP32[$E303 >> 2] = $call305;
                $cmp306 = ($call305 | 0) == (0 | 0);
                if ($cmp306) {
                  label = 81;
                  break;
                }
                __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
                  $Names297,
                  $E303
                );
              }
              if ((label | 0) == 81) {
                $retval$49 = 0;
                break L1;
              } else if ((label | 0) == 82) {
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm(
                  $ref$tmp315,
                  $this,
                  $call298
                );
                $call316 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12InitListExprEJDnNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_(
                    $this,
                    $ref$tmp314,
                    $ref$tmp315
                  ) | 0;
                $retval$49 = $call316;
                break L1;
              }
              break;
            }
            case 108: {
              $arrayidx321 = ($0 + 1) | 0;
              $8 = HEAP8[$arrayidx321 >> 0] | 0;
              $conv322 = ($8 << 24) >> 24;
              switch ($conv322 | 0) {
                case 101: {
                  $add$ptr325 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr325;
                  $call326 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp327, 11873);
                  HEAP32[$agg$tmp327$byval_copy >> 2] =
                    HEAP32[$agg$tmp327 >> 2] | 0;
                  HEAP32[($agg$tmp327$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp327 + 4) >> 2] | 0;
                  $call328 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call326,
                      $agg$tmp327$byval_copy
                    ) | 0;
                  $retval$49 = $call328;
                  break L1;
                  break;
                }
                case 115: {
                  $add$ptr331 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr331;
                  $call332 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp333, 11876);
                  HEAP32[$agg$tmp333$byval_copy >> 2] =
                    HEAP32[$agg$tmp333 >> 2] | 0;
                  HEAP32[($agg$tmp333$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp333 + 4) >> 2] | 0;
                  $call334 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call332,
                      $agg$tmp333$byval_copy
                    ) | 0;
                  $retval$49 = $call334;
                  break L1;
                  break;
                }
                case 83: {
                  $add$ptr337 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr337;
                  $call338 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp339, 11879);
                  HEAP32[$agg$tmp339$byval_copy >> 2] =
                    HEAP32[$agg$tmp339 >> 2] | 0;
                  HEAP32[($agg$tmp339$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp339 + 4) >> 2] | 0;
                  $call340 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call338,
                      $agg$tmp339$byval_copy
                    ) | 0;
                  $retval$49 = $call340;
                  break L1;
                  break;
                }
                case 116: {
                  $add$ptr343 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr343;
                  $call344 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp345, 11301);
                  HEAP32[$agg$tmp345$byval_copy >> 2] =
                    HEAP32[$agg$tmp345 >> 2] | 0;
                  HEAP32[($agg$tmp345$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp345 + 4) >> 2] | 0;
                  $call346 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call344,
                      $agg$tmp345$byval_copy
                    ) | 0;
                  $retval$49 = $call346;
                  break L1;
                  break;
                }
                default: {
                  $retval$49 = 0;
                  break L1;
                }
              }
              break;
            }
            case 109: {
              $arrayidx350 = ($0 + 1) | 0;
              $9 = HEAP8[$arrayidx350 >> 0] | 0;
              $conv351 = ($9 << 24) >> 24;
              switch ($conv351 | 0) {
                case 105: {
                  $add$ptr354 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr354;
                  $call355 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp356, 11722);
                  HEAP32[$agg$tmp356$byval_copy >> 2] =
                    HEAP32[$agg$tmp356 >> 2] | 0;
                  HEAP32[($agg$tmp356$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp356 + 4) >> 2] | 0;
                  $call357 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call355,
                      $agg$tmp356$byval_copy
                    ) | 0;
                  $retval$49 = $call357;
                  break L1;
                  break;
                }
                case 73: {
                  $add$ptr360 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr360;
                  $call361 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp362, 11883);
                  HEAP32[$agg$tmp362$byval_copy >> 2] =
                    HEAP32[$agg$tmp362 >> 2] | 0;
                  HEAP32[($agg$tmp362$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp362 + 4) >> 2] | 0;
                  $call363 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call361,
                      $agg$tmp362$byval_copy
                    ) | 0;
                  $retval$49 = $call363;
                  break L1;
                  break;
                }
                case 108: {
                  $add$ptr366 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr366;
                  $call367 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp368, 11188);
                  HEAP32[$agg$tmp368$byval_copy >> 2] =
                    HEAP32[$agg$tmp368 >> 2] | 0;
                  HEAP32[($agg$tmp368$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp368 + 4) >> 2] | 0;
                  $call369 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call367,
                      $agg$tmp368$byval_copy
                    ) | 0;
                  $retval$49 = $call369;
                  break L1;
                  break;
                }
                case 76: {
                  $add$ptr372 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr372;
                  $call373 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp374, 11886);
                  HEAP32[$agg$tmp374$byval_copy >> 2] =
                    HEAP32[$agg$tmp374 >> 2] | 0;
                  HEAP32[($agg$tmp374$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp374 + 4) >> 2] | 0;
                  $call375 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call373,
                      $agg$tmp374$byval_copy
                    ) | 0;
                  $retval$49 = $call375;
                  break L1;
                  break;
                }
                case 109: {
                  $add$ptr378 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr378;
                  $call379 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                      $this,
                      95
                    ) | 0;
                  if ($call379) {
                    $call381 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                        $this
                      ) | 0;
                    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp382, 11889);
                    HEAP32[$agg$tmp382$byval_copy >> 2] =
                      HEAP32[$agg$tmp382 >> 2] | 0;
                    HEAP32[($agg$tmp382$byval_copy + 4) >> 2] =
                      HEAP32[($agg$tmp382 + 4) >> 2] | 0;
                    $call383 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE(
                        $call381,
                        $agg$tmp382$byval_copy
                      ) | 0;
                    $retval$49 = $call383;
                    break L1;
                  }
                  $call386 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call387 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                      $call386
                    ) | 0;
                  HEAP32[$Ex385 >> 2] = $call387;
                  $cmp388 = ($call387 | 0) == (0 | 0);
                  if ($cmp388) {
                    $retval$21 = 0;
                  } else {
                    $call391 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PostfixExprEJRPNS0_4NodeERA3_KcEEES9_DpOT0_(
                        $this,
                        $Ex385,
                        11889
                      ) | 0;
                    $retval$21 = $call391;
                  }
                  $retval$49 = $retval$21;
                  break L1;
                  break;
                }
                default: {
                  $retval$49 = 0;
                  break L1;
                }
              }
              break;
            }
            case 110: {
              $arrayidx396 = ($0 + 1) | 0;
              $10 = HEAP8[$arrayidx396 >> 0] | 0;
              $conv397 = ($10 << 24) >> 24;
              switch ($conv397 | 0) {
                case 119:
                case 97: {
                  $call399 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call400 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseNewExprEv(
                      $call399
                    ) | 0;
                  $retval$49 = $call400;
                  break L1;
                  break;
                }
                case 101: {
                  $add$ptr403 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr403;
                  $call404 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp405, 11892);
                  HEAP32[$agg$tmp405$byval_copy >> 2] =
                    HEAP32[$agg$tmp405 >> 2] | 0;
                  HEAP32[($agg$tmp405$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp405 + 4) >> 2] | 0;
                  $call406 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call404,
                      $agg$tmp405$byval_copy
                    ) | 0;
                  $retval$49 = $call406;
                  break L1;
                  break;
                }
                case 103: {
                  $add$ptr409 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr409;
                  $call410 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp411, 11722);
                  HEAP32[$agg$tmp411$byval_copy >> 2] =
                    HEAP32[$agg$tmp411 >> 2] | 0;
                  HEAP32[($agg$tmp411$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp411 + 4) >> 2] | 0;
                  $call412 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE(
                      $call410,
                      $agg$tmp411$byval_copy
                    ) | 0;
                  $retval$49 = $call412;
                  break L1;
                  break;
                }
                case 116: {
                  $add$ptr415 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr415;
                  $call416 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp417, 11895);
                  HEAP32[$agg$tmp417$byval_copy >> 2] =
                    HEAP32[$agg$tmp417 >> 2] | 0;
                  HEAP32[($agg$tmp417$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp417 + 4) >> 2] | 0;
                  $call418 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE(
                      $call416,
                      $agg$tmp417$byval_copy
                    ) | 0;
                  $retval$49 = $call418;
                  break L1;
                  break;
                }
                case 120: {
                  $add$ptr421 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr421;
                  $call423 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call424 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                      $call423
                    ) | 0;
                  HEAP32[$Ex422 >> 2] = $call424;
                  $cmp425 = ($call424 | 0) == (0 | 0);
                  if ($cmp425) {
                    $retval$22 = 0;
                  } else {
                    $call428 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA11_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_(
                        $this,
                        $Ex422
                      ) | 0;
                    $retval$22 = $call428;
                  }
                  $retval$49 = $retval$22;
                  break L1;
                  break;
                }
                default: {
                  $retval$49 = 0;
                  break L1;
                }
              }
              break;
            }
            case 111: {
              $arrayidx433 = ($0 + 1) | 0;
              $11 = HEAP8[$arrayidx433 >> 0] | 0;
              $conv434 = ($11 << 24) >> 24;
              switch ($conv434 | 0) {
                case 110: {
                  $call436 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call437 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv(
                      $call436
                    ) | 0;
                  $retval$49 = $call437;
                  break L1;
                  break;
                }
                case 111: {
                  $add$ptr440 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr440;
                  $call441 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp442, 11897);
                  HEAP32[$agg$tmp442$byval_copy >> 2] =
                    HEAP32[$agg$tmp442 >> 2] | 0;
                  HEAP32[($agg$tmp442$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp442 + 4) >> 2] | 0;
                  $call443 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call441,
                      $agg$tmp442$byval_copy
                    ) | 0;
                  $retval$49 = $call443;
                  break L1;
                  break;
                }
                case 114: {
                  $add$ptr446 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr446;
                  $call447 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp448, 11900);
                  HEAP32[$agg$tmp448$byval_copy >> 2] =
                    HEAP32[$agg$tmp448 >> 2] | 0;
                  HEAP32[($agg$tmp448$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp448 + 4) >> 2] | 0;
                  $call449 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call447,
                      $agg$tmp448$byval_copy
                    ) | 0;
                  $retval$49 = $call449;
                  break L1;
                  break;
                }
                case 82: {
                  $add$ptr452 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr452;
                  $call453 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp454, 11902);
                  HEAP32[$agg$tmp454$byval_copy >> 2] =
                    HEAP32[$agg$tmp454 >> 2] | 0;
                  HEAP32[($agg$tmp454$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp454 + 4) >> 2] | 0;
                  $call455 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call453,
                      $agg$tmp454$byval_copy
                    ) | 0;
                  $retval$49 = $call455;
                  break L1;
                  break;
                }
                default: {
                  $retval$49 = 0;
                  break L1;
                }
              }
              break;
            }
            case 112: {
              $arrayidx459 = ($0 + 1) | 0;
              $12 = HEAP8[$arrayidx459 >> 0] | 0;
              $conv460 = ($12 << 24) >> 24;
              switch ($conv460 | 0) {
                case 109: {
                  $add$ptr463 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr463;
                  $call464 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp465, 11905);
                  HEAP32[$agg$tmp465$byval_copy >> 2] =
                    HEAP32[$agg$tmp465 >> 2] | 0;
                  HEAP32[($agg$tmp465$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp465 + 4) >> 2] | 0;
                  $call466 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call464,
                      $agg$tmp465$byval_copy
                    ) | 0;
                  $retval$49 = $call466;
                  break L1;
                  break;
                }
                case 108: {
                  $add$ptr469 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr469;
                  $call470 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp471, 11909);
                  HEAP32[$agg$tmp471$byval_copy >> 2] =
                    HEAP32[$agg$tmp471 >> 2] | 0;
                  HEAP32[($agg$tmp471$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp471 + 4) >> 2] | 0;
                  $call472 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call470,
                      $agg$tmp471$byval_copy
                    ) | 0;
                  $retval$49 = $call472;
                  break L1;
                  break;
                }
                case 76: {
                  $add$ptr475 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr475;
                  $call476 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp477, 11911);
                  HEAP32[$agg$tmp477$byval_copy >> 2] =
                    HEAP32[$agg$tmp477 >> 2] | 0;
                  HEAP32[($agg$tmp477$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp477 + 4) >> 2] | 0;
                  $call478 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call476,
                      $agg$tmp477$byval_copy
                    ) | 0;
                  $retval$49 = $call478;
                  break L1;
                  break;
                }
                case 112: {
                  $add$ptr481 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr481;
                  $call482 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                      $this,
                      95
                    ) | 0;
                  if ($call482) {
                    $call484 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                        $this
                      ) | 0;
                    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp485, 11914);
                    HEAP32[$agg$tmp485$byval_copy >> 2] =
                      HEAP32[$agg$tmp485 >> 2] | 0;
                    HEAP32[($agg$tmp485$byval_copy + 4) >> 2] =
                      HEAP32[($agg$tmp485 + 4) >> 2] | 0;
                    $call486 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE(
                        $call484,
                        $agg$tmp485$byval_copy
                      ) | 0;
                    $retval$49 = $call486;
                    break L1;
                  }
                  $call489 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call490 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                      $call489
                    ) | 0;
                  HEAP32[$Ex488 >> 2] = $call490;
                  $cmp491 = ($call490 | 0) == (0 | 0);
                  if ($cmp491) {
                    $retval$23 = 0;
                  } else {
                    $call494 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PostfixExprEJRPNS0_4NodeERA3_KcEEES9_DpOT0_(
                        $this,
                        $Ex488,
                        11914
                      ) | 0;
                    $retval$23 = $call494;
                  }
                  $retval$49 = $retval$23;
                  break L1;
                  break;
                }
                case 115: {
                  $add$ptr498 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr498;
                  $call499 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp500, 11909);
                  HEAP32[$agg$tmp500$byval_copy >> 2] =
                    HEAP32[$agg$tmp500 >> 2] | 0;
                  HEAP32[($agg$tmp500$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp500 + 4) >> 2] | 0;
                  $call501 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE(
                      $call499,
                      $agg$tmp500$byval_copy
                    ) | 0;
                  $retval$49 = $call501;
                  break L1;
                  break;
                }
                case 116: {
                  $add$ptr504 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr504;
                  $call505 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call506 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                      $call505
                    ) | 0;
                  HEAP32[$L >> 2] = $call506;
                  $cmp507 = ($call506 | 0) == (0 | 0);
                  if ($cmp507) {
                    $retval$25 = 0;
                  } else {
                    $call511 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                        $call505
                      ) | 0;
                    HEAP32[$R >> 2] = $call511;
                    $cmp512 = ($call511 | 0) == (0 | 0);
                    if ($cmp512) {
                      $retval$24 = 0;
                    } else {
                      $call515 =
                        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA3_KcSA_EEES9_DpOT0_(
                          $this,
                          $L,
                          11917,
                          $R
                        ) | 0;
                      $retval$24 = $call515;
                    }
                    $retval$25 = $retval$24;
                  }
                  $retval$49 = $retval$25;
                  break L1;
                  break;
                }
                default: {
                  $retval$49 = 0;
                  break L1;
                }
              }
              break;
            }
            case 113: {
              $arrayidx521 = ($0 + 1) | 0;
              $13 = HEAP8[$arrayidx521 >> 0] | 0;
              $cmp523 = ($13 << 24) >> 24 == 117;
              if (!$cmp523) {
                $retval$49 = 0;
                break L1;
              }
              $add$ptr526 = ($0 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr526;
              $call527 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call528 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                  $call527
                ) | 0;
              HEAP32[$Cond >> 2] = $call528;
              $cmp529 = ($call528 | 0) == (0 | 0);
              if ($cmp529) {
                $retval$28 = 0;
              } else {
                $call534 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                    $call527
                  ) | 0;
                HEAP32[$LHS532 >> 2] = $call534;
                $cmp535 = ($call534 | 0) == (0 | 0);
                if ($cmp535) {
                  $retval$27 = 0;
                } else {
                  $call540 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                      $call527
                    ) | 0;
                  HEAP32[$RHS538 >> 2] = $call540;
                  $cmp541 = ($call540 | 0) == (0 | 0);
                  if ($cmp541) {
                    $retval$26 = 0;
                  } else {
                    $call544 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15ConditionalExprEJRPNS0_4NodeESA_SA_EEES9_DpOT0_(
                        $this,
                        $Cond,
                        $LHS532,
                        $RHS538
                      ) | 0;
                    $retval$26 = $call544;
                  }
                  $retval$27 = $retval$26;
                }
                $retval$28 = $retval$27;
              }
              $retval$49 = $retval$28;
              break L1;
              break;
            }
            case 114: {
              $arrayidx551 = ($0 + 1) | 0;
              $14 = HEAP8[$arrayidx551 >> 0] | 0;
              $conv552 = ($14 << 24) >> 24;
              switch ($conv552 | 0) {
                case 99: {
                  $add$ptr555 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr555;
                  $call557 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call558 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
                      $call557
                    ) | 0;
                  HEAP32[$T556 >> 2] = $call558;
                  $cmp559 = ($call558 | 0) == (0 | 0);
                  if ($cmp559) {
                    $retval$30 = 0;
                  } else {
                    $call564 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                        $call557
                      ) | 0;
                    HEAP32[$Ex562 >> 2] = $call564;
                    $cmp565 = ($call564 | 0) == (0 | 0);
                    if ($cmp565) {
                      $retval$29 = 0;
                    } else {
                      $call568 =
                        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA17_KcRPNS0_4NodeESD_EEESC_DpOT0_(
                          $this,
                          $T556,
                          $Ex562
                        ) | 0;
                      $retval$29 = $call568;
                    }
                    $retval$30 = $retval$29;
                  }
                  $retval$49 = $retval$30;
                  break L1;
                  break;
                }
                case 109: {
                  $add$ptr573 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr573;
                  $call574 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp575, 11920);
                  HEAP32[$agg$tmp575$byval_copy >> 2] =
                    HEAP32[$agg$tmp575 >> 2] | 0;
                  HEAP32[($agg$tmp575$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp575 + 4) >> 2] | 0;
                  $call576 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call574,
                      $agg$tmp575$byval_copy
                    ) | 0;
                  $retval$49 = $call576;
                  break L1;
                  break;
                }
                case 77: {
                  $add$ptr579 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr579;
                  $call580 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp581, 11922);
                  HEAP32[$agg$tmp581$byval_copy >> 2] =
                    HEAP32[$agg$tmp581 >> 2] | 0;
                  HEAP32[($agg$tmp581$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp581 + 4) >> 2] | 0;
                  $call582 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call580,
                      $agg$tmp581$byval_copy
                    ) | 0;
                  $retval$49 = $call582;
                  break L1;
                  break;
                }
                case 115: {
                  $add$ptr585 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr585;
                  $call586 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp587, 11925);
                  HEAP32[$agg$tmp587$byval_copy >> 2] =
                    HEAP32[$agg$tmp587 >> 2] | 0;
                  HEAP32[($agg$tmp587$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp587 + 4) >> 2] | 0;
                  $call588 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call586,
                      $agg$tmp587$byval_copy
                    ) | 0;
                  $retval$49 = $call588;
                  break L1;
                  break;
                }
                case 83: {
                  $add$ptr591 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr591;
                  $call592 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp593, 11928);
                  HEAP32[$agg$tmp593$byval_copy >> 2] =
                    HEAP32[$agg$tmp593 >> 2] | 0;
                  HEAP32[($agg$tmp593$byval_copy + 4) >> 2] =
                    HEAP32[($agg$tmp593 + 4) >> 2] | 0;
                  $call594 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
                      $call592,
                      $agg$tmp593$byval_copy
                    ) | 0;
                  $retval$49 = $call594;
                  break L1;
                  break;
                }
                default: {
                  $retval$49 = 0;
                  break L1;
                }
              }
              break;
            }
            case 115: {
              $arrayidx598 = ($0 + 1) | 0;
              $15 = HEAP8[$arrayidx598 >> 0] | 0;
              $conv599 = ($15 << 24) >> 24;
              switch ($conv599 | 0) {
                case 99: {
                  $add$ptr602 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr602;
                  $call604 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call605 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
                      $call604
                    ) | 0;
                  HEAP32[$T603 >> 2] = $call605;
                  $cmp606 = ($call605 | 0) == (0 | 0);
                  if ($cmp606) {
                    $retval$32 = 0;
                  } else {
                    $call611 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                        $call604
                      ) | 0;
                    HEAP32[$Ex609 >> 2] = $call611;
                    $cmp612 = ($call611 | 0) == (0 | 0);
                    if ($cmp612) {
                      $retval$31 = 0;
                    } else {
                      $call615 =
                        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA12_KcRPNS0_4NodeESD_EEESC_DpOT0_(
                          $this,
                          $T603,
                          $Ex609
                        ) | 0;
                      $retval$31 = $call615;
                    }
                    $retval$32 = $retval$31;
                  }
                  $retval$49 = $retval$32;
                  break L1;
                  break;
                }
                case 112: {
                  $add$ptr620 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr620;
                  $call621 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call622 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                      $call621
                    ) | 0;
                  HEAP32[$Child >> 2] = $call622;
                  $cmp623 = ($call622 | 0) == (0 | 0);
                  if ($cmp623) {
                    $retval$33 = 0;
                  } else {
                    $call626 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ParameterPackExpansionEJRPNS0_4NodeEEEES9_DpOT0_(
                        $this,
                        $Child
                      ) | 0;
                    $retval$33 = $call626;
                  }
                  $retval$49 = $retval$33;
                  break L1;
                  break;
                }
                case 114: {
                  $call629 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call630 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv(
                      $call629
                    ) | 0;
                  $retval$49 = $call630;
                  break L1;
                  break;
                }
                case 116: {
                  $add$ptr633 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr633;
                  $call635 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call636 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
                      $call635
                    ) | 0;
                  HEAP32[$Ty634 >> 2] = $call636;
                  $cmp637 = ($call636 | 0) == (0 | 0);
                  if ($cmp637) {
                    $retval$34 = 0;
                  } else {
                    $call640 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_(
                        $this,
                        11932,
                        $Ty634
                      ) | 0;
                    $retval$34 = $call640;
                  }
                  $retval$49 = $retval$34;
                  break L1;
                  break;
                }
                case 122: {
                  $add$ptr644 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr644;
                  $call646 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call647 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                      $call646
                    ) | 0;
                  HEAP32[$Ex645 >> 2] = $call647;
                  $cmp648 = ($call647 | 0) == (0 | 0);
                  if ($cmp648) {
                    $retval$35 = 0;
                  } else {
                    $call651 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_(
                        $this,
                        11932,
                        $Ex645
                      ) | 0;
                    $retval$35 = $call651;
                  }
                  $retval$49 = $retval$35;
                  break L1;
                  break;
                }
                case 90: {
                  $add$ptr655 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr655;
                  $call656 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
                      $this,
                      0
                    ) | 0;
                  switch (($call656 << 24) >> 24) {
                    case 84: {
                      $call661 =
                        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                          $this
                        ) | 0;
                      $call662 =
                        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv(
                          $call661
                        ) | 0;
                      HEAP32[$R660 >> 2] = $call662;
                      $cmp663 = ($call662 | 0) == (0 | 0);
                      if ($cmp663) {
                        $retval$36 = 0;
                      } else {
                        $call666 =
                          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SizeofParamPackExprEJRPNS0_4NodeEEEES9_DpOT0_(
                            $this,
                            $R660
                          ) | 0;
                        $retval$36 = $call666;
                      }
                      $retval$49 = $retval$36;
                      break L1;
                      break;
                    }
                    case 102: {
                      $call672 =
                        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                          $this
                        ) | 0;
                      $call673 =
                        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseFunctionParamEv(
                          $call672
                        ) | 0;
                      HEAP32[$FP >> 2] = $call673;
                      $cmp674 = ($call673 | 0) == (0 | 0);
                      if ($cmp674) {
                        $retval$37 = 0;
                      } else {
                        $call677 =
                          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA12_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_(
                            $this,
                            $FP
                          ) | 0;
                        $retval$37 = $call677;
                      }
                      $retval$49 = $retval$37;
                      break L1;
                      break;
                    }
                    default: {
                      $retval$49 = 0;
                      break L1;
                    }
                  }
                  break;
                }
                case 80: {
                  $add$ptr683 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr683;
                  $Names684 = ($this + 8) | 0;
                  $call685 =
                    __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv(
                      $Names684
                    ) | 0;
                  while (1) {
                    $call687 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                        $this,
                        69
                      ) | 0;
                    if ($call687) {
                      label = 172;
                      break;
                    }
                    $call690 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                        $this
                      ) | 0;
                    $call691 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv(
                        $call690
                      ) | 0;
                    HEAP32[$Arg >> 2] = $call691;
                    $cmp692 = ($call691 | 0) == (0 | 0);
                    if ($cmp692) {
                      label = 171;
                      break;
                    }
                    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
                      $Names684,
                      $Arg
                    );
                  }
                  if ((label | 0) == 171) {
                    $retval$49 = 0;
                    break L1;
                  } else if ((label | 0) == 172) {
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm(
                      $ref$tmp700,
                      $this,
                      $call685
                    );
                    $call701 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13NodeArrayNodeEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_(
                        $this,
                        $ref$tmp700
                      ) | 0;
                    HEAP32[$Pack >> 2] = $call701;
                    $call705 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA12_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_(
                        $this,
                        $Pack
                      ) | 0;
                    $retval$49 = $call705;
                    break L1;
                  }
                  break;
                }
                default: {
                  $retval$49 = 0;
                  break L1;
                }
              }
              break;
            }
            case 116: {
              $arrayidx711 = ($0 + 1) | 0;
              $16 = HEAP8[$arrayidx711 >> 0] | 0;
              $conv712 = ($16 << 24) >> 24;
              switch ($conv712 | 0) {
                case 101: {
                  $add$ptr715 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr715;
                  $call717 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call718 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                      $call717
                    ) | 0;
                  HEAP32[$Ex716 >> 2] = $call718;
                  $cmp719 = ($call718 | 0) == (0 | 0);
                  if ($cmp719) {
                    $retval$42 = 0;
                  } else {
                    $call722 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_(
                        $this,
                        11941,
                        $Ex716
                      ) | 0;
                    $retval$42 = $call722;
                  }
                  $retval$49 = $retval$42;
                  break L1;
                  break;
                }
                case 105: {
                  $add$ptr726 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr726;
                  $call728 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call729 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
                      $call728
                    ) | 0;
                  HEAP32[$Ty727 >> 2] = $call729;
                  $cmp730 = ($call729 | 0) == (0 | 0);
                  if ($cmp730) {
                    $retval$43 = 0;
                  } else {
                    $call733 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_(
                        $this,
                        11941,
                        $Ty727
                      ) | 0;
                    $retval$43 = $call733;
                  }
                  $retval$49 = $retval$43;
                  break L1;
                  break;
                }
                case 108: {
                  $add$ptr737 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr737;
                  $call739 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call740 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
                      $call739
                    ) | 0;
                  HEAP32[$Ty738 >> 2] = $call740;
                  $cmp741 = ($call740 | 0) == (0 | 0);
                  do {
                    if ($cmp741) {
                      $retval$47 = 0;
                    } else {
                      $Names745 = ($this + 8) | 0;
                      $call746 =
                        __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv(
                          $Names745
                        ) | 0;
                      while (1) {
                        $call748 =
                          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                            $this,
                            69
                          ) | 0;
                        if ($call748) {
                          label = 186;
                          break;
                        }
                        $call753 =
                          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv(
                            $call739
                          ) | 0;
                        HEAP32[$E751 >> 2] = $call753;
                        $cmp754 = ($call753 | 0) == (0 | 0);
                        if ($cmp754) {
                          label = 185;
                          break;
                        }
                        __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
                          $Names745,
                          $E751
                        );
                      }
                      if ((label | 0) == 185) {
                        $retval$47 = 0;
                        break;
                      } else if ((label | 0) == 186) {
                        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm(
                          $ref$tmp762,
                          $this,
                          $call746
                        );
                        $call763 =
                          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12InitListExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_(
                            $this,
                            $Ty738,
                            $ref$tmp762
                          ) | 0;
                        $retval$47 = $call763;
                        break;
                      }
                    }
                  } while (0);
                  $retval$49 = $retval$47;
                  break L1;
                  break;
                }
                case 114: {
                  $add$ptr768 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr768;
                  $call769 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA6_KcEEEPNS0_4NodeEDpOT0_(
                      $this,
                      11950
                    ) | 0;
                  $retval$49 = $call769;
                  break L1;
                  break;
                }
                case 119: {
                  $add$ptr772 = ($0 + 2) | 0;
                  HEAP32[$this >> 2] = $add$ptr772;
                  $call774 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call775 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                      $call774
                    ) | 0;
                  HEAP32[$Ex773 >> 2] = $call775;
                  $cmp776 = ($call775 | 0) == (0 | 0);
                  if ($cmp776) {
                    $retval$48 = 0;
                  } else {
                    $call779 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9ThrowExprEJRPNS0_4NodeEEEES9_DpOT0_(
                        $this,
                        $Ex773
                      ) | 0;
                    $retval$48 = $call779;
                  }
                  $retval$49 = $retval$48;
                  break L1;
                  break;
                }
                default: {
                  $retval$49 = 0;
                  break L1;
                }
              }
              break;
            }
            case 57:
            case 56:
            case 55:
            case 54:
            case 53:
            case 52:
            case 51:
            case 50:
            case 49: {
              $call783 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call784 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv(
                  $call783
                ) | 0;
              $retval$49 = $call784;
              break L1;
              break;
            }
            default: {
              $retval$49 = 0;
              break L1;
            }
          }
        } while (0);
      }
    } while (0);
    STACKTOP = sp;
    return $retval$49 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20TemplateArgumentPackEJRNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20TemplateArgumentPackEJRNS2_9NodeArrayEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseExprPrimaryEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $N = 0,
      $T = 0,
      $agg$tmp = 0;
    var $agg$tmp$byval_copy = 0,
      $agg$tmp11 = 0,
      $agg$tmp11$byval_copy = 0,
      $agg$tmp111 = 0,
      $agg$tmp111$byval_copy = 0,
      $agg$tmp21 = 0,
      $agg$tmp21$byval_copy = 0,
      $agg$tmp27 = 0,
      $agg$tmp27$byval_copy = 0,
      $agg$tmp33 = 0,
      $agg$tmp33$byval_copy = 0,
      $agg$tmp39 = 0,
      $agg$tmp39$byval_copy = 0,
      $agg$tmp45 = 0,
      $agg$tmp45$byval_copy = 0,
      $agg$tmp51 = 0,
      $agg$tmp51$byval_copy = 0,
      $agg$tmp57 = 0,
      $agg$tmp57$byval_copy = 0,
      $agg$tmp6 = 0;
    var $agg$tmp6$byval_copy = 0,
      $agg$tmp63 = 0,
      $agg$tmp63$byval_copy = 0,
      $agg$tmp69 = 0,
      $agg$tmp69$byval_copy = 0,
      $agg$tmp75 = 0,
      $agg$tmp75$byval_copy = 0,
      $agg$tmp81 = 0,
      $agg$tmp81$byval_copy = 0,
      $agg$tmp87 = 0,
      $agg$tmp87$byval_copy = 0,
      $agg$tmp93 = 0,
      $agg$tmp93$byval_copy = 0,
      $call = 0,
      $call103 = 0,
      $call104 = 0,
      $call108 = 0,
      $call109 = 0,
      $call112 = 0,
      $call114 = 0;
    var $call115 = 0,
      $call116 = 0,
      $call12 = 0,
      $call121 = 0,
      $call122 = 0,
      $call126 = 0,
      $call131 = 0,
      $call133 = 0,
      $call15 = 0,
      $call2 = 0,
      $call20 = 0,
      $call22 = 0,
      $call26 = 0,
      $call28 = 0,
      $call3 = 0,
      $call32 = 0,
      $call34 = 0,
      $call38 = 0,
      $call4 = 0,
      $call40 = 0;
    var $call44 = 0,
      $call46 = 0,
      $call50 = 0,
      $call52 = 0,
      $call56 = 0,
      $call58 = 0,
      $call62 = 0,
      $call64 = 0,
      $call68 = 0,
      $call7 = 0,
      $call70 = 0,
      $call74 = 0,
      $call76 = 0,
      $call80 = 0,
      $call82 = 0,
      $call86 = 0,
      $call88 = 0,
      $call9 = 0,
      $call92 = 0,
      $call94 = 0;
    var $call98 = 0,
      $call99 = 0,
      $cmp = 0,
      $cmp123 = 0,
      $conv = 0,
      $incdec$ptr = 0,
      $incdec$ptr102 = 0,
      $incdec$ptr107 = 0,
      $incdec$ptr19 = 0,
      $incdec$ptr25 = 0,
      $incdec$ptr31 = 0,
      $incdec$ptr37 = 0,
      $incdec$ptr43 = 0,
      $incdec$ptr49 = 0,
      $incdec$ptr55 = 0,
      $incdec$ptr61 = 0,
      $incdec$ptr67 = 0,
      $incdec$ptr73 = 0,
      $incdec$ptr79 = 0,
      $incdec$ptr85 = 0;
    var $incdec$ptr91 = 0,
      $incdec$ptr97 = 0,
      $ref$tmp = 0,
      $ref$tmp14 = 0,
      $retval$1 = 0,
      $retval$2 = 0,
      $retval$3 = 0,
      $spec$select = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 304) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304 | 0);
    $agg$tmp111$byval_copy = (sp + 296) | 0;
    $agg$tmp93$byval_copy = (sp + 288) | 0;
    $agg$tmp87$byval_copy = (sp + 280) | 0;
    $agg$tmp81$byval_copy = (sp + 272) | 0;
    $agg$tmp75$byval_copy = (sp + 264) | 0;
    $agg$tmp69$byval_copy = (sp + 256) | 0;
    $agg$tmp63$byval_copy = (sp + 248) | 0;
    $agg$tmp57$byval_copy = (sp + 240) | 0;
    $agg$tmp51$byval_copy = (sp + 232) | 0;
    $agg$tmp45$byval_copy = (sp + 224) | 0;
    $agg$tmp39$byval_copy = (sp + 216) | 0;
    $agg$tmp33$byval_copy = (sp + 208) | 0;
    $agg$tmp27$byval_copy = (sp + 200) | 0;
    $agg$tmp21$byval_copy = (sp + 192) | 0;
    $agg$tmp11$byval_copy = (sp + 184) | 0;
    $agg$tmp6$byval_copy = (sp + 176) | 0;
    $agg$tmp$byval_copy = (sp + 168) | 0;
    $agg$tmp = (sp + 160) | 0;
    $agg$tmp6 = (sp + 152) | 0;
    $ref$tmp = (sp + 144) | 0;
    $agg$tmp11 = (sp + 136) | 0;
    $ref$tmp14 = (sp + 128) | 0;
    $agg$tmp21 = (sp + 120) | 0;
    $agg$tmp27 = (sp + 112) | 0;
    $agg$tmp33 = (sp + 104) | 0;
    $agg$tmp39 = (sp + 96) | 0;
    $agg$tmp45 = (sp + 88) | 0;
    $agg$tmp51 = (sp + 80) | 0;
    $agg$tmp57 = (sp + 72) | 0;
    $agg$tmp63 = (sp + 64) | 0;
    $agg$tmp69 = (sp + 56) | 0;
    $agg$tmp75 = (sp + 48) | 0;
    $agg$tmp81 = (sp + 40) | 0;
    $agg$tmp87 = (sp + 32) | 0;
    $agg$tmp93 = (sp + 24) | 0;
    $agg$tmp111 = (sp + 16) | 0;
    $T = (sp + 8) | 0;
    $N = sp;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
        $this,
        76
      ) | 0;
    L1: do {
      if ($call) {
        $call2 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
            $this,
            0
          ) | 0;
        $conv = ($call2 << 24) >> 24;
        do {
          switch ($conv | 0) {
            case 84: {
              $retval$3 = 0;
              break L1;
              break;
            }
            case 119: {
              $0 = HEAP32[$this >> 2] | 0;
              $incdec$ptr = ($0 + 1) | 0;
              HEAP32[$this >> 2] = $incdec$ptr;
              $call3 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11405);
              HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
              HEAP32[($agg$tmp$byval_copy + 4) >> 2] =
                HEAP32[($agg$tmp + 4) >> 2] | 0;
              $call4 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE(
                  $call3,
                  $agg$tmp$byval_copy
                ) | 0;
              $retval$3 = $call4;
              break L1;
              break;
            }
            case 98: {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 11413);
              HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2] | 0;
              HEAP32[($agg$tmp6$byval_copy + 4) >> 2] =
                HEAP32[($agg$tmp6 + 4) >> 2] | 0;
              $call7 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                  $this,
                  $agg$tmp6$byval_copy
                ) | 0;
              if ($call7) {
                HEAP32[$ref$tmp >> 2] = 0;
                $call9 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8BoolExprEJiEEEPNS0_4NodeEDpOT0_(
                    $this,
                    $ref$tmp
                  ) | 0;
                $retval$3 = $call9;
                break L1;
              }
              __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp11, 11417);
              HEAP32[$agg$tmp11$byval_copy >> 2] = HEAP32[$agg$tmp11 >> 2] | 0;
              HEAP32[($agg$tmp11$byval_copy + 4) >> 2] =
                HEAP32[($agg$tmp11 + 4) >> 2] | 0;
              $call12 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                  $this,
                  $agg$tmp11$byval_copy
                ) | 0;
              if (!$call12) {
                $retval$3 = 0;
                break L1;
              }
              HEAP32[$ref$tmp14 >> 2] = 1;
              $call15 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8BoolExprEJiEEEPNS0_4NodeEDpOT0_(
                  $this,
                  $ref$tmp14
                ) | 0;
              $retval$3 = $call15;
              break L1;
              break;
            }
            case 99: {
              $1 = HEAP32[$this >> 2] | 0;
              $incdec$ptr19 = ($1 + 1) | 0;
              HEAP32[$this >> 2] = $incdec$ptr19;
              $call20 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp21, 10495);
              HEAP32[$agg$tmp21$byval_copy >> 2] = HEAP32[$agg$tmp21 >> 2] | 0;
              HEAP32[($agg$tmp21$byval_copy + 4) >> 2] =
                HEAP32[($agg$tmp21 + 4) >> 2] | 0;
              $call22 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE(
                  $call20,
                  $agg$tmp21$byval_copy
                ) | 0;
              $retval$3 = $call22;
              break L1;
              break;
            }
            case 97: {
              $2 = HEAP32[$this >> 2] | 0;
              $incdec$ptr25 = ($2 + 1) | 0;
              HEAP32[$this >> 2] = $incdec$ptr25;
              $call26 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp27, 10500);
              HEAP32[$agg$tmp27$byval_copy >> 2] = HEAP32[$agg$tmp27 >> 2] | 0;
              HEAP32[($agg$tmp27$byval_copy + 4) >> 2] =
                HEAP32[($agg$tmp27 + 4) >> 2] | 0;
              $call28 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE(
                  $call26,
                  $agg$tmp27$byval_copy
                ) | 0;
              $retval$3 = $call28;
              break L1;
              break;
            }
            case 104: {
              $3 = HEAP32[$this >> 2] | 0;
              $incdec$ptr31 = ($3 + 1) | 0;
              HEAP32[$this >> 2] = $incdec$ptr31;
              $call32 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp33, 10512);
              HEAP32[$agg$tmp33$byval_copy >> 2] = HEAP32[$agg$tmp33 >> 2] | 0;
              HEAP32[($agg$tmp33$byval_copy + 4) >> 2] =
                HEAP32[($agg$tmp33 + 4) >> 2] | 0;
              $call34 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE(
                  $call32,
                  $agg$tmp33$byval_copy
                ) | 0;
              $retval$3 = $call34;
              break L1;
              break;
            }
            case 115: {
              $4 = HEAP32[$this >> 2] | 0;
              $incdec$ptr37 = ($4 + 1) | 0;
              HEAP32[$this >> 2] = $incdec$ptr37;
              $call38 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp39, 10526);
              HEAP32[$agg$tmp39$byval_copy >> 2] = HEAP32[$agg$tmp39 >> 2] | 0;
              HEAP32[($agg$tmp39$byval_copy + 4) >> 2] =
                HEAP32[($agg$tmp39 + 4) >> 2] | 0;
              $call40 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE(
                  $call38,
                  $agg$tmp39$byval_copy
                ) | 0;
              $retval$3 = $call40;
              break L1;
              break;
            }
            case 116: {
              $5 = HEAP32[$this >> 2] | 0;
              $incdec$ptr43 = ($5 + 1) | 0;
              HEAP32[$this >> 2] = $incdec$ptr43;
              $call44 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp45, 10532);
              HEAP32[$agg$tmp45$byval_copy >> 2] = HEAP32[$agg$tmp45 >> 2] | 0;
              HEAP32[($agg$tmp45$byval_copy + 4) >> 2] =
                HEAP32[($agg$tmp45 + 4) >> 2] | 0;
              $call46 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE(
                  $call44,
                  $agg$tmp45$byval_copy
                ) | 0;
              $retval$3 = $call46;
              break L1;
              break;
            }
            case 105: {
              $6 = HEAP32[$this >> 2] | 0;
              $incdec$ptr49 = ($6 + 1) | 0;
              HEAP32[$this >> 2] = $incdec$ptr49;
              $call50 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp51, 18178);
              HEAP32[$agg$tmp51$byval_copy >> 2] = HEAP32[$agg$tmp51 >> 2] | 0;
              HEAP32[($agg$tmp51$byval_copy + 4) >> 2] =
                HEAP32[($agg$tmp51 + 4) >> 2] | 0;
              $call52 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE(
                  $call50,
                  $agg$tmp51$byval_copy
                ) | 0;
              $retval$3 = $call52;
              break L1;
              break;
            }
            case 106: {
              $7 = HEAP32[$this >> 2] | 0;
              $incdec$ptr55 = ($7 + 1) | 0;
              HEAP32[$this >> 2] = $incdec$ptr55;
              $call56 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp57, 11421);
              HEAP32[$agg$tmp57$byval_copy >> 2] = HEAP32[$agg$tmp57 >> 2] | 0;
              HEAP32[($agg$tmp57$byval_copy + 4) >> 2] =
                HEAP32[($agg$tmp57 + 4) >> 2] | 0;
              $call58 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE(
                  $call56,
                  $agg$tmp57$byval_copy
                ) | 0;
              $retval$3 = $call58;
              break L1;
              break;
            }
            case 108: {
              $8 = HEAP32[$this >> 2] | 0;
              $incdec$ptr61 = ($8 + 1) | 0;
              HEAP32[$this >> 2] = $incdec$ptr61;
              $call62 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp63, 11423);
              HEAP32[$agg$tmp63$byval_copy >> 2] = HEAP32[$agg$tmp63 >> 2] | 0;
              HEAP32[($agg$tmp63$byval_copy + 4) >> 2] =
                HEAP32[($agg$tmp63 + 4) >> 2] | 0;
              $call64 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE(
                  $call62,
                  $agg$tmp63$byval_copy
                ) | 0;
              $retval$3 = $call64;
              break L1;
              break;
            }
            case 109: {
              $9 = HEAP32[$this >> 2] | 0;
              $incdec$ptr67 = ($9 + 1) | 0;
              HEAP32[$this >> 2] = $incdec$ptr67;
              $call68 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp69, 11425);
              HEAP32[$agg$tmp69$byval_copy >> 2] = HEAP32[$agg$tmp69 >> 2] | 0;
              HEAP32[($agg$tmp69$byval_copy + 4) >> 2] =
                HEAP32[($agg$tmp69 + 4) >> 2] | 0;
              $call70 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE(
                  $call68,
                  $agg$tmp69$byval_copy
                ) | 0;
              $retval$3 = $call70;
              break L1;
              break;
            }
            case 120: {
              $10 = HEAP32[$this >> 2] | 0;
              $incdec$ptr73 = ($10 + 1) | 0;
              HEAP32[$this >> 2] = $incdec$ptr73;
              $call74 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp75, 11428);
              HEAP32[$agg$tmp75$byval_copy >> 2] = HEAP32[$agg$tmp75 >> 2] | 0;
              HEAP32[($agg$tmp75$byval_copy + 4) >> 2] =
                HEAP32[($agg$tmp75 + 4) >> 2] | 0;
              $call76 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE(
                  $call74,
                  $agg$tmp75$byval_copy
                ) | 0;
              $retval$3 = $call76;
              break L1;
              break;
            }
            case 121: {
              $11 = HEAP32[$this >> 2] | 0;
              $incdec$ptr79 = ($11 + 1) | 0;
              HEAP32[$this >> 2] = $incdec$ptr79;
              $call80 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp81, 11431);
              HEAP32[$agg$tmp81$byval_copy >> 2] = HEAP32[$agg$tmp81 >> 2] | 0;
              HEAP32[($agg$tmp81$byval_copy + 4) >> 2] =
                HEAP32[($agg$tmp81 + 4) >> 2] | 0;
              $call82 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE(
                  $call80,
                  $agg$tmp81$byval_copy
                ) | 0;
              $retval$3 = $call82;
              break L1;
              break;
            }
            case 110: {
              $12 = HEAP32[$this >> 2] | 0;
              $incdec$ptr85 = ($12 + 1) | 0;
              HEAP32[$this >> 2] = $incdec$ptr85;
              $call86 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp87, 10593);
              HEAP32[$agg$tmp87$byval_copy >> 2] = HEAP32[$agg$tmp87 >> 2] | 0;
              HEAP32[($agg$tmp87$byval_copy + 4) >> 2] =
                HEAP32[($agg$tmp87 + 4) >> 2] | 0;
              $call88 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE(
                  $call86,
                  $agg$tmp87$byval_copy
                ) | 0;
              $retval$3 = $call88;
              break L1;
              break;
            }
            case 111: {
              $13 = HEAP32[$this >> 2] | 0;
              $incdec$ptr91 = ($13 + 1) | 0;
              HEAP32[$this >> 2] = $incdec$ptr91;
              $call92 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp93, 10602);
              HEAP32[$agg$tmp93$byval_copy >> 2] = HEAP32[$agg$tmp93 >> 2] | 0;
              HEAP32[($agg$tmp93$byval_copy + 4) >> 2] =
                HEAP32[($agg$tmp93 + 4) >> 2] | 0;
              $call94 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE(
                  $call92,
                  $agg$tmp93$byval_copy
                ) | 0;
              $retval$3 = $call94;
              break L1;
              break;
            }
            case 102: {
              $14 = HEAP32[$this >> 2] | 0;
              $incdec$ptr97 = ($14 + 1) | 0;
              HEAP32[$this >> 2] = $incdec$ptr97;
              $call98 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call99 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIfEEPNS0_4NodeEv(
                  $call98
                ) | 0;
              $retval$3 = $call99;
              break L1;
              break;
            }
            case 100: {
              $15 = HEAP32[$this >> 2] | 0;
              $incdec$ptr102 = ($15 + 1) | 0;
              HEAP32[$this >> 2] = $incdec$ptr102;
              $call103 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call104 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIdEEPNS0_4NodeEv(
                  $call103
                ) | 0;
              $retval$3 = $call104;
              break L1;
              break;
            }
            case 101: {
              $16 = HEAP32[$this >> 2] | 0;
              $incdec$ptr107 = ($16 + 1) | 0;
              HEAP32[$this >> 2] = $incdec$ptr107;
              $call108 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call109 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIeEEPNS0_4NodeEv(
                  $call108
                ) | 0;
              $retval$3 = $call109;
              break L1;
              break;
            }
            case 95: {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp111, 10429);
              HEAP32[$agg$tmp111$byval_copy >> 2] =
                HEAP32[$agg$tmp111 >> 2] | 0;
              HEAP32[($agg$tmp111$byval_copy + 4) >> 2] =
                HEAP32[($agg$tmp111 + 4) >> 2] | 0;
              $call112 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                  $this,
                  $agg$tmp111$byval_copy
                ) | 0;
              if (!$call112) {
                $retval$3 = 0;
                break L1;
              }
              $call114 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call115 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv(
                  $call114
                ) | 0;
              $cmp = ($call115 | 0) == (0 | 0);
              if (!$cmp) {
                $call116 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                    $this,
                    69
                  ) | 0;
                if ($call116) {
                  $retval$3 = $call115;
                  break L1;
                }
              }
              $retval$3 = 0;
              break L1;
              break;
            }
            default: {
              $call121 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call122 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
                  $call121
                ) | 0;
              HEAP32[$T >> 2] = $call122;
              $cmp123 = ($call122 | 0) == (0 | 0);
              if ($cmp123) {
                $retval$2 = 0;
              } else {
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb(
                  $N,
                  $this,
                  0
                );
                $call126 = __ZNK12_GLOBAL__N_110StringView5emptyEv($N) | 0;
                $call133 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                    $this,
                    69
                  ) | 0;
                if ($call126) {
                  $spec$select = $call133 ? $call122 : 0;
                  $retval$1 = $spec$select;
                } else {
                  if ($call133) {
                    $call131 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15IntegerCastExprEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_(
                        $this,
                        $T,
                        $N
                      ) | 0;
                    $retval$1 = $call131;
                  } else {
                    $retval$1 = 0;
                  }
                }
                $retval$2 = $retval$1;
              }
              $retval$3 = $retval$2;
              break L1;
            }
          }
        } while (0);
      } else {
        $retval$3 = 0;
      }
    } while (0);
    STACKTOP = sp;
    return $retval$3 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE(
    $this,
    $Lit
  ) {
    $this = $this | 0;
    $Lit = $Lit | 0;
    var $Tmp = 0,
      $call = 0,
      $call2 = 0,
      $call3 = 0,
      $retval$0 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $Tmp = sp;
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb(
      $Tmp,
      $this,
      1
    );
    $call = __ZNK12_GLOBAL__N_110StringView5emptyEv($Tmp) | 0;
    if ($call) {
      $retval$0 = 0;
    } else {
      $call2 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
          $this,
          69
        ) | 0;
      if ($call2) {
        $call3 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14IntegerLiteralEJRNS_10StringViewES9_EEEPNS0_4NodeEDpOT0_(
            $this,
            $Lit,
            $Tmp
          ) | 0;
        $retval$0 = $call3;
      } else {
        $retval$0 = 0;
      }
    }
    STACKTOP = sp;
    return $retval$0 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8BoolExprEJiEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8BoolExprEJiEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIfEEPNS0_4NodeEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $Data = 0,
      $__begin$0 = 0,
      $add$ptr = 0,
      $add$ptr14 = 0,
      $call = 0,
      $call15 = 0,
      $call18 = 0,
      $call3 = 0,
      $call4 = 0,
      $call6 = 0,
      $cmp = 0,
      $cmp5 = 0,
      $conv = 0,
      $incdec$ptr = 0,
      $retval$3 = 0,
      $retval$4 = 0,
      $tobool = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $Data = sp;
    $call =
      __ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv(
        $this
      ) | 0;
    $cmp = $call >>> 0 < 9;
    if ($cmp) {
      $retval$4 = 0;
    } else {
      $0 = HEAP32[$this >> 2] | 0;
      $add$ptr = ($0 + 8) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($Data, $0, $add$ptr);
      $call3 = __ZNK12_GLOBAL__N_110StringView5beginEv($Data) | 0;
      $call4 = __ZNK12_GLOBAL__N_110StringView3endEv($Data) | 0;
      $__begin$0 = $call3;
      while (1) {
        $cmp5 = ($__begin$0 | 0) == ($call4 | 0);
        if ($cmp5) {
          label = 5;
          break;
        }
        $1 = HEAP8[$__begin$0 >> 0] | 0;
        $conv = ($1 << 24) >> 24;
        $call6 = _isxdigit($conv) | 0;
        $tobool = ($call6 | 0) == 0;
        $incdec$ptr = ($__begin$0 + 1) | 0;
        if ($tobool) {
          $retval$3 = 0;
          break;
        } else {
          $__begin$0 = $incdec$ptr;
        }
      }
      if ((label | 0) == 5) {
        $2 = HEAP32[$this >> 2] | 0;
        $add$ptr14 = ($2 + 8) | 0;
        HEAP32[$this >> 2] = $add$ptr14;
        $call15 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
            $this,
            69
          ) | 0;
        if ($call15) {
          $call18 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIfEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_(
              $this,
              $Data
            ) | 0;
          $retval$3 = $call18;
        } else {
          $retval$3 = 0;
        }
      }
      $retval$4 = $retval$3;
    }
    STACKTOP = sp;
    return $retval$4 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIdEEPNS0_4NodeEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $Data = 0,
      $__begin$0 = 0,
      $add$ptr = 0,
      $add$ptr14 = 0,
      $call = 0,
      $call15 = 0,
      $call18 = 0,
      $call3 = 0,
      $call4 = 0,
      $call6 = 0,
      $cmp = 0,
      $cmp5 = 0,
      $conv = 0,
      $incdec$ptr = 0,
      $retval$3 = 0,
      $retval$4 = 0,
      $tobool = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $Data = sp;
    $call =
      __ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv(
        $this
      ) | 0;
    $cmp = $call >>> 0 < 17;
    if ($cmp) {
      $retval$4 = 0;
    } else {
      $0 = HEAP32[$this >> 2] | 0;
      $add$ptr = ($0 + 16) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($Data, $0, $add$ptr);
      $call3 = __ZNK12_GLOBAL__N_110StringView5beginEv($Data) | 0;
      $call4 = __ZNK12_GLOBAL__N_110StringView3endEv($Data) | 0;
      $__begin$0 = $call3;
      while (1) {
        $cmp5 = ($__begin$0 | 0) == ($call4 | 0);
        if ($cmp5) {
          label = 5;
          break;
        }
        $1 = HEAP8[$__begin$0 >> 0] | 0;
        $conv = ($1 << 24) >> 24;
        $call6 = _isxdigit($conv) | 0;
        $tobool = ($call6 | 0) == 0;
        $incdec$ptr = ($__begin$0 + 1) | 0;
        if ($tobool) {
          $retval$3 = 0;
          break;
        } else {
          $__begin$0 = $incdec$ptr;
        }
      }
      if ((label | 0) == 5) {
        $2 = HEAP32[$this >> 2] | 0;
        $add$ptr14 = ($2 + 16) | 0;
        HEAP32[$this >> 2] = $add$ptr14;
        $call15 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
            $this,
            69
          ) | 0;
        if ($call15) {
          $call18 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIdEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_(
              $this,
              $Data
            ) | 0;
          $retval$3 = $call18;
        } else {
          $retval$3 = 0;
        }
      }
      $retval$4 = $retval$3;
    }
    STACKTOP = sp;
    return $retval$4 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIeEEPNS0_4NodeEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $Data = 0,
      $__begin$0 = 0,
      $add$ptr = 0,
      $add$ptr14 = 0,
      $call = 0,
      $call15 = 0,
      $call18 = 0,
      $call3 = 0,
      $call4 = 0,
      $call6 = 0,
      $cmp = 0,
      $cmp5 = 0,
      $conv = 0,
      $incdec$ptr = 0,
      $retval$3 = 0,
      $retval$4 = 0,
      $tobool = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $Data = sp;
    $call =
      __ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv(
        $this
      ) | 0;
    $cmp = $call >>> 0 < 21;
    if ($cmp) {
      $retval$4 = 0;
    } else {
      $0 = HEAP32[$this >> 2] | 0;
      $add$ptr = ($0 + 20) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($Data, $0, $add$ptr);
      $call3 = __ZNK12_GLOBAL__N_110StringView5beginEv($Data) | 0;
      $call4 = __ZNK12_GLOBAL__N_110StringView3endEv($Data) | 0;
      $__begin$0 = $call3;
      while (1) {
        $cmp5 = ($__begin$0 | 0) == ($call4 | 0);
        if ($cmp5) {
          label = 5;
          break;
        }
        $1 = HEAP8[$__begin$0 >> 0] | 0;
        $conv = ($1 << 24) >> 24;
        $call6 = _isxdigit($conv) | 0;
        $tobool = ($call6 | 0) == 0;
        $incdec$ptr = ($__begin$0 + 1) | 0;
        if ($tobool) {
          $retval$3 = 0;
          break;
        } else {
          $__begin$0 = $incdec$ptr;
        }
      }
      if ((label | 0) == 5) {
        $2 = HEAP32[$this >> 2] | 0;
        $add$ptr14 = ($2 + 20) | 0;
        HEAP32[$this >> 2] = $add$ptr14;
        $call15 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
            $this,
            69
          ) | 0;
        if ($call15) {
          $call18 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIeEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_(
              $this,
              $Data
            ) | 0;
          $retval$3 = $call18;
        } else {
          $retval$3 = 0;
        }
      }
      $retval$4 = $retval$3;
    }
    STACKTOP = sp;
    return $retval$4 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15IntegerCastExprEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15IntegerCastExprEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15IntegerCastExprEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = $args1;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $agg$tmp;
    $8 = $7;
    HEAP32[$8 >> 2] = $3;
    $9 = ($7 + 4) | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $6;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle15IntegerCastExprC2EPKNS0_4NodeENS_10StringViewE(
      $call,
      $0,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle15IntegerCastExprC2EPKNS0_4NodeENS_10StringViewE(
    $this,
    $Ty_,
    $Integer_
  ) {
    $this = $this | 0;
    $Ty_ = $Ty_ | 0;
    $Integer_ = $Integer_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Integer = 0,
      $Ty = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      60,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 3636;
    $Ty = ($this + 8) | 0;
    HEAP32[$Ty >> 2] = $Ty_;
    $Integer = ($this + 12) | 0;
    $0 = $Integer_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Integer;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle15IntegerCastExpr9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Integer = 0,
      $Ty = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp2 = 0,
      $agg$tmp2$byval_copy = 0,
      $agg$tmp4 = 0,
      $tmpcast$byval_copy = 0,
      label = 0;
    var sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 48) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
    $tmpcast$byval_copy = (sp + 40) | 0;
    $agg$tmp2$byval_copy = (sp + 32) | 0;
    $agg$tmp$byval_copy = (sp + 24) | 0;
    $agg$tmp = (sp + 16) | 0;
    $agg$tmp2 = (sp + 8) | 0;
    $agg$tmp4 = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11119);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Ty = ($this + 8) | 0;
    $0 = HEAP32[$Ty >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 11115);
    HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($agg$tmp2$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp2$byval_copy
    );
    $Integer = ($this + 12) | 0;
    $1 = $Integer;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $agg$tmp4;
    $8 = $7;
    HEAP32[$8 >> 2] = $3;
    $9 = ($7 + 4) | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $6;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp4 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle15IntegerCastExprD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIeEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIeEEJRNS_10StringViewEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIeEEJRNS_10StringViewEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    $0 = $args;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeEC2ENS_10StringViewE(
      $call,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeEC2ENS_10StringViewE(
    $this,
    $Contents_
  ) {
    $this = $this | 0;
    $Contents_ = $Contents_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Contents = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      64,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 3680;
    $Contents = ($this + 8) | 0;
    $0 = $Contents_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Contents;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeE9printLeftERNS_12OutputStreamE(
    $this,
    $s
  ) {
    $this = $this | 0;
    $s = $s | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0.0,
      $Contents = 0,
      $__first$addr$0$i$i = 0,
      $__last$addr$0$i$i = 0,
      $add$ptr = 0,
      $add$ptr32 = 0,
      $add22 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      $call29 = 0,
      $call3 = 0,
      $cmp = 0,
      $cmp1$i$i = 0,
      $cmp5 = 0;
    var $cond = 0,
      $cond$v = 0,
      $cond21 = 0,
      $cond21$v = 0,
      $conv = 0,
      $conv10 = 0,
      $conv23 = 0,
      $e$0 = 0,
      $incdec$ptr$add = 0,
      $incdec$ptr$i$i = 0,
      $incdec$ptr$ptr = 0,
      $incdec$ptr2$i$i = 0,
      $incdec$ptr25 = 0,
      $isdigit = 0,
      $isdigit21 = 0,
      $isdigittmp = 0,
      $isdigittmp20 = 0,
      $num = 0,
      $scevgep = 0,
      $shl = 0;
    var $sub$ptr$lhs$cast = 0,
      $sub$ptr$rhs$cast = 0,
      $sub$ptr$sub = 0,
      $t$0$add = 0,
      $t$0$idx = 0,
      $t$0$ptr = 0,
      $uglygep = 0,
      $vararg_buffer = 0,
      dest = 0,
      label = 0,
      sp = 0,
      stop = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 80) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
    $agg$tmp$byval_copy = (sp + 64) | 0;
    $vararg_buffer = (sp + 48) | 0;
    $0 = (sp + 40) | 0;
    $num = sp;
    $agg$tmp = (sp + 56) | 0;
    $Contents = ($this + 8) | 0;
    $call = __ZNK12_GLOBAL__N_110StringView5beginEv($Contents) | 0;
    $call3 = __ZNK12_GLOBAL__N_110StringView3endEv($Contents) | 0;
    $add$ptr = ($call3 + 1) | 0;
    $sub$ptr$lhs$cast = $add$ptr;
    $sub$ptr$rhs$cast = $call;
    $sub$ptr$sub = ($sub$ptr$lhs$cast - $sub$ptr$rhs$cast) | 0;
    $cmp = $sub$ptr$sub >>> 0 > 20;
    if ($cmp) {
      $scevgep = ($0 + 8) | 0;
      $e$0 = $0;
      $t$0$idx = 0;
      while (1) {
        $cmp5 = ($t$0$idx | 0) == 20;
        if ($cmp5) {
          break;
        }
        $t$0$ptr = ($call + $t$0$idx) | 0;
        $1 = HEAP8[$t$0$ptr >> 0] | 0;
        $conv = ($1 << 24) >> 24;
        $isdigittmp = ($conv + -48) | 0;
        $isdigit = $isdigittmp >>> 0 < 10;
        $cond$v = $isdigit ? 0 : 9;
        $cond = ($cond$v + $conv) | 0;
        $t$0$add = $t$0$idx | 1;
        $incdec$ptr$ptr = ($call + $t$0$add) | 0;
        $2 = HEAP8[$incdec$ptr$ptr >> 0] | 0;
        $conv10 = ($2 << 24) >> 24;
        $isdigittmp20 = ($conv10 + -48) | 0;
        $isdigit21 = $isdigittmp20 >>> 0 < 10;
        $cond21$v = $isdigit21 ? 208 : 169;
        $cond21 = ($cond21$v + $conv10) | 0;
        $shl = $cond << 4;
        $add22 = ($cond21 + $shl) | 0;
        $conv23 = $add22 & 255;
        HEAP8[$e$0 >> 0] = $conv23;
        $incdec$ptr$add = ($t$0$idx + 2) | 0;
        $incdec$ptr25 = ($e$0 + 1) | 0;
        $e$0 = $incdec$ptr25;
        $t$0$idx = $incdec$ptr$add;
      }
      $uglygep = ($scevgep + 2) | 0;
      $__first$addr$0$i$i = $0;
      $__last$addr$0$i$i = $uglygep;
      while (1) {
        $incdec$ptr$i$i = ($__last$addr$0$i$i + -1) | 0;
        $cmp1$i$i = $__first$addr$0$i$i >>> 0 < $incdec$ptr$i$i >>> 0;
        if (!$cmp1$i$i) {
          break;
        }
        $3 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
        $4 = HEAP8[$incdec$ptr$i$i >> 0] | 0;
        HEAP8[$__first$addr$0$i$i >> 0] = $4;
        HEAP8[$incdec$ptr$i$i >> 0] = $3;
        $incdec$ptr2$i$i = ($__first$addr$0$i$i + 1) | 0;
        $__first$addr$0$i$i = $incdec$ptr2$i$i;
        $__last$addr$0$i$i = $incdec$ptr$i$i;
      }
      dest = $num;
      stop = (dest + 40) | 0;
      do {
        HEAP32[dest >> 2] = 0 | 0;
        dest = (dest + 4) | 0;
      } while ((dest | 0) < (stop | 0));
      $5 = +HEAPF64[$0 >> 3];
      HEAPF64[$vararg_buffer >> 3] = $5;
      $call29 = _snprintf($num, 40, 11487, $vararg_buffer) | 0;
      $add$ptr32 = ($num + $call29) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$tmp, $num, $add$ptr32);
      HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
      HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $s,
        $agg$tmp$byval_copy
      );
    }
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeED0Ev(
    $this
  ) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIdEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIdEEJRNS_10StringViewEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIdEEJRNS_10StringViewEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    $0 = $args;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdEC2ENS_10StringViewE(
      $call,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdEC2ENS_10StringViewE(
    $this,
    $Contents_
  ) {
    $this = $this | 0;
    $Contents_ = $Contents_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Contents = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      63,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 3724;
    $Contents = ($this + 8) | 0;
    $0 = $Contents_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Contents;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdE9printLeftERNS_12OutputStreamE(
    $this,
    $s
  ) {
    $this = $this | 0;
    $s = $s | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0.0,
      $Contents = 0,
      $__first$addr$0$i$i = 0,
      $__last$addr$0$i$i = 0,
      $add$ptr = 0,
      $add$ptr32 = 0,
      $add22 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      $call29 = 0,
      $call3 = 0,
      $cmp = 0,
      $cmp1$i$i = 0,
      $cmp5 = 0;
    var $cond = 0,
      $cond$v = 0,
      $cond21 = 0,
      $cond21$v = 0,
      $conv = 0,
      $conv10 = 0,
      $conv23 = 0,
      $e$0 = 0,
      $incdec$ptr$add = 0,
      $incdec$ptr$i$i = 0,
      $incdec$ptr$ptr = 0,
      $incdec$ptr2$i$i = 0,
      $incdec$ptr25 = 0,
      $isdigit = 0,
      $isdigit21 = 0,
      $isdigittmp = 0,
      $isdigittmp20 = 0,
      $num = 0,
      $scevgep = 0,
      $shl = 0;
    var $sub$ptr$lhs$cast = 0,
      $sub$ptr$rhs$cast = 0,
      $sub$ptr$sub = 0,
      $t$0$add = 0,
      $t$0$idx = 0,
      $t$0$ptr = 0,
      $vararg_buffer = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 64) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
    $agg$tmp$byval_copy = (sp + 56) | 0;
    $vararg_buffer = (sp + 40) | 0;
    $0 = (sp + 32) | 0;
    $num = sp;
    $agg$tmp = (sp + 48) | 0;
    $Contents = ($this + 8) | 0;
    $call = __ZNK12_GLOBAL__N_110StringView5beginEv($Contents) | 0;
    $call3 = __ZNK12_GLOBAL__N_110StringView3endEv($Contents) | 0;
    $add$ptr = ($call3 + 1) | 0;
    $sub$ptr$lhs$cast = $add$ptr;
    $sub$ptr$rhs$cast = $call;
    $sub$ptr$sub = ($sub$ptr$lhs$cast - $sub$ptr$rhs$cast) | 0;
    $cmp = $sub$ptr$sub >>> 0 > 16;
    if ($cmp) {
      $scevgep = ($0 + 8) | 0;
      $e$0 = $0;
      $t$0$idx = 0;
      while (1) {
        $cmp5 = ($t$0$idx | 0) == 16;
        if ($cmp5) {
          break;
        }
        $t$0$ptr = ($call + $t$0$idx) | 0;
        $1 = HEAP8[$t$0$ptr >> 0] | 0;
        $conv = ($1 << 24) >> 24;
        $isdigittmp = ($conv + -48) | 0;
        $isdigit = $isdigittmp >>> 0 < 10;
        $cond$v = $isdigit ? 0 : 9;
        $cond = ($cond$v + $conv) | 0;
        $t$0$add = $t$0$idx | 1;
        $incdec$ptr$ptr = ($call + $t$0$add) | 0;
        $2 = HEAP8[$incdec$ptr$ptr >> 0] | 0;
        $conv10 = ($2 << 24) >> 24;
        $isdigittmp20 = ($conv10 + -48) | 0;
        $isdigit21 = $isdigittmp20 >>> 0 < 10;
        $cond21$v = $isdigit21 ? 208 : 169;
        $cond21 = ($cond21$v + $conv10) | 0;
        $shl = $cond << 4;
        $add22 = ($cond21 + $shl) | 0;
        $conv23 = $add22 & 255;
        HEAP8[$e$0 >> 0] = $conv23;
        $incdec$ptr$add = ($t$0$idx + 2) | 0;
        $incdec$ptr25 = ($e$0 + 1) | 0;
        $e$0 = $incdec$ptr25;
        $t$0$idx = $incdec$ptr$add;
      }
      $__first$addr$0$i$i = $0;
      $__last$addr$0$i$i = $scevgep;
      while (1) {
        $incdec$ptr$i$i = ($__last$addr$0$i$i + -1) | 0;
        $cmp1$i$i = $__first$addr$0$i$i >>> 0 < $incdec$ptr$i$i >>> 0;
        if (!$cmp1$i$i) {
          break;
        }
        $3 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
        $4 = HEAP8[$incdec$ptr$i$i >> 0] | 0;
        HEAP8[$__first$addr$0$i$i >> 0] = $4;
        HEAP8[$incdec$ptr$i$i >> 0] = $3;
        $incdec$ptr2$i$i = ($__first$addr$0$i$i + 1) | 0;
        $__first$addr$0$i$i = $incdec$ptr2$i$i;
        $__last$addr$0$i$i = $incdec$ptr$i$i;
      }
      HEAP32[$num >> 2] = 0 | 0;
      HEAP32[($num + 4) >> 2] = 0 | 0;
      HEAP32[($num + 8) >> 2] = 0 | 0;
      HEAP32[($num + 12) >> 2] = 0 | 0;
      HEAP32[($num + 16) >> 2] = 0 | 0;
      HEAP32[($num + 20) >> 2] = 0 | 0;
      HEAP32[($num + 24) >> 2] = 0 | 0;
      HEAP32[($num + 28) >> 2] = 0 | 0;
      $5 = +HEAPF64[$0 >> 3];
      HEAPF64[$vararg_buffer >> 3] = $5;
      $call29 = _snprintf($num, 32, 11548, $vararg_buffer) | 0;
      $add$ptr32 = ($num + $call29) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$tmp, $num, $add$ptr32);
      HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
      HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $s,
        $agg$tmp$byval_copy
      );
    }
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdED0Ev(
    $this
  ) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIfEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIfEEJRNS_10StringViewEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIfEEJRNS_10StringViewEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    $0 = $args;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfEC2ENS_10StringViewE(
      $call,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfEC2ENS_10StringViewE(
    $this,
    $Contents_
  ) {
    $this = $this | 0;
    $Contents_ = $Contents_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Contents = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      62,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 3768;
    $Contents = ($this + 8) | 0;
    $0 = $Contents_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Contents;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfE9printLeftERNS_12OutputStreamE(
    $this,
    $s
  ) {
    $this = $this | 0;
    $s = $s | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0.0,
      $Contents = 0,
      $__first$addr$0$i$i = 0,
      $__last$addr$0$i$i = 0,
      $add$ptr = 0,
      $add$ptr33 = 0,
      $add22 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      $call3 = 0,
      $call30 = 0,
      $cmp = 0,
      $cmp1$i$i = 0,
      $cmp5 = 0;
    var $cond = 0,
      $cond$v = 0,
      $cond21 = 0,
      $cond21$v = 0,
      $conv = 0,
      $conv10 = 0,
      $conv23 = 0,
      $conv29 = 0.0,
      $e$0 = 0,
      $incdec$ptr$add = 0,
      $incdec$ptr$i$i = 0,
      $incdec$ptr$ptr = 0,
      $incdec$ptr2$i$i = 0,
      $incdec$ptr25 = 0,
      $isdigit = 0,
      $isdigit21 = 0,
      $isdigittmp = 0,
      $isdigittmp20 = 0,
      $num = 0,
      $scevgep = 0;
    var $shl = 0,
      $sub$ptr$lhs$cast = 0,
      $sub$ptr$rhs$cast = 0,
      $sub$ptr$sub = 0,
      $t$0$add = 0,
      $t$0$idx = 0,
      $t$0$ptr = 0,
      $vararg_buffer = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 64) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
    $agg$tmp$byval_copy = (sp + 48) | 0;
    $vararg_buffer = (sp + 24) | 0;
    $0 = (sp + 40) | 0;
    $num = sp;
    $agg$tmp = (sp + 32) | 0;
    $Contents = ($this + 8) | 0;
    $call = __ZNK12_GLOBAL__N_110StringView5beginEv($Contents) | 0;
    $call3 = __ZNK12_GLOBAL__N_110StringView3endEv($Contents) | 0;
    $add$ptr = ($call3 + 1) | 0;
    $sub$ptr$lhs$cast = $add$ptr;
    $sub$ptr$rhs$cast = $call;
    $sub$ptr$sub = ($sub$ptr$lhs$cast - $sub$ptr$rhs$cast) | 0;
    $cmp = $sub$ptr$sub >>> 0 > 8;
    if ($cmp) {
      $scevgep = ($0 + 4) | 0;
      $e$0 = $0;
      $t$0$idx = 0;
      while (1) {
        $cmp5 = ($t$0$idx | 0) == 8;
        if ($cmp5) {
          break;
        }
        $t$0$ptr = ($call + $t$0$idx) | 0;
        $1 = HEAP8[$t$0$ptr >> 0] | 0;
        $conv = ($1 << 24) >> 24;
        $isdigittmp = ($conv + -48) | 0;
        $isdigit = $isdigittmp >>> 0 < 10;
        $cond$v = $isdigit ? 0 : 9;
        $cond = ($cond$v + $conv) | 0;
        $t$0$add = $t$0$idx | 1;
        $incdec$ptr$ptr = ($call + $t$0$add) | 0;
        $2 = HEAP8[$incdec$ptr$ptr >> 0] | 0;
        $conv10 = ($2 << 24) >> 24;
        $isdigittmp20 = ($conv10 + -48) | 0;
        $isdigit21 = $isdigittmp20 >>> 0 < 10;
        $cond21$v = $isdigit21 ? 208 : 169;
        $cond21 = ($cond21$v + $conv10) | 0;
        $shl = $cond << 4;
        $add22 = ($cond21 + $shl) | 0;
        $conv23 = $add22 & 255;
        HEAP8[$e$0 >> 0] = $conv23;
        $incdec$ptr$add = ($t$0$idx + 2) | 0;
        $incdec$ptr25 = ($e$0 + 1) | 0;
        $e$0 = $incdec$ptr25;
        $t$0$idx = $incdec$ptr$add;
      }
      $__first$addr$0$i$i = $0;
      $__last$addr$0$i$i = $scevgep;
      while (1) {
        $incdec$ptr$i$i = ($__last$addr$0$i$i + -1) | 0;
        $cmp1$i$i = $__first$addr$0$i$i >>> 0 < $incdec$ptr$i$i >>> 0;
        if (!$cmp1$i$i) {
          break;
        }
        $3 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
        $4 = HEAP8[$incdec$ptr$i$i >> 0] | 0;
        HEAP8[$__first$addr$0$i$i >> 0] = $4;
        HEAP8[$incdec$ptr$i$i >> 0] = $3;
        $incdec$ptr2$i$i = ($__first$addr$0$i$i + 1) | 0;
        $__first$addr$0$i$i = $incdec$ptr2$i$i;
        $__last$addr$0$i$i = $incdec$ptr$i$i;
      }
      HEAP32[$num >> 2] = 0 | 0;
      HEAP32[($num + 4) >> 2] = 0 | 0;
      HEAP32[($num + 8) >> 2] = 0 | 0;
      HEAP32[($num + 12) >> 2] = 0 | 0;
      HEAP32[($num + 16) >> 2] = 0 | 0;
      HEAP32[($num + 20) >> 2] = 0 | 0;
      $5 = +HEAPF32[$0 >> 2];
      $conv29 = $5;
      HEAPF64[$vararg_buffer >> 3] = $conv29;
      $call30 = _snprintf($num, 24, 11607, $vararg_buffer) | 0;
      $add$ptr33 = ($num + $call30) | 0;
      __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$tmp, $num, $add$ptr33);
      HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
      HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $s,
        $agg$tmp$byval_copy
      );
    }
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfED0Ev(
    $this
  ) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8BoolExprEJiEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $call = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $tobool = ($0 | 0) != 0;
    __ZN12_GLOBAL__N_116itanium_demangle8BoolExprC2Eb($call, $tobool);
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle8BoolExprC2Eb($this, $Value_) {
    $this = $this | 0;
    $Value_ = $Value_ | 0;
    var $Value = 0,
      $frombool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $frombool = $Value_ & 1;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      59,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 3812;
    $Value = ($this + 8) | 0;
    HEAP8[$Value >> 0] = $frombool;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle8BoolExpr9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $Value = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $Value = ($this + 8) | 0;
    $0 = HEAP8[$Value >> 0] | 0;
    $tobool = ($0 << 24) >> 24 == 0;
    if ($tobool) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11672);
    } else {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11667);
    }
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle8BoolExprD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14IntegerLiteralEJRNS_10StringViewES9_EEEPNS0_4NodeEDpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14IntegerLiteralEJRNS_10StringViewES5_EEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14IntegerLiteralEJRNS_10StringViewES5_EEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0;
    var $agg$tmp = 0,
      $agg$tmp5 = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      $tmpcast1$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $tmpcast1$byval_copy = (sp + 24) | 0;
    $tmpcast$byval_copy = (sp + 16) | 0;
    $agg$tmp = (sp + 8) | 0;
    $agg$tmp5 = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
    $0 = $args;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    $10 = $args1;
    $11 = $10;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = ($10 + 4) | 0;
    $14 = $13;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = $agg$tmp5;
    $17 = $16;
    HEAP32[$17 >> 2] = $12;
    $18 = ($16 + 4) | 0;
    $19 = $18;
    HEAP32[$19 >> 2] = $15;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    HEAP32[$tmpcast1$byval_copy >> 2] = HEAP32[$agg$tmp5 >> 2] | 0;
    HEAP32[($tmpcast1$byval_copy + 4) >> 2] = HEAP32[($agg$tmp5 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle14IntegerLiteralC2ENS_10StringViewES2_(
      $call,
      $tmpcast$byval_copy,
      $tmpcast1$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14IntegerLiteralC2ENS_10StringViewES2_(
    $this,
    $Type_,
    $Value_
  ) {
    $this = $this | 0;
    $Type_ = $Type_ | 0;
    $Value_ = $Value_ | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0;
    var $Type = 0,
      $Value = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      61,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 3856;
    $Type = ($this + 8) | 0;
    $0 = $Type_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Type;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    $Value = ($this + 16) | 0;
    $10 = $Value_;
    $11 = $10;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = ($10 + 4) | 0;
    $14 = $13;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = $Value;
    $17 = $16;
    HEAP32[$17 >> 2] = $12;
    $18 = ($16 + 4) | 0;
    $19 = $18;
    HEAP32[$19 >> 2] = $15;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle14IntegerLiteral9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0,
      $23 = 0,
      $24 = 0,
      $25 = 0,
      $26 = 0;
    var $27 = 0,
      $28 = 0,
      $29 = 0,
      $3 = 0,
      $30 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Type = 0,
      $Value = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp11 = 0,
      $agg$tmp11$byval_copy = 0,
      $agg$tmp13 = 0,
      $agg$tmp13$byval_copy = 0,
      $agg$tmp16 = 0;
    var $agg$tmp24 = 0,
      $agg$tmp3 = 0,
      $agg$tmp6 = 0,
      $agg$tmp6$byval_copy = 0,
      $call = 0,
      $call21 = 0,
      $call8 = 0,
      $cmp = 0,
      $cmp22 = 0,
      $cmp9 = 0,
      $tmpcast$byval_copy = 0,
      $tmpcast7$byval_copy = 0,
      $tmpcast8$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 112) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112 | 0);
    $tmpcast7$byval_copy = (sp + 104) | 0;
    $tmpcast$byval_copy = (sp + 96) | 0;
    $agg$tmp13$byval_copy = (sp + 88) | 0;
    $agg$tmp11$byval_copy = (sp + 80) | 0;
    $agg$tmp6$byval_copy = (sp + 72) | 0;
    $tmpcast8$byval_copy = (sp + 64) | 0;
    $agg$tmp$byval_copy = (sp + 56) | 0;
    $agg$tmp = (sp + 48) | 0;
    $agg$tmp3 = (sp + 16) | 0;
    $agg$tmp6 = (sp + 40) | 0;
    $agg$tmp11 = (sp + 32) | 0;
    $agg$tmp13 = (sp + 24) | 0;
    $agg$tmp16 = (sp + 8) | 0;
    $agg$tmp24 = sp;
    $Type = ($this + 8) | 0;
    $call = __ZNK12_GLOBAL__N_110StringView4sizeEv($Type) | 0;
    $cmp = $call >>> 0 > 3;
    if ($cmp) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11119);
      HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
      HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp$byval_copy
      );
      $0 = $Type;
      $1 = $0;
      $2 = HEAP32[$1 >> 2] | 0;
      $3 = ($0 + 4) | 0;
      $4 = $3;
      $5 = HEAP32[$4 >> 2] | 0;
      $6 = $agg$tmp3;
      $7 = $6;
      HEAP32[$7 >> 2] = $2;
      $8 = ($6 + 4) | 0;
      $9 = $8;
      HEAP32[$9 >> 2] = $5;
      HEAP32[$tmpcast8$byval_copy >> 2] = HEAP32[$agg$tmp3 >> 2] | 0;
      HEAP32[($tmpcast8$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp3 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $tmpcast8$byval_copy
      );
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 11115);
      HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2] | 0;
      HEAP32[($agg$tmp6$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp6 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp6$byval_copy
      );
    }
    $Value = ($this + 16) | 0;
    $call8 = __ZNK12_GLOBAL__N_110StringViewixEm($Value) | 0;
    $10 = HEAP8[$call8 >> 0] | 0;
    $cmp9 = ($10 << 24) >> 24 == 110;
    if ($cmp9) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp11, 11722);
      HEAP32[$agg$tmp11$byval_copy >> 2] = HEAP32[$agg$tmp11 >> 2] | 0;
      HEAP32[($agg$tmp11$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp11 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp11$byval_copy
      );
      __ZNK12_GLOBAL__N_110StringView9dropFrontEm($agg$tmp13, $Value, 1);
      HEAP32[$agg$tmp13$byval_copy >> 2] = HEAP32[$agg$tmp13 >> 2] | 0;
      HEAP32[($agg$tmp13$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp13 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp13$byval_copy
      );
    } else {
      $11 = $Value;
      $12 = $11;
      $13 = HEAP32[$12 >> 2] | 0;
      $14 = ($11 + 4) | 0;
      $15 = $14;
      $16 = HEAP32[$15 >> 2] | 0;
      $17 = $agg$tmp16;
      $18 = $17;
      HEAP32[$18 >> 2] = $13;
      $19 = ($17 + 4) | 0;
      $20 = $19;
      HEAP32[$20 >> 2] = $16;
      HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp16 >> 2] | 0;
      HEAP32[($tmpcast$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp16 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $tmpcast$byval_copy
      );
    }
    $call21 = __ZNK12_GLOBAL__N_110StringView4sizeEv($Type) | 0;
    $cmp22 = $call21 >>> 0 < 4;
    if ($cmp22) {
      $21 = $Type;
      $22 = $21;
      $23 = HEAP32[$22 >> 2] | 0;
      $24 = ($21 + 4) | 0;
      $25 = $24;
      $26 = HEAP32[$25 >> 2] | 0;
      $27 = $agg$tmp24;
      $28 = $27;
      HEAP32[$28 >> 2] = $23;
      $29 = ($27 + 4) | 0;
      $30 = $29;
      HEAP32[$30 >> 2] = $26;
      HEAP32[$tmpcast7$byval_copy >> 2] = HEAP32[$agg$tmp24 >> 2] | 0;
      HEAP32[($tmpcast7$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp24 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $tmpcast7$byval_copy
      );
    }
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14IntegerLiteralD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZNK12_GLOBAL__N_110StringViewixEm($this) {
    $this = $this | 0;
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZNK12_GLOBAL__N_110StringView5beginEv($this) | 0;
    return $call | 0;
  }
  function __ZNK12_GLOBAL__N_110StringView9dropFrontEm($agg$result, $this, $N) {
    $agg$result = $agg$result | 0;
    $this = $this | 0;
    $N = $N | 0;
    var $0 = 0,
      $1 = 0,
      $Last = 0,
      $add$ptr = 0,
      $call = 0,
      $cmp = 0,
      $spec$select = 0,
      $sub = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZNK12_GLOBAL__N_110StringView4sizeEv($this) | 0;
    $cmp = $call >>> 0 > $N >>> 0;
    $sub = ($call + -1) | 0;
    $spec$select = $cmp ? $N : $sub;
    $0 = HEAP32[$this >> 2] | 0;
    $add$ptr = ($0 + $spec$select) | 0;
    $Last = ($this + 4) | 0;
    $1 = HEAP32[$Last >> 2] | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$result, $add$ptr, $1);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20TemplateArgumentPackEJRNS2_9NodeArrayEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    $0 = $args;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle20TemplateArgumentPackC2ENS0_9NodeArrayE(
      $call,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle20TemplateArgumentPackC2ENS0_9NodeArrayE(
    $this,
    $Elements_
  ) {
    $this = $this | 0;
    $Elements_ = $Elements_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Elements = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      28,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 3900;
    $Elements = ($this + 8) | 0;
    $0 = $Elements_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Elements;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle20TemplateArgumentPack9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $Elements = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Elements = ($this + 8) | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE(
      $Elements,
      $S
    );
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle20TemplateArgumentPackD0Ev(
    $this
  ) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseFunctionParamEv(
    $this
  ) {
    $this = $this | 0;
    var $Num = 0,
      $Num17 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp7 = 0,
      $agg$tmp7$byval_copy = 0,
      $call = 0,
      $call10 = 0,
      $call13 = 0,
      $call18 = 0,
      $call21 = 0,
      $call3 = 0,
      $call5 = 0,
      $call8 = 0,
      $ref$tmp = 0,
      $retval$0 = 0,
      $retval$1 = 0,
      $retval$2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 64) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
    $agg$tmp7$byval_copy = (sp + 48) | 0;
    $agg$tmp$byval_copy = (sp + 40) | 0;
    $agg$tmp = (sp + 32) | 0;
    $Num = (sp + 24) | 0;
    $agg$tmp7 = (sp + 16) | 0;
    $ref$tmp = (sp + 8) | 0;
    $Num17 = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 14078);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
        $this,
        $agg$tmp$byval_copy
      ) | 0;
    if ($call) {
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv(
        $this
      ) | 0;
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb(
        $Num,
        $this,
        0
      );
      $call3 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
          $this,
          95
        ) | 0;
      if ($call3) {
        $call5 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13FunctionParamEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_(
            $this,
            $Num
          ) | 0;
        $retval$0 = $call5;
      } else {
        $retval$0 = 0;
      }
      $retval$2 = $retval$0;
    } else {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp7, 14081);
      HEAP32[$agg$tmp7$byval_copy >> 2] = HEAP32[$agg$tmp7 >> 2] | 0;
      HEAP32[($agg$tmp7$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp7 + 4) >> 2] | 0;
      $call8 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
          $this,
          $agg$tmp7$byval_copy
        ) | 0;
      if ($call8) {
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb(
          $ref$tmp,
          $this,
          0
        );
        $call10 = __ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp) | 0;
        if ($call10) {
          $retval$2 = 0;
        } else {
          $call13 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
              $this,
              112
            ) | 0;
          if ($call13) {
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv(
              $this
            ) | 0;
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb(
              $Num17,
              $this,
              0
            );
            $call18 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                $this,
                95
              ) | 0;
            if ($call18) {
              $call21 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13FunctionParamEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_(
                  $this,
                  $Num17
                ) | 0;
              $retval$1 = $call21;
            } else {
              $retval$1 = 0;
            }
            $retval$2 = $retval$1;
          } else {
            $retval$2 = 0;
          }
        }
      } else {
        $retval$2 = 0;
      }
    }
    STACKTOP = sp;
    return $retval$2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseFoldExprEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $100 = 0,
      $101 = 0,
      $102 = 0,
      $103 = 0,
      $104 = 0,
      $105 = 0,
      $106 = 0,
      $107 = 0,
      $108 = 0,
      $109 = 0,
      $11 = 0,
      $110 = 0,
      $111 = 0,
      $112 = 0,
      $113 = 0,
      $114 = 0,
      $115 = 0;
    var $116 = 0,
      $117 = 0,
      $118 = 0,
      $119 = 0,
      $12 = 0,
      $120 = 0,
      $121 = 0,
      $122 = 0,
      $123 = 0,
      $124 = 0,
      $125 = 0,
      $126 = 0,
      $127 = 0,
      $128 = 0,
      $129 = 0,
      $13 = 0,
      $130 = 0,
      $131 = 0,
      $132 = 0,
      $133 = 0;
    var $134 = 0,
      $135 = 0,
      $136 = 0,
      $137 = 0,
      $138 = 0,
      $139 = 0,
      $14 = 0,
      $140 = 0,
      $141 = 0,
      $142 = 0,
      $143 = 0,
      $144 = 0,
      $145 = 0,
      $146 = 0,
      $147 = 0,
      $148 = 0,
      $149 = 0,
      $15 = 0,
      $150 = 0,
      $151 = 0;
    var $152 = 0,
      $153 = 0,
      $154 = 0,
      $155 = 0,
      $156 = 0,
      $157 = 0,
      $158 = 0,
      $159 = 0,
      $16 = 0,
      $160 = 0,
      $161 = 0,
      $162 = 0,
      $163 = 0,
      $164 = 0,
      $165 = 0,
      $166 = 0,
      $167 = 0,
      $168 = 0,
      $169 = 0,
      $17 = 0;
    var $170 = 0,
      $171 = 0,
      $172 = 0,
      $173 = 0,
      $174 = 0,
      $175 = 0,
      $176 = 0,
      $177 = 0,
      $178 = 0,
      $179 = 0,
      $18 = 0,
      $180 = 0,
      $181 = 0,
      $182 = 0,
      $183 = 0,
      $184 = 0,
      $185 = 0,
      $186 = 0,
      $187 = 0,
      $188 = 0;
    var $189 = 0,
      $19 = 0,
      $190 = 0,
      $191 = 0,
      $192 = 0,
      $193 = 0,
      $194 = 0,
      $195 = 0,
      $196 = 0,
      $197 = 0,
      $198 = 0,
      $199 = 0,
      $2 = 0,
      $20 = 0,
      $200 = 0,
      $201 = 0,
      $202 = 0,
      $203 = 0,
      $204 = 0,
      $205 = 0;
    var $206 = 0,
      $207 = 0,
      $208 = 0,
      $209 = 0,
      $21 = 0,
      $210 = 0,
      $211 = 0,
      $212 = 0,
      $213 = 0,
      $214 = 0,
      $215 = 0,
      $216 = 0,
      $217 = 0,
      $218 = 0,
      $219 = 0,
      $22 = 0,
      $220 = 0,
      $221 = 0,
      $222 = 0,
      $223 = 0;
    var $224 = 0,
      $225 = 0,
      $226 = 0,
      $227 = 0,
      $228 = 0,
      $229 = 0,
      $23 = 0,
      $230 = 0,
      $231 = 0,
      $232 = 0,
      $233 = 0,
      $234 = 0,
      $235 = 0,
      $236 = 0,
      $237 = 0,
      $238 = 0,
      $239 = 0,
      $24 = 0,
      $240 = 0,
      $241 = 0;
    var $242 = 0,
      $243 = 0,
      $244 = 0,
      $245 = 0,
      $246 = 0,
      $247 = 0,
      $248 = 0,
      $249 = 0,
      $25 = 0,
      $250 = 0,
      $251 = 0,
      $252 = 0,
      $253 = 0,
      $254 = 0,
      $255 = 0,
      $256 = 0,
      $257 = 0,
      $258 = 0,
      $259 = 0,
      $26 = 0;
    var $260 = 0,
      $261 = 0,
      $262 = 0,
      $263 = 0,
      $264 = 0,
      $265 = 0,
      $266 = 0,
      $267 = 0,
      $268 = 0,
      $269 = 0,
      $27 = 0,
      $270 = 0,
      $271 = 0,
      $272 = 0,
      $273 = 0,
      $274 = 0,
      $275 = 0,
      $276 = 0,
      $277 = 0,
      $278 = 0;
    var $279 = 0,
      $28 = 0,
      $280 = 0,
      $281 = 0,
      $282 = 0,
      $283 = 0,
      $284 = 0,
      $285 = 0,
      $286 = 0,
      $287 = 0,
      $288 = 0,
      $289 = 0,
      $29 = 0,
      $290 = 0,
      $291 = 0,
      $292 = 0,
      $293 = 0,
      $294 = 0,
      $295 = 0,
      $296 = 0;
    var $297 = 0,
      $298 = 0,
      $299 = 0,
      $3 = 0,
      $30 = 0,
      $300 = 0,
      $301 = 0,
      $302 = 0,
      $303 = 0,
      $304 = 0,
      $305 = 0,
      $306 = 0,
      $307 = 0,
      $308 = 0,
      $309 = 0,
      $31 = 0,
      $310 = 0,
      $311 = 0,
      $312 = 0,
      $32 = 0;
    var $33 = 0,
      $34 = 0,
      $35 = 0,
      $36 = 0,
      $37 = 0,
      $38 = 0,
      $39 = 0,
      $4 = 0,
      $40 = 0,
      $41 = 0,
      $42 = 0,
      $43 = 0,
      $44 = 0,
      $45 = 0,
      $46 = 0,
      $47 = 0,
      $48 = 0,
      $49 = 0,
      $5 = 0,
      $50 = 0;
    var $51 = 0,
      $52 = 0,
      $53 = 0,
      $54 = 0,
      $55 = 0,
      $56 = 0,
      $57 = 0,
      $58 = 0,
      $59 = 0,
      $6 = 0,
      $60 = 0,
      $61 = 0,
      $62 = 0,
      $63 = 0,
      $64 = 0,
      $65 = 0,
      $66 = 0,
      $67 = 0,
      $68 = 0,
      $69 = 0;
    var $7 = 0,
      $70 = 0,
      $71 = 0,
      $72 = 0,
      $73 = 0,
      $74 = 0,
      $75 = 0,
      $76 = 0,
      $77 = 0,
      $78 = 0,
      $79 = 0,
      $8 = 0,
      $80 = 0,
      $81 = 0,
      $82 = 0,
      $83 = 0,
      $84 = 0,
      $85 = 0,
      $86 = 0,
      $87 = 0;
    var $88 = 0,
      $89 = 0,
      $9 = 0,
      $90 = 0,
      $91 = 0,
      $92 = 0,
      $93 = 0,
      $94 = 0,
      $95 = 0,
      $96 = 0,
      $97 = 0,
      $98 = 0,
      $99 = 0,
      $Init = 0,
      $IsLeftFold = 0,
      $OperatorName = 0,
      $Pack = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp102 = 0;
    var $agg$tmp102$byval_copy = 0,
      $agg$tmp107 = 0,
      $agg$tmp107$byval_copy = 0,
      $agg$tmp112 = 0,
      $agg$tmp112$byval_copy = 0,
      $agg$tmp117 = 0,
      $agg$tmp117$byval_copy = 0,
      $agg$tmp122 = 0,
      $agg$tmp122$byval_copy = 0,
      $agg$tmp127 = 0,
      $agg$tmp127$byval_copy = 0,
      $agg$tmp132 = 0,
      $agg$tmp132$byval_copy = 0,
      $agg$tmp137 = 0,
      $agg$tmp137$byval_copy = 0,
      $agg$tmp142 = 0,
      $agg$tmp142$byval_copy = 0,
      $agg$tmp147 = 0,
      $agg$tmp147$byval_copy = 0,
      $agg$tmp152 = 0;
    var $agg$tmp152$byval_copy = 0,
      $agg$tmp157 = 0,
      $agg$tmp157$byval_copy = 0,
      $agg$tmp162 = 0,
      $agg$tmp162$byval_copy = 0,
      $agg$tmp167 = 0,
      $agg$tmp167$byval_copy = 0,
      $agg$tmp22 = 0,
      $agg$tmp22$byval_copy = 0,
      $agg$tmp27 = 0,
      $agg$tmp27$byval_copy = 0,
      $agg$tmp32 = 0,
      $agg$tmp32$byval_copy = 0,
      $agg$tmp37 = 0,
      $agg$tmp37$byval_copy = 0,
      $agg$tmp42 = 0,
      $agg$tmp42$byval_copy = 0,
      $agg$tmp47 = 0,
      $agg$tmp47$byval_copy = 0,
      $agg$tmp52 = 0;
    var $agg$tmp52$byval_copy = 0,
      $agg$tmp57 = 0,
      $agg$tmp57$byval_copy = 0,
      $agg$tmp62 = 0,
      $agg$tmp62$byval_copy = 0,
      $agg$tmp67 = 0,
      $agg$tmp67$byval_copy = 0,
      $agg$tmp72 = 0,
      $agg$tmp72$byval_copy = 0,
      $agg$tmp77 = 0,
      $agg$tmp77$byval_copy = 0,
      $agg$tmp82 = 0,
      $agg$tmp82$byval_copy = 0,
      $agg$tmp87 = 0,
      $agg$tmp87$byval_copy = 0,
      $agg$tmp92 = 0,
      $agg$tmp92$byval_copy = 0,
      $agg$tmp97 = 0,
      $agg$tmp97$byval_copy = 0,
      $call = 0;
    var $call103 = 0,
      $call108 = 0,
      $call113 = 0,
      $call118 = 0,
      $call123 = 0,
      $call128 = 0,
      $call133 = 0,
      $call138 = 0,
      $call143 = 0,
      $call148 = 0,
      $call153 = 0,
      $call158 = 0,
      $call163 = 0,
      $call168 = 0,
      $call19 = 0,
      $call2 = 0,
      $call203 = 0,
      $call204 = 0,
      $call210 = 0,
      $call219 = 0;
    var $call23 = 0,
      $call28 = 0,
      $call33 = 0,
      $call38 = 0,
      $call43 = 0,
      $call48 = 0,
      $call53 = 0,
      $call58 = 0,
      $call63 = 0,
      $call68 = 0,
      $call73 = 0,
      $call78 = 0,
      $call83 = 0,
      $call88 = 0,
      $call93 = 0,
      $call98 = 0,
      $cmp205 = 0,
      $cmp211 = 0,
      $incdec$ptr = 0,
      $ref$tmp = 0;
    var $ref$tmp100 = 0,
      $ref$tmp105 = 0,
      $ref$tmp110 = 0,
      $ref$tmp115 = 0,
      $ref$tmp120 = 0,
      $ref$tmp125 = 0,
      $ref$tmp130 = 0,
      $ref$tmp135 = 0,
      $ref$tmp140 = 0,
      $ref$tmp145 = 0,
      $ref$tmp150 = 0,
      $ref$tmp155 = 0,
      $ref$tmp160 = 0,
      $ref$tmp165 = 0,
      $ref$tmp170 = 0,
      $ref$tmp25 = 0,
      $ref$tmp30 = 0,
      $ref$tmp35 = 0,
      $ref$tmp40 = 0,
      $ref$tmp45 = 0;
    var $ref$tmp50 = 0,
      $ref$tmp55 = 0,
      $ref$tmp60 = 0,
      $ref$tmp65 = 0,
      $ref$tmp70 = 0,
      $ref$tmp75 = 0,
      $ref$tmp80 = 0,
      $ref$tmp85 = 0,
      $ref$tmp90 = 0,
      $ref$tmp95 = 0,
      $retval$0 = 0,
      $retval$1 = 0,
      $retval$2 = 0,
      $retval$3 = 0,
      $storemerge = 0,
      $tobool215 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 768) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(768 | 0);
    $agg$tmp167$byval_copy = (sp + 752) | 0;
    $agg$tmp162$byval_copy = (sp + 744) | 0;
    $agg$tmp157$byval_copy = (sp + 736) | 0;
    $agg$tmp152$byval_copy = (sp + 728) | 0;
    $agg$tmp147$byval_copy = (sp + 720) | 0;
    $agg$tmp142$byval_copy = (sp + 712) | 0;
    $agg$tmp137$byval_copy = (sp + 704) | 0;
    $agg$tmp132$byval_copy = (sp + 696) | 0;
    $agg$tmp127$byval_copy = (sp + 688) | 0;
    $agg$tmp122$byval_copy = (sp + 680) | 0;
    $agg$tmp117$byval_copy = (sp + 672) | 0;
    $agg$tmp112$byval_copy = (sp + 664) | 0;
    $agg$tmp107$byval_copy = (sp + 656) | 0;
    $agg$tmp102$byval_copy = (sp + 648) | 0;
    $agg$tmp97$byval_copy = (sp + 640) | 0;
    $agg$tmp92$byval_copy = (sp + 632) | 0;
    $agg$tmp87$byval_copy = (sp + 624) | 0;
    $agg$tmp82$byval_copy = (sp + 616) | 0;
    $agg$tmp77$byval_copy = (sp + 608) | 0;
    $agg$tmp72$byval_copy = (sp + 600) | 0;
    $agg$tmp67$byval_copy = (sp + 592) | 0;
    $agg$tmp62$byval_copy = (sp + 584) | 0;
    $agg$tmp57$byval_copy = (sp + 576) | 0;
    $agg$tmp52$byval_copy = (sp + 568) | 0;
    $agg$tmp47$byval_copy = (sp + 560) | 0;
    $agg$tmp42$byval_copy = (sp + 552) | 0;
    $agg$tmp37$byval_copy = (sp + 544) | 0;
    $agg$tmp32$byval_copy = (sp + 536) | 0;
    $agg$tmp27$byval_copy = (sp + 528) | 0;
    $agg$tmp22$byval_copy = (sp + 520) | 0;
    $agg$tmp$byval_copy = (sp + 512) | 0;
    $IsLeftFold = (sp + 760) | 0;
    $OperatorName = (sp + 248) | 0;
    $agg$tmp = (sp + 504) | 0;
    $ref$tmp = (sp + 240) | 0;
    $agg$tmp22 = (sp + 496) | 0;
    $ref$tmp25 = (sp + 232) | 0;
    $agg$tmp27 = (sp + 488) | 0;
    $ref$tmp30 = (sp + 224) | 0;
    $agg$tmp32 = (sp + 480) | 0;
    $ref$tmp35 = (sp + 216) | 0;
    $agg$tmp37 = (sp + 472) | 0;
    $ref$tmp40 = (sp + 208) | 0;
    $agg$tmp42 = (sp + 464) | 0;
    $ref$tmp45 = (sp + 200) | 0;
    $agg$tmp47 = (sp + 456) | 0;
    $ref$tmp50 = (sp + 192) | 0;
    $agg$tmp52 = (sp + 448) | 0;
    $ref$tmp55 = (sp + 184) | 0;
    $agg$tmp57 = (sp + 440) | 0;
    $ref$tmp60 = (sp + 176) | 0;
    $agg$tmp62 = (sp + 432) | 0;
    $ref$tmp65 = (sp + 168) | 0;
    $agg$tmp67 = (sp + 424) | 0;
    $ref$tmp70 = (sp + 160) | 0;
    $agg$tmp72 = (sp + 416) | 0;
    $ref$tmp75 = (sp + 152) | 0;
    $agg$tmp77 = (sp + 408) | 0;
    $ref$tmp80 = (sp + 144) | 0;
    $agg$tmp82 = (sp + 400) | 0;
    $ref$tmp85 = (sp + 136) | 0;
    $agg$tmp87 = (sp + 392) | 0;
    $ref$tmp90 = (sp + 128) | 0;
    $agg$tmp92 = (sp + 384) | 0;
    $ref$tmp95 = (sp + 120) | 0;
    $agg$tmp97 = (sp + 376) | 0;
    $ref$tmp100 = (sp + 112) | 0;
    $agg$tmp102 = (sp + 368) | 0;
    $ref$tmp105 = (sp + 104) | 0;
    $agg$tmp107 = (sp + 360) | 0;
    $ref$tmp110 = (sp + 96) | 0;
    $agg$tmp112 = (sp + 352) | 0;
    $ref$tmp115 = (sp + 88) | 0;
    $agg$tmp117 = (sp + 344) | 0;
    $ref$tmp120 = (sp + 80) | 0;
    $agg$tmp122 = (sp + 336) | 0;
    $ref$tmp125 = (sp + 72) | 0;
    $agg$tmp127 = (sp + 328) | 0;
    $ref$tmp130 = (sp + 64) | 0;
    $agg$tmp132 = (sp + 320) | 0;
    $ref$tmp135 = (sp + 56) | 0;
    $agg$tmp137 = (sp + 312) | 0;
    $ref$tmp140 = (sp + 48) | 0;
    $agg$tmp142 = (sp + 304) | 0;
    $ref$tmp145 = (sp + 40) | 0;
    $agg$tmp147 = (sp + 296) | 0;
    $ref$tmp150 = (sp + 32) | 0;
    $agg$tmp152 = (sp + 288) | 0;
    $ref$tmp155 = (sp + 24) | 0;
    $agg$tmp157 = (sp + 280) | 0;
    $ref$tmp160 = (sp + 16) | 0;
    $agg$tmp162 = (sp + 272) | 0;
    $ref$tmp165 = (sp + 8) | 0;
    $agg$tmp167 = (sp + 264) | 0;
    $ref$tmp170 = sp;
    $Pack = (sp + 260) | 0;
    $Init = (sp + 256) | 0;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
        $this,
        102
      ) | 0;
    if ($call) {
      $call2 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
          $this,
          0
        ) | 0;
      switch (($call2 << 24) >> 24) {
        case 76:
        case 108: {
          $storemerge = 1;
          label = 4;
          break;
        }
        case 82:
        case 114: {
          $storemerge = 0;
          label = 4;
          break;
        }
        default: {
          $retval$2 = 0;
        }
      }
      if ((label | 0) == 4) {
        HEAP8[$IsLeftFold >> 0] = $storemerge;
        $0 = HEAP32[$this >> 2] | 0;
        $incdec$ptr = ($0 + 1) | 0;
        HEAP32[$this >> 2] = $incdec$ptr;
        __ZN12_GLOBAL__N_110StringViewC2Ev($OperatorName);
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 13931);
        HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
        HEAP32[($agg$tmp$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp + 4) >> 2] | 0;
        $call19 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
            $this,
            $agg$tmp$byval_copy
          ) | 0;
        do {
          if ($call19) {
            __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp, 11123);
            $1 = $ref$tmp;
            $2 = $1;
            $3 = HEAP32[$2 >> 2] | 0;
            $4 = ($1 + 4) | 0;
            $5 = $4;
            $6 = HEAP32[$5 >> 2] | 0;
            $7 = $OperatorName;
            $8 = $7;
            HEAP32[$8 >> 2] = $3;
            $9 = ($7 + 4) | 0;
            $10 = $9;
            HEAP32[$10 >> 2] = $6;
            label = 66;
          } else {
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp22, 13934);
            HEAP32[$agg$tmp22$byval_copy >> 2] = HEAP32[$agg$tmp22 >> 2] | 0;
            HEAP32[($agg$tmp22$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp22 + 4) >> 2] | 0;
            $call23 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp22$byval_copy
              ) | 0;
            if ($call23) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp25, 11121);
              $11 = $ref$tmp25;
              $12 = $11;
              $13 = HEAP32[$12 >> 2] | 0;
              $14 = ($11 + 4) | 0;
              $15 = $14;
              $16 = HEAP32[$15 >> 2] | 0;
              $17 = $OperatorName;
              $18 = $17;
              HEAP32[$18 >> 2] = $13;
              $19 = ($17 + 4) | 0;
              $20 = $19;
              HEAP32[$20 >> 2] = $16;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp27, 13937);
            HEAP32[$agg$tmp27$byval_copy >> 2] = HEAP32[$agg$tmp27 >> 2] | 0;
            HEAP32[($agg$tmp27$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp27 + 4) >> 2] | 0;
            $call28 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp27$byval_copy
              ) | 0;
            if ($call28) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp30, 11835);
              $21 = $ref$tmp30;
              $22 = $21;
              $23 = HEAP32[$22 >> 2] | 0;
              $24 = ($21 + 4) | 0;
              $25 = $24;
              $26 = HEAP32[$25 >> 2] | 0;
              $27 = $OperatorName;
              $28 = $27;
              HEAP32[$28 >> 2] = $23;
              $29 = ($27 + 4) | 0;
              $30 = $29;
              HEAP32[$30 >> 2] = $26;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp32, 13940);
            HEAP32[$agg$tmp32$byval_copy >> 2] = HEAP32[$agg$tmp32 >> 2] | 0;
            HEAP32[($agg$tmp32$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp32 + 4) >> 2] | 0;
            $call33 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp32$byval_copy
              ) | 0;
            if ($call33) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp35, 11838);
              $31 = $ref$tmp35;
              $32 = $31;
              $33 = HEAP32[$32 >> 2] | 0;
              $34 = ($31 + 4) | 0;
              $35 = $34;
              $36 = HEAP32[$35 >> 2] | 0;
              $37 = $OperatorName;
              $38 = $37;
              HEAP32[$38 >> 2] = $33;
              $39 = ($37 + 4) | 0;
              $40 = $39;
              HEAP32[$40 >> 2] = $36;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp37, 13943);
            HEAP32[$agg$tmp37$byval_copy >> 2] = HEAP32[$agg$tmp37 >> 2] | 0;
            HEAP32[($agg$tmp37$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp37 + 4) >> 2] | 0;
            $call38 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp37$byval_copy
              ) | 0;
            if ($call38) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp40, 11850);
              $41 = $ref$tmp40;
              $42 = $41;
              $43 = HEAP32[$42 >> 2] | 0;
              $44 = ($41 + 4) | 0;
              $45 = $44;
              $46 = HEAP32[$45 >> 2] | 0;
              $47 = $OperatorName;
              $48 = $47;
              HEAP32[$48 >> 2] = $43;
              $49 = ($47 + 4) | 0;
              $50 = $49;
              HEAP32[$50 >> 2] = $46;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp42, 13946);
            HEAP32[$agg$tmp42$byval_copy >> 2] = HEAP32[$agg$tmp42 >> 2] | 0;
            HEAP32[($agg$tmp42$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp42 + 4) >> 2] | 0;
            $call43 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp42$byval_copy
              ) | 0;
            if ($call43) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp45, 11854);
              $51 = $ref$tmp45;
              $52 = $51;
              $53 = HEAP32[$52 >> 2] | 0;
              $54 = ($51 + 4) | 0;
              $55 = $54;
              $56 = HEAP32[$55 >> 2] | 0;
              $57 = $OperatorName;
              $58 = $57;
              HEAP32[$58 >> 2] = $53;
              $59 = ($57 + 4) | 0;
              $60 = $59;
              HEAP32[$60 >> 2] = $56;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp47, 13949);
            HEAP32[$agg$tmp47$byval_copy >> 2] = HEAP32[$agg$tmp47 >> 2] | 0;
            HEAP32[($agg$tmp47$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp47 + 4) >> 2] | 0;
            $call48 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp47$byval_copy
              ) | 0;
            if ($call48) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp50, 11857);
              $61 = $ref$tmp50;
              $62 = $61;
              $63 = HEAP32[$62 >> 2] | 0;
              $64 = ($61 + 4) | 0;
              $65 = $64;
              $66 = HEAP32[$65 >> 2] | 0;
              $67 = $OperatorName;
              $68 = $67;
              HEAP32[$68 >> 2] = $63;
              $69 = ($67 + 4) | 0;
              $70 = $69;
              HEAP32[$70 >> 2] = $66;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp52, 13952);
            HEAP32[$agg$tmp52$byval_copy >> 2] = HEAP32[$agg$tmp52 >> 2] | 0;
            HEAP32[($agg$tmp52$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp52 + 4) >> 2] | 0;
            $call53 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp52$byval_copy
              ) | 0;
            if ($call53) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp55, 11859);
              $71 = $ref$tmp55;
              $72 = $71;
              $73 = HEAP32[$72 >> 2] | 0;
              $74 = ($71 + 4) | 0;
              $75 = $74;
              $76 = HEAP32[$75 >> 2] | 0;
              $77 = $OperatorName;
              $78 = $77;
              HEAP32[$78 >> 2] = $73;
              $79 = ($77 + 4) | 0;
              $80 = $79;
              HEAP32[$80 >> 2] = $76;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp57, 13955);
            HEAP32[$agg$tmp57$byval_copy >> 2] = HEAP32[$agg$tmp57 >> 2] | 0;
            HEAP32[($agg$tmp57$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp57 + 4) >> 2] | 0;
            $call58 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp57$byval_copy
              ) | 0;
            if ($call58) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp60, 11862);
              $81 = $ref$tmp60;
              $82 = $81;
              $83 = HEAP32[$82 >> 2] | 0;
              $84 = ($81 + 4) | 0;
              $85 = $84;
              $86 = HEAP32[$85 >> 2] | 0;
              $87 = $OperatorName;
              $88 = $87;
              HEAP32[$88 >> 2] = $83;
              $89 = ($87 + 4) | 0;
              $90 = $89;
              HEAP32[$90 >> 2] = $86;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp62, 13958);
            HEAP32[$agg$tmp62$byval_copy >> 2] = HEAP32[$agg$tmp62 >> 2] | 0;
            HEAP32[($agg$tmp62$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp62 + 4) >> 2] | 0;
            $call63 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp62$byval_copy
              ) | 0;
            if ($call63) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp65, 11864);
              $91 = $ref$tmp65;
              $92 = $91;
              $93 = HEAP32[$92 >> 2] | 0;
              $94 = ($91 + 4) | 0;
              $95 = $94;
              $96 = HEAP32[$95 >> 2] | 0;
              $97 = $OperatorName;
              $98 = $97;
              HEAP32[$98 >> 2] = $93;
              $99 = ($97 + 4) | 0;
              $100 = $99;
              HEAP32[$100 >> 2] = $96;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp67, 13961);
            HEAP32[$agg$tmp67$byval_copy >> 2] = HEAP32[$agg$tmp67 >> 2] | 0;
            HEAP32[($agg$tmp67$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp67 + 4) >> 2] | 0;
            $call68 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp67$byval_copy
              ) | 0;
            if ($call68) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp70, 11867);
              $101 = $ref$tmp70;
              $102 = $101;
              $103 = HEAP32[$102 >> 2] | 0;
              $104 = ($101 + 4) | 0;
              $105 = $104;
              $106 = HEAP32[$105 >> 2] | 0;
              $107 = $OperatorName;
              $108 = $107;
              HEAP32[$108 >> 2] = $103;
              $109 = ($107 + 4) | 0;
              $110 = $109;
              HEAP32[$110 >> 2] = $106;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp72, 13964);
            HEAP32[$agg$tmp72$byval_copy >> 2] = HEAP32[$agg$tmp72 >> 2] | 0;
            HEAP32[($agg$tmp72$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp72 + 4) >> 2] | 0;
            $call73 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp72$byval_copy
              ) | 0;
            if ($call73) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp75, 11870);
              $111 = $ref$tmp75;
              $112 = $111;
              $113 = HEAP32[$112 >> 2] | 0;
              $114 = ($111 + 4) | 0;
              $115 = $114;
              $116 = HEAP32[$115 >> 2] | 0;
              $117 = $OperatorName;
              $118 = $117;
              HEAP32[$118 >> 2] = $113;
              $119 = ($117 + 4) | 0;
              $120 = $119;
              HEAP32[$120 >> 2] = $116;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp77, 13967);
            HEAP32[$agg$tmp77$byval_copy >> 2] = HEAP32[$agg$tmp77 >> 2] | 0;
            HEAP32[($agg$tmp77$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp77 + 4) >> 2] | 0;
            $call78 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp77$byval_copy
              ) | 0;
            if ($call78) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp80, 11194);
              $121 = $ref$tmp80;
              $122 = $121;
              $123 = HEAP32[$122 >> 2] | 0;
              $124 = ($121 + 4) | 0;
              $125 = $124;
              $126 = HEAP32[$125 >> 2] | 0;
              $127 = $OperatorName;
              $128 = $127;
              HEAP32[$128 >> 2] = $123;
              $129 = ($127 + 4) | 0;
              $130 = $129;
              HEAP32[$130 >> 2] = $126;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp82, 13970);
            HEAP32[$agg$tmp82$byval_copy >> 2] = HEAP32[$agg$tmp82 >> 2] | 0;
            HEAP32[($agg$tmp82$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp82 + 4) >> 2] | 0;
            $call83 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp82$byval_copy
              ) | 0;
            if ($call83) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp85, 11873);
              $131 = $ref$tmp85;
              $132 = $131;
              $133 = HEAP32[$132 >> 2] | 0;
              $134 = ($131 + 4) | 0;
              $135 = $134;
              $136 = HEAP32[$135 >> 2] | 0;
              $137 = $OperatorName;
              $138 = $137;
              HEAP32[$138 >> 2] = $133;
              $139 = ($137 + 4) | 0;
              $140 = $139;
              HEAP32[$140 >> 2] = $136;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp87, 13973);
            HEAP32[$agg$tmp87$byval_copy >> 2] = HEAP32[$agg$tmp87 >> 2] | 0;
            HEAP32[($agg$tmp87$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp87 + 4) >> 2] | 0;
            $call88 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp87$byval_copy
              ) | 0;
            if ($call88) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp90, 11876);
              $141 = $ref$tmp90;
              $142 = $141;
              $143 = HEAP32[$142 >> 2] | 0;
              $144 = ($141 + 4) | 0;
              $145 = $144;
              $146 = HEAP32[$145 >> 2] | 0;
              $147 = $OperatorName;
              $148 = $147;
              HEAP32[$148 >> 2] = $143;
              $149 = ($147 + 4) | 0;
              $150 = $149;
              HEAP32[$150 >> 2] = $146;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp92, 13976);
            HEAP32[$agg$tmp92$byval_copy >> 2] = HEAP32[$agg$tmp92 >> 2] | 0;
            HEAP32[($agg$tmp92$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp92 + 4) >> 2] | 0;
            $call93 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp92$byval_copy
              ) | 0;
            if ($call93) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp95, 11879);
              $151 = $ref$tmp95;
              $152 = $151;
              $153 = HEAP32[$152 >> 2] | 0;
              $154 = ($151 + 4) | 0;
              $155 = $154;
              $156 = HEAP32[$155 >> 2] | 0;
              $157 = $OperatorName;
              $158 = $157;
              HEAP32[$158 >> 2] = $153;
              $159 = ($157 + 4) | 0;
              $160 = $159;
              HEAP32[$160 >> 2] = $156;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp97, 13979);
            HEAP32[$agg$tmp97$byval_copy >> 2] = HEAP32[$agg$tmp97 >> 2] | 0;
            HEAP32[($agg$tmp97$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp97 + 4) >> 2] | 0;
            $call98 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp97$byval_copy
              ) | 0;
            if ($call98) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp100, 11301);
              $161 = $ref$tmp100;
              $162 = $161;
              $163 = HEAP32[$162 >> 2] | 0;
              $164 = ($161 + 4) | 0;
              $165 = $164;
              $166 = HEAP32[$165 >> 2] | 0;
              $167 = $OperatorName;
              $168 = $167;
              HEAP32[$168 >> 2] = $163;
              $169 = ($167 + 4) | 0;
              $170 = $169;
              HEAP32[$170 >> 2] = $166;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp102, 13982);
            HEAP32[$agg$tmp102$byval_copy >> 2] = HEAP32[$agg$tmp102 >> 2] | 0;
            HEAP32[($agg$tmp102$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp102 + 4) >> 2] | 0;
            $call103 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp102$byval_copy
              ) | 0;
            if ($call103) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp105, 11722);
              $171 = $ref$tmp105;
              $172 = $171;
              $173 = HEAP32[$172 >> 2] | 0;
              $174 = ($171 + 4) | 0;
              $175 = $174;
              $176 = HEAP32[$175 >> 2] | 0;
              $177 = $OperatorName;
              $178 = $177;
              HEAP32[$178 >> 2] = $173;
              $179 = ($177 + 4) | 0;
              $180 = $179;
              HEAP32[$180 >> 2] = $176;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp107, 13985);
            HEAP32[$agg$tmp107$byval_copy >> 2] = HEAP32[$agg$tmp107 >> 2] | 0;
            HEAP32[($agg$tmp107$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp107 + 4) >> 2] | 0;
            $call108 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp107$byval_copy
              ) | 0;
            if ($call108) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp110, 11883);
              $181 = $ref$tmp110;
              $182 = $181;
              $183 = HEAP32[$182 >> 2] | 0;
              $184 = ($181 + 4) | 0;
              $185 = $184;
              $186 = HEAP32[$185 >> 2] | 0;
              $187 = $OperatorName;
              $188 = $187;
              HEAP32[$188 >> 2] = $183;
              $189 = ($187 + 4) | 0;
              $190 = $189;
              HEAP32[$190 >> 2] = $186;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp112, 13988);
            HEAP32[$agg$tmp112$byval_copy >> 2] = HEAP32[$agg$tmp112 >> 2] | 0;
            HEAP32[($agg$tmp112$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp112 + 4) >> 2] | 0;
            $call113 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp112$byval_copy
              ) | 0;
            if ($call113) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp115, 11188);
              $191 = $ref$tmp115;
              $192 = $191;
              $193 = HEAP32[$192 >> 2] | 0;
              $194 = ($191 + 4) | 0;
              $195 = $194;
              $196 = HEAP32[$195 >> 2] | 0;
              $197 = $OperatorName;
              $198 = $197;
              HEAP32[$198 >> 2] = $193;
              $199 = ($197 + 4) | 0;
              $200 = $199;
              HEAP32[$200 >> 2] = $196;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp117, 13991);
            HEAP32[$agg$tmp117$byval_copy >> 2] = HEAP32[$agg$tmp117 >> 2] | 0;
            HEAP32[($agg$tmp117$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp117 + 4) >> 2] | 0;
            $call118 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp117$byval_copy
              ) | 0;
            if ($call118) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp120, 11886);
              $201 = $ref$tmp120;
              $202 = $201;
              $203 = HEAP32[$202 >> 2] | 0;
              $204 = ($201 + 4) | 0;
              $205 = $204;
              $206 = HEAP32[$205 >> 2] | 0;
              $207 = $OperatorName;
              $208 = $207;
              HEAP32[$208 >> 2] = $203;
              $209 = ($207 + 4) | 0;
              $210 = $209;
              HEAP32[$210 >> 2] = $206;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp122, 13994);
            HEAP32[$agg$tmp122$byval_copy >> 2] = HEAP32[$agg$tmp122 >> 2] | 0;
            HEAP32[($agg$tmp122$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp122 + 4) >> 2] | 0;
            $call123 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp122$byval_copy
              ) | 0;
            if ($call123) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp125, 11892);
              $211 = $ref$tmp125;
              $212 = $211;
              $213 = HEAP32[$212 >> 2] | 0;
              $214 = ($211 + 4) | 0;
              $215 = $214;
              $216 = HEAP32[$215 >> 2] | 0;
              $217 = $OperatorName;
              $218 = $217;
              HEAP32[$218 >> 2] = $213;
              $219 = ($217 + 4) | 0;
              $220 = $219;
              HEAP32[$220 >> 2] = $216;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp127, 13997);
            HEAP32[$agg$tmp127$byval_copy >> 2] = HEAP32[$agg$tmp127 >> 2] | 0;
            HEAP32[($agg$tmp127$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp127 + 4) >> 2] | 0;
            $call128 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp127$byval_copy
              ) | 0;
            if ($call128) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp130, 11897);
              $221 = $ref$tmp130;
              $222 = $221;
              $223 = HEAP32[$222 >> 2] | 0;
              $224 = ($221 + 4) | 0;
              $225 = $224;
              $226 = HEAP32[$225 >> 2] | 0;
              $227 = $OperatorName;
              $228 = $227;
              HEAP32[$228 >> 2] = $223;
              $229 = ($227 + 4) | 0;
              $230 = $229;
              HEAP32[$230 >> 2] = $226;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp132, 14000);
            HEAP32[$agg$tmp132$byval_copy >> 2] = HEAP32[$agg$tmp132 >> 2] | 0;
            HEAP32[($agg$tmp132$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp132 + 4) >> 2] | 0;
            $call133 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp132$byval_copy
              ) | 0;
            if ($call133) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp135, 11900);
              $231 = $ref$tmp135;
              $232 = $231;
              $233 = HEAP32[$232 >> 2] | 0;
              $234 = ($231 + 4) | 0;
              $235 = $234;
              $236 = HEAP32[$235 >> 2] | 0;
              $237 = $OperatorName;
              $238 = $237;
              HEAP32[$238 >> 2] = $233;
              $239 = ($237 + 4) | 0;
              $240 = $239;
              HEAP32[$240 >> 2] = $236;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp137, 14003);
            HEAP32[$agg$tmp137$byval_copy >> 2] = HEAP32[$agg$tmp137 >> 2] | 0;
            HEAP32[($agg$tmp137$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp137 + 4) >> 2] | 0;
            $call138 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp137$byval_copy
              ) | 0;
            if ($call138) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp140, 11902);
              $241 = $ref$tmp140;
              $242 = $241;
              $243 = HEAP32[$242 >> 2] | 0;
              $244 = ($241 + 4) | 0;
              $245 = $244;
              $246 = HEAP32[$245 >> 2] | 0;
              $247 = $OperatorName;
              $248 = $247;
              HEAP32[$248 >> 2] = $243;
              $249 = ($247 + 4) | 0;
              $250 = $249;
              HEAP32[$250 >> 2] = $246;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp142, 14006);
            HEAP32[$agg$tmp142$byval_copy >> 2] = HEAP32[$agg$tmp142 >> 2] | 0;
            HEAP32[($agg$tmp142$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp142 + 4) >> 2] | 0;
            $call143 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp142$byval_copy
              ) | 0;
            if ($call143) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp145, 11909);
              $251 = $ref$tmp145;
              $252 = $251;
              $253 = HEAP32[$252 >> 2] | 0;
              $254 = ($251 + 4) | 0;
              $255 = $254;
              $256 = HEAP32[$255 >> 2] | 0;
              $257 = $OperatorName;
              $258 = $257;
              HEAP32[$258 >> 2] = $253;
              $259 = ($257 + 4) | 0;
              $260 = $259;
              HEAP32[$260 >> 2] = $256;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp147, 14009);
            HEAP32[$agg$tmp147$byval_copy >> 2] = HEAP32[$agg$tmp147 >> 2] | 0;
            HEAP32[($agg$tmp147$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp147 + 4) >> 2] | 0;
            $call148 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp147$byval_copy
              ) | 0;
            if ($call148) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp150, 11911);
              $261 = $ref$tmp150;
              $262 = $261;
              $263 = HEAP32[$262 >> 2] | 0;
              $264 = ($261 + 4) | 0;
              $265 = $264;
              $266 = HEAP32[$265 >> 2] | 0;
              $267 = $OperatorName;
              $268 = $267;
              HEAP32[$268 >> 2] = $263;
              $269 = ($267 + 4) | 0;
              $270 = $269;
              HEAP32[$270 >> 2] = $266;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp152, 14012);
            HEAP32[$agg$tmp152$byval_copy >> 2] = HEAP32[$agg$tmp152 >> 2] | 0;
            HEAP32[($agg$tmp152$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp152 + 4) >> 2] | 0;
            $call153 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp152$byval_copy
              ) | 0;
            if ($call153) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp155, 11920);
              $271 = $ref$tmp155;
              $272 = $271;
              $273 = HEAP32[$272 >> 2] | 0;
              $274 = ($271 + 4) | 0;
              $275 = $274;
              $276 = HEAP32[$275 >> 2] | 0;
              $277 = $OperatorName;
              $278 = $277;
              HEAP32[$278 >> 2] = $273;
              $279 = ($277 + 4) | 0;
              $280 = $279;
              HEAP32[$280 >> 2] = $276;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp157, 14015);
            HEAP32[$agg$tmp157$byval_copy >> 2] = HEAP32[$agg$tmp157 >> 2] | 0;
            HEAP32[($agg$tmp157$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp157 + 4) >> 2] | 0;
            $call158 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp157$byval_copy
              ) | 0;
            if ($call158) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp160, 11922);
              $281 = $ref$tmp160;
              $282 = $281;
              $283 = HEAP32[$282 >> 2] | 0;
              $284 = ($281 + 4) | 0;
              $285 = $284;
              $286 = HEAP32[$285 >> 2] | 0;
              $287 = $OperatorName;
              $288 = $287;
              HEAP32[$288 >> 2] = $283;
              $289 = ($287 + 4) | 0;
              $290 = $289;
              HEAP32[$290 >> 2] = $286;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp162, 14018);
            HEAP32[$agg$tmp162$byval_copy >> 2] = HEAP32[$agg$tmp162 >> 2] | 0;
            HEAP32[($agg$tmp162$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp162 + 4) >> 2] | 0;
            $call163 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp162$byval_copy
              ) | 0;
            if ($call163) {
              __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp165, 11925);
              $291 = $ref$tmp165;
              $292 = $291;
              $293 = HEAP32[$292 >> 2] | 0;
              $294 = ($291 + 4) | 0;
              $295 = $294;
              $296 = HEAP32[$295 >> 2] | 0;
              $297 = $OperatorName;
              $298 = $297;
              HEAP32[$298 >> 2] = $293;
              $299 = ($297 + 4) | 0;
              $300 = $299;
              HEAP32[$300 >> 2] = $296;
              label = 66;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167, 14021);
            HEAP32[$agg$tmp167$byval_copy >> 2] = HEAP32[$agg$tmp167 >> 2] | 0;
            HEAP32[($agg$tmp167$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp167 + 4) >> 2] | 0;
            $call168 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp167$byval_copy
              ) | 0;
            if (!$call168) {
              $retval$1 = 0;
              break;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp170, 11928);
            $301 = $ref$tmp170;
            $302 = $301;
            $303 = HEAP32[$302 >> 2] | 0;
            $304 = ($301 + 4) | 0;
            $305 = $304;
            $306 = HEAP32[$305 >> 2] | 0;
            $307 = $OperatorName;
            $308 = $307;
            HEAP32[$308 >> 2] = $303;
            $309 = ($307 + 4) | 0;
            $310 = $309;
            HEAP32[$310 >> 2] = $306;
            label = 66;
          }
        } while (0);
        if ((label | 0) == 66) {
          $call203 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call204 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
              $call203
            ) | 0;
          HEAP32[$Pack >> 2] = $call204;
          HEAP32[$Init >> 2] = 0;
          $cmp205 = ($call204 | 0) == (0 | 0);
          $311 = $call204;
          L100: do {
            if ($cmp205) {
              $retval$0 = 0;
            } else {
              switch (($call2 << 24) >> 24) {
                case 76:
                case 82: {
                  $call210 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                      $call203
                    ) | 0;
                  HEAP32[$Init >> 2] = $call210;
                  $cmp211 = ($call210 | 0) == (0 | 0);
                  $312 = $call210;
                  if ($cmp211) {
                    $retval$0 = 0;
                    break L100;
                  }
                  $tobool215 = ($storemerge << 24) >> 24 == 0;
                  if (!$tobool215) {
                    HEAP32[$Pack >> 2] = $312;
                    HEAP32[$Init >> 2] = $311;
                  }
                  break;
                }
                default: {
                }
              }
              $call219 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8FoldExprEJRbRNS_10StringViewERPNS0_4NodeESD_EEESC_DpOT0_(
                  $this,
                  $IsLeftFold,
                  $OperatorName,
                  $Pack,
                  $Init
                ) | 0;
              $retval$0 = $call219;
            }
          } while (0);
          $retval$1 = $retval$0;
        }
        $retval$2 = $retval$1;
      }
      $retval$3 = $retval$2;
    } else {
      $retval$3 = 0;
    }
    STACKTOP = sp;
    return $retval$3 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE(
    $this,
    $Kind
  ) {
    $this = $this | 0;
    $Kind = $Kind | 0;
    var $LHS = 0,
      $RHS = 0,
      $call = 0,
      $call2 = 0,
      $call4 = 0,
      $call8 = 0,
      $cmp = 0,
      $cmp5 = 0,
      $retval$0 = 0,
      $retval$1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $LHS = (sp + 4) | 0;
    $RHS = sp;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
        $this
      ) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
        $call
      ) | 0;
    HEAP32[$LHS >> 2] = $call2;
    $cmp = ($call2 | 0) == (0 | 0);
    if ($cmp) {
      $retval$1 = 0;
    } else {
      $call4 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
          $call
        ) | 0;
      HEAP32[$RHS >> 2] = $call4;
      $cmp5 = ($call4 | 0) == (0 | 0);
      if ($cmp5) {
        $retval$0 = 0;
      } else {
        $call8 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BinaryExprEJRPNS0_4NodeERNS_10StringViewESA_EEES9_DpOT0_(
            $this,
            $LHS,
            $Kind,
            $RHS
          ) | 0;
        $retval$0 = $call8;
      }
      $retval$1 = $retval$0;
    }
    STACKTOP = sp;
    return $retval$1 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE(
    $this,
    $Kind
  ) {
    $this = $this | 0;
    $Kind = $Kind | 0;
    var $E = 0,
      $call = 0,
      $call2 = 0,
      $call3 = 0,
      $cmp = 0,
      $retval$0 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $E = sp;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
        $this
      ) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
        $call
      ) | 0;
    HEAP32[$E >> 2] = $call2;
    $cmp = ($call2 | 0) == (0 | 0);
    if ($cmp) {
      $retval$0 = 0;
    } else {
      $call3 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10PrefixExprEJRNS_10StringViewERPNS0_4NodeEEEESB_DpOT0_(
          $this,
          $Kind,
          $E
        ) | 0;
      $retval$0 = $call3;
    }
    STACKTOP = sp;
    return $retval$0 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA10_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call8 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call8 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA10_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1,
        11115
      ) | 0;
    return $call8 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA11_KcRPNS0_4NodeESD_EEESC_DpOT0_(
    $this,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $ASTAllocator = 0,
      $call8 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call8 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA11_KcRPNS2_4NodeES9_EEEPT_DpOT0_(
        $ASTAllocator,
        13820,
        $args1,
        $args3
      ) | 0;
    return $call8 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CallExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CallExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseConversionExprEv(
    $this
  ) {
    $this = $this | 0;
    var $E = 0,
      $E22 = 0,
      $Exprs = 0,
      $Names = 0,
      $SaveTemp = 0,
      $TryToParseTemplateArgs = 0,
      $Ty = 0,
      $add$ptr = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      $call10 = 0,
      $call13 = 0,
      $call18 = 0,
      $call2 = 0,
      $call24 = 0,
      $call29 = 0,
      $call4 = 0,
      $call7 = 0,
      $call9 = 0;
    var $cmp = 0,
      $cmp14 = 0,
      $cmp25 = 0,
      $ref$tmp = 0,
      $retval$3 = 0,
      $retval$4 = 0,
      $retval$5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 64) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
    $agg$tmp$byval_copy = (sp + 56) | 0;
    $agg$tmp = (sp + 48) | 0;
    $Ty = (sp + 40) | 0;
    $SaveTemp = (sp + 32) | 0;
    $E = (sp + 24) | 0;
    $Exprs = (sp + 16) | 0;
    $E22 = (sp + 8) | 0;
    $ref$tmp = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 13719);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
        $this,
        $agg$tmp$byval_copy
      ) | 0;
    if ($call) {
      $TryToParseTemplateArgs = ($this + 360) | 0;
      __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb(
        $SaveTemp,
        $TryToParseTemplateArgs,
        0
      );
      $call2 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
          $this
        ) | 0;
      $call4 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
          $call2
        ) | 0;
      HEAP32[$Ty >> 2] = $call4;
      __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SaveTemp);
      $cmp = ($call4 | 0) == (0 | 0);
      do {
        if ($cmp) {
          $retval$4 = 0;
        } else {
          $call7 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
              $this,
              95
            ) | 0;
          if (!$call7) {
            $call24 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                $call2
              ) | 0;
            HEAP32[$E22 >> 2] = $call24;
            $cmp25 = ($call24 | 0) == (0 | 0);
            if ($cmp25) {
              $retval$3 = 0;
            } else {
              $add$ptr = ($E22 + 4) | 0;
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13makeNodeArrayIPPNS0_4NodeEEENS0_9NodeArrayET_SB_(
                $ref$tmp,
                $this,
                $E22,
                $add$ptr
              );
              $call29 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14ConversionExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_(
                  $this,
                  $Ty,
                  $ref$tmp
                ) | 0;
              $retval$3 = $call29;
            }
            $retval$4 = $retval$3;
            break;
          }
          $Names = ($this + 8) | 0;
          $call9 =
            __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv(
              $Names
            ) | 0;
          while (1) {
            $call10 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                $this,
                69
              ) | 0;
            if ($call10) {
              label = 9;
              break;
            }
            $call13 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                $call2
              ) | 0;
            HEAP32[$E >> 2] = $call13;
            $cmp14 = ($call13 | 0) == (0 | 0);
            if ($cmp14) {
              label = 7;
              break;
            }
            __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
              $Names,
              $E
            );
          }
          if ((label | 0) == 7) {
            $retval$4 = 0;
            break;
          } else if ((label | 0) == 9) {
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm(
              $Exprs,
              $this,
              $call9
            );
            $call18 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14ConversionExprEJRPNS0_4NodeERNS0_9NodeArrayEEEES9_DpOT0_(
                $this,
                $Ty,
                $Exprs
              ) | 0;
            $retval$4 = $call18;
            break;
          }
        }
      } while (0);
      $retval$5 = $retval$4;
    } else {
      $retval$5 = 0;
    }
    STACKTOP = sp;
    return $retval$5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10DeleteExprEJRPNS0_4NodeERbbEEES9_DpOT0_(
    $this,
    $args,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $ASTAllocator = 0,
      $call8 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call8 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10DeleteExprEJRPNS2_4NodeERbbEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1,
        $args3
      ) | 0;
    return $call8 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA13_KcRPNS0_4NodeESD_EEESC_DpOT0_(
    $this,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $ASTAllocator = 0,
      $call8 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call8 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA13_KcRPNS2_4NodeES9_EEEPT_DpOT0_(
        $ASTAllocator,
        13648,
        $args1,
        $args3
      ) | 0;
    return $call8 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv(
    $this
  ) {
    $this = $this | 0;
    var $$pre$phiZ2D = 0,
      $0 = 0,
      $Base = 0,
      $Base107 = 0,
      $Qual = 0,
      $Qual59 = 0,
      $SoFar = 0,
      $TA = 0,
      $TA92 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp38 = 0,
      $agg$tmp38$byval_copy = 0,
      $agg$tmp40 = 0,
      $agg$tmp40$byval_copy = 0,
      $brmerge = 0,
      $call = 0,
      $call109 = 0,
      $call113 = 0,
      $call13 = 0;
    var $call17 = 0,
      $call19 = 0,
      $call2 = 0,
      $call23 = 0,
      $call3 = 0,
      $call31 = 0,
      $call35 = 0,
      $call39 = 0,
      $call39$not = 0,
      $call41 = 0,
      $call44 = 0,
      $call45 = 0,
      $call5 = 0,
      $call51 = 0,
      $call54 = 0,
      $call60 = 0,
      $call61 = 0,
      $call67 = 0,
      $call70 = 0,
      $call80 = 0;
    var $call83 = 0,
      $call84 = 0,
      $call88 = 0,
      $call9 = 0,
      $call94 = 0,
      $call98 = 0,
      $cmp = 0,
      $cmp10 = 0,
      $cmp110 = 0,
      $cmp20 = 0,
      $cmp32 = 0,
      $cmp46 = 0,
      $cmp6 = 0,
      $cmp62 = 0,
      $cmp85 = 0,
      $cmp90 = 0,
      $cmp95 = 0,
      $conv55 = 0,
      $isdigit = 0,
      $isdigittmp = 0;
    var $retval$10 = 0,
      $retval$4 = 0,
      $retval$8 = 0,
      $tobool65 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 96) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96 | 0);
    $agg$tmp40$byval_copy = (sp + 80) | 0;
    $agg$tmp38$byval_copy = (sp + 72) | 0;
    $agg$tmp$byval_copy = (sp + 64) | 0;
    $SoFar = (sp + 56) | 0;
    $agg$tmp = (sp + 48) | 0;
    $TA = (sp + 40) | 0;
    $Qual = (sp + 36) | 0;
    $Base = (sp + 32) | 0;
    $agg$tmp38 = (sp + 24) | 0;
    $agg$tmp40 = (sp + 16) | 0;
    $Qual59 = (sp + 8) | 0;
    $TA92 = (sp + 4) | 0;
    $Base107 = sp;
    HEAP32[$SoFar >> 2] = 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 12858);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
        $this,
        $agg$tmp$byval_copy
      ) | 0;
    L1: do {
      if ($call) {
        $call2 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
            $this
          ) | 0;
        $call3 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedTypeEv(
            $call2
          ) | 0;
        HEAP32[$SoFar >> 2] = $call3;
        $cmp = ($call3 | 0) == (0 | 0);
        if ($cmp) {
          $retval$10 = 0;
        } else {
          $call5 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              0
            ) | 0;
          $cmp6 = ($call5 << 24) >> 24 == 73;
          do {
            if ($cmp6) {
              $call9 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb(
                  $call2,
                  0
                ) | 0;
              HEAP32[$TA >> 2] = $call9;
              $cmp10 = ($call9 | 0) == (0 | 0);
              if ($cmp10) {
                $retval$10 = 0;
                break L1;
              } else {
                $call13 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_(
                    $this,
                    $SoFar,
                    $TA
                  ) | 0;
                HEAP32[$SoFar >> 2] = $call13;
                break;
              }
            }
          } while (0);
          while (1) {
            $call17 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                $this,
                69
              ) | 0;
            if ($call17) {
              break;
            }
            $call19 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv(
                $call2
              ) | 0;
            HEAP32[$Qual >> 2] = $call19;
            $cmp20 = ($call19 | 0) == (0 | 0);
            if ($cmp20) {
              label = 35;
              break;
            }
            $call23 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_(
                $this,
                $SoFar,
                $Qual
              ) | 0;
            HEAP32[$SoFar >> 2] = $call23;
          }
          if ((label | 0) == 35) {
            $retval$10 = 0;
            break;
          }
          $call31 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E23parseBaseUnresolvedNameEv(
              $call2
            ) | 0;
          HEAP32[$Base >> 2] = $call31;
          $cmp32 = ($call31 | 0) == (0 | 0);
          if ($cmp32) {
            $retval$4 = 0;
          } else {
            $call35 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_(
                $this,
                $SoFar,
                $Base
              ) | 0;
            $retval$4 = $call35;
          }
          $retval$10 = $retval$4;
        }
      } else {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp38, 11832);
        HEAP32[$agg$tmp38$byval_copy >> 2] = HEAP32[$agg$tmp38 >> 2] | 0;
        HEAP32[($agg$tmp38$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp38 + 4) >> 2] | 0;
        $call39 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
            $this,
            $agg$tmp38$byval_copy
          ) | 0;
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp40, 12862);
        HEAP32[$agg$tmp40$byval_copy >> 2] = HEAP32[$agg$tmp40 >> 2] | 0;
        HEAP32[($agg$tmp40$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp40 + 4) >> 2] | 0;
        $call41 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
            $this,
            $agg$tmp40$byval_copy
          ) | 0;
        if (!$call41) {
          $call44 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call45 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E23parseBaseUnresolvedNameEv(
              $call44
            ) | 0;
          HEAP32[$SoFar >> 2] = $call45;
          $cmp46 = ($call45 | 0) == (0 | 0);
          $call39$not = $call39 ^ 1;
          $brmerge = $cmp46 | $call39$not;
          if ($brmerge) {
            $retval$10 = $call45;
            break;
          }
          $call51 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19GlobalQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_(
              $this,
              $SoFar
            ) | 0;
          HEAP32[$SoFar >> 2] = $call51;
          $retval$10 = $call51;
          break;
        }
        $call54 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
            $this,
            0
          ) | 0;
        $conv55 = ($call54 << 24) >> 24;
        $isdigittmp = ($conv55 + -48) | 0;
        $isdigit = $isdigittmp >>> 0 < 10;
        L25: do {
          if ($isdigit) {
            while (1) {
              $call60 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call61 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv(
                  $call60
                ) | 0;
              HEAP32[$Qual59 >> 2] = $call61;
              $cmp62 = ($call61 | 0) == (0 | 0);
              if ($cmp62) {
                break;
              }
              $0 = HEAP32[$SoFar >> 2] | 0;
              $tobool65 = ($0 | 0) == (0 | 0);
              do {
                if ($tobool65) {
                  if ($call39) {
                    $call70 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19GlobalQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_(
                        $this,
                        $Qual59
                      ) | 0;
                    HEAP32[$SoFar >> 2] = $call70;
                    break;
                  } else {
                    HEAP32[$SoFar >> 2] = $call61;
                    break;
                  }
                } else {
                  $call67 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_(
                      $this,
                      $SoFar,
                      $Qual59
                    ) | 0;
                  HEAP32[$SoFar >> 2] = $call67;
                }
              } while (0);
              $call80 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                  $this,
                  69
                ) | 0;
              if ($call80) {
                $$pre$phiZ2D = $call60;
                break L25;
              }
            }
            $retval$10 = 0;
            break L1;
          } else {
            $call83 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                $this
              ) | 0;
            $call84 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedTypeEv(
                $call83
              ) | 0;
            HEAP32[$SoFar >> 2] = $call84;
            $cmp85 = ($call84 | 0) == (0 | 0);
            if ($cmp85) {
              $retval$10 = 0;
              break L1;
            }
            $call88 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
                $this,
                0
              ) | 0;
            $cmp90 = ($call88 << 24) >> 24 == 73;
            if ($cmp90) {
              $call94 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb(
                  $call83,
                  0
                ) | 0;
              HEAP32[$TA92 >> 2] = $call94;
              $cmp95 = ($call94 | 0) == (0 | 0);
              if ($cmp95) {
                $retval$10 = 0;
                break L1;
              } else {
                $call98 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_(
                    $this,
                    $SoFar,
                    $TA92
                  ) | 0;
                HEAP32[$SoFar >> 2] = $call98;
                $$pre$phiZ2D = $call83;
                break;
              }
            } else {
              $$pre$phiZ2D = $call83;
            }
          }
        } while (0);
        $call109 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E23parseBaseUnresolvedNameEv(
            $$pre$phiZ2D
          ) | 0;
        HEAP32[$Base107 >> 2] = $call109;
        $cmp110 = ($call109 | 0) == (0 | 0);
        if ($cmp110) {
          $retval$8 = 0;
        } else {
          $call113 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_(
              $this,
              $SoFar,
              $Base107
            ) | 0;
          $retval$8 = $call113;
        }
        $retval$10 = $retval$8;
      }
    } while (0);
    STACKTOP = sp;
    return $retval$10 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA3_KcSA_EEES9_DpOT0_(
    $this,
    $args,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $ASTAllocator = 0,
      $call8 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call8 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10MemberExprEJRPNS2_4NodeERA3_KcS6_EEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1,
        $args3
      ) | 0;
    return $call8 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA2_KcSA_EEES9_DpOT0_(
    $this,
    $args,
    $args3
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args3 = $args3 | 0;
    var $ASTAllocator = 0,
      $call8 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call8 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10MemberExprEJRPNS2_4NodeERA2_KcS6_EEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        12809,
        $args3
      ) | 0;
    return $call8 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_18ArraySubscriptExprEJRPNS0_4NodeESA_EEES9_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle18ArraySubscriptExprEJRPNS2_4NodeES6_EEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $Field = 0,
      $Index = 0,
      $Init = 0,
      $Init23 = 0,
      $Init46 = 0,
      $RangeBegin = 0,
      $RangeEnd = 0,
      $add$ptr = 0,
      $add$ptr17 = 0,
      $add$ptr35 = 0,
      $call = 0,
      $call13 = 0,
      $call18 = 0,
      $call19 = 0,
      $call2 = 0,
      $call25 = 0,
      $call30 = 0;
    var $call36 = 0,
      $call37 = 0,
      $call4 = 0,
      $call42 = 0,
      $call48 = 0,
      $call5 = 0,
      $call52 = 0,
      $call57 = 0,
      $call58 = 0,
      $call9 = 0,
      $cmp = 0,
      $cmp10 = 0,
      $cmp20 = 0,
      $cmp26 = 0,
      $cmp38 = 0,
      $cmp43 = 0,
      $cmp49 = 0,
      $cmp6 = 0,
      $conv3 = 0,
      $ref$tmp = 0;
    var $ref$tmp29 = 0,
      $retval$0 = 0,
      $retval$1 = 0,
      $retval$2 = 0,
      $retval$3 = 0,
      $retval$4 = 0,
      $retval$5 = 0,
      $retval$6 = 0,
      $retval$7 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $Field = (sp + 24) | 0;
    $Init = (sp + 20) | 0;
    $ref$tmp = (sp + 29) | 0;
    $Index = (sp + 16) | 0;
    $Init23 = (sp + 12) | 0;
    $ref$tmp29 = (sp + 28) | 0;
    $RangeBegin = (sp + 8) | 0;
    $RangeEnd = (sp + 4) | 0;
    $Init46 = sp;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
        $this,
        0
      ) | 0;
    $cmp = ($call << 24) >> 24 == 100;
    L1: do {
      if ($cmp) {
        $call2 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
            $this,
            1
          ) | 0;
        $conv3 = ($call2 << 24) >> 24;
        switch ($conv3 | 0) {
          case 105: {
            $0 = HEAP32[$this >> 2] | 0;
            $add$ptr = ($0 + 2) | 0;
            HEAP32[$this >> 2] = $add$ptr;
            $call4 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                $this
              ) | 0;
            $call5 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE(
                $call4
              ) | 0;
            HEAP32[$Field >> 2] = $call5;
            $cmp6 = ($call5 | 0) == (0 | 0);
            if ($cmp6) {
              $retval$1 = 0;
            } else {
              $call9 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv(
                  $call4
                ) | 0;
              HEAP32[$Init >> 2] = $call9;
              $cmp10 = ($call9 | 0) == (0 | 0);
              if ($cmp10) {
                $retval$0 = 0;
              } else {
                HEAP8[$ref$tmp >> 0] = 0;
                $call13 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BracedExprEJRPNS0_4NodeESA_bEEES9_DpOT0_(
                    $this,
                    $Field,
                    $Init,
                    $ref$tmp
                  ) | 0;
                $retval$0 = $call13;
              }
              $retval$1 = $retval$0;
            }
            $retval$7 = $retval$1;
            break L1;
            break;
          }
          case 120: {
            $1 = HEAP32[$this >> 2] | 0;
            $add$ptr17 = ($1 + 2) | 0;
            HEAP32[$this >> 2] = $add$ptr17;
            $call18 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                $this
              ) | 0;
            $call19 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                $call18
              ) | 0;
            HEAP32[$Index >> 2] = $call19;
            $cmp20 = ($call19 | 0) == (0 | 0);
            if ($cmp20) {
              $retval$3 = 0;
            } else {
              $call25 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv(
                  $call18
                ) | 0;
              HEAP32[$Init23 >> 2] = $call25;
              $cmp26 = ($call25 | 0) == (0 | 0);
              if ($cmp26) {
                $retval$2 = 0;
              } else {
                HEAP8[$ref$tmp29 >> 0] = 1;
                $call30 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BracedExprEJRPNS0_4NodeESA_bEEES9_DpOT0_(
                    $this,
                    $Index,
                    $Init23,
                    $ref$tmp29
                  ) | 0;
                $retval$2 = $call30;
              }
              $retval$3 = $retval$2;
            }
            $retval$7 = $retval$3;
            break L1;
            break;
          }
          case 88: {
            $2 = HEAP32[$this >> 2] | 0;
            $add$ptr35 = ($2 + 2) | 0;
            HEAP32[$this >> 2] = $add$ptr35;
            $call36 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                $this
              ) | 0;
            $call37 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                $call36
              ) | 0;
            HEAP32[$RangeBegin >> 2] = $call37;
            $cmp38 = ($call37 | 0) == (0 | 0);
            if ($cmp38) {
              $retval$6 = 0;
            } else {
              $call42 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                  $call36
                ) | 0;
              HEAP32[$RangeEnd >> 2] = $call42;
              $cmp43 = ($call42 | 0) == (0 | 0);
              if ($cmp43) {
                $retval$5 = 0;
              } else {
                $call48 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv(
                    $call36
                  ) | 0;
                HEAP32[$Init46 >> 2] = $call48;
                $cmp49 = ($call48 | 0) == (0 | 0);
                if ($cmp49) {
                  $retval$4 = 0;
                } else {
                  $call52 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15BracedRangeExprEJRPNS0_4NodeESA_SA_EEES9_DpOT0_(
                      $this,
                      $RangeBegin,
                      $RangeEnd,
                      $Init46
                    ) | 0;
                  $retval$4 = $call52;
                }
                $retval$5 = $retval$4;
              }
              $retval$6 = $retval$5;
            }
            $retval$7 = $retval$6;
            break L1;
            break;
          }
          default: {
            label = 20;
            break L1;
          }
        }
      } else {
        label = 20;
      }
    } while (0);
    if ((label | 0) == 20) {
      $call57 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
          $this
        ) | 0;
      $call58 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
          $call57
        ) | 0;
      $retval$7 = $call58;
    }
    STACKTOP = sp;
    return $retval$7 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12InitListExprEJDnNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12InitListExprEJDnNS2_9NodeArrayEEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PostfixExprEJRPNS0_4NodeERA3_KcEEES9_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11PostfixExprEJRPNS2_4NodeERA3_KcEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseNewExprEv(
    $this
  ) {
    $this = $this | 0;
    var $Ex = 0,
      $ExprList = 0,
      $Global = 0,
      $Init = 0,
      $Inits = 0,
      $IsArray = 0,
      $Names = 0,
      $Ty = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp22 = 0,
      $agg$tmp22$byval_copy = 0,
      $agg$tmp4 = 0,
      $agg$tmp4$byval_copy = 0,
      $agg$tmp6 = 0,
      $agg$tmp6$byval_copy = 0,
      $call = 0,
      $call11 = 0,
      $call12 = 0,
      $call17 = 0;
    var $call18 = 0,
      $call2 = 0,
      $call23 = 0,
      $call26 = 0,
      $call28 = 0,
      $call32 = 0,
      $call41 = 0,
      $call44 = 0,
      $call48 = 0,
      $call5 = 0,
      $call7 = 0,
      $call8 = 0,
      $call9 = 0,
      $cmp = 0,
      $cmp13 = 0,
      $cmp19 = 0,
      $cmp33 = 0,
      $frombool = 0,
      $frombool3 = 0,
      $ref$tmp = 0;
    var $retval$5 = 0,
      $retval$7 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 128) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
    $agg$tmp22$byval_copy = (sp + 104) | 0;
    $agg$tmp6$byval_copy = (sp + 96) | 0;
    $agg$tmp4$byval_copy = (sp + 88) | 0;
    $agg$tmp$byval_copy = (sp + 80) | 0;
    $Global = (sp + 113) | 0;
    $agg$tmp = (sp + 72) | 0;
    $IsArray = (sp + 112) | 0;
    $agg$tmp4 = (sp + 64) | 0;
    $agg$tmp6 = (sp + 56) | 0;
    $Ex = (sp + 48) | 0;
    $ExprList = (sp + 40) | 0;
    $Ty = (sp + 32) | 0;
    $agg$tmp22 = (sp + 24) | 0;
    $Init = (sp + 16) | 0;
    $Inits = (sp + 8) | 0;
    $ref$tmp = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11832);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
        $this,
        $agg$tmp$byval_copy
      ) | 0;
    $frombool = $call & 1;
    HEAP8[$Global >> 0] = $frombool;
    $call2 =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
        $this,
        1
      ) | 0;
    $cmp = ($call2 << 24) >> 24 == 97;
    $frombool3 = $cmp & 1;
    HEAP8[$IsArray >> 0] = $frombool3;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 12446);
    HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2] | 0;
    HEAP32[($agg$tmp4$byval_copy + 4) >> 2] = HEAP32[($agg$tmp4 + 4) >> 2] | 0;
    $call5 =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
        $this,
        $agg$tmp4$byval_copy
      ) | 0;
    if ($call5) {
      label = 3;
    } else {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 12449);
      HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2] | 0;
      HEAP32[($agg$tmp6$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp6 + 4) >> 2] | 0;
      $call7 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
          $this,
          $agg$tmp6$byval_copy
        ) | 0;
      if ($call7) {
        label = 3;
      } else {
        $retval$7 = 0;
      }
    }
    do {
      if ((label | 0) == 3) {
        $Names = ($this + 8) | 0;
        $call8 =
          __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv(
            $Names
          ) | 0;
        while (1) {
          $call9 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
              $this,
              95
            ) | 0;
          if ($call9) {
            break;
          }
          $call11 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call12 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
              $call11
            ) | 0;
          HEAP32[$Ex >> 2] = $call12;
          $cmp13 = ($call12 | 0) == (0 | 0);
          if ($cmp13) {
            label = 7;
            break;
          }
          __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
            $Names,
            $Ex
          );
        }
        if ((label | 0) == 7) {
          $retval$7 = 0;
          break;
        }
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm(
          $ExprList,
          $this,
          $call8
        );
        $call17 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
            $this
          ) | 0;
        $call18 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
            $call17
          ) | 0;
        HEAP32[$Ty >> 2] = $call18;
        $cmp19 = ($call18 | 0) == (0 | 0);
        do {
          if ($cmp19) {
            $retval$5 = 0;
          } else {
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp22, 12452);
            HEAP32[$agg$tmp22$byval_copy >> 2] = HEAP32[$agg$tmp22 >> 2] | 0;
            HEAP32[($agg$tmp22$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp22 + 4) >> 2] | 0;
            $call23 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
                $this,
                $agg$tmp22$byval_copy
              ) | 0;
            if (!$call23) {
              $call44 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                  $this,
                  69
                ) | 0;
              if (!$call44) {
                $retval$5 = 0;
                break;
              }
              __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2Ev($ref$tmp);
              $call48 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_7NewExprEJRNS0_9NodeArrayERPNS0_4NodeES8_RbSD_EEESB_DpOT0_(
                  $this,
                  $ExprList,
                  $Ty,
                  $ref$tmp,
                  $Global,
                  $IsArray
                ) | 0;
              $retval$5 = $call48;
              break;
            }
            $call26 =
              __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv(
                $Names
              ) | 0;
            while (1) {
              $call28 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                  $this,
                  69
                ) | 0;
              if ($call28) {
                label = 15;
                break;
              }
              $call32 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv(
                  $call17
                ) | 0;
              HEAP32[$Init >> 2] = $call32;
              $cmp33 = ($call32 | 0) == (0 | 0);
              if ($cmp33) {
                label = 13;
                break;
              }
              __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
                $Names,
                $Init
              );
            }
            if ((label | 0) == 13) {
              $retval$5 = 0;
              break;
            } else if ((label | 0) == 15) {
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm(
                $Inits,
                $this,
                $call26
              );
              $call41 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_7NewExprEJRNS0_9NodeArrayERPNS0_4NodeES9_RbSD_EEESB_DpOT0_(
                  $this,
                  $ExprList,
                  $Ty,
                  $Inits,
                  $Global,
                  $IsArray
                ) | 0;
              $retval$5 = $call41;
              break;
            }
          }
        } while (0);
        $retval$7 = $retval$5;
      }
    } while (0);
    STACKTOP = sp;
    return $retval$7 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA11_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_(
    $this,
    $args1
  ) {
    $this = $this | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call8 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call8 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA11_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_(
        $ASTAllocator,
        12435,
        $args1,
        11115
      ) | 0;
    return $call8 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15ConditionalExprEJRPNS0_4NodeESA_SA_EEES9_DpOT0_(
    $this,
    $args,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $ASTAllocator = 0,
      $call8 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call8 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15ConditionalExprEJRPNS2_4NodeES6_S6_EEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1,
        $args3
      ) | 0;
    return $call8 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA17_KcRPNS0_4NodeESD_EEESC_DpOT0_(
    $this,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $ASTAllocator = 0,
      $call8 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call8 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA17_KcRPNS2_4NodeES9_EEEPT_DpOT0_(
        $ASTAllocator,
        12354,
        $args1,
        $args3
      ) | 0;
    return $call8 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA12_KcRPNS0_4NodeESD_EEESC_DpOT0_(
    $this,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $ASTAllocator = 0,
      $call8 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call8 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA12_KcRPNS2_4NodeES9_EEEPT_DpOT0_(
        $ASTAllocator,
        12295,
        $args1,
        $args3
      ) | 0;
    return $call8 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call8 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call8 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA9_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1,
        11115
      ) | 0;
    return $call8 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SizeofParamPackExprEJRPNS0_4NodeEEEES9_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19SizeofParamPackExprEJRPNS2_4NodeEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA12_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_(
    $this,
    $args1
  ) {
    $this = $this | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call8 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call8 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA12_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_(
        $ASTAllocator,
        12107,
        $args1,
        11115
      ) | 0;
    return $call8 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13NodeArrayNodeEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13NodeArrayNodeEJNS2_9NodeArrayEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12InitListExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12InitListExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9ThrowExprEJRPNS0_4NodeEEEES9_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9ThrowExprEJRPNS2_4NodeEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9ThrowExprEJRPNS2_4NodeEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle9ThrowExprC2EPKNS0_4NodeE($call, $0);
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle9ThrowExprC2EPKNS0_4NodeE(
    $this,
    $Op_
  ) {
    $this = $this | 0;
    $Op_ = $Op_ | 0;
    var $Op = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      58,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 3944;
    $Op = ($this + 8) | 0;
    HEAP32[$Op >> 2] = $Op_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle9ThrowExpr9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $Op = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11956);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Op = ($this + 8) | 0;
    $0 = HEAP32[$Op >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $S
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle9ThrowExprD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12InitListExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = $args1;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $agg$tmp;
    $8 = $7;
    HEAP32[$8 >> 2] = $3;
    $9 = ($7 + 4) | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $6;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle12InitListExprC2EPKNS0_4NodeENS0_9NodeArrayE(
      $call,
      $0,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle12InitListExprC2EPKNS0_4NodeENS0_9NodeArrayE(
    $this,
    $Ty_,
    $Inits_
  ) {
    $this = $this | 0;
    $Ty_ = $Ty_ | 0;
    $Inits_ = $Inits_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Inits = 0,
      $Ty = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      56,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 3988;
    $Ty = ($this + 8) | 0;
    HEAP32[$Ty >> 2] = $Ty_;
    $Inits = ($this + 12) | 0;
    $0 = $Inits_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Inits;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle12InitListExpr9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $Inits = 0,
      $Ty = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Ty = ($this + 8) | 0;
    $0 = HEAP32[$Ty >> 2] | 0;
    $tobool = ($0 | 0) == (0 | 0);
    if (!$tobool) {
      __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
        $0,
        $S
      );
    }
    __ZN12_GLOBAL__N_112OutputStreampLEc($S, 123);
    $Inits = ($this + 12) | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE(
      $Inits,
      $S
    );
    __ZN12_GLOBAL__N_112OutputStreampLEc($S, 125);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle12InitListExprD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13NodeArrayNodeEJNS2_9NodeArrayEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    $0 = $args;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle13NodeArrayNodeC2ENS0_9NodeArrayE(
      $call,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle13NodeArrayNodeC2ENS0_9NodeArrayE(
    $this,
    $Array_
  ) {
    $this = $this | 0;
    $Array_ = $Array_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Array = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      0,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 4032;
    $Array = ($this + 8) | 0;
    $0 = $Array_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Array;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle13NodeArrayNode9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $Array = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Array = ($this + 8) | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE(
      $Array,
      $S
    );
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle13NodeArrayNodeD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA12_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_(
    $this,
    $args,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $0 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp8 = 0,
      $agg$tmp8$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $agg$tmp8$byval_copy = (sp + 24) | 0;
    $agg$tmp$byval_copy = (sp + 16) | 0;
    $agg$tmp = (sp + 8) | 0;
    $agg$tmp8 = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 28) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    $0 = HEAP32[$args1 >> 2] | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8, $args3);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2] | 0;
    HEAP32[($agg$tmp8$byval_copy + 4) >> 2] = HEAP32[($agg$tmp8 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_(
      $call,
      $agg$tmp$byval_copy,
      $0,
      $agg$tmp8$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_(
    $this,
    $Prefix_,
    $Infix_,
    $Postfix_
  ) {
    $this = $this | 0;
    $Prefix_ = $Prefix_ | 0;
    $Infix_ = $Infix_ | 0;
    $Postfix_ = $Postfix_ | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0;
    var $Infix = 0,
      $Postfix = 0,
      $Prefix = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      47,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 4076;
    $Prefix = ($this + 8) | 0;
    $0 = $Prefix_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Prefix;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    $Infix = ($this + 16) | 0;
    HEAP32[$Infix >> 2] = $Infix_;
    $Postfix = ($this + 20) | 0;
    $10 = $Postfix_;
    $11 = $10;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = ($10 + 4) | 0;
    $14 = $13;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = $Postfix;
    $17 = $16;
    HEAP32[$17 >> 2] = $12;
    $18 = ($16 + 4) | 0;
    $19 = $18;
    HEAP32[$19 >> 2] = $15;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle13EnclosingExpr9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0;
    var $9 = 0,
      $Infix = 0,
      $Postfix = 0,
      $Prefix = 0,
      $agg$tmp = 0,
      $agg$tmp2 = 0,
      $tmpcast$byval_copy = 0,
      $tmpcast3$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $tmpcast3$byval_copy = (sp + 24) | 0;
    $tmpcast$byval_copy = (sp + 16) | 0;
    $agg$tmp = (sp + 8) | 0;
    $agg$tmp2 = sp;
    $Prefix = ($this + 8) | 0;
    $0 = $Prefix;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $tmpcast$byval_copy
    );
    $Infix = ($this + 16) | 0;
    $10 = HEAP32[$Infix >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $10,
      $S
    );
    $Postfix = ($this + 20) | 0;
    $11 = $Postfix;
    $12 = $11;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = ($11 + 4) | 0;
    $15 = $14;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $agg$tmp2;
    $18 = $17;
    HEAP32[$18 >> 2] = $13;
    $19 = ($17 + 4) | 0;
    $20 = $19;
    HEAP32[$20 >> 2] = $16;
    HEAP32[$tmpcast3$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($tmpcast3$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $tmpcast3$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19SizeofParamPackExprEJRPNS2_4NodeEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle19SizeofParamPackExprC2EPKNS0_4NodeE(
      $call,
      $0
    );
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle19SizeofParamPackExprC2EPKNS0_4NodeE(
    $this,
    $Pack_
  ) {
    $this = $this | 0;
    $Pack_ = $Pack_ | 0;
    var $Pack = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      49,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 4120;
    $Pack = ($this + 8) | 0;
    HEAP32[$Pack >> 2] = $Pack_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle19SizeofParamPackExpr9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $PPE = 0,
      $Pack = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp2 = 0,
      $agg$tmp2$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 48) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
    $agg$tmp2$byval_copy = (sp + 40) | 0;
    $agg$tmp$byval_copy = (sp + 32) | 0;
    $agg$tmp = (sp + 24) | 0;
    $PPE = (sp + 8) | 0;
    $agg$tmp2 = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 12169);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Pack = ($this + 8) | 0;
    $0 = HEAP32[$Pack >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionC2EPKNS0_4NodeE(
      $PPE,
      $0
    );
    __ZNK12_GLOBAL__N_116itanium_demangle22ParameterPackExpansion9printLeftERNS_12OutputStreamE(
      $PPE,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 11115);
    HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($agg$tmp2$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp2$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle19SizeofParamPackExprD0Ev(
    $this
  ) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionC2EPKNS0_4NodeE(
    $this,
    $Child_
  ) {
    $this = $this | 0;
    $Child_ = $Child_ | 0;
    var $Child = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      29,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 4164;
    $Child = ($this + 8) | 0;
    HEAP32[$Child >> 2] = $Child_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle22ParameterPackExpansion9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $Child = 0,
      $CurrentPackIndex = 0,
      $CurrentPackMax = 0,
      $I$0 = 0,
      $SavePackIdx = 0,
      $SavePackMax = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp16 = 0,
      $agg$tmp16$byval_copy = 0,
      $call = 0,
      $cmp15 = 0,
      $inc = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 64) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
    $agg$tmp16$byval_copy = (sp + 48) | 0;
    $agg$tmp$byval_copy = (sp + 40) | 0;
    $SavePackIdx = (sp + 28) | 0;
    $SavePackMax = (sp + 16) | 0;
    $agg$tmp = (sp + 8) | 0;
    $agg$tmp16 = sp;
    $CurrentPackIndex = ($S + 12) | 0;
    __ZN12_GLOBAL__N_114SwapAndRestoreIjEC2ERjj(
      $SavePackIdx,
      $CurrentPackIndex
    );
    $CurrentPackMax = ($S + 16) | 0;
    __ZN12_GLOBAL__N_114SwapAndRestoreIjEC2ERjj($SavePackMax, $CurrentPackMax);
    $call = __ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S) | 0;
    $Child = ($this + 8) | 0;
    $0 = HEAP32[$Child >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $S
    );
    $1 = HEAP32[$CurrentPackMax >> 2] | 0;
    L1: do {
      switch ($1 | 0) {
        case -1: {
          __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 10649);
          HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
          HEAP32[($agg$tmp$byval_copy + 4) >> 2] =
            HEAP32[($agg$tmp + 4) >> 2] | 0;
          __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
            $S,
            $agg$tmp$byval_copy
          );
          break;
        }
        case 0: {
          __ZN12_GLOBAL__N_112OutputStream18setCurrentPositionEm($S, $call);
          break;
        }
        default: {
          $I$0 = 1;
          while (1) {
            $cmp15 = $I$0 >>> 0 < $1 >>> 0;
            if (!$cmp15) {
              break L1;
            }
            __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp16, 11303);
            HEAP32[$agg$tmp16$byval_copy >> 2] = HEAP32[$agg$tmp16 >> 2] | 0;
            HEAP32[($agg$tmp16$byval_copy + 4) >> 2] =
              HEAP32[($agg$tmp16 + 4) >> 2] | 0;
            __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
              $S,
              $agg$tmp16$byval_copy
            );
            HEAP32[$CurrentPackIndex >> 2] = $I$0;
            $2 = HEAP32[$Child >> 2] | 0;
            __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
              $2,
              $S
            );
            $inc = ($I$0 + 1) | 0;
            $I$0 = $inc;
          }
        }
      }
    } while (0);
    __ZN12_GLOBAL__N_114SwapAndRestoreIjED2Ev($SavePackMax);
    __ZN12_GLOBAL__N_114SwapAndRestoreIjED2Ev($SavePackIdx);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_114SwapAndRestoreIjEC2ERjj($this, $Restore_) {
    $this = $this | 0;
    $Restore_ = $Restore_ | 0;
    var $0 = 0,
      $OriginalValue = 0,
      $ShouldRestore = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    HEAP32[$this >> 2] = $Restore_;
    $OriginalValue = ($this + 4) | 0;
    $0 = HEAP32[$Restore_ >> 2] | 0;
    HEAP32[$OriginalValue >> 2] = $0;
    $ShouldRestore = ($this + 8) | 0;
    HEAP8[$ShouldRestore >> 0] = 1;
    HEAP32[$Restore_ >> 2] = -1;
    return;
  }
  function __ZN12_GLOBAL__N_114SwapAndRestoreIjED2Ev($this) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $OriginalValue = 0,
      $ShouldRestore = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ShouldRestore = ($this + 8) | 0;
    $0 = HEAP8[$ShouldRestore >> 0] | 0;
    $tobool = ($0 << 24) >> 24 == 0;
    if (!$tobool) {
      $OriginalValue = ($this + 4) | 0;
      $1 = HEAP32[$OriginalValue >> 2] | 0;
      $2 = HEAP32[$this >> 2] | 0;
      HEAP32[$2 >> 2] = $1;
    }
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionD0Ev(
    $this
  ) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA9_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_(
    $this,
    $args,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $0 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp8 = 0,
      $agg$tmp8$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $agg$tmp8$byval_copy = (sp + 24) | 0;
    $agg$tmp$byval_copy = (sp + 16) | 0;
    $agg$tmp = (sp + 8) | 0;
    $agg$tmp8 = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 28) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    $0 = HEAP32[$args1 >> 2] | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8, $args3);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2] | 0;
    HEAP32[($agg$tmp8$byval_copy + 4) >> 2] = HEAP32[($agg$tmp8 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_(
      $call,
      $agg$tmp$byval_copy,
      $0,
      $agg$tmp8$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA12_KcRPNS2_4NodeES9_EEEPT_DpOT0_(
    $this,
    $args,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $0 = 0,
      $1 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    $0 = HEAP32[$args1 >> 2] | 0;
    $1 = HEAP32[$args3 >> 2] | 0;
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_(
      $call,
      $agg$tmp$byval_copy,
      $0,
      $1
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_(
    $this,
    $CastKind_,
    $To_,
    $From_
  ) {
    $this = $this | 0;
    $CastKind_ = $CastKind_ | 0;
    $To_ = $To_ | 0;
    $From_ = $From_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $CastKind = 0,
      $From = 0,
      $To = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      48,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 4208;
    $CastKind = ($this + 8) | 0;
    $0 = $CastKind_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $CastKind;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    $To = ($this + 16) | 0;
    HEAP32[$To >> 2] = $To_;
    $From = ($this + 20) | 0;
    HEAP32[$From >> 2] = $From_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle8CastExpr9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $CastKind = 0,
      $From = 0,
      $To = 0,
      $agg$tmp = 0,
      $agg$tmp2 = 0,
      $agg$tmp2$byval_copy = 0;
    var $agg$tmp4 = 0,
      $agg$tmp4$byval_copy = 0,
      $agg$tmp8 = 0,
      $agg$tmp8$byval_copy = 0,
      $tmpcast$byval_copy = 0,
      $vfn = 0,
      $vfn7 = 0,
      $vtable = 0,
      $vtable6 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 64) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
    $agg$tmp8$byval_copy = (sp + 56) | 0;
    $agg$tmp4$byval_copy = (sp + 48) | 0;
    $agg$tmp2$byval_copy = (sp + 40) | 0;
    $tmpcast$byval_copy = (sp + 32) | 0;
    $agg$tmp = sp;
    $agg$tmp2 = (sp + 24) | 0;
    $agg$tmp4 = (sp + 16) | 0;
    $agg$tmp8 = (sp + 8) | 0;
    $CastKind = ($this + 8) | 0;
    $0 = $CastKind;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $tmpcast$byval_copy
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 11301);
    HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($agg$tmp2$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp2$byval_copy
    );
    $To = ($this + 16) | 0;
    $10 = HEAP32[$To >> 2] | 0;
    $vtable = HEAP32[$10 >> 2] | 0;
    $vfn = ($vtable + 16) | 0;
    $11 = HEAP32[$vfn >> 2] | 0;
    FUNCTION_TABLE_vii[$11 & 511]($10, $S);
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 12307);
    HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2] | 0;
    HEAP32[($agg$tmp4$byval_copy + 4) >> 2] = HEAP32[($agg$tmp4 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp4$byval_copy
    );
    $From = ($this + 20) | 0;
    $12 = HEAP32[$From >> 2] | 0;
    $vtable6 = HEAP32[$12 >> 2] | 0;
    $vfn7 = ($vtable6 + 16) | 0;
    $13 = HEAP32[$vfn7 >> 2] | 0;
    FUNCTION_TABLE_vii[$13 & 511]($12, $S);
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8, 11115);
    HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2] | 0;
    HEAP32[($agg$tmp8$byval_copy + 4) >> 2] = HEAP32[($agg$tmp8 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp8$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle8CastExprD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA17_KcRPNS2_4NodeES9_EEEPT_DpOT0_(
    $this,
    $args,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $0 = 0,
      $1 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    $0 = HEAP32[$args1 >> 2] | 0;
    $1 = HEAP32[$args3 >> 2] | 0;
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_(
      $call,
      $agg$tmp$byval_copy,
      $0,
      $1
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15ConditionalExprEJRPNS2_4NodeES6_S6_EEEPT_DpOT0_(
    $this,
    $args,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = HEAP32[$args1 >> 2] | 0;
    $2 = HEAP32[$args3 >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle15ConditionalExprC2EPKNS0_4NodeES4_S4_(
      $call,
      $0,
      $1,
      $2
    );
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle15ConditionalExprC2EPKNS0_4NodeES4_S4_(
    $this,
    $Cond_,
    $Then_,
    $Else_
  ) {
    $this = $this | 0;
    $Cond_ = $Cond_ | 0;
    $Then_ = $Then_ | 0;
    $Else_ = $Else_ | 0;
    var $Cond = 0,
      $Else = 0,
      $Then = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      45,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 4252;
    $Cond = ($this + 8) | 0;
    HEAP32[$Cond >> 2] = $Cond_;
    $Then = ($this + 12) | 0;
    HEAP32[$Then >> 2] = $Then_;
    $Else = ($this + 16) | 0;
    HEAP32[$Else >> 2] = $Else_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle15ConditionalExpr9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $Cond = 0,
      $Else = 0,
      $Then = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp2 = 0,
      $agg$tmp2$byval_copy = 0,
      $agg$tmp4 = 0,
      $agg$tmp4$byval_copy = 0,
      $agg$tmp6 = 0,
      $agg$tmp6$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 64) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
    $agg$tmp6$byval_copy = (sp + 56) | 0;
    $agg$tmp4$byval_copy = (sp + 48) | 0;
    $agg$tmp2$byval_copy = (sp + 40) | 0;
    $agg$tmp$byval_copy = (sp + 32) | 0;
    $agg$tmp = (sp + 24) | 0;
    $agg$tmp2 = (sp + 16) | 0;
    $agg$tmp4 = (sp + 8) | 0;
    $agg$tmp6 = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11119);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Cond = ($this + 8) | 0;
    $0 = HEAP32[$Cond >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 12371);
    HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($agg$tmp2$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp2$byval_copy
    );
    $Then = ($this + 12) | 0;
    $1 = HEAP32[$Then >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $1,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 12377);
    HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2] | 0;
    HEAP32[($agg$tmp4$byval_copy + 4) >> 2] = HEAP32[($agg$tmp4 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp4$byval_copy
    );
    $Else = ($this + 16) | 0;
    $2 = HEAP32[$Else >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $2,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 11115);
    HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2] | 0;
    HEAP32[($agg$tmp6$byval_copy + 4) >> 2] = HEAP32[($agg$tmp6 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp6$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle15ConditionalExprD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA11_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_(
    $this,
    $args,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $0 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp8 = 0,
      $agg$tmp8$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $agg$tmp8$byval_copy = (sp + 24) | 0;
    $agg$tmp$byval_copy = (sp + 16) | 0;
    $agg$tmp = (sp + 8) | 0;
    $agg$tmp8 = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 28) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    $0 = HEAP32[$args1 >> 2] | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8, $args3);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2] | 0;
    HEAP32[($agg$tmp8$byval_copy + 4) >> 2] = HEAP32[($agg$tmp8 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_(
      $call,
      $agg$tmp$byval_copy,
      $0,
      $agg$tmp8$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_7NewExprEJRNS0_9NodeArrayERPNS0_4NodeES9_RbSD_EEESB_DpOT0_(
    $this,
    $args,
    $args1,
    $args3,
    $args5,
    $args7
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    $args5 = $args5 | 0;
    $args7 = $args7 | 0;
    var $ASTAllocator = 0,
      $call14 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call14 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle7NewExprEJRNS2_9NodeArrayERPNS2_4NodeES5_RbS9_EEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1,
        $args3,
        $args5,
        $args7
      ) | 0;
    return $call14 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2Ev($this) {
    $this = $this | 0;
    var $NumElements = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    HEAP32[$this >> 2] = 0;
    $NumElements = ($this + 4) | 0;
    HEAP32[$NumElements >> 2] = 0;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_7NewExprEJRNS0_9NodeArrayERPNS0_4NodeES8_RbSD_EEESB_DpOT0_(
    $this,
    $args,
    $args1,
    $args3,
    $args5,
    $args7
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    $args5 = $args5 | 0;
    $args7 = $args7 | 0;
    var $ASTAllocator = 0,
      $call14 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call14 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle7NewExprEJRNS2_9NodeArrayERPNS2_4NodeES4_RbS9_EEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1,
        $args3,
        $args5,
        $args7
      ) | 0;
    return $call14 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle7NewExprEJRNS2_9NodeArrayERPNS2_4NodeES4_RbS9_EEEPT_DpOT0_(
    $this,
    $args,
    $args1,
    $args3,
    $args5,
    $args7
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    $args5 = $args5 | 0;
    $args7 = $args7 | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0;
    var $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $agg$tmp12 = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      $tmpcast1$byval_copy = 0,
      $tobool = 0,
      $tobool16 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $tmpcast1$byval_copy = (sp + 24) | 0;
    $tmpcast$byval_copy = (sp + 16) | 0;
    $agg$tmp = (sp + 8) | 0;
    $agg$tmp12 = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 32) | 0;
    $0 = $args;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    $10 = HEAP32[$args1 >> 2] | 0;
    $11 = $args3;
    $12 = $11;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = ($11 + 4) | 0;
    $15 = $14;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $agg$tmp12;
    $18 = $17;
    HEAP32[$18 >> 2] = $13;
    $19 = ($17 + 4) | 0;
    $20 = $19;
    HEAP32[$20 >> 2] = $16;
    $21 = HEAP8[$args5 >> 0] | 0;
    $tobool = ($21 << 24) >> 24 != 0;
    $22 = HEAP8[$args7 >> 0] | 0;
    $tobool16 = ($22 << 24) >> 24 != 0;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    HEAP32[$tmpcast1$byval_copy >> 2] = HEAP32[$agg$tmp12 >> 2] | 0;
    HEAP32[($tmpcast1$byval_copy + 4) >> 2] = HEAP32[($agg$tmp12 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle7NewExprC2ENS0_9NodeArrayEPNS0_4NodeES2_bb(
      $call,
      $tmpcast$byval_copy,
      $10,
      $tmpcast1$byval_copy,
      $tobool,
      $tobool16
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle7NewExprC2ENS0_9NodeArrayEPNS0_4NodeES2_bb(
    $this,
    $ExprList_,
    $Type_,
    $InitList_,
    $IsGlobal_,
    $IsArray_
  ) {
    $this = $this | 0;
    $ExprList_ = $ExprList_ | 0;
    $Type_ = $Type_ | 0;
    $InitList_ = $InitList_ | 0;
    $IsGlobal_ = $IsGlobal_ | 0;
    $IsArray_ = $IsArray_ | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0;
    var $ExprList = 0,
      $InitList = 0,
      $IsArray = 0,
      $IsGlobal = 0,
      $Type = 0,
      $frombool = 0,
      $frombool1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $frombool = $IsGlobal_ & 1;
    $frombool1 = $IsArray_ & 1;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      51,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 4296;
    $ExprList = ($this + 8) | 0;
    $0 = $ExprList_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $ExprList;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    $Type = ($this + 16) | 0;
    HEAP32[$Type >> 2] = $Type_;
    $InitList = ($this + 20) | 0;
    $10 = $InitList_;
    $11 = $10;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = ($10 + 4) | 0;
    $14 = $13;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = $InitList;
    $17 = $16;
    HEAP32[$17 >> 2] = $12;
    $18 = ($16 + 4) | 0;
    $19 = $18;
    HEAP32[$19 >> 2] = $15;
    $IsGlobal = ($this + 28) | 0;
    HEAP8[$IsGlobal >> 0] = $frombool;
    $IsArray = ($this + 29) | 0;
    HEAP8[$IsArray >> 0] = $frombool1;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle7NewExpr9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $ExprList = 0,
      $InitList = 0,
      $IsArray = 0,
      $IsGlobal = 0,
      $Type = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp12 = 0,
      $agg$tmp12$byval_copy = 0,
      $agg$tmp15 = 0,
      $agg$tmp15$byval_copy = 0,
      $agg$tmp2 = 0,
      $agg$tmp2$byval_copy = 0,
      $agg$tmp20 = 0,
      $agg$tmp20$byval_copy = 0,
      $agg$tmp23 = 0,
      $agg$tmp23$byval_copy = 0;
    var $agg$tmp6 = 0,
      $agg$tmp6$byval_copy = 0,
      $call10 = 0,
      $call18 = 0,
      $tobool = 0,
      $tobool4 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 112) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112 | 0);
    $agg$tmp23$byval_copy = (sp + 104) | 0;
    $agg$tmp20$byval_copy = (sp + 96) | 0;
    $agg$tmp15$byval_copy = (sp + 88) | 0;
    $agg$tmp12$byval_copy = (sp + 80) | 0;
    $agg$tmp6$byval_copy = (sp + 72) | 0;
    $agg$tmp2$byval_copy = (sp + 64) | 0;
    $agg$tmp$byval_copy = (sp + 56) | 0;
    $agg$tmp = (sp + 48) | 0;
    $agg$tmp2 = (sp + 40) | 0;
    $agg$tmp6 = (sp + 32) | 0;
    $agg$tmp12 = (sp + 24) | 0;
    $agg$tmp15 = (sp + 16) | 0;
    $agg$tmp20 = (sp + 8) | 0;
    $agg$tmp23 = sp;
    $IsGlobal = ($this + 28) | 0;
    $0 = HEAP8[$IsGlobal >> 0] | 0;
    $tobool = ($0 << 24) >> 24 == 0;
    if (!$tobool) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 12455);
      HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
      HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp$byval_copy
      );
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 12467);
    HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($agg$tmp2$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp2$byval_copy
    );
    $IsArray = ($this + 29) | 0;
    $1 = HEAP8[$IsArray >> 0] | 0;
    $tobool4 = ($1 << 24) >> 24 == 0;
    if (!$tobool4) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 12471);
      HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2] | 0;
      HEAP32[($agg$tmp6$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp6 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp6$byval_copy
      );
    }
    __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
    $ExprList = ($this + 8) | 0;
    $call10 =
      __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5emptyEv($ExprList) | 0;
    if (!$call10) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12, 11119);
      HEAP32[$agg$tmp12$byval_copy >> 2] = HEAP32[$agg$tmp12 >> 2] | 0;
      HEAP32[($agg$tmp12$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp12 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp12$byval_copy
      );
      __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE(
        $ExprList,
        $S
      );
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp15, 11115);
      HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp15 >> 2] | 0;
      HEAP32[($agg$tmp15$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp15 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp15$byval_copy
      );
    }
    $Type = ($this + 16) | 0;
    $2 = HEAP32[$Type >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $2,
      $S
    );
    $InitList = ($this + 20) | 0;
    $call18 =
      __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5emptyEv($InitList) | 0;
    if (!$call18) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp20, 11119);
      HEAP32[$agg$tmp20$byval_copy >> 2] = HEAP32[$agg$tmp20 >> 2] | 0;
      HEAP32[($agg$tmp20$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp20 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp20$byval_copy
      );
      __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE(
        $InitList,
        $S
      );
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp23, 11115);
      HEAP32[$agg$tmp23$byval_copy >> 2] = HEAP32[$agg$tmp23 >> 2] | 0;
      HEAP32[($agg$tmp23$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp23 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp23$byval_copy
      );
    }
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle7NewExprD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5emptyEv($this) {
    $this = $this | 0;
    var $0 = 0,
      $NumElements = 0,
      $cmp = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $NumElements = ($this + 4) | 0;
    $0 = HEAP32[$NumElements >> 2] | 0;
    $cmp = ($0 | 0) == 0;
    return $cmp | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle7NewExprEJRNS2_9NodeArrayERPNS2_4NodeES5_RbS9_EEEPT_DpOT0_(
    $this,
    $args,
    $args1,
    $args3,
    $args5,
    $args7
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    $args5 = $args5 | 0;
    $args7 = $args7 | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0;
    var $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $agg$tmp12 = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      $tmpcast1$byval_copy = 0,
      $tobool = 0,
      $tobool16 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $tmpcast1$byval_copy = (sp + 24) | 0;
    $tmpcast$byval_copy = (sp + 16) | 0;
    $agg$tmp = (sp + 8) | 0;
    $agg$tmp12 = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 32) | 0;
    $0 = $args;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    $10 = HEAP32[$args1 >> 2] | 0;
    $11 = $args3;
    $12 = $11;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = ($11 + 4) | 0;
    $15 = $14;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $agg$tmp12;
    $18 = $17;
    HEAP32[$18 >> 2] = $13;
    $19 = ($17 + 4) | 0;
    $20 = $19;
    HEAP32[$20 >> 2] = $16;
    $21 = HEAP8[$args5 >> 0] | 0;
    $tobool = ($21 << 24) >> 24 != 0;
    $22 = HEAP8[$args7 >> 0] | 0;
    $tobool16 = ($22 << 24) >> 24 != 0;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    HEAP32[$tmpcast1$byval_copy >> 2] = HEAP32[$agg$tmp12 >> 2] | 0;
    HEAP32[($tmpcast1$byval_copy + 4) >> 2] = HEAP32[($agg$tmp12 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle7NewExprC2ENS0_9NodeArrayEPNS0_4NodeES2_bb(
      $call,
      $tmpcast$byval_copy,
      $10,
      $tmpcast1$byval_copy,
      $tobool,
      $tobool16
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11PostfixExprEJRPNS2_4NodeERA3_KcEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args1);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle11PostfixExprC2EPKNS0_4NodeENS_10StringViewE(
      $call,
      $0,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle11PostfixExprC2EPKNS0_4NodeENS_10StringViewE(
    $this,
    $Child_,
    $Operator_
  ) {
    $this = $this | 0;
    $Child_ = $Child_ | 0;
    $Operator_ = $Operator_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Child = 0,
      $Operator = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      44,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 4340;
    $Child = ($this + 8) | 0;
    HEAP32[$Child >> 2] = $Child_;
    $Operator = ($this + 12) | 0;
    $0 = $Operator_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Operator;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle11PostfixExpr9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Child = 0,
      $Operator = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp2 = 0,
      $agg$tmp2$byval_copy = 0,
      $agg$tmp4 = 0,
      $tmpcast$byval_copy = 0,
      label = 0;
    var sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 48) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
    $tmpcast$byval_copy = (sp + 40) | 0;
    $agg$tmp2$byval_copy = (sp + 32) | 0;
    $agg$tmp$byval_copy = (sp + 24) | 0;
    $agg$tmp = (sp + 16) | 0;
    $agg$tmp2 = (sp + 8) | 0;
    $agg$tmp4 = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11119);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Child = ($this + 8) | 0;
    $0 = HEAP32[$Child >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 11115);
    HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($agg$tmp2$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp2$byval_copy
    );
    $Operator = ($this + 12) | 0;
    $1 = $Operator;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $agg$tmp4;
    $8 = $7;
    HEAP32[$8 >> 2] = $3;
    $9 = ($7 + 4) | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $6;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp4 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle11PostfixExprD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12InitListExprEJDnNS2_9NodeArrayEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = $args1;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle12InitListExprC2EPKNS0_4NodeENS0_9NodeArrayE(
      $call,
      0,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $Length = 0,
      $Name = 0,
      $add$ptr = 0,
      $add$ptr8 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      $call11 = 0,
      $call13 = 0,
      $call2 = 0,
      $call9 = 0,
      $retval$0 = 0,
      $retval$1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $agg$tmp$byval_copy = (sp + 24) | 0;
    $Length = (sp + 16) | 0;
    $Name = (sp + 8) | 0;
    $agg$tmp = sp;
    HEAP32[$Length >> 2] = 0;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parsePositiveIntegerEPm(
        $this,
        $Length
      ) | 0;
    if ($call) {
      $retval$1 = 0;
    } else {
      $call2 =
        __ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv(
          $this
        ) | 0;
      $0 = HEAP32[$Length >> 2] | 0;
      $1 = ($0 + -1) | 0;
      $2 = $1 >>> 0 < $call2 >>> 0;
      if ($2) {
        $3 = HEAP32[$this >> 2] | 0;
        $add$ptr = ($3 + $0) | 0;
        __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($Name, $3, $add$ptr);
        $4 = HEAP32[$this >> 2] | 0;
        $add$ptr8 = ($4 + $0) | 0;
        HEAP32[$this >> 2] = $add$ptr8;
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 12674);
        HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
        HEAP32[($agg$tmp$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp + 4) >> 2] | 0;
        $call9 =
          __ZNK12_GLOBAL__N_110StringView10startsWithES0_(
            $Name,
            $agg$tmp$byval_copy
          ) | 0;
        if ($call9) {
          $call11 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA22_KcEEEPNS0_4NodeEDpOT0_(
              $this
            ) | 0;
          $retval$0 = $call11;
        } else {
          $call13 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_(
              $this,
              $Name
            ) | 0;
          $retval$0 = $call13;
        }
        $retval$1 = $retval$0;
      } else {
        $retval$1 = 0;
      }
    }
    STACKTOP = sp;
    return $retval$1 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BracedExprEJRPNS0_4NodeESA_bEEES9_DpOT0_(
    $this,
    $args,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $ASTAllocator = 0,
      $call8 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call8 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10BracedExprEJRPNS2_4NodeES6_bEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1,
        $args3
      ) | 0;
    return $call8 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15BracedRangeExprEJRPNS0_4NodeESA_SA_EEES9_DpOT0_(
    $this,
    $args,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $ASTAllocator = 0,
      $call8 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call8 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15BracedRangeExprEJRPNS2_4NodeES6_S6_EEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1,
        $args3
      ) | 0;
    return $call8 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15BracedRangeExprEJRPNS2_4NodeES6_S6_EEEPT_DpOT0_(
    $this,
    $args,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = HEAP32[$args1 >> 2] | 0;
    $2 = HEAP32[$args3 >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle15BracedRangeExprC2EPKNS0_4NodeES4_S4_(
      $call,
      $0,
      $1,
      $2
    );
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle15BracedRangeExprC2EPKNS0_4NodeES4_S4_(
    $this,
    $First_,
    $Last_,
    $Init_
  ) {
    $this = $this | 0;
    $First_ = $First_ | 0;
    $Last_ = $Last_ | 0;
    $Init_ = $Init_ | 0;
    var $First = 0,
      $Init = 0,
      $Last = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      66,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 4384;
    $First = ($this + 8) | 0;
    HEAP32[$First >> 2] = $First_;
    $Last = ($this + 12) | 0;
    HEAP32[$Last >> 2] = $Last_;
    $Init = ($this + 16) | 0;
    HEAP32[$Init >> 2] = $Init_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle15BracedRangeExpr9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $$pre = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $First = 0,
      $Init = 0,
      $Last = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp9 = 0,
      $agg$tmp9$byval_copy = 0,
      $call4 = 0,
      $call4$off = 0,
      $switch = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $agg$tmp9$byval_copy = (sp + 24) | 0;
    $agg$tmp$byval_copy = (sp + 16) | 0;
    $agg$tmp = (sp + 8) | 0;
    $agg$tmp9 = sp;
    __ZN12_GLOBAL__N_112OutputStreampLEc($S, 91);
    $First = ($this + 8) | 0;
    $0 = HEAP32[$First >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 12565);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Last = ($this + 12) | 0;
    $1 = HEAP32[$Last >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $1,
      $S
    );
    __ZN12_GLOBAL__N_112OutputStreampLEc($S, 93);
    $Init = ($this + 16) | 0;
    $2 = HEAP32[$Init >> 2] | 0;
    $call4 = __ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($2) | 0;
    $call4$off = (($call4 + -65) << 24) >> 24;
    $switch = ($call4$off & 255) < 2;
    if ($switch) {
      $3 = $2;
    } else {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp9, 12571);
      HEAP32[$agg$tmp9$byval_copy >> 2] = HEAP32[$agg$tmp9 >> 2] | 0;
      HEAP32[($agg$tmp9$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp9 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp9$byval_copy
      );
      $$pre = HEAP32[$Init >> 2] | 0;
      $3 = $$pre;
    }
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $3,
      $S
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle15BracedRangeExprD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10BracedExprEJRPNS2_4NodeES6_bEEEPT_DpOT0_(
    $this,
    $args,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = HEAP32[$args1 >> 2] | 0;
    $2 = HEAP8[$args3 >> 0] | 0;
    $tobool = ($2 << 24) >> 24 != 0;
    __ZN12_GLOBAL__N_116itanium_demangle10BracedExprC2EPKNS0_4NodeES4_b(
      $call,
      $0,
      $1,
      $tobool
    );
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle10BracedExprC2EPKNS0_4NodeES4_b(
    $this,
    $Elem_,
    $Init_,
    $IsArray_
  ) {
    $this = $this | 0;
    $Elem_ = $Elem_ | 0;
    $Init_ = $Init_ | 0;
    $IsArray_ = $IsArray_ | 0;
    var $Elem = 0,
      $Init = 0,
      $IsArray = 0,
      $frombool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $frombool = $IsArray_ & 1;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      65,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 4428;
    $Elem = ($this + 8) | 0;
    HEAP32[$Elem >> 2] = $Elem_;
    $Init = ($this + 12) | 0;
    HEAP32[$Init >> 2] = $Init_;
    $IsArray = ($this + 16) | 0;
    HEAP8[$IsArray >> 0] = $frombool;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle10BracedExpr9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $$pre = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $Elem = 0,
      $Elem4 = 0,
      $Init = 0,
      $IsArray = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call5 = 0,
      $call5$off = 0,
      $switch = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $IsArray = ($this + 16) | 0;
    $0 = HEAP8[$IsArray >> 0] | 0;
    $tobool = ($0 << 24) >> 24 == 0;
    if ($tobool) {
      __ZN12_GLOBAL__N_112OutputStreampLEc($S, 46);
      $Elem4 = ($this + 8) | 0;
      $2 = HEAP32[$Elem4 >> 2] | 0;
      __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
        $2,
        $S
      );
    } else {
      __ZN12_GLOBAL__N_112OutputStreampLEc($S, 91);
      $Elem = ($this + 8) | 0;
      $1 = HEAP32[$Elem >> 2] | 0;
      __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
        $1,
        $S
      );
      __ZN12_GLOBAL__N_112OutputStreampLEc($S, 93);
    }
    $Init = ($this + 12) | 0;
    $3 = HEAP32[$Init >> 2] | 0;
    $call5 = __ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($3) | 0;
    $call5$off = (($call5 + -65) << 24) >> 24;
    $switch = ($call5$off & 255) < 2;
    if ($switch) {
      $4 = $3;
    } else {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 12571);
      HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
      HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp$byval_copy
      );
      $$pre = HEAP32[$Init >> 2] | 0;
      $4 = $$pre;
    }
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $4,
      $S
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle10BracedExprD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parsePositiveIntegerEPm(
    $this,
    $Out
  ) {
    $this = $this | 0;
    $Out = $Out | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $add = 0,
      $call = 0,
      $call$off = 0,
      $call11 = 0,
      $call5 = 0,
      $call5$off = 0,
      $conv12 = 0,
      $mul = 0,
      $retval$0 = 0,
      $sub = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    HEAP32[$Out >> 2] = 0;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
        $this,
        0
      ) | 0;
    $call$off = (($call + -48) << 24) >> 24;
    $0 = ($call$off & 255) > 9;
    L1: do {
      if ($0) {
        $retval$0 = 1;
      } else {
        $2 = 0;
        while (1) {
          $call5 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              0
            ) | 0;
          $call5$off = (($call5 + -48) << 24) >> 24;
          $1 = ($call5$off & 255) < 10;
          if (!$1) {
            $retval$0 = 0;
            break L1;
          }
          $mul = ($2 * 10) | 0;
          HEAP32[$Out >> 2] = $mul;
          $call11 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7consumeEv(
              $this
            ) | 0;
          $conv12 = ($call11 << 24) >> 24;
          $sub = ($conv12 + -48) | 0;
          $3 = HEAP32[$Out >> 2] | 0;
          $add = ($sub + $3) | 0;
          HEAP32[$Out >> 2] = $add;
          $2 = $add;
        }
      }
    } while (0);
    return $retval$0 | 0;
  }
  function __ZNK12_GLOBAL__N_110StringView10startsWithES0_($this, $Str) {
    $this = $this | 0;
    $Str = $Str | 0;
    var $0 = 0,
      $1 = 0,
      $__first1$addr$0$i$i = 0,
      $__first2$addr$0$i$i = 0,
      $call = 0,
      $call2 = 0,
      $call3 = 0,
      $call4 = 0,
      $call5 = 0,
      $cmp = 0,
      $cmp$i$i = 0,
      $cmp$i$i$i = 0,
      $incdec$ptr$i$i = 0,
      $incdec$ptr1$i$i = 0,
      $retval$0 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZNK12_GLOBAL__N_110StringView4sizeEv($Str) | 0;
    $call2 = __ZNK12_GLOBAL__N_110StringView4sizeEv($this) | 0;
    $cmp = $call >>> 0 > $call2 >>> 0;
    L1: do {
      if ($cmp) {
        $retval$0 = 0;
      } else {
        $call3 = __ZNK12_GLOBAL__N_110StringView5beginEv($Str) | 0;
        $call4 = __ZNK12_GLOBAL__N_110StringView3endEv($Str) | 0;
        $call5 = __ZNK12_GLOBAL__N_110StringView5beginEv($this) | 0;
        $__first1$addr$0$i$i = $call3;
        $__first2$addr$0$i$i = $call5;
        while (1) {
          $cmp$i$i = ($__first1$addr$0$i$i | 0) == ($call4 | 0);
          if ($cmp$i$i) {
            $retval$0 = 1;
            break L1;
          }
          $0 = HEAP8[$__first1$addr$0$i$i >> 0] | 0;
          $1 = HEAP8[$__first2$addr$0$i$i >> 0] | 0;
          $cmp$i$i$i = ($0 << 24) >> 24 == ($1 << 24) >> 24;
          if (!$cmp$i$i$i) {
            $retval$0 = 0;
            break L1;
          }
          $incdec$ptr$i$i = ($__first1$addr$0$i$i + 1) | 0;
          $incdec$ptr1$i$i = ($__first2$addr$0$i$i + 1) | 0;
          $__first1$addr$0$i$i = $incdec$ptr$i$i;
          $__first2$addr$0$i$i = $incdec$ptr1$i$i;
        }
      }
    } while (0);
    return $retval$0 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA22_KcEEEPNS0_4NodeEDpOT0_(
    $this
  ) {
    $this = $this | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA22_KcEEEPT_DpOT0_(
        $ASTAllocator,
        12685
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA22_KcEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE(
      $call,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE(
    $this,
    $Name_
  ) {
    $this = $this | 0;
    $Name_ = $Name_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Name = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      7,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 4472;
    $Name = ($this + 8) | 0;
    $0 = $Name_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Name;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle8NameType9printLeftERNS_12OutputStreamE(
    $this,
    $s
  ) {
    $this = $this | 0;
    $s = $s | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Name = 0,
      $agg$tmp = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $Name = ($this + 8) | 0;
    $0 = $Name;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $s,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle8NameType11getBaseNameEv(
    $agg$result,
    $this
  ) {
    $agg$result = $agg$result | 0;
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Name = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Name = ($this + 8) | 0;
    $0 = $Name;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$result;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle8NameTypeD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7consumeEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $Last = 0,
      $cmp = 0,
      $cond = 0,
      $incdec$ptr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$this >> 2] | 0;
    $Last = ($this + 4) | 0;
    $1 = HEAP32[$Last >> 2] | 0;
    $cmp = ($0 | 0) == ($1 | 0);
    if ($cmp) {
      $cond = 0;
    } else {
      $incdec$ptr = ($0 + 1) | 0;
      HEAP32[$this >> 2] = $incdec$ptr;
      $2 = HEAP8[$0 >> 0] | 0;
      $cond = $2;
    }
    return $cond | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle18ArraySubscriptExprEJRPNS2_4NodeES6_EEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = HEAP32[$args1 >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle18ArraySubscriptExprC2EPKNS0_4NodeES4_(
      $call,
      $0,
      $1
    );
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle18ArraySubscriptExprC2EPKNS0_4NodeES4_(
    $this,
    $Op1_,
    $Op2_
  ) {
    $this = $this | 0;
    $Op1_ = $Op1_ | 0;
    $Op2_ = $Op2_ | 0;
    var $Op1 = 0,
      $Op2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      43,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 4516;
    $Op1 = ($this + 8) | 0;
    HEAP32[$Op1 >> 2] = $Op1_;
    $Op2 = ($this + 12) | 0;
    HEAP32[$Op2 >> 2] = $Op2_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle18ArraySubscriptExpr9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $Op1 = 0,
      $Op2 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp2 = 0,
      $agg$tmp2$byval_copy = 0,
      $agg$tmp4 = 0,
      $agg$tmp4$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 48) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
    $agg$tmp4$byval_copy = (sp + 40) | 0;
    $agg$tmp2$byval_copy = (sp + 32) | 0;
    $agg$tmp$byval_copy = (sp + 24) | 0;
    $agg$tmp = (sp + 16) | 0;
    $agg$tmp2 = (sp + 8) | 0;
    $agg$tmp4 = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11119);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Op1 = ($this + 8) | 0;
    $0 = HEAP32[$Op1 >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 12751);
    HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($agg$tmp2$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp2$byval_copy
    );
    $Op2 = ($this + 12) | 0;
    $1 = HEAP32[$Op2 >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $1,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 10753);
    HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2] | 0;
    HEAP32[($agg$tmp4$byval_copy + 4) >> 2] = HEAP32[($agg$tmp4 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp4$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle18ArraySubscriptExprD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10MemberExprEJRPNS2_4NodeERA2_KcS6_EEEPT_DpOT0_(
    $this,
    $args,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $0 = 0,
      $1 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args1);
    $1 = HEAP32[$args3 >> 2] | 0;
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle10MemberExprC2EPKNS0_4NodeENS_10StringViewES4_(
      $call,
      $0,
      $agg$tmp$byval_copy,
      $1
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle10MemberExprC2EPKNS0_4NodeENS_10StringViewES4_(
    $this,
    $LHS_,
    $Kind_,
    $RHS_
  ) {
    $this = $this | 0;
    $LHS_ = $LHS_ | 0;
    $Kind_ = $Kind_ | 0;
    $RHS_ = $RHS_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Kind = 0,
      $LHS = 0,
      $RHS = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      46,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 4560;
    $LHS = ($this + 8) | 0;
    HEAP32[$LHS >> 2] = $LHS_;
    $Kind = ($this + 12) | 0;
    $0 = $Kind_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Kind;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    $RHS = ($this + 20) | 0;
    HEAP32[$RHS >> 2] = $RHS_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle10MemberExpr9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Kind = 0,
      $LHS = 0,
      $RHS = 0,
      $agg$tmp = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $LHS = ($this + 8) | 0;
    $0 = HEAP32[$LHS >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $S
    );
    $Kind = ($this + 12) | 0;
    $1 = $Kind;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $agg$tmp;
    $8 = $7;
    HEAP32[$8 >> 2] = $3;
    $9 = ($7 + 4) | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $6;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $tmpcast$byval_copy
    );
    $RHS = ($this + 20) | 0;
    $11 = HEAP32[$RHS >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $11,
      $S
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle10MemberExprD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10MemberExprEJRPNS2_4NodeERA3_KcS6_EEEPT_DpOT0_(
    $this,
    $args,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $0 = 0,
      $1 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args1);
    $1 = HEAP32[$args3 >> 2] | 0;
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle10MemberExprC2EPKNS0_4NodeENS_10StringViewES4_(
      $call,
      $0,
      $agg$tmp$byval_copy,
      $1
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedTypeEv(
    $this
  ) {
    $this = $this | 0;
    var $DT = 0,
      $Subs = 0,
      $Subs16 = 0,
      $TP = 0,
      $call = 0,
      $call11 = 0,
      $call12 = 0,
      $call19 = 0,
      $call2 = 0,
      $call20 = 0,
      $call3 = 0,
      $cmp13 = 0,
      $cmp4 = 0,
      $retval$0 = 0,
      $retval$1 = 0,
      $retval$2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $TP = (sp + 4) | 0;
    $DT = sp;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
        $this,
        0
      ) | 0;
    switch (($call << 24) >> 24) {
      case 84: {
        $call2 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
            $this
          ) | 0;
        $call3 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv(
            $call2
          ) | 0;
        HEAP32[$TP >> 2] = $call3;
        $cmp4 = ($call3 | 0) == (0 | 0);
        if ($cmp4) {
          $retval$0 = 0;
        } else {
          $Subs = ($this + 148) | 0;
          __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
            $Subs,
            $TP
          );
          $retval$0 = $call3;
        }
        $retval$2 = $retval$0;
        break;
      }
      case 68: {
        $call11 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
            $this
          ) | 0;
        $call12 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseDecltypeEv(
            $call11
          ) | 0;
        HEAP32[$DT >> 2] = $call12;
        $cmp13 = ($call12 | 0) == (0 | 0);
        if ($cmp13) {
          $retval$1 = 0;
        } else {
          $Subs16 = ($this + 148) | 0;
          __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
            $Subs16,
            $DT
          );
          $retval$1 = $call12;
        }
        $retval$2 = $retval$1;
        break;
      }
      default: {
        $call19 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
            $this
          ) | 0;
        $call20 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv(
            $call19
          ) | 0;
        $retval$2 = $call20;
      }
    }
    STACKTOP = sp;
    return $retval$2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv(
    $this
  ) {
    $this = $this | 0;
    var $SN = 0,
      $TA = 0,
      $call = 0,
      $call11 = 0,
      $call2 = 0,
      $call3 = 0,
      $call7 = 0,
      $cmp = 0,
      $cmp4 = 0,
      $cmp8 = 0,
      $retval$0 = 0,
      $retval$1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $SN = (sp + 4) | 0;
    $TA = sp;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
        $this
      ) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE(
        $call
      ) | 0;
    HEAP32[$SN >> 2] = $call2;
    $cmp = ($call2 | 0) == (0 | 0);
    if ($cmp) {
      $retval$1 = 0;
    } else {
      $call3 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
          $this,
          0
        ) | 0;
      $cmp4 = ($call3 << 24) >> 24 == 73;
      if ($cmp4) {
        $call7 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb(
            $call,
            0
          ) | 0;
        HEAP32[$TA >> 2] = $call7;
        $cmp8 = ($call7 | 0) == (0 | 0);
        if ($cmp8) {
          $retval$0 = 0;
        } else {
          $call11 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_(
              $this,
              $SN,
              $TA
            ) | 0;
          $retval$0 = $call11;
        }
        $retval$1 = $retval$0;
      } else {
        $retval$1 = $call2;
      }
    }
    STACKTOP = sp;
    return $retval$1 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13QualifiedNameEJRPNS2_4NodeES6_EEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E23parseBaseUnresolvedNameEv(
    $this
  ) {
    $this = $this | 0;
    var $Oper = 0,
      $TA = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp10 = 0,
      $agg$tmp10$byval_copy = 0,
      $call = 0,
      $call12 = 0,
      $call13 = 0,
      $call16 = 0,
      $call21 = 0,
      $call25 = 0,
      $call3 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $call8 = 0,
      $cmp = 0,
      $cmp18 = 0,
      $cmp22 = 0;
    var $conv = 0,
      $isdigit = 0,
      $isdigittmp = 0,
      $retval$0 = 0,
      $retval$1 = 0,
      $retval$2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 48) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
    $agg$tmp10$byval_copy = (sp + 32) | 0;
    $agg$tmp$byval_copy = (sp + 24) | 0;
    $agg$tmp = (sp + 16) | 0;
    $agg$tmp10 = (sp + 8) | 0;
    $Oper = (sp + 4) | 0;
    $TA = sp;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
        $this,
        0
      ) | 0;
    $conv = ($call << 24) >> 24;
    $isdigittmp = ($conv + -48) | 0;
    $isdigit = $isdigittmp >>> 0 < 10;
    do {
      if ($isdigit) {
        $call3 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
            $this
          ) | 0;
        $call4 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv(
            $call3
          ) | 0;
        $retval$2 = $call4;
      } else {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 12924);
        HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
        HEAP32[($agg$tmp$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp + 4) >> 2] | 0;
        $call5 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
            $this,
            $agg$tmp$byval_copy
          ) | 0;
        if ($call5) {
          $call7 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call8 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseDestructorNameEv(
              $call7
            ) | 0;
          $retval$2 = $call8;
          break;
        }
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp10, 12927);
        HEAP32[$agg$tmp10$byval_copy >> 2] = HEAP32[$agg$tmp10 >> 2] | 0;
        HEAP32[($agg$tmp10$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp10 + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
          $this,
          $agg$tmp10$byval_copy
        ) | 0;
        $call12 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
            $this
          ) | 0;
        $call13 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseOperatorNameEPNS5_9NameStateE(
            $call12,
            0
          ) | 0;
        HEAP32[$Oper >> 2] = $call13;
        $cmp = ($call13 | 0) == (0 | 0);
        if ($cmp) {
          $retval$1 = 0;
        } else {
          $call16 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              0
            ) | 0;
          $cmp18 = ($call16 << 24) >> 24 == 73;
          if ($cmp18) {
            $call21 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb(
                $call12,
                0
              ) | 0;
            HEAP32[$TA >> 2] = $call21;
            $cmp22 = ($call21 | 0) == (0 | 0);
            if ($cmp22) {
              $retval$0 = 0;
            } else {
              $call25 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_(
                  $this,
                  $Oper,
                  $TA
                ) | 0;
              $retval$0 = $call25;
            }
            $retval$1 = $retval$0;
          } else {
            $retval$1 = $call13;
          }
        }
        $retval$2 = $retval$1;
      }
    } while (0);
    STACKTOP = sp;
    return $retval$2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19GlobalQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19GlobalQualifiedNameEJRPNS2_4NodeEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19GlobalQualifiedNameEJRPNS2_4NodeEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle19GlobalQualifiedNameC2EPNS0_4NodeE(
      $call,
      $0
    );
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle19GlobalQualifiedNameC2EPNS0_4NodeE(
    $this,
    $Child_
  ) {
    $this = $this | 0;
    $Child_ = $Child_ | 0;
    var $Child = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      33,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 4604;
    $Child = ($this + 8) | 0;
    HEAP32[$Child >> 2] = $Child_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle19GlobalQualifiedName9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $Child = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 12865);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Child = ($this + 8) | 0;
    $0 = HEAP32[$Child >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $S
    );
    STACKTOP = sp;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle19GlobalQualifiedName11getBaseNameEv(
    $agg$result,
    $this
  ) {
    $agg$result = $agg$result | 0;
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $Child = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Child = ($this + 8) | 0;
    $0 = HEAP32[$Child >> 2] | 0;
    $vtable = HEAP32[$0 >> 2] | 0;
    $vfn = ($vtable + 24) | 0;
    $1 = HEAP32[$vfn >> 2] | 0;
    FUNCTION_TABLE_vii[$1 & 511]($agg$result, $0);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle19GlobalQualifiedNameD0Ev(
    $this
  ) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseDestructorNameEv(
    $this
  ) {
    $this = $this | 0;
    var $Result = 0,
      $call = 0,
      $call3 = 0,
      $call4 = 0,
      $call6 = 0,
      $call9 = 0,
      $cmp = 0,
      $conv = 0,
      $isdigit = 0,
      $isdigittmp = 0,
      $retval$0 = 0,
      $storemerge = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $Result = sp;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
        $this,
        0
      ) | 0;
    $conv = ($call << 24) >> 24;
    $isdigittmp = ($conv + -48) | 0;
    $isdigit = $isdigittmp >>> 0 < 10;
    $call3 =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
        $this
      ) | 0;
    if ($isdigit) {
      $call4 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv(
          $call3
        ) | 0;
      $storemerge = $call4;
    } else {
      $call6 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedTypeEv(
          $call3
        ) | 0;
      $storemerge = $call6;
    }
    HEAP32[$Result >> 2] = $storemerge;
    $cmp = ($storemerge | 0) == (0 | 0);
    if ($cmp) {
      $retval$0 = 0;
    } else {
      $call9 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8DtorNameEJRPNS0_4NodeEEEES9_DpOT0_(
          $this,
          $Result
        ) | 0;
      $retval$0 = $call9;
    }
    STACKTOP = sp;
    return $retval$0 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseOperatorNameEPNS5_9NameStateE(
    $this,
    $State
  ) {
    $this = $this | 0;
    $State = $State | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0,
      $23 = 0,
      $24 = 0,
      $25 = 0,
      $26 = 0;
    var $27 = 0,
      $28 = 0,
      $29 = 0,
      $3 = 0,
      $30 = 0,
      $31 = 0,
      $32 = 0,
      $33 = 0,
      $34 = 0,
      $35 = 0,
      $36 = 0,
      $37 = 0,
      $38 = 0,
      $39 = 0,
      $4 = 0,
      $40 = 0,
      $41 = 0,
      $42 = 0,
      $43 = 0,
      $44 = 0;
    var $45 = 0,
      $46 = 0,
      $47 = 0,
      $48 = 0,
      $49 = 0,
      $5 = 0,
      $50 = 0,
      $51 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $PermitForwardTemplateReferences = 0,
      $SN = 0,
      $SN284 = 0,
      $SavePermit = 0,
      $SaveTemplate = 0,
      $TryToParseTemplateArgs = 0,
      $Ty = 0,
      $add$ptr = 0;
    var $add$ptr100 = 0,
      $add$ptr104 = 0,
      $add$ptr113 = 0,
      $add$ptr12 = 0,
      $add$ptr121 = 0,
      $add$ptr125 = 0,
      $add$ptr135 = 0,
      $add$ptr139 = 0,
      $add$ptr143 = 0,
      $add$ptr151 = 0,
      $add$ptr155 = 0,
      $add$ptr159 = 0,
      $add$ptr16 = 0,
      $add$ptr163 = 0,
      $add$ptr167 = 0,
      $add$ptr175 = 0,
      $add$ptr179 = 0,
      $add$ptr183 = 0,
      $add$ptr187 = 0,
      $add$ptr191 = 0;
    var $add$ptr199 = 0,
      $add$ptr203 = 0,
      $add$ptr207 = 0,
      $add$ptr215 = 0,
      $add$ptr219 = 0,
      $add$ptr223 = 0,
      $add$ptr227 = 0,
      $add$ptr23 = 0,
      $add$ptr231 = 0,
      $add$ptr235 = 0,
      $add$ptr244 = 0,
      $add$ptr252 = 0,
      $add$ptr256 = 0,
      $add$ptr260 = 0,
      $add$ptr264 = 0,
      $add$ptr27 = 0,
      $add$ptr273 = 0,
      $add$ptr283 = 0,
      $add$ptr31 = 0,
      $add$ptr35 = 0;
    var $add$ptr60 = 0,
      $add$ptr64 = 0,
      $add$ptr68 = 0,
      $add$ptr72 = 0,
      $add$ptr76 = 0,
      $add$ptr8 = 0,
      $add$ptr84 = 0,
      $add$ptr88 = 0,
      $add$ptr92 = 0,
      $call = 0,
      $call101 = 0,
      $call105 = 0,
      $call108 = 0,
      $call114 = 0,
      $call117 = 0,
      $call122 = 0,
      $call126 = 0,
      $call127 = 0,
      $call13 = 0,
      $call131 = 0;
    var $call136 = 0,
      $call140 = 0,
      $call144 = 0,
      $call147 = 0,
      $call152 = 0,
      $call156 = 0,
      $call160 = 0,
      $call164 = 0,
      $call168 = 0,
      $call17 = 0,
      $call171 = 0,
      $call176 = 0,
      $call180 = 0,
      $call184 = 0,
      $call188 = 0,
      $call19 = 0,
      $call192 = 0,
      $call195 = 0,
      $call2 = 0,
      $call200 = 0;
    var $call204 = 0,
      $call208 = 0,
      $call211 = 0,
      $call216 = 0,
      $call220 = 0,
      $call224 = 0,
      $call228 = 0,
      $call232 = 0,
      $call236 = 0,
      $call239 = 0,
      $call24 = 0,
      $call245 = 0,
      $call248 = 0,
      $call253 = 0,
      $call257 = 0,
      $call261 = 0,
      $call265 = 0,
      $call268 = 0,
      $call274 = 0,
      $call277 = 0;
    var $call28 = 0,
      $call285 = 0,
      $call286 = 0,
      $call290 = 0,
      $call32 = 0,
      $call39 = 0,
      $call41 = 0,
      $call47 = 0,
      $call5 = 0,
      $call56 = 0,
      $call61 = 0,
      $call65 = 0,
      $call69 = 0,
      $call73 = 0,
      $call77 = 0,
      $call80 = 0,
      $call85 = 0,
      $call89 = 0,
      $call9 = 0,
      $call93 = 0;
    var $call96 = 0,
      $cmp = 0,
      $cmp110 = 0,
      $cmp128 = 0,
      $cmp241 = 0,
      $cmp270 = 0,
      $cmp287 = 0,
      $cmp42 = 0,
      $conv = 0,
      $conv118 = 0,
      $conv148 = 0,
      $conv172 = 0,
      $conv196 = 0,
      $conv20 = 0,
      $conv212 = 0,
      $conv249 = 0,
      $conv278 = 0,
      $conv3 = 0,
      $conv57 = 0,
      $conv81 = 0;
    var $conv97 = 0,
      $isdigit = 0,
      $isdigittmp = 0,
      $retval$0 = 0,
      $retval$1 = 0,
      $retval$2 = 0,
      $retval$3 = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $SaveTemplate = (sp + 24) | 0;
    $SavePermit = (sp + 16) | 0;
    $Ty = (sp + 8) | 0;
    $SN = (sp + 4) | 0;
    $SN284 = sp;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
        $this,
        0
      ) | 0;
    $conv = ($call << 24) >> 24;
    L1: do {
      switch ($conv | 0) {
        case 97: {
          $call2 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              1
            ) | 0;
          $conv3 = ($call2 << 24) >> 24;
          switch ($conv3 | 0) {
            case 97: {
              $0 = HEAP32[$this >> 2] | 0;
              $add$ptr = ($0 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr;
              $call5 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  12930
                ) | 0;
              $retval$3 = $call5;
              break L1;
              break;
            }
            case 110:
            case 100: {
              $1 = HEAP32[$this >> 2] | 0;
              $add$ptr8 = ($1 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr8;
              $call9 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  12941
                ) | 0;
              $retval$3 = $call9;
              break L1;
              break;
            }
            case 78: {
              $2 = HEAP32[$this >> 2] | 0;
              $add$ptr12 = ($2 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr12;
              $call13 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  12951
                ) | 0;
              $retval$3 = $call13;
              break L1;
              break;
            }
            case 83: {
              $3 = HEAP32[$this >> 2] | 0;
              $add$ptr16 = ($3 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr16;
              $call17 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  12962
                ) | 0;
              $retval$3 = $call17;
              break L1;
              break;
            }
            default: {
              $retval$3 = 0;
              break L1;
            }
          }
          break;
        }
        case 99: {
          $call19 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              1
            ) | 0;
          $conv20 = ($call19 << 24) >> 24;
          switch ($conv20 | 0) {
            case 108: {
              $4 = HEAP32[$this >> 2] | 0;
              $add$ptr23 = ($4 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr23;
              $call24 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  12972
                ) | 0;
              $retval$3 = $call24;
              break L1;
              break;
            }
            case 109: {
              $5 = HEAP32[$this >> 2] | 0;
              $add$ptr27 = ($5 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr27;
              $call28 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  12983
                ) | 0;
              $retval$3 = $call28;
              break L1;
              break;
            }
            case 111: {
              $6 = HEAP32[$this >> 2] | 0;
              $add$ptr31 = ($6 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr31;
              $call32 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  12993
                ) | 0;
              $retval$3 = $call32;
              break L1;
              break;
            }
            case 118: {
              $7 = HEAP32[$this >> 2] | 0;
              $add$ptr35 = ($7 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr35;
              $TryToParseTemplateArgs = ($this + 360) | 0;
              __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb(
                $SaveTemplate,
                $TryToParseTemplateArgs,
                0
              );
              $PermitForwardTemplateReferences = ($this + 361) | 0;
              $8 = HEAP8[$PermitForwardTemplateReferences >> 0] | 0;
              $tobool = ($8 << 24) >> 24 != 0;
              $cmp = ($State | 0) != (0 | 0);
              $9 = $cmp | $tobool;
              __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb(
                $SavePermit,
                $PermitForwardTemplateReferences,
                $9
              );
              $call39 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call41 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
                  $call39
                ) | 0;
              HEAP32[$Ty >> 2] = $call41;
              $cmp42 = ($call41 | 0) == (0 | 0);
              if ($cmp42) {
                $retval$0 = 0;
              } else {
                if ($cmp) {
                  HEAP8[$State >> 0] = 1;
                }
                $call47 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ConversionOperatorTypeEJRPNS0_4NodeEEEES9_DpOT0_(
                    $this,
                    $Ty
                  ) | 0;
                $retval$0 = $call47;
              }
              __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePermit);
              __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SaveTemplate);
              $retval$3 = $retval$0;
              break L1;
              break;
            }
            default: {
              $retval$3 = 0;
              break L1;
            }
          }
          break;
        }
        case 100: {
          $call56 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              1
            ) | 0;
          $conv57 = ($call56 << 24) >> 24;
          switch ($conv57 | 0) {
            case 97: {
              $10 = HEAP32[$this >> 2] | 0;
              $add$ptr60 = ($10 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr60;
              $call61 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA18_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13003
                ) | 0;
              $retval$3 = $call61;
              break L1;
              break;
            }
            case 101: {
              $11 = HEAP32[$this >> 2] | 0;
              $add$ptr64 = ($11 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr64;
              $call65 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13021
                ) | 0;
              $retval$3 = $call65;
              break L1;
              break;
            }
            case 108: {
              $12 = HEAP32[$this >> 2] | 0;
              $add$ptr68 = ($12 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr68;
              $call69 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA16_KcEEEPNS0_4NodeEDpOT0_(
                  $this
                ) | 0;
              $retval$3 = $call69;
              break L1;
              break;
            }
            case 118: {
              $13 = HEAP32[$this >> 2] | 0;
              $add$ptr72 = ($13 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr72;
              $call73 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13031
                ) | 0;
              $retval$3 = $call73;
              break L1;
              break;
            }
            case 86: {
              $14 = HEAP32[$this >> 2] | 0;
              $add$ptr76 = ($14 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr76;
              $call77 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13041
                ) | 0;
              $retval$3 = $call77;
              break L1;
              break;
            }
            default: {
              $retval$3 = 0;
              break L1;
            }
          }
          break;
        }
        case 101: {
          $call80 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              1
            ) | 0;
          $conv81 = ($call80 << 24) >> 24;
          switch ($conv81 | 0) {
            case 111: {
              $15 = HEAP32[$this >> 2] | 0;
              $add$ptr84 = ($15 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr84;
              $call85 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13052
                ) | 0;
              $retval$3 = $call85;
              break L1;
              break;
            }
            case 79: {
              $16 = HEAP32[$this >> 2] | 0;
              $add$ptr88 = ($16 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr88;
              $call89 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13062
                ) | 0;
              $retval$3 = $call89;
              break L1;
              break;
            }
            case 113: {
              $17 = HEAP32[$this >> 2] | 0;
              $add$ptr92 = ($17 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr92;
              $call93 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13073
                ) | 0;
              $retval$3 = $call93;
              break L1;
              break;
            }
            default: {
              $retval$3 = 0;
              break L1;
            }
          }
          break;
        }
        case 103: {
          $call96 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              1
            ) | 0;
          $conv97 = ($call96 << 24) >> 24;
          switch ($conv97 | 0) {
            case 101: {
              $18 = HEAP32[$this >> 2] | 0;
              $add$ptr100 = ($18 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr100;
              $call101 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13084
                ) | 0;
              $retval$3 = $call101;
              break L1;
              break;
            }
            case 116: {
              $19 = HEAP32[$this >> 2] | 0;
              $add$ptr104 = ($19 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr104;
              $call105 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13095
                ) | 0;
              $retval$3 = $call105;
              break L1;
              break;
            }
            default: {
              $retval$3 = 0;
              break L1;
            }
          }
          break;
        }
        case 105: {
          $call108 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              1
            ) | 0;
          $cmp110 = ($call108 << 24) >> 24 == 120;
          if ($cmp110) {
            $20 = HEAP32[$this >> 2] | 0;
            $add$ptr113 = ($20 + 2) | 0;
            HEAP32[$this >> 2] = $add$ptr113;
            $call114 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_(
                $this,
                13105
              ) | 0;
            $retval$3 = $call114;
          } else {
            $retval$3 = 0;
          }
          break;
        }
        case 108: {
          $call117 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              1
            ) | 0;
          $conv118 = ($call117 << 24) >> 24;
          switch ($conv118 | 0) {
            case 101: {
              $21 = HEAP32[$this >> 2] | 0;
              $add$ptr121 = ($21 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr121;
              $call122 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13116
                ) | 0;
              $retval$3 = $call122;
              break L1;
              break;
            }
            case 105: {
              $22 = HEAP32[$this >> 2] | 0;
              $add$ptr125 = ($22 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr125;
              $call126 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call127 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE(
                  $call126
                ) | 0;
              HEAP32[$SN >> 2] = $call127;
              $cmp128 = ($call127 | 0) == (0 | 0);
              if ($cmp128) {
                $retval$1 = 0;
              } else {
                $call131 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15LiteralOperatorEJRPNS0_4NodeEEEES9_DpOT0_(
                    $this,
                    $SN
                  ) | 0;
                $retval$1 = $call131;
              }
              $retval$3 = $retval$1;
              break L1;
              break;
            }
            case 115: {
              $23 = HEAP32[$this >> 2] | 0;
              $add$ptr135 = ($23 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr135;
              $call136 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13127
                ) | 0;
              $retval$3 = $call136;
              break L1;
              break;
            }
            case 83: {
              $24 = HEAP32[$this >> 2] | 0;
              $add$ptr139 = ($24 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr139;
              $call140 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13138
                ) | 0;
              $retval$3 = $call140;
              break L1;
              break;
            }
            case 116: {
              $25 = HEAP32[$this >> 2] | 0;
              $add$ptr143 = ($25 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr143;
              $call144 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13150
                ) | 0;
              $retval$3 = $call144;
              break L1;
              break;
            }
            default: {
              $retval$3 = 0;
              break L1;
            }
          }
          break;
        }
        case 109: {
          $call147 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              1
            ) | 0;
          $conv148 = ($call147 << 24) >> 24;
          switch ($conv148 | 0) {
            case 105: {
              $26 = HEAP32[$this >> 2] | 0;
              $add$ptr151 = ($26 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr151;
              $call152 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13160
                ) | 0;
              $retval$3 = $call152;
              break L1;
              break;
            }
            case 73: {
              $27 = HEAP32[$this >> 2] | 0;
              $add$ptr155 = ($27 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr155;
              $call156 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13170
                ) | 0;
              $retval$3 = $call156;
              break L1;
              break;
            }
            case 108: {
              $28 = HEAP32[$this >> 2] | 0;
              $add$ptr159 = ($28 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr159;
              $call160 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13021
                ) | 0;
              $retval$3 = $call160;
              break L1;
              break;
            }
            case 76: {
              $29 = HEAP32[$this >> 2] | 0;
              $add$ptr163 = ($29 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr163;
              $call164 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13181
                ) | 0;
              $retval$3 = $call164;
              break L1;
              break;
            }
            case 109: {
              $30 = HEAP32[$this >> 2] | 0;
              $add$ptr167 = ($30 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr167;
              $call168 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13192
                ) | 0;
              $retval$3 = $call168;
              break L1;
              break;
            }
            default: {
              $retval$3 = 0;
              break L1;
            }
          }
          break;
        }
        case 110: {
          $call171 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              1
            ) | 0;
          $conv172 = ($call171 << 24) >> 24;
          switch ($conv172 | 0) {
            case 97: {
              $31 = HEAP32[$this >> 2] | 0;
              $add$ptr175 = ($31 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr175;
              $call176 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13203
                ) | 0;
              $retval$3 = $call176;
              break L1;
              break;
            }
            case 101: {
              $32 = HEAP32[$this >> 2] | 0;
              $add$ptr179 = ($32 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr179;
              $call180 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13218
                ) | 0;
              $retval$3 = $call180;
              break L1;
              break;
            }
            case 103: {
              $33 = HEAP32[$this >> 2] | 0;
              $add$ptr183 = ($33 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr183;
              $call184 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13160
                ) | 0;
              $retval$3 = $call184;
              break L1;
              break;
            }
            case 116: {
              $34 = HEAP32[$this >> 2] | 0;
              $add$ptr187 = ($34 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr187;
              $call188 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13229
                ) | 0;
              $retval$3 = $call188;
              break L1;
              break;
            }
            case 119: {
              $35 = HEAP32[$this >> 2] | 0;
              $add$ptr191 = ($35 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr191;
              $call192 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA13_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13239
                ) | 0;
              $retval$3 = $call192;
              break L1;
              break;
            }
            default: {
              $retval$3 = 0;
              break L1;
            }
          }
          break;
        }
        case 111: {
          $call195 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              1
            ) | 0;
          $conv196 = ($call195 << 24) >> 24;
          switch ($conv196 | 0) {
            case 111: {
              $36 = HEAP32[$this >> 2] | 0;
              $add$ptr199 = ($36 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr199;
              $call200 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13252
                ) | 0;
              $retval$3 = $call200;
              break L1;
              break;
            }
            case 114: {
              $37 = HEAP32[$this >> 2] | 0;
              $add$ptr203 = ($37 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr203;
              $call204 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13263
                ) | 0;
              $retval$3 = $call204;
              break L1;
              break;
            }
            case 82: {
              $38 = HEAP32[$this >> 2] | 0;
              $add$ptr207 = ($38 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr207;
              $call208 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13273
                ) | 0;
              $retval$3 = $call208;
              break L1;
              break;
            }
            default: {
              $retval$3 = 0;
              break L1;
            }
          }
          break;
        }
        case 112: {
          $call211 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              1
            ) | 0;
          $conv212 = ($call211 << 24) >> 24;
          switch ($conv212 | 0) {
            case 109: {
              $39 = HEAP32[$this >> 2] | 0;
              $add$ptr215 = ($39 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr215;
              $call216 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13284
                ) | 0;
              $retval$3 = $call216;
              break L1;
              break;
            }
            case 108: {
              $40 = HEAP32[$this >> 2] | 0;
              $add$ptr219 = ($40 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr219;
              $call220 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13296
                ) | 0;
              $retval$3 = $call220;
              break L1;
              break;
            }
            case 76: {
              $41 = HEAP32[$this >> 2] | 0;
              $add$ptr223 = ($41 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr223;
              $call224 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13306
                ) | 0;
              $retval$3 = $call224;
              break L1;
              break;
            }
            case 112: {
              $42 = HEAP32[$this >> 2] | 0;
              $add$ptr227 = ($42 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr227;
              $call228 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13317
                ) | 0;
              $retval$3 = $call228;
              break L1;
              break;
            }
            case 115: {
              $43 = HEAP32[$this >> 2] | 0;
              $add$ptr231 = ($43 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr231;
              $call232 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13296
                ) | 0;
              $retval$3 = $call232;
              break L1;
              break;
            }
            case 116: {
              $44 = HEAP32[$this >> 2] | 0;
              $add$ptr235 = ($44 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr235;
              $call236 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13328
                ) | 0;
              $retval$3 = $call236;
              break L1;
              break;
            }
            default: {
              $retval$3 = 0;
              break L1;
            }
          }
          break;
        }
        case 113: {
          $call239 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              1
            ) | 0;
          $cmp241 = ($call239 << 24) >> 24 == 117;
          if ($cmp241) {
            $45 = HEAP32[$this >> 2] | 0;
            $add$ptr244 = ($45 + 2) | 0;
            HEAP32[$this >> 2] = $add$ptr244;
            $call245 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_(
                $this,
                13339
              ) | 0;
            $retval$3 = $call245;
          } else {
            $retval$3 = 0;
          }
          break;
        }
        case 114: {
          $call248 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              1
            ) | 0;
          $conv249 = ($call248 << 24) >> 24;
          switch ($conv249 | 0) {
            case 109: {
              $46 = HEAP32[$this >> 2] | 0;
              $add$ptr252 = ($46 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr252;
              $call253 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13349
                ) | 0;
              $retval$3 = $call253;
              break L1;
              break;
            }
            case 77: {
              $47 = HEAP32[$this >> 2] | 0;
              $add$ptr256 = ($47 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr256;
              $call257 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13359
                ) | 0;
              $retval$3 = $call257;
              break L1;
              break;
            }
            case 115: {
              $48 = HEAP32[$this >> 2] | 0;
              $add$ptr260 = ($48 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr260;
              $call261 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13370
                ) | 0;
              $retval$3 = $call261;
              break L1;
              break;
            }
            case 83: {
              $49 = HEAP32[$this >> 2] | 0;
              $add$ptr264 = ($49 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr264;
              $call265 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  13381
                ) | 0;
              $retval$3 = $call265;
              break L1;
              break;
            }
            default: {
              $retval$3 = 0;
              break L1;
            }
          }
          break;
        }
        case 115: {
          $call268 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              1
            ) | 0;
          $cmp270 = ($call268 << 24) >> 24 == 115;
          if ($cmp270) {
            $50 = HEAP32[$this >> 2] | 0;
            $add$ptr273 = ($50 + 2) | 0;
            HEAP32[$this >> 2] = $add$ptr273;
            $call274 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_(
                $this,
                13393
              ) | 0;
            $retval$3 = $call274;
          } else {
            $retval$3 = 0;
          }
          break;
        }
        case 118: {
          $call277 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              1
            ) | 0;
          $conv278 = ($call277 << 24) >> 24;
          $isdigittmp = ($conv278 + -48) | 0;
          $isdigit = $isdigittmp >>> 0 < 10;
          if ($isdigit) {
            $51 = HEAP32[$this >> 2] | 0;
            $add$ptr283 = ($51 + 2) | 0;
            HEAP32[$this >> 2] = $add$ptr283;
            $call285 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                $this
              ) | 0;
            $call286 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE(
                $call285
              ) | 0;
            HEAP32[$SN284 >> 2] = $call286;
            $cmp287 = ($call286 | 0) == (0 | 0);
            if ($cmp287) {
              $retval$2 = 0;
            } else {
              $call290 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ConversionOperatorTypeEJRPNS0_4NodeEEEES9_DpOT0_(
                  $this,
                  $SN284
                ) | 0;
              $retval$2 = $call290;
            }
            $retval$3 = $retval$2;
          } else {
            $retval$3 = 0;
          }
          break;
        }
        default: {
          $retval$3 = 0;
        }
      }
    } while (0);
    STACKTOP = sp;
    return $retval$3 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ConversionOperatorTypeEJRPNS0_4NodeEEEES9_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ConversionOperatorTypeEJRPNS2_4NodeEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA16_KcEEEPNS0_4NodeEDpOT0_(
    $this
  ) {
    $this = $this | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA16_KcEEEPT_DpOT0_(
        $ASTAllocator,
        13469
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15LiteralOperatorEJRPNS0_4NodeEEEES9_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15LiteralOperatorEJRPNS2_4NodeEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15LiteralOperatorEJRPNS2_4NodeEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle15LiteralOperatorC2EPKNS0_4NodeE(
      $call,
      $0
    );
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle15LiteralOperatorC2EPKNS0_4NodeE(
    $this,
    $OpName_
  ) {
    $this = $this | 0;
    $OpName_ = $OpName_ | 0;
    var $OpName = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      19,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 4648;
    $OpName = ($this + 8) | 0;
    HEAP32[$OpName >> 2] = $OpName_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle15LiteralOperator9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $OpName = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 13405);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $OpName = ($this + 8) | 0;
    $0 = HEAP32[$OpName >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $S
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle15LiteralOperatorD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA16_KcEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE(
      $call,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ConversionOperatorTypeEJRPNS2_4NodeEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle22ConversionOperatorTypeC2EPKNS0_4NodeE(
      $call,
      $0
    );
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22ConversionOperatorTypeC2EPKNS0_4NodeE(
    $this,
    $Ty_
  ) {
    $this = $this | 0;
    $Ty_ = $Ty_ | 0;
    var $Ty = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      4,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 4692;
    $Ty = ($this + 8) | 0;
    HEAP32[$Ty >> 2] = $Ty_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle22ConversionOperatorType9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $Ty = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 13485);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Ty = ($this + 8) | 0;
    $0 = HEAP32[$Ty >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $S
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22ConversionOperatorTypeD0Ev(
    $this
  ) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8DtorNameEJRPNS0_4NodeEEEES9_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8DtorNameEJRPNS2_4NodeEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8DtorNameEJRPNS2_4NodeEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8DtorNameC2EPKNS0_4NodeE($call, $0);
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle8DtorNameC2EPKNS0_4NodeE(
    $this,
    $Base_
  ) {
    $this = $this | 0;
    $Base_ = $Base_ | 0;
    var $Base = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      38,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 4736;
    $Base = ($this + 8) | 0;
    HEAP32[$Base >> 2] = $Base_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle8DtorName9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $Base = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11852);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Base = ($this + 8) | 0;
    $0 = HEAP32[$Base >> 2] | 0;
    $vtable = HEAP32[$0 >> 2] | 0;
    $vfn = ($vtable + 16) | 0;
    $1 = HEAP32[$vfn >> 2] | 0;
    FUNCTION_TABLE_vii[$1 & 511]($0, $S);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle8DtorNameD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13QualifiedNameEJRPNS2_4NodeES6_EEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = HEAP32[$args1 >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle13QualifiedNameC2EPKNS0_4NodeES4_(
      $call,
      $0,
      $1
    );
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle13QualifiedNameC2EPKNS0_4NodeES4_(
    $this,
    $Qualifier_,
    $Name_
  ) {
    $this = $this | 0;
    $Qualifier_ = $Qualifier_ | 0;
    $Name_ = $Name_ | 0;
    var $Name = 0,
      $Qualifier = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      22,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 4780;
    $Qualifier = ($this + 8) | 0;
    HEAP32[$Qualifier >> 2] = $Qualifier_;
    $Name = ($this + 12) | 0;
    HEAP32[$Name >> 2] = $Name_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle13QualifiedName9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $Name = 0,
      $Qualifier = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $Qualifier = ($this + 8) | 0;
    $0 = HEAP32[$Qualifier >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 12865);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Name = ($this + 12) | 0;
    $1 = HEAP32[$Name >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $1,
      $S
    );
    STACKTOP = sp;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle13QualifiedName11getBaseNameEv(
    $agg$result,
    $this
  ) {
    $agg$result = $agg$result | 0;
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $Name = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Name = ($this + 12) | 0;
    $0 = HEAP32[$Name >> 2] | 0;
    $vtable = HEAP32[$0 >> 2] | 0;
    $vfn = ($vtable + 24) | 0;
    $1 = HEAP32[$vfn >> 2] | 0;
    FUNCTION_TABLE_vii[$1 & 511]($agg$result, $0);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle13QualifiedNameD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA13_KcRPNS2_4NodeES9_EEEPT_DpOT0_(
    $this,
    $args,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $0 = 0,
      $1 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    $0 = HEAP32[$args1 >> 2] | 0;
    $1 = HEAP32[$args3 >> 2] | 0;
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_(
      $call,
      $agg$tmp$byval_copy,
      $0,
      $1
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10DeleteExprEJRPNS2_4NodeERbbEEEPT_DpOT0_(
    $this,
    $args,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $tobool = 0,
      $tobool9 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = HEAP8[$args1 >> 0] | 0;
    $tobool = ($1 << 24) >> 24 != 0;
    $2 = HEAP8[$args3 >> 0] | 0;
    $tobool9 = ($2 << 24) >> 24 != 0;
    __ZN12_GLOBAL__N_116itanium_demangle10DeleteExprC2EPNS0_4NodeEbb(
      $call,
      $0,
      $tobool,
      $tobool9
    );
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle10DeleteExprC2EPNS0_4NodeEbb(
    $this,
    $Op_,
    $IsGlobal_,
    $IsArray_
  ) {
    $this = $this | 0;
    $Op_ = $Op_ | 0;
    $IsGlobal_ = $IsGlobal_ | 0;
    $IsArray_ = $IsArray_ | 0;
    var $IsArray = 0,
      $IsGlobal = 0,
      $Op = 0,
      $frombool = 0,
      $frombool1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $frombool = $IsGlobal_ & 1;
    $frombool1 = $IsArray_ & 1;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      52,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 4824;
    $Op = ($this + 8) | 0;
    HEAP32[$Op >> 2] = $Op_;
    $IsGlobal = ($this + 12) | 0;
    HEAP8[$IsGlobal >> 0] = $frombool;
    $IsArray = ($this + 13) | 0;
    HEAP8[$IsArray >> 0] = $frombool1;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle10DeleteExpr9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $IsArray = 0,
      $IsGlobal = 0,
      $Op = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp2 = 0,
      $agg$tmp2$byval_copy = 0,
      $agg$tmp6 = 0,
      $agg$tmp6$byval_copy = 0,
      $tobool = 0,
      $tobool4 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 48) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
    $agg$tmp6$byval_copy = (sp + 40) | 0;
    $agg$tmp2$byval_copy = (sp + 32) | 0;
    $agg$tmp$byval_copy = (sp + 24) | 0;
    $agg$tmp = (sp + 16) | 0;
    $agg$tmp2 = (sp + 8) | 0;
    $agg$tmp6 = sp;
    $IsGlobal = ($this + 12) | 0;
    $0 = HEAP8[$IsGlobal >> 0] | 0;
    $tobool = ($0 << 24) >> 24 == 0;
    if (!$tobool) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 12865);
      HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
      HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp$byval_copy
      );
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 13661);
    HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($agg$tmp2$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp2$byval_copy
    );
    $IsArray = ($this + 13) | 0;
    $1 = HEAP8[$IsArray >> 0] | 0;
    $tobool4 = ($1 << 24) >> 24 == 0;
    if (!$tobool4) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 13668);
      HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2] | 0;
      HEAP32[($agg$tmp6$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp6 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp6$byval_copy
      );
    }
    $Op = ($this + 8) | 0;
    $2 = HEAP32[$Op >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $2,
      $S
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle10DeleteExprD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14ConversionExprEJRPNS0_4NodeERNS0_9NodeArrayEEEES9_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14ConversionExprEJRPNS2_4NodeERNS2_9NodeArrayEEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14ConversionExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14ConversionExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14ConversionExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = $args1;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $agg$tmp;
    $8 = $7;
    HEAP32[$8 >> 2] = $3;
    $9 = ($7 + 4) | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $6;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle14ConversionExprC2EPKNS0_4NodeENS0_9NodeArrayE(
      $call,
      $0,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14ConversionExprC2EPKNS0_4NodeENS0_9NodeArrayE(
    $this,
    $Type_,
    $Expressions_
  ) {
    $this = $this | 0;
    $Type_ = $Type_ | 0;
    $Expressions_ = $Expressions_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Expressions = 0,
      $Type = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      55,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 4868;
    $Type = ($this + 8) | 0;
    HEAP32[$Type >> 2] = $Type_;
    $Expressions = ($this + 12) | 0;
    $0 = $Expressions_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Expressions;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle14ConversionExpr9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $Expressions = 0,
      $Type = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp2 = 0,
      $agg$tmp2$byval_copy = 0,
      $agg$tmp4 = 0,
      $agg$tmp4$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 48) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
    $agg$tmp4$byval_copy = (sp + 40) | 0;
    $agg$tmp2$byval_copy = (sp + 32) | 0;
    $agg$tmp$byval_copy = (sp + 24) | 0;
    $agg$tmp = (sp + 16) | 0;
    $agg$tmp2 = (sp + 8) | 0;
    $agg$tmp4 = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11119);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Type = ($this + 8) | 0;
    $0 = HEAP32[$Type >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 13722);
    HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($agg$tmp2$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp2$byval_copy
    );
    $Expressions = ($this + 12) | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE(
      $Expressions,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 11115);
    HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2] | 0;
    HEAP32[($agg$tmp4$byval_copy + 4) >> 2] = HEAP32[($agg$tmp4 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp4$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14ConversionExprD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14ConversionExprEJRPNS2_4NodeERNS2_9NodeArrayEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = $args1;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $agg$tmp;
    $8 = $7;
    HEAP32[$8 >> 2] = $3;
    $9 = ($7 + 4) | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $6;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle14ConversionExprC2EPKNS0_4NodeENS0_9NodeArrayE(
      $call,
      $0,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CallExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = $args1;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $agg$tmp;
    $8 = $7;
    HEAP32[$8 >> 2] = $3;
    $9 = ($7 + 4) | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $6;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8CallExprC2EPKNS0_4NodeENS0_9NodeArrayE(
      $call,
      $0,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle8CallExprC2EPKNS0_4NodeENS0_9NodeArrayE(
    $this,
    $Callee_,
    $Args_
  ) {
    $this = $this | 0;
    $Callee_ = $Callee_ | 0;
    $Args_ = $Args_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Args = 0,
      $Callee = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      50,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 4912;
    $Callee = ($this + 8) | 0;
    HEAP32[$Callee >> 2] = $Callee_;
    $Args = ($this + 12) | 0;
    $0 = $Args_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Args;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle8CallExpr9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $Args = 0,
      $Callee = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp2 = 0,
      $agg$tmp2$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $agg$tmp2$byval_copy = (sp + 24) | 0;
    $agg$tmp$byval_copy = (sp + 16) | 0;
    $agg$tmp = (sp + 8) | 0;
    $agg$tmp2 = sp;
    $Callee = ($this + 8) | 0;
    $0 = HEAP32[$Callee >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11119);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Args = ($this + 12) | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE(
      $Args,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 11115);
    HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($agg$tmp2$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp2$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle8CallExprD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA11_KcRPNS2_4NodeES9_EEEPT_DpOT0_(
    $this,
    $args,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $0 = 0,
      $1 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    $0 = HEAP32[$args1 >> 2] | 0;
    $1 = HEAP32[$args3 >> 2] | 0;
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_(
      $call,
      $agg$tmp$byval_copy,
      $0,
      $1
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA10_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_(
    $this,
    $args,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $0 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp8 = 0,
      $agg$tmp8$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $agg$tmp8$byval_copy = (sp + 24) | 0;
    $agg$tmp$byval_copy = (sp + 16) | 0;
    $agg$tmp = (sp + 8) | 0;
    $agg$tmp8 = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 28) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    $0 = HEAP32[$args1 >> 2] | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8, $args3);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2] | 0;
    HEAP32[($agg$tmp8$byval_copy + 4) >> 2] = HEAP32[($agg$tmp8 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_(
      $call,
      $agg$tmp$byval_copy,
      $0,
      $agg$tmp8$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10PrefixExprEJRNS_10StringViewERPNS0_4NodeEEEESB_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10PrefixExprEJRNS_10StringViewERPNS2_4NodeEEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10PrefixExprEJRNS_10StringViewERPNS2_4NodeEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = $args;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    $10 = HEAP32[$args1 >> 2] | 0;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle10PrefixExprC2ENS_10StringViewEPNS0_4NodeE(
      $call,
      $tmpcast$byval_copy,
      $10
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle10PrefixExprC2ENS_10StringViewEPNS0_4NodeE(
    $this,
    $Prefix_,
    $Child_
  ) {
    $this = $this | 0;
    $Prefix_ = $Prefix_ | 0;
    $Child_ = $Child_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Child = 0,
      $Prefix = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      53,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 4956;
    $Prefix = ($this + 8) | 0;
    $0 = $Prefix_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Prefix;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    $Child = ($this + 16) | 0;
    HEAP32[$Child >> 2] = $Child_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle10PrefixExpr9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Child = 0,
      $Prefix = 0,
      $agg$tmp = 0,
      $agg$tmp2 = 0,
      $agg$tmp2$byval_copy = 0,
      $agg$tmp4 = 0,
      $agg$tmp4$byval_copy = 0,
      $tmpcast$byval_copy = 0,
      label = 0;
    var sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 48) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
    $agg$tmp4$byval_copy = (sp + 40) | 0;
    $agg$tmp2$byval_copy = (sp + 32) | 0;
    $tmpcast$byval_copy = (sp + 24) | 0;
    $agg$tmp = sp;
    $agg$tmp2 = (sp + 16) | 0;
    $agg$tmp4 = (sp + 8) | 0;
    $Prefix = ($this + 8) | 0;
    $0 = $Prefix;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $tmpcast$byval_copy
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 11119);
    HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($agg$tmp2$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp2$byval_copy
    );
    $Child = ($this + 16) | 0;
    $10 = HEAP32[$Child >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $10,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 11115);
    HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2] | 0;
    HEAP32[($agg$tmp4$byval_copy + 4) >> 2] = HEAP32[($agg$tmp4 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp4$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle10PrefixExprD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BinaryExprEJRPNS0_4NodeERNS_10StringViewESA_EEES9_DpOT0_(
    $this,
    $args,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $ASTAllocator = 0,
      $call8 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call8 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10BinaryExprEJRPNS2_4NodeERNS_10StringViewES6_EEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1,
        $args3
      ) | 0;
    return $call8 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10BinaryExprEJRPNS2_4NodeERNS_10StringViewES6_EEEPT_DpOT0_(
    $this,
    $args,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = $args1;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $agg$tmp;
    $8 = $7;
    HEAP32[$8 >> 2] = $3;
    $9 = ($7 + 4) | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $6;
    $11 = HEAP32[$args3 >> 2] | 0;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle10BinaryExprC2EPKNS0_4NodeENS_10StringViewES4_(
      $call,
      $0,
      $tmpcast$byval_copy,
      $11
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle10BinaryExprC2EPKNS0_4NodeENS_10StringViewES4_(
    $this,
    $LHS_,
    $InfixOperator_,
    $RHS_
  ) {
    $this = $this | 0;
    $LHS_ = $LHS_ | 0;
    $InfixOperator_ = $InfixOperator_ | 0;
    $RHS_ = $RHS_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $InfixOperator = 0,
      $LHS = 0,
      $RHS = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      42,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 5000;
    $LHS = ($this + 8) | 0;
    HEAP32[$LHS >> 2] = $LHS_;
    $InfixOperator = ($this + 12) | 0;
    $0 = $InfixOperator_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $InfixOperator;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    $RHS = ($this + 20) | 0;
    HEAP32[$RHS >> 2] = $RHS_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle10BinaryExpr9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $InfixOperator = 0,
      $LHS = 0,
      $RHS = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp10 = 0,
      $agg$tmp10$byval_copy = 0,
      $agg$tmp12 = 0;
    var $agg$tmp12$byval_copy = 0,
      $agg$tmp18 = 0,
      $agg$tmp18$byval_copy = 0,
      $agg$tmp3 = 0,
      $agg$tmp3$byval_copy = 0,
      $agg$tmp5 = 0,
      $agg$tmp5$byval_copy = 0,
      $agg$tmp7 = 0,
      $call = 0,
      $call16 = 0,
      $ref$tmp = 0,
      $ref$tmp15 = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 128) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
    $agg$tmp18$byval_copy = (sp + 120) | 0;
    $agg$tmp12$byval_copy = (sp + 112) | 0;
    $agg$tmp10$byval_copy = (sp + 104) | 0;
    $tmpcast$byval_copy = (sp + 96) | 0;
    $agg$tmp5$byval_copy = (sp + 88) | 0;
    $agg$tmp3$byval_copy = (sp + 80) | 0;
    $agg$tmp$byval_copy = (sp + 72) | 0;
    $ref$tmp = (sp + 64) | 0;
    $agg$tmp = (sp + 56) | 0;
    $agg$tmp3 = (sp + 48) | 0;
    $agg$tmp5 = (sp + 40) | 0;
    $agg$tmp7 = sp;
    $agg$tmp10 = (sp + 32) | 0;
    $agg$tmp12 = (sp + 24) | 0;
    $ref$tmp15 = (sp + 16) | 0;
    $agg$tmp18 = (sp + 8) | 0;
    $InfixOperator = ($this + 12) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp, 11194);
    $call =
      __ZN12_GLOBAL__N_1eqERKNS_10StringViewES2_($InfixOperator, $ref$tmp) | 0;
    if ($call) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11119);
      HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
      HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp$byval_copy
      );
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3, 11119);
    HEAP32[$agg$tmp3$byval_copy >> 2] = HEAP32[$agg$tmp3 >> 2] | 0;
    HEAP32[($agg$tmp3$byval_copy + 4) >> 2] = HEAP32[($agg$tmp3 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp3$byval_copy
    );
    $LHS = ($this + 8) | 0;
    $0 = HEAP32[$LHS >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp5, 13878);
    HEAP32[$agg$tmp5$byval_copy >> 2] = HEAP32[$agg$tmp5 >> 2] | 0;
    HEAP32[($agg$tmp5$byval_copy + 4) >> 2] = HEAP32[($agg$tmp5 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp5$byval_copy
    );
    $1 = $InfixOperator;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $agg$tmp7;
    $8 = $7;
    HEAP32[$8 >> 2] = $3;
    $9 = ($7 + 4) | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $6;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp7 >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp7 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $tmpcast$byval_copy
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp10, 13881);
    HEAP32[$agg$tmp10$byval_copy >> 2] = HEAP32[$agg$tmp10 >> 2] | 0;
    HEAP32[($agg$tmp10$byval_copy + 4) >> 2] =
      HEAP32[($agg$tmp10 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp10$byval_copy
    );
    $RHS = ($this + 20) | 0;
    $11 = HEAP32[$RHS >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $11,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12, 11115);
    HEAP32[$agg$tmp12$byval_copy >> 2] = HEAP32[$agg$tmp12 >> 2] | 0;
    HEAP32[($agg$tmp12$byval_copy + 4) >> 2] =
      HEAP32[($agg$tmp12 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp12$byval_copy
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp15, 11194);
    $call16 =
      __ZN12_GLOBAL__N_1eqERKNS_10StringViewES2_($InfixOperator, $ref$tmp15) |
      0;
    if ($call16) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp18, 11115);
      HEAP32[$agg$tmp18$byval_copy >> 2] = HEAP32[$agg$tmp18 >> 2] | 0;
      HEAP32[($agg$tmp18$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp18 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp18$byval_copy
      );
    }
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle10BinaryExprD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8FoldExprEJRbRNS_10StringViewERPNS0_4NodeESD_EEESC_DpOT0_(
    $this,
    $args,
    $args1,
    $args3,
    $args5
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    $args5 = $args5 | 0;
    var $ASTAllocator = 0,
      $call11 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call11 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8FoldExprEJRbRNS_10StringViewERPNS2_4NodeES9_EEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1,
        $args3,
        $args5
      ) | 0;
    return $call11 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8FoldExprEJRbRNS_10StringViewERPNS2_4NodeES9_EEEPT_DpOT0_(
    $this,
    $args,
    $args1,
    $args3,
    $args5
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    $args5 = $args5 | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 28) | 0;
    $0 = HEAP8[$args >> 0] | 0;
    $tobool = ($0 << 24) >> 24 != 0;
    $1 = $args1;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $agg$tmp;
    $8 = $7;
    HEAP32[$8 >> 2] = $3;
    $9 = ($7 + 4) | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $6;
    $11 = HEAP32[$args3 >> 2] | 0;
    $12 = HEAP32[$args5 >> 2] | 0;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8FoldExprC2EbNS_10StringViewEPKNS0_4NodeES5_(
      $call,
      $tobool,
      $tmpcast$byval_copy,
      $11,
      $12
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle8FoldExprC2EbNS_10StringViewEPKNS0_4NodeES5_(
    $this,
    $IsLeftFold_,
    $OperatorName_,
    $Pack_,
    $Init_
  ) {
    $this = $this | 0;
    $IsLeftFold_ = $IsLeftFold_ | 0;
    $OperatorName_ = $OperatorName_ | 0;
    $Pack_ = $Pack_ | 0;
    $Init_ = $Init_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Init = 0,
      $IsLeftFold = 0,
      $OperatorName = 0,
      $Pack = 0,
      $frombool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $frombool = $IsLeftFold_ & 1;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      57,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 5044;
    $Pack = ($this + 8) | 0;
    HEAP32[$Pack >> 2] = $Pack_;
    $Init = ($this + 12) | 0;
    HEAP32[$Init >> 2] = $Init_;
    $OperatorName = ($this + 16) | 0;
    $0 = $OperatorName_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $OperatorName;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    $IsLeftFold = ($this + 24) | 0;
    HEAP8[$IsLeftFold >> 0] = $frombool;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $$pre = 0,
      $$pre$phiZ2D = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0,
      $23 = 0,
      $24 = 0;
    var $25 = 0,
      $26 = 0,
      $27 = 0,
      $28 = 0,
      $29 = 0,
      $3 = 0,
      $30 = 0,
      $31 = 0,
      $32 = 0,
      $33 = 0,
      $34 = 0,
      $35 = 0,
      $36 = 0,
      $37 = 0,
      $38 = 0,
      $39 = 0,
      $4 = 0,
      $40 = 0,
      $41 = 0,
      $42 = 0;
    var $43 = 0,
      $44 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Init = 0,
      $Init19 = 0,
      $IsLeftFold = 0,
      $OperatorName = 0,
      $OperatorName15 = 0,
      $PrintPack = 0,
      $agg$tmp = 0,
      $agg$tmp14 = 0,
      $agg$tmp17 = 0,
      $agg$tmp17$byval_copy = 0,
      $agg$tmp23 = 0,
      $agg$tmp7 = 0,
      $agg$tmp7$byval_copy = 0;
    var $agg$tmp9 = 0,
      $cmp = 0,
      $cmp20 = 0,
      $tmpcast$byval_copy = 0,
      $tmpcast17$byval_copy = 0,
      $tmpcast18$byval_copy = 0,
      $tmpcast19$byval_copy = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 112) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112 | 0);
    $tmpcast17$byval_copy = (sp + 96) | 0;
    $agg$tmp17$byval_copy = (sp + 88) | 0;
    $tmpcast$byval_copy = (sp + 80) | 0;
    $tmpcast18$byval_copy = (sp + 72) | 0;
    $agg$tmp7$byval_copy = (sp + 64) | 0;
    $tmpcast19$byval_copy = (sp + 56) | 0;
    $PrintPack = (sp + 48) | 0;
    $agg$tmp = (sp + 24) | 0;
    $agg$tmp7 = (sp + 40) | 0;
    $agg$tmp9 = (sp + 16) | 0;
    $agg$tmp14 = (sp + 8) | 0;
    $agg$tmp17 = (sp + 32) | 0;
    $agg$tmp23 = sp;
    HEAP32[$PrintPack >> 2] = $S;
    $0 = ($PrintPack + 4) | 0;
    HEAP32[$0 >> 2] = $this;
    __ZN12_GLOBAL__N_112OutputStreampLEc($S, 40);
    $IsLeftFold = ($this + 24) | 0;
    $1 = HEAP8[$IsLeftFold >> 0] | 0;
    $tobool = ($1 << 24) >> 24 == 0;
    if ($tobool) {
      __ZZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamEENKUlvE_clEv(
        $PrintPack
      );
      __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
      $OperatorName15 = ($this + 16) | 0;
      $23 = $OperatorName15;
      $24 = $23;
      $25 = HEAP32[$24 >> 2] | 0;
      $26 = ($23 + 4) | 0;
      $27 = $26;
      $28 = HEAP32[$27 >> 2] | 0;
      $29 = $agg$tmp14;
      $30 = $29;
      HEAP32[$30 >> 2] = $25;
      $31 = ($29 + 4) | 0;
      $32 = $31;
      HEAP32[$32 >> 2] = $28;
      HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp14 >> 2] | 0;
      HEAP32[($tmpcast$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp14 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $tmpcast$byval_copy
      );
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp17, 14029);
      HEAP32[$agg$tmp17$byval_copy >> 2] = HEAP32[$agg$tmp17 >> 2] | 0;
      HEAP32[($agg$tmp17$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp17 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp17$byval_copy
      );
      $Init19 = ($this + 12) | 0;
      $33 = HEAP32[$Init19 >> 2] | 0;
      $cmp20 = ($33 | 0) == (0 | 0);
      if (!$cmp20) {
        __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
        $34 = $OperatorName15;
        $35 = $34;
        $36 = HEAP32[$35 >> 2] | 0;
        $37 = ($34 + 4) | 0;
        $38 = $37;
        $39 = HEAP32[$38 >> 2] | 0;
        $40 = $agg$tmp23;
        $41 = $40;
        HEAP32[$41 >> 2] = $36;
        $42 = ($40 + 4) | 0;
        $43 = $42;
        HEAP32[$43 >> 2] = $39;
        HEAP32[$tmpcast17$byval_copy >> 2] = HEAP32[$agg$tmp23 >> 2] | 0;
        HEAP32[($tmpcast17$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp23 + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $S,
          $tmpcast17$byval_copy
        );
        __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
        $44 = HEAP32[$Init19 >> 2] | 0;
        __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
          $44,
          $S
        );
      }
    } else {
      $Init = ($this + 12) | 0;
      $2 = HEAP32[$Init >> 2] | 0;
      $cmp = ($2 | 0) == (0 | 0);
      if ($cmp) {
        $$pre = ($this + 16) | 0;
        $$pre$phiZ2D = $$pre;
      } else {
        __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
          $2,
          $S
        );
        __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
        $OperatorName = ($this + 16) | 0;
        $3 = $OperatorName;
        $4 = $3;
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ($3 + 4) | 0;
        $7 = $6;
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = $agg$tmp;
        $10 = $9;
        HEAP32[$10 >> 2] = $5;
        $11 = ($9 + 4) | 0;
        $12 = $11;
        HEAP32[$12 >> 2] = $8;
        HEAP32[$tmpcast19$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
        HEAP32[($tmpcast19$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $S,
          $tmpcast19$byval_copy
        );
        __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
        $$pre$phiZ2D = $OperatorName;
      }
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp7, 14024);
      HEAP32[$agg$tmp7$byval_copy >> 2] = HEAP32[$agg$tmp7 >> 2] | 0;
      HEAP32[($agg$tmp7$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp7 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp7$byval_copy
      );
      $13 = $$pre$phiZ2D;
      $14 = $13;
      $15 = HEAP32[$14 >> 2] | 0;
      $16 = ($13 + 4) | 0;
      $17 = $16;
      $18 = HEAP32[$17 >> 2] | 0;
      $19 = $agg$tmp9;
      $20 = $19;
      HEAP32[$20 >> 2] = $15;
      $21 = ($19 + 4) | 0;
      $22 = $21;
      HEAP32[$22 >> 2] = $18;
      HEAP32[$tmpcast18$byval_copy >> 2] = HEAP32[$agg$tmp9 >> 2] | 0;
      HEAP32[($tmpcast18$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp9 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $tmpcast18$byval_copy
      );
      __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
      __ZZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamEENKUlvE_clEv(
        $PrintPack
      );
    }
    __ZN12_GLOBAL__N_112OutputStreampLEc($S, 41);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle8FoldExprD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamEENKUlvE_clEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $Pack = 0,
      $ref$tmp = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $ref$tmp = sp;
    $0 = ($this + 4) | 0;
    $1 = HEAP32[$0 >> 2] | 0;
    $2 = HEAP32[$this >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLEc($2, 40);
    $Pack = ($1 + 8) | 0;
    $3 = HEAP32[$Pack >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionC2EPKNS0_4NodeE(
      $ref$tmp,
      $3
    );
    $4 = HEAP32[$this >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $ref$tmp,
      $4
    );
    $5 = HEAP32[$this >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLEc($5, 41);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $CVR = 0,
      $call = 0,
      $call3 = 0,
      $call7 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $CVR = sp;
    HEAP32[$CVR >> 2] = 0;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
        $this,
        114
      ) | 0;
    if ($call) {
      __ZN12_GLOBAL__N_116itanium_demangleoRERNS0_10QualifiersES1_($CVR, 4);
    }
    $call3 =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
        $this,
        86
      ) | 0;
    if ($call3) {
      __ZN12_GLOBAL__N_116itanium_demangleoRERNS0_10QualifiersES1_($CVR, 2);
    }
    $call7 =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
        $this,
        75
      ) | 0;
    if ($call7) {
      __ZN12_GLOBAL__N_116itanium_demangleoRERNS0_10QualifiersES1_($CVR, 1);
    }
    $0 = HEAP32[$CVR >> 2] | 0;
    STACKTOP = sp;
    return $0 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13FunctionParamEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13FunctionParamEJRNS_10StringViewEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13FunctionParamEJRNS_10StringViewEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    $0 = $args;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle13FunctionParamC2ENS_10StringViewE(
      $call,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle13FunctionParamC2ENS_10StringViewE(
    $this,
    $Number_
  ) {
    $this = $this | 0;
    $Number_ = $Number_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Number = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      54,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 5088;
    $Number = ($this + 8) | 0;
    $0 = $Number_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Number;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle13FunctionParam9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Number = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp2 = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $tmpcast$byval_copy = (sp + 24) | 0;
    $agg$tmp$byval_copy = (sp + 16) | 0;
    $agg$tmp = (sp + 8) | 0;
    $agg$tmp2 = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 14078);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Number = ($this + 8) | 0;
    $0 = $Number;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp2;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle13FunctionParamD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangleoRERNS0_10QualifiersES1_(
    $Q1,
    $Q2
  ) {
    $Q1 = $Q1 | 0;
    $Q2 = $Q2 | 0;
    var $0 = 0,
      $or = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$Q1 >> 2] | 0;
    $or = $0 | $Q2;
    HEAP32[$Q1 >> 2] = $or;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2Ev(
    $this
  ) {
    $this = $this | 0;
    var $Cap = 0,
      $Last = 0,
      $add$ptr = 0,
      $arraydecay = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $arraydecay = ($this + 12) | 0;
    HEAP32[$this >> 2] = $arraydecay;
    $Last = ($this + 4) | 0;
    HEAP32[$Last >> 2] = $arraydecay;
    $Cap = ($this + 8) | 0;
    $add$ptr = ($this + 44) | 0;
    HEAP32[$Cap >> 2] = $add$ptr;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_24ForwardTemplateReferenceEJRmEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle24ForwardTemplateReferenceEJRmEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE9push_backERKS3_(
    $this,
    $Elem
  ) {
    $this = $this | 0;
    $Elem = $Elem | 0;
    var $$pre = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $Cap = 0,
      $Last = 0,
      $call = 0,
      $cmp = 0,
      $incdec$ptr = 0,
      $mul = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Last = ($this + 4) | 0;
    $0 = HEAP32[$Last >> 2] | 0;
    $Cap = ($this + 8) | 0;
    $1 = HEAP32[$Cap >> 2] | 0;
    $cmp = ($0 | 0) == ($1 | 0);
    if ($cmp) {
      $call =
        __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv(
          $this
        ) | 0;
      $mul = $call << 1;
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE7reserveEm(
        $this,
        $mul
      );
      $$pre = HEAP32[$Last >> 2] | 0;
      $3 = $$pre;
    } else {
      $3 = $0;
    }
    $2 = HEAP32[$Elem >> 2] | 0;
    $incdec$ptr = ($3 + 4) | 0;
    HEAP32[$Last >> 2] = $incdec$ptr;
    HEAP32[$3 >> 2] = $2;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEixEm(
    $this,
    $Index
  ) {
    $this = $this | 0;
    $Index = $Index | 0;
    var $add$ptr = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5beginEv(
        $this
      ) | 0;
    $add$ptr = ($call + ($Index << 2)) | 0;
    return $add$ptr | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $Last = 0,
      $sub$ptr$div = 0,
      $sub$ptr$sub = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Last = ($this + 4) | 0;
    $0 = HEAP32[$Last >> 2] | 0;
    $1 = HEAP32[$this >> 2] | 0;
    $sub$ptr$sub = ($0 - $1) | 0;
    $sub$ptr$div = $sub$ptr$sub >> 2;
    return $sub$ptr$div | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE7reserveEm(
    $this,
    $NewCap
  ) {
    $this = $this | 0;
    $NewCap = $NewCap | 0;
    var $$in = 0,
      $$pre7 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $Cap = 0,
      $Last = 0,
      $Last17$pre$phiZ2D = 0,
      $add$ptr = 0,
      $add$ptr19 = 0,
      $call = 0,
      $call2 = 0,
      $call3 = 0,
      $call9 = 0,
      $cmp = 0,
      $cmp$i$i = 0,
      $cmp12 = 0,
      $mul = 0,
      $mul8 = 0,
      $sub$ptr$rhs$cast$i$i = 0;
    var $sub$ptr$sub$i$i = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv(
        $this
      ) | 0;
    $call2 =
      __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8isInlineEv(
        $this
      ) | 0;
    do {
      if ($call2) {
        $mul = $NewCap << 2;
        $call3 = _malloc($mul) | 0;
        $cmp = ($call3 | 0) == (0 | 0);
        if ($cmp) {
          __ZSt9terminatev();
          // unreachable;
        }
        $0 = HEAP32[$this >> 2] | 0;
        $Last = ($this + 4) | 0;
        $1 = HEAP32[$Last >> 2] | 0;
        $sub$ptr$rhs$cast$i$i = $0;
        $sub$ptr$sub$i$i = ($1 - $sub$ptr$rhs$cast$i$i) | 0;
        $cmp$i$i = ($sub$ptr$sub$i$i | 0) == 0;
        if (!$cmp$i$i) {
          _memmove($call3 | 0, $0 | 0, $sub$ptr$sub$i$i | 0) | 0;
        }
        HEAP32[$this >> 2] = $call3;
        $$in = $call3;
        $Last17$pre$phiZ2D = $Last;
      } else {
        $2 = HEAP32[$this >> 2] | 0;
        $mul8 = $NewCap << 2;
        $call9 = _realloc($2, $mul8) | 0;
        HEAP32[$this >> 2] = $call9;
        $cmp12 = ($call9 | 0) == (0 | 0);
        if ($cmp12) {
          __ZSt9terminatev();
          // unreachable;
        } else {
          $$pre7 = ($this + 4) | 0;
          $$in = $call9;
          $Last17$pre$phiZ2D = $$pre7;
          break;
        }
      }
    } while (0);
    $add$ptr = ($$in + ($call << 2)) | 0;
    HEAP32[$Last17$pre$phiZ2D >> 2] = $add$ptr;
    $add$ptr19 = ($$in + ($NewCap << 2)) | 0;
    $Cap = ($this + 8) | 0;
    HEAP32[$Cap >> 2] = $add$ptr19;
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle24ForwardTemplateReferenceEJRmEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle24ForwardTemplateReferenceC2Em(
      $call,
      $0
    );
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle24ForwardTemplateReferenceC2Em(
    $this,
    $Index_
  ) {
    $this = $this | 0;
    $Index_ = $Index_ | 0;
    var $Index = 0,
      $Printing = 0,
      $Ref = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      31,
      2,
      2,
      2
    );
    HEAP32[$this >> 2] = 5132;
    $Index = ($this + 8) | 0;
    HEAP32[$Index >> 2] = $Index_;
    $Ref = ($this + 12) | 0;
    HEAP32[$Ref >> 2] = 0;
    $Printing = ($this + 16) | 0;
    HEAP8[$Printing >> 0] = 0;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference19hasRHSComponentSlowERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $Printing = 0,
      $Ref = 0,
      $SavePrinting = 0,
      $call = 0,
      $retval$0 = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $SavePrinting = sp;
    $Printing = ($this + 16) | 0;
    $0 = HEAP8[$Printing >> 0] | 0;
    $tobool = ($0 << 24) >> 24 == 0;
    if ($tobool) {
      __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting, $Printing, 1);
      $Ref = ($this + 12) | 0;
      $1 = HEAP32[$Ref >> 2] | 0;
      $call =
        __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE(
          $1,
          $S
        ) | 0;
      __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
      $retval$0 = $call;
    } else {
      $retval$0 = 0;
    }
    STACKTOP = sp;
    return $retval$0 | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference12hasArraySlowERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $Printing = 0,
      $Ref = 0,
      $SavePrinting = 0,
      $call = 0,
      $retval$0 = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $SavePrinting = sp;
    $Printing = ($this + 16) | 0;
    $0 = HEAP8[$Printing >> 0] | 0;
    $tobool = ($0 << 24) >> 24 == 0;
    if ($tobool) {
      __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting, $Printing, 1);
      $Ref = ($this + 12) | 0;
      $1 = HEAP32[$Ref >> 2] | 0;
      $call =
        __ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(
          $1,
          $S
        ) | 0;
      __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
      $retval$0 = $call;
    } else {
      $retval$0 = 0;
    }
    STACKTOP = sp;
    return $retval$0 | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference15hasFunctionSlowERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $Printing = 0,
      $Ref = 0,
      $SavePrinting = 0,
      $call = 0,
      $retval$0 = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $SavePrinting = sp;
    $Printing = ($this + 16) | 0;
    $0 = HEAP8[$Printing >> 0] | 0;
    $tobool = ($0 << 24) >> 24 == 0;
    if ($tobool) {
      __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting, $Printing, 1);
      $Ref = ($this + 12) | 0;
      $1 = HEAP32[$Ref >> 2] | 0;
      $call =
        __ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE(
          $1,
          $S
        ) | 0;
      __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
      $retval$0 = $call;
    } else {
      $retval$0 = 0;
    }
    STACKTOP = sp;
    return $retval$0 | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference13getSyntaxNodeERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $Printing = 0,
      $Ref = 0,
      $SavePrinting = 0,
      $call = 0,
      $retval$0 = 0,
      $tobool = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $SavePrinting = sp;
    $Printing = ($this + 16) | 0;
    $0 = HEAP8[$Printing >> 0] | 0;
    $tobool = ($0 << 24) >> 24 == 0;
    if ($tobool) {
      __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting, $Printing, 1);
      $Ref = ($this + 12) | 0;
      $1 = HEAP32[$Ref >> 2] | 0;
      $vtable = HEAP32[$1 >> 2] | 0;
      $vfn = ($vtable + 12) | 0;
      $2 = HEAP32[$vfn >> 2] | 0;
      $call = FUNCTION_TABLE_iii[$2 & 511]($1, $S) | 0;
      __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
      $retval$0 = $call;
    } else {
      $retval$0 = $this;
    }
    STACKTOP = sp;
    return $retval$0 | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $Printing = 0,
      $Ref = 0,
      $SavePrinting = 0,
      $tobool = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $SavePrinting = sp;
    $Printing = ($this + 16) | 0;
    $0 = HEAP8[$Printing >> 0] | 0;
    $tobool = ($0 << 24) >> 24 == 0;
    if ($tobool) {
      __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting, $Printing, 1);
      $Ref = ($this + 12) | 0;
      $1 = HEAP32[$Ref >> 2] | 0;
      $vtable = HEAP32[$1 >> 2] | 0;
      $vfn = ($vtable + 16) | 0;
      $2 = HEAP32[$vfn >> 2] | 0;
      FUNCTION_TABLE_vii[$2 & 511]($1, $S);
      __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
    }
    STACKTOP = sp;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference10printRightERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $Printing = 0,
      $Ref = 0,
      $SavePrinting = 0,
      $tobool = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $SavePrinting = sp;
    $Printing = ($this + 16) | 0;
    $0 = HEAP8[$Printing >> 0] | 0;
    $tobool = ($0 << 24) >> 24 == 0;
    if ($tobool) {
      __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting, $Printing, 1);
      $Ref = ($this + 12) | 0;
      $1 = HEAP32[$Ref >> 2] | 0;
      $vtable = HEAP32[$1 >> 2] | 0;
      $vfn = ($vtable + 20) | 0;
      $2 = HEAP32[$vfn >> 2] | 0;
      FUNCTION_TABLE_vii[$2 & 511]($1, $S);
      __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
    }
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle24ForwardTemplateReferenceD0Ev(
    $this
  ) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE(
    $this,
    $State
  ) {
    $this = $this | 0;
    $State = $State | 0;
    var $EndsWithTemplateArgs = 0,
      $EndsWithTemplateArgs58 = 0,
      $N = 0,
      $S = 0,
      $Subs = 0,
      $TA = 0,
      $TA49 = 0,
      $call10 = 0,
      $call15 = 0,
      $call19 = 0,
      $call2 = 0,
      $call20 = 0,
      $call24 = 0,
      $call3 = 0,
      $call31 = 0,
      $call37 = 0,
      $call4 = 0,
      $call40 = 0,
      $call41 = 0,
      $call45 = 0;
    var $call52 = 0,
      $call60 = 0,
      $call9 = 0,
      $cmp17 = 0,
      $cmp21 = 0,
      $cmp26 = 0,
      $cmp30 = 0,
      $cmp32 = 0,
      $cmp42 = 0,
      $cmp47 = 0,
      $cmp51 = 0,
      $cmp53 = 0,
      $retval$0 = 0,
      $retval$1 = 0,
      $retval$2 = 0,
      $retval$3 = 0,
      $retval$4 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $S = (sp + 12) | 0;
    $TA = (sp + 8) | 0;
    $N = (sp + 4) | 0;
    $TA49 = sp;
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
      $this,
      76
    ) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
        $this,
        0
      ) | 0;
    switch (($call2 << 24) >> 24) {
      case 78: {
        $call3 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
            $this
          ) | 0;
        $call4 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateE(
            $call3,
            $State
          ) | 0;
        $retval$4 = $call4;
        break;
      }
      case 90: {
        $call9 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
            $this
          ) | 0;
        $call10 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E14parseLocalNameEPNS5_9NameStateE(
            $call9,
            $State
          ) | 0;
        $retval$4 = $call10;
        break;
      }
      case 83: {
        $call15 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
            $this,
            1
          ) | 0;
        $cmp17 = ($call15 << 24) >> 24 == 116;
        if ($cmp17) {
          label = 13;
        } else {
          $call19 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call20 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv(
              $call19
            ) | 0;
          HEAP32[$S >> 2] = $call20;
          $cmp21 = ($call20 | 0) == (0 | 0);
          if ($cmp21) {
            $retval$1 = 0;
          } else {
            $call24 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
                $this,
                0
              ) | 0;
            $cmp26 = ($call24 << 24) >> 24 == 73;
            if ($cmp26) {
              $cmp30 = ($State | 0) != (0 | 0);
              $call31 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb(
                  $call19,
                  $cmp30
                ) | 0;
              HEAP32[$TA >> 2] = $call31;
              $cmp32 = ($call31 | 0) == (0 | 0);
              if ($cmp32) {
                $retval$0 = 0;
              } else {
                if ($cmp30) {
                  $EndsWithTemplateArgs = ($State + 1) | 0;
                  HEAP8[$EndsWithTemplateArgs >> 0] = 1;
                }
                $call37 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_(
                    $this,
                    $S,
                    $TA
                  ) | 0;
                $retval$0 = $call37;
              }
              $retval$1 = $retval$0;
            } else {
              $retval$1 = 0;
            }
          }
          $retval$4 = $retval$1;
        }
        break;
      }
      default: {
        label = 13;
      }
    }
    if ((label | 0) == 13) {
      $call40 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
          $this
        ) | 0;
      $call41 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseUnscopedNameEPNS5_9NameStateE(
          $call40,
          $State
        ) | 0;
      HEAP32[$N >> 2] = $call41;
      $cmp42 = ($call41 | 0) == (0 | 0);
      if ($cmp42) {
        $retval$3 = 0;
      } else {
        $call45 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
            $this,
            0
          ) | 0;
        $cmp47 = ($call45 << 24) >> 24 == 73;
        if ($cmp47) {
          $Subs = ($this + 148) | 0;
          __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
            $Subs,
            $N
          );
          $cmp51 = ($State | 0) != (0 | 0);
          $call52 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb(
              $call40,
              $cmp51
            ) | 0;
          HEAP32[$TA49 >> 2] = $call52;
          $cmp53 = ($call52 | 0) == (0 | 0);
          if ($cmp53) {
            $retval$2 = 0;
          } else {
            if ($cmp51) {
              $EndsWithTemplateArgs58 = ($State + 1) | 0;
              HEAP8[$EndsWithTemplateArgs58 >> 0] = 1;
            }
            $call60 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_(
                $this,
                $N,
                $TA49
              ) | 0;
            $retval$2 = $call60;
          }
          $retval$3 = $retval$2;
        } else {
          $retval$3 = $call41;
        }
      }
      $retval$4 = $retval$3;
    }
    STACKTOP = sp;
    return $retval$4 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ElaboratedTypeSpefTypeEJRNS_10StringViewERPNS0_4NodeEEEESB_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ElaboratedTypeSpefTypeEJRNS_10StringViewERPNS2_4NodeEEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ElaboratedTypeSpefTypeEJRNS_10StringViewERPNS2_4NodeEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = $args;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    $10 = HEAP32[$args1 >> 2] | 0;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefTypeC2ENS_10StringViewEPNS0_4NodeE(
      $call,
      $tmpcast$byval_copy,
      $10
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefTypeC2ENS_10StringViewEPNS0_4NodeE(
    $this,
    $Kind_,
    $Child_
  ) {
    $this = $this | 0;
    $Kind_ = $Kind_ | 0;
    $Child_ = $Child_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Child = 0,
      $Kind = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      6,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 5176;
    $Kind = ($this + 8) | 0;
    $0 = $Kind_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Kind;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    $Child = ($this + 16) | 0;
    HEAP32[$Child >> 2] = $Child_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefType9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Child = 0,
      $Kind = 0,
      $agg$tmp = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $Kind = ($this + 8) | 0;
    $0 = $Kind;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $tmpcast$byval_copy
    );
    __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
    $Child = ($this + 16) | 0;
    $10 = HEAP32[$Child >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $10,
      $S
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefTypeD0Ev(
    $this
  ) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateE(
    $this,
    $State
  ) {
    $this = $this | 0;
    $State = $State | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $CVQualifiers = 0,
      $EndsWithTemplateArgs = 0,
      $PushComponent = 0,
      $ReferenceQualifier = 0,
      $ReferenceQualifier14 = 0,
      $ReferenceQualifier19 = 0,
      $S = 0;
    var $SoFar = 0,
      $State$addr = 0,
      $Subs136 = 0,
      $TA = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      $call10 = 0,
      $call119 = 0,
      $call120 = 0,
      $call121 = 0,
      $call125 = 0,
      $call131 = 0,
      $call132 = 0,
      $call133 = 0,
      $call140 = 0,
      $call2 = 0,
      $call23 = 0,
      $call25 = 0,
      $call30 = 0;
    var $call32 = 0,
      $call37 = 0,
      $call40 = 0,
      $call41 = 0,
      $call42 = 0,
      $call5 = 0,
      $call50 = 0,
      $call52 = 0,
      $call57 = 0,
      $call69 = 0,
      $call77 = 0,
      $call78 = 0,
      $call79 = 0,
      $call88 = 0,
      $call92 = 0,
      $call93 = 0,
      $call94 = 0,
      $cmp = 0,
      $cmp116 = 0,
      $cmp126 = 0;
    var $cmp137 = 0,
      $cmp51 = 0,
      $cmp53 = 0,
      $cmp54 = 0,
      $cmp90 = 0,
      $cmp97 = 0,
      $or$cond = 0,
      $retval$3 = 0,
      $retval$4 = 0,
      $tobool = 0,
      $tobool12 = 0,
      $tobool61 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 48) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
    $agg$tmp$byval_copy = (sp + 40) | 0;
    $State$addr = (sp + 32) | 0;
    $SoFar = (sp + 28) | 0;
    $PushComponent = (sp + 16) | 0;
    $agg$tmp = (sp + 8) | 0;
    $TA = (sp + 4) | 0;
    $S = sp;
    HEAP32[$State$addr >> 2] = $State;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
        $this,
        78
      ) | 0;
    if ($call) {
      $call2 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv(
          $this
        ) | 0;
      $tobool = ($State | 0) == (0 | 0);
      if (!$tobool) {
        $CVQualifiers = ($State + 4) | 0;
        HEAP32[$CVQualifiers >> 2] = $call2;
      }
      $call5 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
          $this,
          79
        ) | 0;
      do {
        if ($call5) {
          if (!$tobool) {
            $ReferenceQualifier = ($State + 8) | 0;
            HEAP8[$ReferenceQualifier >> 0] = 2;
          }
        } else {
          $call10 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
              $this,
              82
            ) | 0;
          $tobool12 = ($State | 0) != (0 | 0);
          if ($call10) {
            if (!$tobool12) {
              break;
            }
            $ReferenceQualifier14 = ($State + 8) | 0;
            HEAP8[$ReferenceQualifier14 >> 0] = 1;
            break;
          } else {
            if (!$tobool12) {
              break;
            }
            $ReferenceQualifier19 = ($State + 8) | 0;
            HEAP8[$ReferenceQualifier19 >> 0] = 0;
            break;
          }
        }
      } while (0);
      HEAP32[$SoFar >> 2] = 0;
      HEAP32[$PushComponent >> 2] = $this;
      $0 = ($PushComponent + 4) | 0;
      HEAP32[$0 >> 2] = $SoFar;
      $1 = ($PushComponent + 8) | 0;
      HEAP32[$1 >> 2] = $State$addr;
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 14285);
      HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
      HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
      $call23 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
          $this,
          $agg$tmp$byval_copy
        ) | 0;
      if ($call23) {
        $call25 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA4_KcEEEPNS0_4NodeEDpOT0_(
            $this,
            14603
          ) | 0;
        HEAP32[$SoFar >> 2] = $call25;
      }
      $Subs136 = ($this + 148) | 0;
      L19: while (1) {
        $call30 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
            $this,
            69
          ) | 0;
        if ($call30) {
          label = 41;
          break;
        }
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
          $this,
          76
        ) | 0;
        $call32 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
            $this,
            77
          ) | 0;
        L22: do {
          if ($call32) {
            $2 = HEAP32[$SoFar >> 2] | 0;
            $cmp = ($2 | 0) == (0 | 0);
            if ($cmp) {
              $retval$3 = 0;
              break L19;
            }
          } else {
            $call37 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
                $this,
                0
              ) | 0;
            L25: do {
              switch (($call37 << 24) >> 24) {
                case 84: {
                  $call40 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call41 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv(
                      $call40
                    ) | 0;
                  $call42 =
                    __ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_(
                      $PushComponent,
                      $call41
                    ) | 0;
                  if (!$call42) {
                    $retval$3 = 0;
                    break L19;
                  }
                  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
                    $Subs136,
                    $SoFar
                  );
                  break L22;
                  break;
                }
                case 73: {
                  $call50 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $3 = HEAP32[$State$addr >> 2] | 0;
                  $cmp51 = ($3 | 0) != (0 | 0);
                  $call52 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb(
                      $call50,
                      $cmp51
                    ) | 0;
                  HEAP32[$TA >> 2] = $call52;
                  $cmp53 = ($call52 | 0) == (0 | 0);
                  $4 = HEAP32[$SoFar >> 2] | 0;
                  $cmp54 = ($4 | 0) == (0 | 0);
                  $or$cond = $cmp53 | $cmp54;
                  if ($or$cond) {
                    label = 26;
                    break L19;
                  }
                  $call57 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_(
                      $this,
                      $SoFar,
                      $TA
                    ) | 0;
                  HEAP32[$SoFar >> 2] = $call57;
                  $5 = HEAP32[$State$addr >> 2] | 0;
                  $tobool61 = ($5 | 0) == (0 | 0);
                  if (!$tobool61) {
                    $EndsWithTemplateArgs = ($5 + 1) | 0;
                    HEAP8[$EndsWithTemplateArgs >> 0] = 1;
                  }
                  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
                    $Subs136,
                    $SoFar
                  );
                  break L22;
                  break;
                }
                case 68: {
                  $call69 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
                      $this,
                      1
                    ) | 0;
                  switch (($call69 << 24) >> 24) {
                    case 67: {
                      label = 39;
                      break L25;
                      break;
                    }
                    case 84:
                    case 116: {
                      break;
                    }
                    default: {
                      break L25;
                    }
                  }
                  $call77 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                      $this
                    ) | 0;
                  $call78 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseDecltypeEv(
                      $call77
                    ) | 0;
                  $call79 =
                    __ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_(
                      $PushComponent,
                      $call78
                    ) | 0;
                  if (!$call79) {
                    $retval$3 = 0;
                    break L19;
                  }
                  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
                    $Subs136,
                    $SoFar
                  );
                  break L22;
                  break;
                }
                case 83: {
                  $call88 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
                      $this,
                      1
                    ) | 0;
                  $cmp90 = ($call88 << 24) >> 24 == 116;
                  if ($cmp90) {
                    label = 39;
                  } else {
                    $call92 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                        $this
                      ) | 0;
                    $call93 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv(
                        $call92
                      ) | 0;
                    HEAP32[$S >> 2] = $call93;
                    $call94 =
                      __ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_(
                        $PushComponent,
                        $call93
                      ) | 0;
                    if (!$call94) {
                      label = 44;
                      break L19;
                    }
                    $6 = HEAP32[$SoFar >> 2] | 0;
                    $cmp97 = ($6 | 0) == ($call93 | 0);
                    if (!$cmp97) {
                      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
                        $Subs136,
                        $S
                      );
                    }
                    break L22;
                  }
                  break;
                }
                case 67: {
                  break;
                }
                default: {
                  label = 39;
                }
              }
            } while (0);
            if ((label | 0) == 39) {
              label = 0;
              $call131 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $10 = HEAP32[$State$addr >> 2] | 0;
              $call132 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnqualifiedNameEPNS5_9NameStateE(
                  $call131,
                  $10
                ) | 0;
              $call133 =
                __ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_(
                  $PushComponent,
                  $call132
                ) | 0;
              if (!$call133) {
                $retval$3 = 0;
                break L19;
              }
              __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
                $Subs136,
                $SoFar
              );
              break;
            }
            $7 = HEAP32[$SoFar >> 2] | 0;
            $cmp116 = ($7 | 0) == (0 | 0);
            if ($cmp116) {
              $retval$3 = 0;
              break L19;
            }
            $call119 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                $this
              ) | 0;
            $8 = HEAP32[$State$addr >> 2] | 0;
            $call120 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCtorDtorNameERPNS0_4NodeEPNS5_9NameStateE(
                $call119,
                $SoFar,
                $8
              ) | 0;
            $call121 =
              __ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_(
                $PushComponent,
                $call120
              ) | 0;
            if (!$call121) {
              $retval$3 = 0;
              break L19;
            }
            $9 = HEAP32[$SoFar >> 2] | 0;
            $call125 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseAbiTagsEPNS0_4NodeE(
                $call119,
                $9
              ) | 0;
            HEAP32[$SoFar >> 2] = $call125;
            $cmp126 = ($call125 | 0) == (0 | 0);
            if ($cmp126) {
              $retval$3 = 0;
              break L19;
            }
            __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
              $Subs136,
              $SoFar
            );
          }
        } while (0);
      }
      if ((label | 0) == 26) {
        $retval$3 = 0;
      } else if ((label | 0) == 41) {
        $11 = HEAP32[$SoFar >> 2] | 0;
        $cmp137 = ($11 | 0) == (0 | 0);
        if ($cmp137) {
          $retval$3 = 0;
        } else {
          $call140 =
            __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5emptyEv(
              $Subs136
            ) | 0;
          if ($call140) {
            $retval$3 = 0;
          } else {
            __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8pop_backEv(
              $Subs136
            );
            $12 = HEAP32[$SoFar >> 2] | 0;
            $retval$3 = $12;
          }
        }
      } else if ((label | 0) == 44) {
        $retval$3 = 0;
      }
      $retval$4 = $retval$3;
    } else {
      $retval$4 = 0;
    }
    STACKTOP = sp;
    return $retval$4 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E14parseLocalNameEPNS5_9NameStateE(
    $this,
    $State
  ) {
    $this = $this | 0;
    $State = $State | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $Encoding = 0,
      $Entity = 0,
      $Last = 0,
      $Last35 = 0,
      $N = 0,
      $StringLitName = 0,
      $call = 0,
      $call11 = 0,
      $call14 = 0,
      $call16 = 0,
      $call18 = 0,
      $call2 = 0,
      $call22 = 0,
      $call26 = 0,
      $call3 = 0,
      $call30 = 0;
    var $call36 = 0,
      $call38 = 0,
      $call4 = 0,
      $call7 = 0,
      $call9 = 0,
      $cmp = 0,
      $cmp23 = 0,
      $cmp31 = 0,
      $retval$1 = 0,
      $retval$2 = 0,
      $retval$3 = 0,
      $retval$4 = 0,
      $tmp = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $Encoding = (sp + 20) | 0;
    $StringLitName = (sp + 16) | 0;
    $tmp = (sp + 8) | 0;
    $N = (sp + 4) | 0;
    $Entity = sp;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
        $this,
        90
      ) | 0;
    if ($call) {
      $call2 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
          $this
        ) | 0;
      $call3 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv(
          $call2
        ) | 0;
      HEAP32[$Encoding >> 2] = $call3;
      $cmp = ($call3 | 0) == (0 | 0);
      do {
        if ($cmp) {
          $retval$3 = 0;
        } else {
          $call4 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
              $this,
              69
            ) | 0;
          if ($call4) {
            $call7 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                $this,
                115
              ) | 0;
            if ($call7) {
              $0 = HEAP32[$this >> 2] | 0;
              $Last = ($this + 4) | 0;
              $1 = HEAP32[$Last >> 2] | 0;
              $call9 =
                __ZN12_GLOBAL__N_116itanium_demangle19parse_discriminatorEPKcS2_(
                  $0,
                  $1
                ) | 0;
              HEAP32[$this >> 2] = $call9;
              $call11 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_(
                  $this,
                  14543
                ) | 0;
              HEAP32[$StringLitName >> 2] = $call11;
              $call14 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9LocalNameEJRPNS0_4NodeESA_EEES9_DpOT0_(
                  $this,
                  $Encoding,
                  $StringLitName
                ) | 0;
              $retval$3 = $call14;
              break;
            }
            $call16 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                $this,
                100
              ) | 0;
            if (!$call16) {
              $call30 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE(
                  $call2,
                  $State
                ) | 0;
              HEAP32[$Entity >> 2] = $call30;
              $cmp31 = ($call30 | 0) == (0 | 0);
              if ($cmp31) {
                $retval$2 = 0;
              } else {
                $2 = HEAP32[$this >> 2] | 0;
                $Last35 = ($this + 4) | 0;
                $3 = HEAP32[$Last35 >> 2] | 0;
                $call36 =
                  __ZN12_GLOBAL__N_116itanium_demangle19parse_discriminatorEPKcS2_(
                    $2,
                    $3
                  ) | 0;
                HEAP32[$this >> 2] = $call36;
                $call38 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9LocalNameEJRPNS0_4NodeESA_EEES9_DpOT0_(
                    $this,
                    $Encoding,
                    $Entity
                  ) | 0;
                $retval$2 = $call38;
              }
              $retval$3 = $retval$2;
              break;
            }
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb(
              $tmp,
              $this,
              1
            );
            $call18 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                $this,
                95
              ) | 0;
            if ($call18) {
              $call22 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE(
                  $call2,
                  $State
                ) | 0;
              HEAP32[$N >> 2] = $call22;
              $cmp23 = ($call22 | 0) == (0 | 0);
              if ($cmp23) {
                $retval$1 = 0;
              } else {
                $call26 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9LocalNameEJRPNS0_4NodeESA_EEES9_DpOT0_(
                    $this,
                    $Encoding,
                    $N
                  ) | 0;
                $retval$1 = $call26;
              }
              $retval$3 = $retval$1;
            } else {
              $retval$3 = 0;
            }
          } else {
            $retval$3 = 0;
          }
        }
      } while (0);
      $retval$4 = $retval$3;
    } else {
      $retval$4 = 0;
    }
    STACKTOP = sp;
    return $retval$4 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseUnscopedNameEPNS5_9NameStateE(
    $this,
    $State
  ) {
    $this = $this | 0;
    $State = $State | 0;
    var $R = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp2 = 0,
      $agg$tmp2$byval_copy = 0,
      $call = 0,
      $call10 = 0,
      $call3 = 0,
      $call4 = 0,
      $call5 = 0,
      $call7 = 0,
      $call9 = 0,
      $cmp = 0,
      $retval$0 = 0,
      $retval$1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 48) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
    $agg$tmp2$byval_copy = (sp + 32) | 0;
    $agg$tmp$byval_copy = (sp + 24) | 0;
    $agg$tmp = (sp + 16) | 0;
    $agg$tmp2 = (sp + 8) | 0;
    $R = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 14281);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
        $this,
        $agg$tmp$byval_copy
      ) | 0;
    if ($call) {
      label = 3;
    } else {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 14285);
      HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
      HEAP32[($agg$tmp2$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp2 + 4) >> 2] | 0;
      $call3 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
          $this,
          $agg$tmp2$byval_copy
        ) | 0;
      if ($call3) {
        label = 3;
      } else {
        $call9 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
            $this
          ) | 0;
        $call10 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnqualifiedNameEPNS5_9NameStateE(
            $call9,
            $State
          ) | 0;
        $retval$1 = $call10;
      }
    }
    if ((label | 0) == 3) {
      $call4 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
          $this
        ) | 0;
      $call5 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnqualifiedNameEPNS5_9NameStateE(
          $call4,
          $State
        ) | 0;
      HEAP32[$R >> 2] = $call5;
      $cmp = ($call5 | 0) == (0 | 0);
      if ($cmp) {
        $retval$0 = 0;
      } else {
        $call7 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16StdQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_(
            $this,
            $R
          ) | 0;
        $retval$0 = $call7;
      }
      $retval$1 = $retval$0;
    }
    STACKTOP = sp;
    return $retval$1 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnqualifiedNameEPNS5_9NameStateE(
    $this,
    $State
  ) {
    $this = $this | 0;
    $State = $State | 0;
    var $$pre = 0,
      $$pre$phiZ2D = 0,
      $0 = 0,
      $Binding = 0,
      $Names = 0,
      $Result$1 = 0,
      $Result$113 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      $call$off = 0,
      $call11 = 0,
      $call12 = 0,
      $call14 = 0,
      $call16 = 0,
      $call17 = 0,
      $call18 = 0,
      $call2 = 0,
      $call22 = 0,
      $call23 = 0;
    var $call28 = 0,
      $call29 = 0,
      $call3 = 0,
      $call36 = 0,
      $cmp = 0,
      $cmp19 = 0,
      $cmp33 = 0,
      $ref$tmp = 0,
      $retval$2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $agg$tmp$byval_copy = (sp + 24) | 0;
    $agg$tmp = (sp + 16) | 0;
    $Binding = (sp + 8) | 0;
    $ref$tmp = sp;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
        $this,
        0
      ) | 0;
    $cmp = ($call << 24) >> 24 == 85;
    do {
      if ($cmp) {
        $call2 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
            $this
          ) | 0;
        $call3 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnnamedTypeNameEPNS5_9NameStateE(
            $call2
          ) | 0;
        $Result$1 = $call3;
        label = 12;
      } else {
        $call$off = (($call + -49) << 24) >> 24;
        $0 = ($call$off & 255) < 9;
        if ($0) {
          $call11 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call12 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE(
              $call11
            ) | 0;
          $Result$1 = $call12;
          label = 12;
          break;
        }
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 14347);
        HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
        HEAP32[($agg$tmp$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp + 4) >> 2] | 0;
        $call14 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
            $this,
            $agg$tmp$byval_copy
          ) | 0;
        if (!$call14) {
          $call28 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call29 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseOperatorNameEPNS5_9NameStateE(
              $call28,
              $State
            ) | 0;
          $Result$1 = $call29;
          label = 12;
          break;
        }
        $Names = ($this + 8) | 0;
        $call16 =
          __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv(
            $Names
          ) | 0;
        while (1) {
          $call17 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call18 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE(
              $call17
            ) | 0;
          HEAP32[$Binding >> 2] = $call18;
          $cmp19 = ($call18 | 0) == (0 | 0);
          if ($cmp19) {
            label = 10;
            break;
          }
          __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
            $Names,
            $Binding
          );
          $call22 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
              $this,
              69
            ) | 0;
          if ($call22) {
            label = 9;
            break;
          }
        }
        if ((label | 0) == 9) {
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm(
            $ref$tmp,
            $this,
            $call16
          );
          $call23 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_21StructuredBindingNameEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_(
              $this,
              $ref$tmp
            ) | 0;
          $$pre$phiZ2D = $call17;
          $Result$113 = $call23;
          label = 14;
          break;
        } else if ((label | 0) == 10) {
          $retval$2 = 0;
          break;
        }
      }
    } while (0);
    if ((label | 0) == 12) {
      $cmp33 = ($Result$1 | 0) == (0 | 0);
      if ($cmp33) {
        $retval$2 = 0;
      } else {
        $$pre =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
            $this
          ) | 0;
        $$pre$phiZ2D = $$pre;
        $Result$113 = $Result$1;
        label = 14;
      }
    }
    if ((label | 0) == 14) {
      $call36 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseAbiTagsEPNS0_4NodeE(
          $$pre$phiZ2D,
          $Result$113
        ) | 0;
      $retval$2 = $call36;
    }
    STACKTOP = sp;
    return $retval$2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16StdQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16StdQualifiedNameEJRPNS2_4NodeEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16StdQualifiedNameEJRPNS2_4NodeEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle16StdQualifiedNameC2EPNS0_4NodeE(
      $call,
      $0
    );
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle16StdQualifiedNameC2EPNS0_4NodeE(
    $this,
    $Child_
  ) {
    $this = $this | 0;
    $Child_ = $Child_ | 0;
    var $Child = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      34,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 5220;
    $Child = ($this + 8) | 0;
    HEAP32[$Child >> 2] = $Child_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle16StdQualifiedName9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $Child = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 14288);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Child = ($this + 8) | 0;
    $0 = HEAP32[$Child >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $S
    );
    STACKTOP = sp;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle16StdQualifiedName11getBaseNameEv(
    $agg$result,
    $this
  ) {
    $agg$result = $agg$result | 0;
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $Child = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Child = ($this + 8) | 0;
    $0 = HEAP32[$Child >> 2] | 0;
    $vtable = HEAP32[$0 >> 2] | 0;
    $vfn = ($vtable + 24) | 0;
    $1 = HEAP32[$vfn >> 2] | 0;
    FUNCTION_TABLE_vii[$1 & 511]($agg$result, $0);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle16StdQualifiedNameD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnnamedTypeNameEPNS5_9NameStateE(
    $this
  ) {
    $this = $this | 0;
    var $Count = 0,
      $Count35 = 0,
      $Names = 0,
      $P = 0,
      $Params = 0,
      $ParsingLambdaParams = 0,
      $SwapParams = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp6 = 0,
      $agg$tmp6$byval_copy = 0,
      $agg$tmp9 = 0,
      $agg$tmp9$byval_copy = 0,
      $call = 0,
      $call11 = 0,
      $call15 = 0,
      $call18 = 0,
      $call2 = 0,
      $call20 = 0,
      $call27 = 0;
    var $call39 = 0,
      $call4 = 0,
      $call43 = 0,
      $call7 = 0,
      $cmp = 0,
      $retval$0 = 0,
      $retval$3 = 0,
      $retval$4 = 0,
      $retval$5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 96) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96 | 0);
    $agg$tmp9$byval_copy = (sp + 80) | 0;
    $agg$tmp6$byval_copy = (sp + 72) | 0;
    $agg$tmp$byval_copy = (sp + 64) | 0;
    $agg$tmp = (sp + 56) | 0;
    $Count = (sp + 48) | 0;
    $agg$tmp6 = (sp + 40) | 0;
    $Params = sp;
    $SwapParams = (sp + 32) | 0;
    $agg$tmp9 = (sp + 24) | 0;
    $P = (sp + 16) | 0;
    $Count35 = (sp + 8) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 14408);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
        $this,
        $agg$tmp$byval_copy
      ) | 0;
    if ($call) {
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb(
        $Count,
        $this,
        0
      );
      $call2 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
          $this,
          95
        ) | 0;
      if ($call2) {
        $call4 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15UnnamedTypeNameEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_(
            $this,
            $Count
          ) | 0;
        $retval$0 = $call4;
      } else {
        $retval$0 = 0;
      }
      $retval$5 = $retval$0;
    } else {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 14411);
      HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2] | 0;
      HEAP32[($agg$tmp6$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp6 + 4) >> 2] | 0;
      $call7 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
          $this,
          $agg$tmp6$byval_copy
        ) | 0;
      if ($call7) {
        __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2Ev($Params);
        $ParsingLambdaParams = ($this + 362) | 0;
        __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb(
          $SwapParams,
          $ParsingLambdaParams,
          1
        );
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp9, 14414);
        HEAP32[$agg$tmp9$byval_copy >> 2] = HEAP32[$agg$tmp9 >> 2] | 0;
        HEAP32[($agg$tmp9$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp9 + 4) >> 2] | 0;
        $call11 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE(
            $this,
            $agg$tmp9$byval_copy
          ) | 0;
        do {
          if ($call11) {
            label = 12;
          } else {
            $Names = ($this + 8) | 0;
            $call15 =
              __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv(
                $Names
              ) | 0;
            while (1) {
              $call18 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call20 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
                  $call18
                ) | 0;
              HEAP32[$P >> 2] = $call20;
              $cmp = ($call20 | 0) == (0 | 0);
              if ($cmp) {
                label = 11;
                break;
              }
              __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_(
                $Names,
                $P
              );
              $call27 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                  $this,
                  69
                ) | 0;
              if ($call27) {
                label = 10;
                break;
              }
            }
            if ((label | 0) == 10) {
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm(
                $Params,
                $this,
                $call15
              );
              label = 12;
              break;
            } else if ((label | 0) == 11) {
              $retval$4 = 0;
              break;
            }
          }
        } while (0);
        if ((label | 0) == 12) {
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb(
            $Count35,
            $this,
            0
          );
          $call39 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
              $this,
              95
            ) | 0;
          if ($call39) {
            $call43 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15ClosureTypeNameEJRNS0_9NodeArrayERNS_10StringViewEEEEPNS0_4NodeEDpOT0_(
                $this,
                $Params,
                $Count35
              ) | 0;
            $retval$3 = $call43;
          } else {
            $retval$3 = 0;
          }
          $retval$4 = $retval$3;
        }
        __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SwapParams);
        $retval$5 = $retval$4;
      } else {
        $retval$5 = 0;
      }
    }
    STACKTOP = sp;
    return $retval$5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_21StructuredBindingNameEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle21StructuredBindingNameEJNS2_9NodeArrayEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle21StructuredBindingNameEJNS2_9NodeArrayEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    $0 = $args;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle21StructuredBindingNameC2ENS0_9NodeArrayE(
      $call,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle21StructuredBindingNameC2ENS0_9NodeArrayE(
    $this,
    $Bindings_
  ) {
    $this = $this | 0;
    $Bindings_ = $Bindings_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Bindings = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      41,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 5264;
    $Bindings = ($this + 8) | 0;
    $0 = $Bindings_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Bindings;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle21StructuredBindingName9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $Bindings = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_112OutputStreampLEc($S, 91);
    $Bindings = ($this + 8) | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE(
      $Bindings,
      $S
    );
    __ZN12_GLOBAL__N_112OutputStreampLEc($S, 93);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle21StructuredBindingNameD0Ev(
    $this
  ) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15UnnamedTypeNameEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15UnnamedTypeNameEJRNS_10StringViewEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15ClosureTypeNameEJRNS0_9NodeArrayERNS_10StringViewEEEEPNS0_4NodeEDpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15ClosureTypeNameEJRNS2_9NodeArrayERNS_10StringViewEEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15ClosureTypeNameEJRNS2_9NodeArrayERNS_10StringViewEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0;
    var $agg$tmp = 0,
      $agg$tmp5 = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      $tmpcast1$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $tmpcast1$byval_copy = (sp + 24) | 0;
    $tmpcast$byval_copy = (sp + 16) | 0;
    $agg$tmp = (sp + 8) | 0;
    $agg$tmp5 = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 24) | 0;
    $0 = $args;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    $10 = $args1;
    $11 = $10;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = ($10 + 4) | 0;
    $14 = $13;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = $agg$tmp5;
    $17 = $16;
    HEAP32[$17 >> 2] = $12;
    $18 = ($16 + 4) | 0;
    $19 = $18;
    HEAP32[$19 >> 2] = $15;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    HEAP32[$tmpcast1$byval_copy >> 2] = HEAP32[$agg$tmp5 >> 2] | 0;
    HEAP32[($tmpcast1$byval_copy + 4) >> 2] = HEAP32[($agg$tmp5 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle15ClosureTypeNameC2ENS0_9NodeArrayENS_10StringViewE(
      $call,
      $tmpcast$byval_copy,
      $tmpcast1$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle15ClosureTypeNameC2ENS0_9NodeArrayENS_10StringViewE(
    $this,
    $Params_,
    $Count_
  ) {
    $this = $this | 0;
    $Params_ = $Params_ | 0;
    $Count_ = $Count_ | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0;
    var $Count = 0,
      $Params = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      40,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 5308;
    $Params = ($this + 8) | 0;
    $0 = $Params_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Params;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    $Count = ($this + 16) | 0;
    $10 = $Count_;
    $11 = $10;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = ($10 + 4) | 0;
    $14 = $13;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = $Count;
    $17 = $16;
    HEAP32[$17 >> 2] = $12;
    $18 = ($16 + 4) | 0;
    $19 = $18;
    HEAP32[$19 >> 2] = $15;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle15ClosureTypeName9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Count = 0,
      $Params = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp2 = 0,
      $agg$tmp4 = 0,
      $agg$tmp4$byval_copy = 0,
      $agg$tmp6 = 0,
      $agg$tmp6$byval_copy = 0,
      $tmpcast$byval_copy = 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 64) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
    $agg$tmp6$byval_copy = (sp + 56) | 0;
    $agg$tmp4$byval_copy = (sp + 48) | 0;
    $tmpcast$byval_copy = (sp + 40) | 0;
    $agg$tmp$byval_copy = (sp + 32) | 0;
    $agg$tmp = (sp + 24) | 0;
    $agg$tmp2 = sp;
    $agg$tmp4 = (sp + 16) | 0;
    $agg$tmp6 = (sp + 8) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 14417);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Count = ($this + 16) | 0;
    $0 = $Count;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp2;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $tmpcast$byval_copy
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 14425);
    HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2] | 0;
    HEAP32[($agg$tmp4$byval_copy + 4) >> 2] = HEAP32[($agg$tmp4 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp4$byval_copy
    );
    $Params = ($this + 8) | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE(
      $Params,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 11115);
    HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2] | 0;
    HEAP32[($agg$tmp6$byval_copy + 4) >> 2] = HEAP32[($agg$tmp6 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp6$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle15ClosureTypeNameD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15UnnamedTypeNameEJRNS_10StringViewEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    $0 = $args;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle15UnnamedTypeNameC2ENS_10StringViewE(
      $call,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle15UnnamedTypeNameC2ENS_10StringViewE(
    $this,
    $Count_
  ) {
    $this = $this | 0;
    $Count_ = $Count_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Count = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      39,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 5352;
    $Count = ($this + 8) | 0;
    $0 = $Count_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Count;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle15UnnamedTypeName9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Count = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp2 = 0,
      $agg$tmp4 = 0,
      $agg$tmp4$byval_copy = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 48) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
    $agg$tmp4$byval_copy = (sp + 40) | 0;
    $tmpcast$byval_copy = (sp + 32) | 0;
    $agg$tmp$byval_copy = (sp + 24) | 0;
    $agg$tmp = (sp + 16) | 0;
    $agg$tmp2 = sp;
    $agg$tmp4 = (sp + 8) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 14480);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Count = ($this + 8) | 0;
    $0 = $Count;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp2;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $tmpcast$byval_copy
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 14489);
    HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2] | 0;
    HEAP32[($agg$tmp4$byval_copy + 4) >> 2] = HEAP32[($agg$tmp4 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp4$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle15UnnamedTypeNameD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle19parse_discriminatorEPKcS2_(
    $first,
    $last
  ) {
    $first = $first | 0;
    $last = $last | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $add$ptr = 0,
      $add$ptr20 = 0,
      $add$ptr7 = 0,
      $cmp = 0,
      $cmp1 = 0,
      $cmp11 = 0,
      $cmp18 = 0,
      $cmp3 = 0,
      $cmp32 = 0,
      $cmp9 = 0,
      $conv = 0,
      $conv12 = 0,
      $conv34 = 0,
      $conv5 = 0,
      $first$addr$2 = 0,
      $first$pn = 0;
    var $incdec$ptr = 0,
      $incdec$ptr15 = 0,
      $isdigit = 0,
      $isdigit27 = 0,
      $isdigit29 = 0,
      $isdigit31 = 0,
      $isdigittmp = 0,
      $isdigittmp26 = 0,
      $isdigittmp28 = 0,
      $isdigittmp30 = 0,
      $spec$select = 0,
      $t1$0 = 0,
      $t129$0 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $cmp = ($first | 0) == ($last | 0);
    L1: do {
      if ($cmp) {
        $first$addr$2 = $first;
      } else {
        $0 = HEAP8[$first >> 0] | 0;
        $cmp1 = ($0 << 24) >> 24 == 95;
        if (!$cmp1) {
          $conv = ($0 << 24) >> 24;
          $isdigittmp = ($conv + -48) | 0;
          $isdigit = $isdigittmp >>> 0 < 10;
          if (!$isdigit) {
            $first$addr$2 = $first;
            break;
          }
          $first$pn = $first;
          while (1) {
            $t129$0 = ($first$pn + 1) | 0;
            $cmp32 = ($t129$0 | 0) == ($last | 0);
            if ($cmp32) {
              $first$addr$2 = $last;
              break L1;
            }
            $3 = HEAP8[$t129$0 >> 0] | 0;
            $conv34 = ($3 << 24) >> 24;
            $isdigittmp26 = ($conv34 + -48) | 0;
            $isdigit27 = $isdigittmp26 >>> 0 < 10;
            if ($isdigit27) {
              $first$pn = $t129$0;
            } else {
              $first$addr$2 = $first;
              break L1;
            }
          }
        }
        $add$ptr = ($first + 1) | 0;
        $cmp3 = ($add$ptr | 0) == ($last | 0);
        if ($cmp3) {
          $first$addr$2 = $first;
        } else {
          $1 = HEAP8[$add$ptr >> 0] | 0;
          $conv5 = ($1 << 24) >> 24;
          $isdigittmp28 = ($conv5 + -48) | 0;
          $isdigit29 = $isdigittmp28 >>> 0 < 10;
          if ($isdigit29) {
            $add$ptr7 = ($first + 2) | 0;
            $first$addr$2 = $add$ptr7;
            break;
          }
          $cmp9 = ($1 << 24) >> 24 == 95;
          if ($cmp9) {
            $incdec$ptr = ($first + 2) | 0;
            $t1$0 = $incdec$ptr;
            while (1) {
              $cmp11 = ($t1$0 | 0) == ($last | 0);
              if ($cmp11) {
                $first$addr$2 = $first;
                break L1;
              }
              $2 = HEAP8[$t1$0 >> 0] | 0;
              $conv12 = ($2 << 24) >> 24;
              $isdigittmp30 = ($conv12 + -48) | 0;
              $isdigit31 = $isdigittmp30 >>> 0 < 10;
              if (!$isdigit31) {
                break;
              }
              $incdec$ptr15 = ($t1$0 + 1) | 0;
              $t1$0 = $incdec$ptr15;
            }
            $cmp18 = ($2 << 24) >> 24 == 95;
            $add$ptr20 = ($t1$0 + 1) | 0;
            $spec$select = $cmp18 ? $add$ptr20 : $first;
            return $spec$select | 0;
          } else {
            $first$addr$2 = $first;
          }
        }
      }
    } while (0);
    return $first$addr$2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9LocalNameEJRPNS0_4NodeESA_EEES9_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9LocalNameEJRPNS2_4NodeES6_EEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9LocalNameEJRPNS2_4NodeES6_EEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = HEAP32[$args1 >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle9LocalNameC2EPNS0_4NodeES3_(
      $call,
      $0,
      $1
    );
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle9LocalNameC2EPNS0_4NodeES3_(
    $this,
    $Encoding_,
    $Entity_
  ) {
    $this = $this | 0;
    $Encoding_ = $Encoding_ | 0;
    $Entity_ = $Entity_ | 0;
    var $Encoding = 0,
      $Entity = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      24,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 5396;
    $Encoding = ($this + 8) | 0;
    HEAP32[$Encoding >> 2] = $Encoding_;
    $Entity = ($this + 12) | 0;
    HEAP32[$Entity >> 2] = $Entity_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle9LocalName9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $Encoding = 0,
      $Entity = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $Encoding = ($this + 8) | 0;
    $0 = HEAP32[$Encoding >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 12865);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Entity = ($this + 12) | 0;
    $1 = HEAP32[$Entity >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $1,
      $S
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle9LocalNameD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_(
    $this,
    $Comp
  ) {
    $this = $this | 0;
    $Comp = $Comp | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Comp$addr = 0,
      $EndsWithTemplateArgs = 0,
      $call = 0,
      $cmp = 0,
      $retval$0 = 0,
      $tobool = 0,
      $tobool2 = 0,
      $tobool5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $Comp$addr = sp;
    HEAP32[$Comp$addr >> 2] = $Comp;
    $0 = HEAP32[$this >> 2] | 0;
    $tobool = ($Comp | 0) == (0 | 0);
    if ($tobool) {
      $retval$0 = 0;
    } else {
      $1 = ($this + 4) | 0;
      $2 = HEAP32[$1 >> 2] | 0;
      $3 = HEAP32[$2 >> 2] | 0;
      $tobool2 = ($3 | 0) == (0 | 0);
      if ($tobool2) {
        HEAP32[$2 >> 2] = $Comp;
      } else {
        $call =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10NestedNameEJRPNS0_4NodeESA_EEES9_DpOT0_(
            $0,
            $2,
            $Comp$addr
          ) | 0;
        $4 = HEAP32[$1 >> 2] | 0;
        HEAP32[$4 >> 2] = $call;
      }
      $5 = ($this + 8) | 0;
      $6 = HEAP32[$5 >> 2] | 0;
      $7 = HEAP32[$6 >> 2] | 0;
      $tobool5 = ($7 | 0) == (0 | 0);
      if (!$tobool5) {
        $EndsWithTemplateArgs = ($7 + 1) | 0;
        HEAP8[$EndsWithTemplateArgs >> 0] = 0;
      }
      $8 = HEAP32[$1 >> 2] | 0;
      $9 = HEAP32[$8 >> 2] | 0;
      $cmp = ($9 | 0) != (0 | 0);
      $retval$0 = $cmp;
    }
    STACKTOP = sp;
    return $retval$0 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCtorDtorNameERPNS0_4NodeEPNS5_9NameStateE(
    $this,
    $SoFar,
    $State
  ) {
    $this = $this | 0;
    $SoFar = $SoFar | 0;
    $State = $State | 0;
    var $$off = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $SSK = 0,
      $SSK2 = 0,
      $Variant = 0,
      $Variant61 = 0,
      $add$ptr = 0,
      $call = 0,
      $call3 = 0,
      $call32 = 0,
      $call33 = 0,
      $call38 = 0,
      $call42 = 0,
      $call46 = 0,
      $call6 = 0,
      $call71 = 0,
      $call8 = 0;
    var $call9 = 0,
      $cmp = 0,
      $cmp34 = 0,
      $cmp44 = 0,
      $conv26 = 0,
      $conv63 = 0,
      $incdec$ptr = 0,
      $ref$tmp = 0,
      $ref$tmp70 = 0,
      $retval$1 = 0,
      $retval$3 = 0,
      $sub = 0,
      $sub64 = 0,
      $switch = 0,
      $tobool27 = 0,
      $tobool66 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $SSK = (sp + 8) | 0;
    $Variant = (sp + 4) | 0;
    $ref$tmp = (sp + 13) | 0;
    $Variant61 = sp;
    $ref$tmp70 = (sp + 12) | 0;
    $0 = HEAP32[$SoFar >> 2] | 0;
    $call = __ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($0) | 0;
    $cmp = ($call << 24) >> 24 == 36;
    if ($cmp) {
      $SSK2 = ($0 + 8) | 0;
      $1 = HEAP32[$SSK2 >> 2] | 0;
      HEAP32[$SSK >> 2] = $1;
      $$off = ($1 + -2) | 0;
      $switch = $$off >>> 0 < 4;
      if ($switch) {
        $call3 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_27ExpandedSpecialSubstitutionEJRNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_(
            $this,
            $SSK
          ) | 0;
        HEAP32[$SoFar >> 2] = $call3;
      }
    }
    $call6 =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
        $this,
        67
      ) | 0;
    L7: do {
      if ($call6) {
        $call8 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
            $this,
            73
          ) | 0;
        $call9 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
            $this,
            0
          ) | 0;
        switch (($call9 << 24) >> 24) {
          case 53:
          case 51:
          case 50:
          case 49: {
            break;
          }
          default: {
            $retval$3 = 0;
            break L7;
          }
        }
        $conv26 = ($call9 << 24) >> 24;
        $sub = ($conv26 + -48) | 0;
        HEAP32[$Variant >> 2] = $sub;
        $2 = HEAP32[$this >> 2] | 0;
        $incdec$ptr = ($2 + 1) | 0;
        HEAP32[$this >> 2] = $incdec$ptr;
        $tobool27 = ($State | 0) == (0 | 0);
        if (!$tobool27) {
          HEAP8[$State >> 0] = 1;
        }
        if ($call8) {
          $call32 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call33 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE(
              $call32,
              $State
            ) | 0;
          $cmp34 = ($call33 | 0) == (0 | 0);
          if ($cmp34) {
            $retval$1 = 0;
          } else {
            label = 11;
          }
        } else {
          label = 11;
        }
        if ((label | 0) == 11) {
          HEAP8[$ref$tmp >> 0] = 0;
          $call38 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12CtorDtorNameEJRPNS0_4NodeEbRiEEES9_DpOT0_(
              $this,
              $SoFar,
              $ref$tmp,
              $Variant
            ) | 0;
          $retval$1 = $call38;
        }
        $retval$3 = $retval$1;
      } else {
        $call42 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
            $this,
            0
          ) | 0;
        $cmp44 = ($call42 << 24) >> 24 == 68;
        if ($cmp44) {
          $call46 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              1
            ) | 0;
          switch (($call46 << 24) >> 24) {
            case 53:
            case 50:
            case 49:
            case 48: {
              break;
            }
            default: {
              $retval$3 = 0;
              break L7;
            }
          }
          $conv63 = ($call46 << 24) >> 24;
          $sub64 = ($conv63 + -48) | 0;
          HEAP32[$Variant61 >> 2] = $sub64;
          $3 = HEAP32[$this >> 2] | 0;
          $add$ptr = ($3 + 2) | 0;
          HEAP32[$this >> 2] = $add$ptr;
          $tobool66 = ($State | 0) == (0 | 0);
          if (!$tobool66) {
            HEAP8[$State >> 0] = 1;
          }
          HEAP8[$ref$tmp70 >> 0] = 1;
          $call71 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12CtorDtorNameEJRPNS0_4NodeEbRiEEES9_DpOT0_(
              $this,
              $SoFar,
              $ref$tmp70,
              $Variant61
            ) | 0;
          $retval$3 = $call71;
        } else {
          $retval$3 = 0;
        }
      }
    } while (0);
    STACKTOP = sp;
    return $retval$3 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8pop_backEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $Last = 0,
      $incdec$ptr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Last = ($this + 4) | 0;
    $0 = HEAP32[$Last >> 2] | 0;
    $incdec$ptr = ($0 + -4) | 0;
    HEAP32[$Last >> 2] = $incdec$ptr;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_27ExpandedSpecialSubstitutionEJRNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle27ExpandedSpecialSubstitutionEJRNS2_14SpecialSubKindEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12CtorDtorNameEJRPNS0_4NodeEbRiEEES9_DpOT0_(
    $this,
    $args,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $ASTAllocator = 0,
      $call8 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call8 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12CtorDtorNameEJRPNS2_4NodeEbRiEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1,
        $args3
      ) | 0;
    return $call8 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12CtorDtorNameEJRPNS2_4NodeEbRiEEEPT_DpOT0_(
    $this,
    $args,
    $args1,
    $args3
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = HEAP8[$args1 >> 0] | 0;
    $tobool = ($1 << 24) >> 24 != 0;
    $2 = HEAP32[$args3 >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle12CtorDtorNameC2EPKNS0_4NodeEbi(
      $call,
      $0,
      $tobool,
      $2
    );
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle12CtorDtorNameC2EPKNS0_4NodeEbi(
    $this,
    $Basename_,
    $IsDtor_,
    $Variant_
  ) {
    $this = $this | 0;
    $Basename_ = $Basename_ | 0;
    $IsDtor_ = $IsDtor_ | 0;
    $Variant_ = $Variant_ | 0;
    var $Basename = 0,
      $IsDtor = 0,
      $Variant = 0,
      $frombool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $frombool = $IsDtor_ & 1;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      37,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 5440;
    $Basename = ($this + 8) | 0;
    HEAP32[$Basename >> 2] = $Basename_;
    $IsDtor = ($this + 12) | 0;
    HEAP8[$IsDtor >> 0] = $frombool;
    $Variant = ($this + 16) | 0;
    HEAP32[$Variant >> 2] = $Variant_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle12CtorDtorName9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $Basename = 0,
      $IsDtor = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp2 = 0,
      $agg$tmp2$byval_copy = 0,
      $tobool = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $agg$tmp2$byval_copy = (sp + 24) | 0;
    $agg$tmp$byval_copy = (sp + 16) | 0;
    $agg$tmp = (sp + 8) | 0;
    $agg$tmp2 = sp;
    $IsDtor = ($this + 12) | 0;
    $0 = HEAP8[$IsDtor >> 0] | 0;
    $tobool = ($0 << 24) >> 24 == 0;
    if (!$tobool) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11852);
      HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
      HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp$byval_copy
      );
    }
    $Basename = ($this + 8) | 0;
    $1 = HEAP32[$Basename >> 2] | 0;
    $vtable = HEAP32[$1 >> 2] | 0;
    $vfn = ($vtable + 24) | 0;
    $2 = HEAP32[$vfn >> 2] | 0;
    FUNCTION_TABLE_vii[$2 & 511]($agg$tmp2, $1);
    HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($agg$tmp2$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp2$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle12CtorDtorNameD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle27ExpandedSpecialSubstitutionEJRNS2_14SpecialSubKindEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitutionC2ENS0_14SpecialSubKindE(
      $call,
      $0
    );
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitutionC2ENS0_14SpecialSubKindE(
    $this,
    $SSK_
  ) {
    $this = $this | 0;
    $SSK_ = $SSK_ | 0;
    var $SSK = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      35,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 5484;
    $SSK = ($this + 8) | 0;
    HEAP32[$SSK >> 2] = $SSK_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitution9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $SSK = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp12 = 0,
      $agg$tmp12$byval_copy = 0,
      $agg$tmp15 = 0,
      $agg$tmp15$byval_copy = 0,
      $agg$tmp3 = 0,
      $agg$tmp3$byval_copy = 0,
      $agg$tmp6 = 0,
      $agg$tmp6$byval_copy = 0,
      $agg$tmp9 = 0,
      $agg$tmp9$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 96) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96 | 0);
    $agg$tmp15$byval_copy = (sp + 88) | 0;
    $agg$tmp12$byval_copy = (sp + 80) | 0;
    $agg$tmp9$byval_copy = (sp + 72) | 0;
    $agg$tmp6$byval_copy = (sp + 64) | 0;
    $agg$tmp3$byval_copy = (sp + 56) | 0;
    $agg$tmp$byval_copy = (sp + 48) | 0;
    $agg$tmp = (sp + 40) | 0;
    $agg$tmp3 = (sp + 32) | 0;
    $agg$tmp6 = (sp + 24) | 0;
    $agg$tmp9 = (sp + 16) | 0;
    $agg$tmp12 = (sp + 8) | 0;
    $agg$tmp15 = sp;
    $SSK = ($this + 8) | 0;
    $0 = HEAP32[$SSK >> 2] | 0;
    switch ($0 | 0) {
      case 0: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 10897);
        HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
        HEAP32[($agg$tmp$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $S,
          $agg$tmp$byval_copy
        );
        break;
      }
      case 1: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3, 10912);
        HEAP32[$agg$tmp3$byval_copy >> 2] = HEAP32[$agg$tmp3 >> 2] | 0;
        HEAP32[($agg$tmp3$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp3 + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $S,
          $agg$tmp3$byval_copy
        );
        break;
      }
      case 2: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 14699);
        HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2] | 0;
        HEAP32[($agg$tmp6$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp6 + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $S,
          $agg$tmp6$byval_copy
        );
        break;
      }
      case 3: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp9, 14770);
        HEAP32[$agg$tmp9$byval_copy >> 2] = HEAP32[$agg$tmp9 >> 2] | 0;
        HEAP32[($agg$tmp9$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp9 + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $S,
          $agg$tmp9$byval_copy
        );
        break;
      }
      case 4: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12, 14820);
        HEAP32[$agg$tmp12$byval_copy >> 2] = HEAP32[$agg$tmp12 >> 2] | 0;
        HEAP32[($agg$tmp12$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp12 + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $S,
          $agg$tmp12$byval_copy
        );
        break;
      }
      case 5: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp15, 14870);
        HEAP32[$agg$tmp15$byval_copy >> 2] = HEAP32[$agg$tmp15 >> 2] | 0;
        HEAP32[($agg$tmp15$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp15 + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $S,
          $agg$tmp15$byval_copy
        );
        break;
      }
      default: {
      }
    }
    STACKTOP = sp;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitution11getBaseNameEv(
    $agg$result,
    $this
  ) {
    $agg$result = $agg$result | 0;
    $this = $this | 0;
    var $0 = 0,
      $SSK = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $SSK = ($this + 8) | 0;
    $0 = HEAP32[$SSK >> 2] | 0;
    switch ($0 | 0) {
      case 0: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 10842);
        break;
      }
      case 1: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 10852);
        break;
      }
      case 2: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 10852);
        break;
      }
      case 3: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 14656);
        break;
      }
      case 4: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 14670);
        break;
      }
      case 5: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result, 14684);
        break;
      }
      default: {
        // unreachable;
      }
    }
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitutionD0Ev(
    $this
  ) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10NestedNameEJRPNS0_4NodeESA_EEES9_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10NestedNameEJRPNS2_4NodeES6_EEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10NestedNameEJRPNS2_4NodeES6_EEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = HEAP32[$args1 >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle10NestedNameC2EPNS0_4NodeES3_(
      $call,
      $0,
      $1
    );
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle10NestedNameC2EPNS0_4NodeES3_(
    $this,
    $Qual_,
    $Name_
  ) {
    $this = $this | 0;
    $Qual_ = $Qual_ | 0;
    $Name_ = $Name_ | 0;
    var $Name = 0,
      $Qual = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      23,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 5528;
    $Qual = ($this + 8) | 0;
    HEAP32[$Qual >> 2] = $Qual_;
    $Name = ($this + 12) | 0;
    HEAP32[$Name >> 2] = $Name_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle10NestedName9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $Name = 0,
      $Qual = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $Qual = ($this + 8) | 0;
    $0 = HEAP32[$Qual >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 12865);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Name = ($this + 12) | 0;
    $1 = HEAP32[$Name >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $1,
      $S
    );
    STACKTOP = sp;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle10NestedName11getBaseNameEv(
    $agg$result,
    $this
  ) {
    $agg$result = $agg$result | 0;
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $Name = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Name = ($this + 12) | 0;
    $0 = HEAP32[$Name >> 2] | 0;
    $vtable = HEAP32[$0 >> 2] | 0;
    $vfn = ($vtable + 24) | 0;
    $1 = HEAP32[$vfn >> 2] | 0;
    FUNCTION_TABLE_vii[$1 & 511]($agg$result, $0);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle10NestedNameD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19PointerToMemberTypeEJRPNS0_4NodeESA_EEES9_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19PointerToMemberTypeEJRPNS2_4NodeES6_EEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19PointerToMemberTypeEJRPNS2_4NodeES6_EEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = HEAP32[$args1 >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle19PointerToMemberTypeC2EPKNS0_4NodeES4_(
      $call,
      $0,
      $1
    );
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle19PointerToMemberTypeC2EPKNS0_4NodeES4_(
    $this,
    $ClassType_,
    $MemberType_
  ) {
    $this = $this | 0;
    $ClassType_ = $ClassType_ | 0;
    $MemberType_ = $MemberType_ | 0;
    var $0 = 0,
      $ClassType = 0,
      $MemberType = 0,
      $RHSComponentCache = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $RHSComponentCache = ($MemberType_ + 5) | 0;
    $0 = HEAP8[$RHSComponentCache >> 0] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      13,
      $0,
      1,
      1
    );
    HEAP32[$this >> 2] = 5572;
    $ClassType = ($this + 8) | 0;
    HEAP32[$ClassType >> 2] = $ClassType_;
    $MemberType = ($this + 12) | 0;
    HEAP32[$MemberType >> 2] = $MemberType_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType19hasRHSComponentSlowERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $MemberType = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $MemberType = ($this + 12) | 0;
    $0 = HEAP32[$MemberType >> 2] | 0;
    $call =
      __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE(
        $0,
        $S
      ) | 0;
    return $call | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType9printLeftERNS_12OutputStreamE(
    $this,
    $s
  ) {
    $this = $this | 0;
    $s = $s | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $ClassType = 0,
      $MemberType = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp6 = 0,
      $agg$tmp6$byval_copy = 0,
      $agg$tmp8 = 0,
      $agg$tmp8$byval_copy = 0,
      $call = 0,
      $call4 = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 48) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
    $agg$tmp8$byval_copy = (sp + 40) | 0;
    $agg$tmp6$byval_copy = (sp + 32) | 0;
    $agg$tmp$byval_copy = (sp + 24) | 0;
    $agg$tmp = (sp + 16) | 0;
    $agg$tmp6 = (sp + 8) | 0;
    $agg$tmp8 = sp;
    $MemberType = ($this + 12) | 0;
    $0 = HEAP32[$MemberType >> 2] | 0;
    $vtable = HEAP32[$0 >> 2] | 0;
    $vfn = ($vtable + 16) | 0;
    $1 = HEAP32[$vfn >> 2] | 0;
    FUNCTION_TABLE_vii[$1 & 511]($0, $s);
    $2 = HEAP32[$MemberType >> 2] | 0;
    $call =
      __ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(
        $2,
        $s
      ) | 0;
    if ($call) {
      label = 3;
    } else {
      $3 = HEAP32[$MemberType >> 2] | 0;
      $call4 =
        __ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE(
          $3,
          $s
        ) | 0;
      if ($call4) {
        label = 3;
      } else {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 11117);
        HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2] | 0;
        HEAP32[($agg$tmp6$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp6 + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $s,
          $agg$tmp6$byval_copy
        );
      }
    }
    if ((label | 0) == 3) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11119);
      HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
      HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $s,
        $agg$tmp$byval_copy
      );
    }
    $ClassType = ($this + 8) | 0;
    $4 = HEAP32[$ClassType >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $4,
      $s
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8, 15032);
    HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2] | 0;
    HEAP32[($agg$tmp8$byval_copy + 4) >> 2] = HEAP32[($agg$tmp8 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $s,
      $agg$tmp8$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType10printRightERNS_12OutputStreamE(
    $this,
    $s
  ) {
    $this = $this | 0;
    $s = $s | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $MemberType = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      $call3 = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $MemberType = ($this + 12) | 0;
    $0 = HEAP32[$MemberType >> 2] | 0;
    $call =
      __ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(
        $0,
        $s
      ) | 0;
    if ($call) {
      label = 3;
    } else {
      $1 = HEAP32[$MemberType >> 2] | 0;
      $call3 =
        __ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE(
          $1,
          $s
        ) | 0;
      if ($call3) {
        label = 3;
      }
    }
    if ((label | 0) == 3) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11115);
      HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
      HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $s,
        $agg$tmp$byval_copy
      );
    }
    $2 = HEAP32[$MemberType >> 2] | 0;
    $vtable = HEAP32[$2 >> 2] | 0;
    $vfn = ($vtable + 20) | 0;
    $3 = HEAP32[$vfn >> 2] | 0;
    FUNCTION_TABLE_vii[$3 & 511]($2, $s);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle19PointerToMemberTypeD0Ev(
    $this
  ) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2Ev($this) {
    $this = $this | 0;
    var $Second = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    HEAP32[$this >> 2] = 0;
    $Second = ($this + 4) | 0;
    HEAP32[$Second >> 2] = 0;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE(
    $this,
    $Str
  ) {
    $this = $this | 0;
    $Str = $Str | 0;
    var $FirstChar$0 = 0,
      $Second = 0,
      $SecondChar$0 = 0,
      $call = 0,
      $call2 = 0,
      $cmp = 0,
      $incdec$ptr = 0,
      $incdec$ptr3 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZNK12_GLOBAL__N_110StringView5beginEv($Str) | 0;
    $call2 = __ZNK12_GLOBAL__N_110StringView3endEv($Str) | 0;
    $cmp = ($call2 | 0) == (0 | 0);
    $incdec$ptr = ($call + 1) | 0;
    $incdec$ptr3 = ($call2 + 1) | 0;
    $FirstChar$0 = $cmp ? $incdec$ptr : $call;
    $SecondChar$0 = $cmp ? $incdec$ptr3 : $call2;
    HEAP32[$this >> 2] = $FirstChar$0;
    $Second = ($this + 4) | 0;
    HEAP32[$Second >> 2] = $SecondChar$0;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2EPNS0_4NodeE(
    $this,
    $N
  ) {
    $this = $this | 0;
    $N = $N | 0;
    var $Second = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    HEAP32[$this >> 2] = $N;
    $Second = ($this + 4) | 0;
    HEAP32[$Second >> 2] = 0;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9ArrayTypeEJRPNS0_4NodeERNS0_12NodeOrStringEEEES9_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9ArrayTypeEJRPNS2_4NodeERNS2_12NodeOrStringEEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9ArrayTypeEJRPNS2_4NodeERNS2_12NodeOrStringEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = $args1;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $agg$tmp;
    $8 = $7;
    HEAP32[$8 >> 2] = $3;
    $9 = ($7 + 4) | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $6;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle9ArrayTypeC2EPKNS0_4NodeENS0_12NodeOrStringE(
      $call,
      $0,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle9ArrayTypeC2EPKNS0_4NodeENS0_12NodeOrStringE(
    $this,
    $Base_,
    $Dimension_
  ) {
    $this = $this | 0;
    $Base_ = $Base_ | 0;
    $Dimension_ = $Dimension_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Base = 0,
      $Dimension = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      14,
      0,
      0,
      1
    );
    HEAP32[$this >> 2] = 5616;
    $Base = ($this + 8) | 0;
    HEAP32[$Base >> 2] = $Base_;
    $Dimension = ($this + 12) | 0;
    $0 = $Dimension_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Dimension;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle9ArrayType19hasRHSComponentSlowERNS_12OutputStreamE(
    $this,
    $0
  ) {
    $this = $this | 0;
    $0 = $0 | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 1;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle9ArrayType12hasArraySlowERNS_12OutputStreamE(
    $this,
    $0
  ) {
    $this = $this | 0;
    $0 = $0 | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 1;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle9ArrayType9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $Base = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Base = ($this + 8) | 0;
    $0 = HEAP32[$Base >> 2] | 0;
    $vtable = HEAP32[$0 >> 2] | 0;
    $vfn = ($vtable + 16) | 0;
    $1 = HEAP32[$vfn >> 2] | 0;
    FUNCTION_TABLE_vii[$1 & 511]($0, $S);
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle9ArrayType10printRightERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $Base = 0,
      $Dimension = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp17 = 0,
      $agg$tmp17$byval_copy = 0,
      $agg$tmp3 = 0,
      $agg$tmp3$byval_copy = 0,
      $agg$tmp7 = 0,
      $agg$tmp7$byval_copy = 0,
      $call = 0,
      $call11 = 0,
      $call14 = 0,
      $call5 = 0,
      $cmp = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0;
    var sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 64) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
    $agg$tmp17$byval_copy = (sp + 56) | 0;
    $agg$tmp7$byval_copy = (sp + 48) | 0;
    $agg$tmp3$byval_copy = (sp + 40) | 0;
    $agg$tmp$byval_copy = (sp + 32) | 0;
    $agg$tmp = (sp + 24) | 0;
    $agg$tmp3 = (sp + 16) | 0;
    $agg$tmp7 = (sp + 8) | 0;
    $agg$tmp17 = sp;
    $call = __ZNK12_GLOBAL__N_112OutputStream4backEv($S) | 0;
    $cmp = ($call << 24) >> 24 == 93;
    if (!$cmp) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11117);
      HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
      HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp$byval_copy
      );
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3, 15092);
    HEAP32[$agg$tmp3$byval_copy >> 2] = HEAP32[$agg$tmp3 >> 2] | 0;
    HEAP32[($agg$tmp3$byval_copy + 4) >> 2] = HEAP32[($agg$tmp3 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp3$byval_copy
    );
    $Dimension = ($this + 12) | 0;
    $call5 =
      __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8isStringEv(
        $Dimension
      ) | 0;
    if ($call5) {
      __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8asStringEv(
        $agg$tmp7,
        $Dimension
      );
      HEAP32[$agg$tmp7$byval_copy >> 2] = HEAP32[$agg$tmp7 >> 2] | 0;
      HEAP32[($agg$tmp7$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp7 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp7$byval_copy
      );
    } else {
      $call11 =
        __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6isNodeEv(
          $Dimension
        ) | 0;
      if ($call11) {
        $call14 =
          __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6asNodeEv(
            $Dimension
          ) | 0;
        __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
          $call14,
          $S
        );
      }
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp17, 10753);
    HEAP32[$agg$tmp17$byval_copy >> 2] = HEAP32[$agg$tmp17 >> 2] | 0;
    HEAP32[($agg$tmp17$byval_copy + 4) >> 2] =
      HEAP32[($agg$tmp17 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp17$byval_copy
    );
    $Base = ($this + 8) | 0;
    $0 = HEAP32[$Base >> 2] | 0;
    $vtable = HEAP32[$0 >> 2] | 0;
    $vfn = ($vtable + 20) | 0;
    $1 = HEAP32[$vfn >> 2] | 0;
    FUNCTION_TABLE_vii[$1 & 511]($0, $S);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle9ArrayTypeD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8isStringEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $Second = 0,
      $tobool = 0,
      $tobool2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Second = ($this + 4) | 0;
    $0 = HEAP32[$Second >> 2] | 0;
    $tobool = ($0 | 0) == (0 | 0);
    if ($tobool) {
      $2 = 0;
    } else {
      $1 = HEAP32[$this >> 2] | 0;
      $tobool2 = ($1 | 0) != (0 | 0);
      $2 = $tobool2;
    }
    return $2 | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8asStringEv(
    $agg$result,
    $this
  ) {
    $agg$result = $agg$result | 0;
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $Second = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$this >> 2] | 0;
    $Second = ($this + 4) | 0;
    $1 = HEAP32[$Second >> 2] | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$result, $0, $1);
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6isNodeEv($this) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $Second = 0,
      $tobool = 0,
      $tobool2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$this >> 2] | 0;
    $tobool = ($0 | 0) == (0 | 0);
    if ($tobool) {
      $2 = 0;
    } else {
      $Second = ($this + 4) | 0;
      $1 = HEAP32[$Second >> 2] | 0;
      $tobool2 = ($1 | 0) == (0 | 0);
      $2 = $tobool2;
    }
    return $2 | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6asNodeEv($this) {
    $this = $this | 0;
    var $0 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$this >> 2] | 0;
    return $0 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ParameterPackExpansionEJRPNS2_4NodeEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionC2EPKNS0_4NodeE(
      $call,
      $0
    );
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15PixelVectorTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15PixelVectorTypeEJRNS_10StringViewEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeESA_EEES9_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeES6_EEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeENS_10StringViewEEEES9_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeENS_10StringViewEEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeENS_10StringViewEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp5 = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $agg$tmp$byval_copy = (sp + 24) | 0;
    $tmpcast$byval_copy = (sp + 16) | 0;
    $agg$tmp = (sp + 8) | 0;
    $agg$tmp5 = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = $args1;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $agg$tmp5;
    $8 = $7;
    HEAP32[$8 >> 2] = $3;
    $9 = ($7 + 4) | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $6;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp5 >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp5 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE(
      $agg$tmp,
      $tmpcast$byval_copy
    );
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeC2EPKNS0_4NodeENS0_12NodeOrStringE(
      $call,
      $0,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeC2EPKNS0_4NodeENS0_12NodeOrStringE(
    $this,
    $BaseType_,
    $Dimension_
  ) {
    $this = $this | 0;
    $BaseType_ = $BaseType_ | 0;
    $Dimension_ = $Dimension_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $BaseType = 0,
      $Dimension = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      25,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 5660;
    $BaseType = ($this + 8) | 0;
    HEAP32[$BaseType >> 2] = $BaseType_;
    $Dimension = ($this + 12) | 0;
    $0 = $Dimension_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Dimension;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle10VectorType9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $BaseType = 0,
      $Dimension = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp12 = 0,
      $agg$tmp12$byval_copy = 0,
      $agg$tmp8 = 0,
      $agg$tmp8$byval_copy = 0,
      $call2 = 0,
      $call4 = 0,
      $call6 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 48) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
    $agg$tmp12$byval_copy = (sp + 40) | 0;
    $agg$tmp8$byval_copy = (sp + 32) | 0;
    $agg$tmp$byval_copy = (sp + 24) | 0;
    $agg$tmp = (sp + 16) | 0;
    $agg$tmp8 = (sp + 8) | 0;
    $agg$tmp12 = sp;
    $BaseType = ($this + 8) | 0;
    $0 = HEAP32[$BaseType >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 15142);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Dimension = ($this + 12) | 0;
    $call2 =
      __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6isNodeEv($Dimension) |
      0;
    if ($call2) {
      $call4 =
        __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6asNodeEv(
          $Dimension
        ) | 0;
      __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
        $call4,
        $S
      );
    } else {
      $call6 =
        __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8isStringEv(
          $Dimension
        ) | 0;
      if ($call6) {
        __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8asStringEv(
          $agg$tmp8,
          $Dimension
        );
        HEAP32[$agg$tmp8$byval_copy >> 2] = HEAP32[$agg$tmp8 >> 2] | 0;
        HEAP32[($agg$tmp8$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp8 + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $S,
          $agg$tmp8$byval_copy
        );
      }
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12, 10753);
    HEAP32[$agg$tmp12$byval_copy >> 2] = HEAP32[$agg$tmp12 >> 2] | 0;
    HEAP32[($agg$tmp12$byval_copy + 4) >> 2] =
      HEAP32[($agg$tmp12 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp12$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeES6_EEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = HEAP32[$args1 >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2EPNS0_4NodeE(
      $agg$tmp,
      $1
    );
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeC2EPKNS0_4NodeENS0_12NodeOrStringE(
      $call,
      $0,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp5 = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $agg$tmp$byval_copy = (sp + 24) | 0;
    $tmpcast$byval_copy = (sp + 16) | 0;
    $agg$tmp = (sp + 8) | 0;
    $agg$tmp5 = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = $args1;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $agg$tmp5;
    $8 = $7;
    HEAP32[$8 >> 2] = $3;
    $9 = ($7 + 4) | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $6;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp5 >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp5 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE(
      $agg$tmp,
      $tmpcast$byval_copy
    );
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeC2EPKNS0_4NodeENS0_12NodeOrStringE(
      $call,
      $0,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15PixelVectorTypeEJRNS_10StringViewEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp2 = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $agg$tmp$byval_copy = (sp + 24) | 0;
    $tmpcast$byval_copy = (sp + 16) | 0;
    $agg$tmp = (sp + 8) | 0;
    $agg$tmp2 = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    $0 = $args;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp2;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE(
      $agg$tmp,
      $tmpcast$byval_copy
    );
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle15PixelVectorTypeC2ENS0_12NodeOrStringE(
      $call,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle15PixelVectorTypeC2ENS0_12NodeOrStringE(
    $this,
    $Dimension_
  ) {
    $this = $this | 0;
    $Dimension_ = $Dimension_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Dimension = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      26,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 5704;
    $Dimension = ($this + 8) | 0;
    $0 = $Dimension_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Dimension;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle15PixelVectorType9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $Dimension = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp2 = 0,
      $agg$tmp2$byval_copy = 0,
      $agg$tmp4 = 0,
      $agg$tmp4$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 48) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
    $agg$tmp4$byval_copy = (sp + 40) | 0;
    $agg$tmp2$byval_copy = (sp + 32) | 0;
    $agg$tmp$byval_copy = (sp + 24) | 0;
    $agg$tmp = (sp + 16) | 0;
    $agg$tmp2 = (sp + 8) | 0;
    $agg$tmp4 = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 15198);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Dimension = ($this + 8) | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8asStringEv(
      $agg$tmp2,
      $Dimension
    );
    HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($agg$tmp2$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp2$byval_copy
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 10753);
    HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2] | 0;
    HEAP32[($agg$tmp4$byval_copy + 4) >> 2] = HEAP32[($agg$tmp4 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp4$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle15PixelVectorTypeD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRNS_10StringViewEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    $0 = $args;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE(
      $call,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA11_KcEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE(
      $call,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA7_KcEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE(
      $call,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA18_KcEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE(
      $call,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA9_KcEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE(
      $call,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA19_KcEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE(
      $call,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA10_KcEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE(
      $call,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA13_KcEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE(
      $call,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA4_KcEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE(
      $call,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA15_KcEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE(
      $call,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA6_KcEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE(
      $call,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA14_KcEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE(
      $call,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA12_KcEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE(
      $call,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA8_KcEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE(
      $call,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA5_KcEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE(
      $call,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_114SwapAndRestoreIPKcEC2ERS2_S2_(
    $this,
    $Restore_,
    $NewVal
  ) {
    $this = $this | 0;
    $Restore_ = $Restore_ | 0;
    $NewVal = $NewVal | 0;
    var $0 = 0,
      $1 = 0,
      $OriginalValue = 0,
      $ShouldRestore = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = $NewVal;
    HEAP32[$this >> 2] = $Restore_;
    $OriginalValue = ($this + 4) | 0;
    $1 = HEAP32[$Restore_ >> 2] | 0;
    HEAP32[$OriginalValue >> 2] = $1;
    $ShouldRestore = ($this + 8) | 0;
    HEAP8[$ShouldRestore >> 0] = 1;
    HEAP32[$Restore_ >> 2] = $0;
    return;
  }
  function __ZN12_GLOBAL__N_114SwapAndRestoreIPKcED2Ev($this) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $OriginalValue = 0,
      $ShouldRestore = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ShouldRestore = ($this + 8) | 0;
    $0 = HEAP8[$ShouldRestore >> 0] | 0;
    $tobool = ($0 << 24) >> 24 == 0;
    if (!$tobool) {
      $OriginalValue = ($this + 4) | 0;
      $1 = HEAP32[$OriginalValue >> 2] | 0;
      $2 = HEAP32[$this >> 2] | 0;
      HEAP32[$2 >> 2] = $1;
    }
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ObjCProtoNameEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ObjCProtoNameEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_17VendorExtQualTypeEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle17VendorExtQualTypeEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8QualTypeEJRPNS0_4NodeERNS0_10QualifiersEEEES9_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8QualTypeEJRPNS2_4NodeERNS2_10QualifiersEEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8QualTypeEJRPNS2_4NodeERNS2_10QualifiersEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = HEAP32[$args1 >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle8QualTypeC2EPKNS0_4NodeENS0_10QualifiersE(
      $call,
      $0,
      $1
    );
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle8QualTypeC2EPKNS0_4NodeENS0_10QualifiersE(
    $this,
    $Child_,
    $Quals_
  ) {
    $this = $this | 0;
    $Child_ = $Child_ | 0;
    $Quals_ = $Quals_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $ArrayCache = 0,
      $Child = 0,
      $FunctionCache = 0,
      $Quals = 0,
      $RHSComponentCache = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $RHSComponentCache = ($Child_ + 5) | 0;
    $0 = HEAP8[$RHSComponentCache >> 0] | 0;
    $ArrayCache = ($Child_ + 6) | 0;
    $1 = HEAP8[$ArrayCache >> 0] | 0;
    $FunctionCache = ($Child_ + 7) | 0;
    $2 = HEAP8[$FunctionCache >> 0] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      3,
      $0,
      $1,
      $2
    );
    HEAP32[$this >> 2] = 5748;
    $Quals = ($this + 8) | 0;
    HEAP32[$Quals >> 2] = $Quals_;
    $Child = ($this + 12) | 0;
    HEAP32[$Child >> 2] = $Child_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle8QualType19hasRHSComponentSlowERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $Child = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Child = ($this + 12) | 0;
    $0 = HEAP32[$Child >> 2] | 0;
    $call =
      __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE(
        $0,
        $S
      ) | 0;
    return $call | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle8QualType12hasArraySlowERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $Child = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Child = ($this + 12) | 0;
    $0 = HEAP32[$Child >> 2] | 0;
    $call =
      __ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE(
        $0,
        $S
      ) | 0;
    return $call | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle8QualType15hasFunctionSlowERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $Child = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Child = ($this + 12) | 0;
    $0 = HEAP32[$Child >> 2] | 0;
    $call =
      __ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE(
        $0,
        $S
      ) | 0;
    return $call | 0;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle8QualType9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $Child = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Child = ($this + 12) | 0;
    $0 = HEAP32[$Child >> 2] | 0;
    $vtable = HEAP32[$0 >> 2] | 0;
    $vfn = ($vtable + 16) | 0;
    $1 = HEAP32[$vfn >> 2] | 0;
    FUNCTION_TABLE_vii[$1 & 511]($0, $S);
    __ZNK12_GLOBAL__N_116itanium_demangle8QualType10printQualsERNS_12OutputStreamE(
      $this,
      $S
    );
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle8QualType10printRightERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $Child = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $Child = ($this + 12) | 0;
    $0 = HEAP32[$Child >> 2] | 0;
    $vtable = HEAP32[$0 >> 2] | 0;
    $vfn = ($vtable + 20) | 0;
    $1 = HEAP32[$vfn >> 2] | 0;
    FUNCTION_TABLE_vii[$1 & 511]($0, $S);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle8QualTypeD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle8QualType10printQualsERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $$pre = 0,
      $$pre3 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $Quals = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp13 = 0,
      $agg$tmp13$byval_copy = 0,
      $agg$tmp6 = 0,
      $agg$tmp6$byval_copy = 0,
      $and = 0,
      $and10 = 0,
      $and3 = 0,
      $tobool = 0,
      $tobool11 = 0,
      $tobool4 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 48) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
    $agg$tmp13$byval_copy = (sp + 40) | 0;
    $agg$tmp6$byval_copy = (sp + 32) | 0;
    $agg$tmp$byval_copy = (sp + 24) | 0;
    $agg$tmp = (sp + 16) | 0;
    $agg$tmp6 = (sp + 8) | 0;
    $agg$tmp13 = sp;
    $Quals = ($this + 8) | 0;
    $0 = HEAP32[$Quals >> 2] | 0;
    $and = $0 & 1;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      $1 = $0;
    } else {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 15310);
      HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
      HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp$byval_copy
      );
      $$pre = HEAP32[$Quals >> 2] | 0;
      $1 = $$pre;
    }
    $and3 = $1 & 2;
    $tobool4 = ($and3 | 0) == 0;
    if ($tobool4) {
      $2 = $1;
    } else {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6, 15317);
      HEAP32[$agg$tmp6$byval_copy >> 2] = HEAP32[$agg$tmp6 >> 2] | 0;
      HEAP32[($agg$tmp6$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp6 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp6$byval_copy
      );
      $$pre3 = HEAP32[$Quals >> 2] | 0;
      $2 = $$pre3;
    }
    $and10 = $2 & 4;
    $tobool11 = ($and10 | 0) == 0;
    if (!$tobool11) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp13, 15327);
      HEAP32[$agg$tmp13$byval_copy >> 2] = HEAP32[$agg$tmp13 >> 2] | 0;
      HEAP32[($agg$tmp13$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp13 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp13$byval_copy
      );
    }
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle17VendorExtQualTypeEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = $args1;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $agg$tmp;
    $8 = $7;
    HEAP32[$8 >> 2] = $3;
    $9 = ($7 + 4) | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $6;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle17VendorExtQualTypeC2EPKNS0_4NodeENS_10StringViewE(
      $call,
      $0,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle17VendorExtQualTypeC2EPKNS0_4NodeENS_10StringViewE(
    $this,
    $Ty_,
    $Ext_
  ) {
    $this = $this | 0;
    $Ty_ = $Ty_ | 0;
    $Ext_ = $Ext_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Ext = 0,
      $Ty = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      2,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 5792;
    $Ty = ($this + 8) | 0;
    HEAP32[$Ty >> 2] = $Ty_;
    $Ext = ($this + 12) | 0;
    $0 = $Ext_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Ext;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle17VendorExtQualType9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Ext = 0,
      $Ty = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp2 = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $tmpcast$byval_copy = (sp + 24) | 0;
    $agg$tmp$byval_copy = (sp + 16) | 0;
    $agg$tmp = (sp + 8) | 0;
    $agg$tmp2 = sp;
    $Ty = ($this + 8) | 0;
    $0 = HEAP32[$Ty >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11117);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Ext = ($this + 12) | 0;
    $1 = $Ext;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $agg$tmp2;
    $8 = $7;
    HEAP32[$8 >> 2] = $3;
    $9 = ($7 + 4) | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $6;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle17VendorExtQualTypeD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ObjCProtoNameEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = $args1;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $agg$tmp;
    $8 = $7;
    HEAP32[$8 >> 2] = $3;
    $9 = ($7 + 4) | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $6;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle13ObjCProtoNameC2EPKNS0_4NodeENS_10StringViewE(
      $call,
      $0,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle13ObjCProtoNameC2EPKNS0_4NodeENS_10StringViewE(
    $this,
    $Ty_,
    $Protocol_
  ) {
    $this = $this | 0;
    $Ty_ = $Ty_ | 0;
    $Protocol_ = $Protocol_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Protocol = 0,
      $Ty = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      10,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 5836;
    $Ty = ($this + 8) | 0;
    HEAP32[$Ty >> 2] = $Ty_;
    $Protocol = ($this + 12) | 0;
    $0 = $Protocol_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Protocol;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Protocol = 0,
      $Ty = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp2 = 0,
      $agg$tmp4 = 0,
      $agg$tmp4$byval_copy = 0,
      $tmpcast$byval_copy = 0,
      label = 0;
    var sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 48) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
    $agg$tmp4$byval_copy = (sp + 40) | 0;
    $tmpcast$byval_copy = (sp + 32) | 0;
    $agg$tmp$byval_copy = (sp + 24) | 0;
    $agg$tmp = (sp + 16) | 0;
    $agg$tmp2 = sp;
    $agg$tmp4 = (sp + 8) | 0;
    $Ty = ($this + 8) | 0;
    $0 = HEAP32[$Ty >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11301);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Protocol = ($this + 12) | 0;
    $1 = $Protocol;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $agg$tmp2;
    $8 = $7;
    HEAP32[$8 >> 2] = $3;
    $9 = ($7 + 4) | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $6;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $tmpcast$byval_copy
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 11194);
    HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2] | 0;
    HEAP32[($agg$tmp4$byval_copy + 4) >> 2] = HEAP32[($agg$tmp4 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp4$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle13ObjCProtoNameD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12NoexceptSpecEJRPNS0_4NodeEEEES9_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12NoexceptSpecEJRPNS2_4NodeEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20DynamicExceptionSpecEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20DynamicExceptionSpecEJNS2_9NodeArrayEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12FunctionTypeEJRPNS0_4NodeERNS0_9NodeArrayERNS0_10QualifiersERNS0_15FunctionRefQualESA_EEES9_DpOT0_(
    $this,
    $args,
    $args1,
    $args3,
    $args5,
    $args7
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    $args5 = $args5 | 0;
    $args7 = $args7 | 0;
    var $ASTAllocator = 0,
      $call14 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call14 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12FunctionTypeEJRPNS2_4NodeERNS2_9NodeArrayERNS2_10QualifiersERNS2_15FunctionRefQualES6_EEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1,
        $args3,
        $args5,
        $args7
      ) | 0;
    return $call14 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12FunctionTypeEJRPNS2_4NodeERNS2_9NodeArrayERNS2_10QualifiersERNS2_15FunctionRefQualES6_EEEPT_DpOT0_(
    $this,
    $args,
    $args1,
    $args3,
    $args5,
    $args7
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    $args5 = $args5 | 0;
    $args7 = $args7 | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 32) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = $args1;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $agg$tmp;
    $8 = $7;
    HEAP32[$8 >> 2] = $3;
    $9 = ($7 + 4) | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $6;
    $11 = HEAP32[$args3 >> 2] | 0;
    $12 = HEAP8[$args5 >> 0] | 0;
    $13 = HEAP32[$args7 >> 2] | 0;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle12FunctionTypeC2EPKNS0_4NodeENS0_9NodeArrayENS0_10QualifiersENS0_15FunctionRefQualES4_(
      $call,
      $0,
      $tmpcast$byval_copy,
      $11,
      $12,
      $13
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle12FunctionTypeC2EPKNS0_4NodeENS0_9NodeArrayENS0_10QualifiersENS0_15FunctionRefQualES4_(
    $this,
    $Ret_,
    $Params_,
    $CVQuals_,
    $RefQual_,
    $ExceptionSpec_
  ) {
    $this = $this | 0;
    $Ret_ = $Ret_ | 0;
    $Params_ = $Params_ | 0;
    $CVQuals_ = $CVQuals_ | 0;
    $RefQual_ = $RefQual_ | 0;
    $ExceptionSpec_ = $ExceptionSpec_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $CVQuals = 0,
      $ExceptionSpec = 0,
      $Params = 0,
      $RefQual = 0,
      $Ret = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      15,
      0,
      1,
      0
    );
    HEAP32[$this >> 2] = 5880;
    $Ret = ($this + 8) | 0;
    HEAP32[$Ret >> 2] = $Ret_;
    $Params = ($this + 12) | 0;
    $0 = $Params_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Params;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    $CVQuals = ($this + 20) | 0;
    HEAP32[$CVQuals >> 2] = $CVQuals_;
    $RefQual = ($this + 24) | 0;
    HEAP8[$RefQual >> 0] = $RefQual_;
    $ExceptionSpec = ($this + 28) | 0;
    HEAP32[$ExceptionSpec >> 2] = $ExceptionSpec_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle12FunctionType19hasRHSComponentSlowERNS_12OutputStreamE(
    $this,
    $0
  ) {
    $this = $this | 0;
    $0 = $0 | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 1;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle12FunctionType15hasFunctionSlowERNS_12OutputStreamE(
    $this,
    $0
  ) {
    $this = $this | 0;
    $0 = $0 | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 1;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle12FunctionType9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $Ret = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $Ret = ($this + 8) | 0;
    $0 = HEAP32[$Ret >> 2] | 0;
    $vtable = HEAP32[$0 >> 2] | 0;
    $vfn = ($vtable + 16) | 0;
    $1 = HEAP32[$vfn >> 2] | 0;
    FUNCTION_TABLE_vii[$1 & 511]($0, $S);
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11117);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle12FunctionType10printRightERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $$pre = 0,
      $$pre11 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $CVQuals = 0,
      $ExceptionSpec = 0,
      $Params = 0,
      $RefQual = 0,
      $Ret = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp10 = 0,
      $agg$tmp10$byval_copy = 0,
      $agg$tmp17 = 0;
    var $agg$tmp17$byval_copy = 0,
      $agg$tmp2 = 0,
      $agg$tmp2$byval_copy = 0,
      $agg$tmp21 = 0,
      $agg$tmp21$byval_copy = 0,
      $agg$tmp27 = 0,
      $agg$tmp27$byval_copy = 0,
      $agg$tmp4 = 0,
      $agg$tmp4$byval_copy = 0,
      $and = 0,
      $and14 = 0,
      $and7 = 0,
      $cmp31 = 0,
      $tobool = 0,
      $tobool15 = 0,
      $tobool8 = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 112) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112 | 0);
    $agg$tmp27$byval_copy = (sp + 104) | 0;
    $agg$tmp21$byval_copy = (sp + 96) | 0;
    $agg$tmp17$byval_copy = (sp + 88) | 0;
    $agg$tmp10$byval_copy = (sp + 80) | 0;
    $agg$tmp4$byval_copy = (sp + 72) | 0;
    $agg$tmp2$byval_copy = (sp + 64) | 0;
    $agg$tmp$byval_copy = (sp + 56) | 0;
    $agg$tmp = (sp + 48) | 0;
    $agg$tmp2 = (sp + 40) | 0;
    $agg$tmp4 = (sp + 32) | 0;
    $agg$tmp10 = (sp + 24) | 0;
    $agg$tmp17 = (sp + 16) | 0;
    $agg$tmp21 = (sp + 8) | 0;
    $agg$tmp27 = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11119);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Params = ($this + 12) | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE(
      $Params,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 11115);
    HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($agg$tmp2$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp2$byval_copy
    );
    $Ret = ($this + 8) | 0;
    $0 = HEAP32[$Ret >> 2] | 0;
    $vtable = HEAP32[$0 >> 2] | 0;
    $vfn = ($vtable + 20) | 0;
    $1 = HEAP32[$vfn >> 2] | 0;
    FUNCTION_TABLE_vii[$1 & 511]($0, $S);
    $CVQuals = ($this + 20) | 0;
    $2 = HEAP32[$CVQuals >> 2] | 0;
    $and = $2 & 1;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      $3 = $2;
    } else {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 15310);
      HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2] | 0;
      HEAP32[($agg$tmp4$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp4 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp4$byval_copy
      );
      $$pre = HEAP32[$CVQuals >> 2] | 0;
      $3 = $$pre;
    }
    $and7 = $3 & 2;
    $tobool8 = ($and7 | 0) == 0;
    if ($tobool8) {
      $4 = $3;
    } else {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp10, 15317);
      HEAP32[$agg$tmp10$byval_copy >> 2] = HEAP32[$agg$tmp10 >> 2] | 0;
      HEAP32[($agg$tmp10$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp10 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp10$byval_copy
      );
      $$pre11 = HEAP32[$CVQuals >> 2] | 0;
      $4 = $$pre11;
    }
    $and14 = $4 & 4;
    $tobool15 = ($and14 | 0) == 0;
    if (!$tobool15) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp17, 15327);
      HEAP32[$agg$tmp17$byval_copy >> 2] = HEAP32[$agg$tmp17 >> 2] | 0;
      HEAP32[($agg$tmp17$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp17 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp17$byval_copy
      );
    }
    $RefQual = ($this + 24) | 0;
    $5 = HEAP8[$RefQual >> 0] | 0;
    switch (($5 << 24) >> 24) {
      case 1: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp21, 15512);
        HEAP32[$agg$tmp21$byval_copy >> 2] = HEAP32[$agg$tmp21 >> 2] | 0;
        HEAP32[($agg$tmp21$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp21 + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $S,
          $agg$tmp21$byval_copy
        );
        break;
      }
      case 2: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp27, 15515);
        HEAP32[$agg$tmp27$byval_copy >> 2] = HEAP32[$agg$tmp27 >> 2] | 0;
        HEAP32[($agg$tmp27$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp27 + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $S,
          $agg$tmp27$byval_copy
        );
        break;
      }
      default: {
      }
    }
    $ExceptionSpec = ($this + 28) | 0;
    $6 = HEAP32[$ExceptionSpec >> 2] | 0;
    $cmp31 = ($6 | 0) == (0 | 0);
    if (!$cmp31) {
      __ZN12_GLOBAL__N_112OutputStreampLEc($S, 32);
      $7 = HEAP32[$ExceptionSpec >> 2] | 0;
      __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
        $7,
        $S
      );
    }
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle12FunctionTypeD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20DynamicExceptionSpecEJNS2_9NodeArrayEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    $0 = $args;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpecC2ENS0_9NodeArrayE(
      $call,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpecC2ENS0_9NodeArrayE(
    $this,
    $Types_
  ) {
    $this = $this | 0;
    $Types_ = $Types_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Types = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      17,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 5924;
    $Types = ($this + 8) | 0;
    $0 = $Types_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Types;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpec9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $Types = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 15568);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Types = ($this + 8) | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE(
      $Types,
      $S
    );
    __ZN12_GLOBAL__N_112OutputStreampLEc($S, 41);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpecD0Ev(
    $this
  ) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12NoexceptSpecEJRPNS2_4NodeEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 12) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle12NoexceptSpecC2EPKNS0_4NodeE(
      $call,
      $0
    );
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle12NoexceptSpecC2EPKNS0_4NodeE(
    $this,
    $E_
  ) {
    $this = $this | 0;
    $E_ = $E_ | 0;
    var $E = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      16,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 5968;
    $E = ($this + 8) | 0;
    HEAP32[$E >> 2] = $E_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle12NoexceptSpec9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $E = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp2 = 0,
      $agg$tmp2$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $agg$tmp2$byval_copy = (sp + 24) | 0;
    $agg$tmp$byval_copy = (sp + 16) | 0;
    $agg$tmp = (sp + 8) | 0;
    $agg$tmp2 = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 15632);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $E = ($this + 8) | 0;
    $0 = HEAP32[$E >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 11115);
    HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($agg$tmp2$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp2$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle12NoexceptSpecD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA34_KcRPNS2_4NodeEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    $0 = HEAP32[$args1 >> 2] | 0;
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE(
      $call,
      $agg$tmp$byval_copy,
      $0
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE(
    $this,
    $Special_,
    $Child_
  ) {
    $this = $this | 0;
    $Special_ = $Special_ | 0;
    $Child_ = $Child_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Child = 0,
      $Special = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      20,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 6012;
    $Special = ($this + 8) | 0;
    $0 = $Special_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Special;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    $Child = ($this + 16) | 0;
    HEAP32[$Child >> 2] = $Child_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle11SpecialName9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Child = 0,
      $Special = 0,
      $agg$tmp = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $Special = ($this + 8) | 0;
    $0 = $Special;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $tmpcast$byval_copy
    );
    $Child = ($this + 16) | 0;
    $10 = HEAP32[$Child >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $10,
      $S
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9DotSuffixEJRPNS2_4NodeENS_10StringViewEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = $args1;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $agg$tmp;
    $8 = $7;
    HEAP32[$8 >> 2] = $3;
    $9 = ($7 + 4) | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $6;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle9DotSuffixC2EPKNS0_4NodeENS_10StringViewE(
      $call,
      $0,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle9DotSuffixC2EPKNS0_4NodeENS_10StringViewE(
    $this,
    $Prefix_,
    $Suffix_
  ) {
    $this = $this | 0;
    $Prefix_ = $Prefix_ | 0;
    $Suffix_ = $Suffix_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Prefix = 0,
      $Suffix = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      1,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 6056;
    $Prefix = ($this + 8) | 0;
    HEAP32[$Prefix >> 2] = $Prefix_;
    $Suffix = ($this + 12) | 0;
    $0 = $Suffix_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Suffix;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle9DotSuffix9printLeftERNS_12OutputStreamE(
    $this,
    $s
  ) {
    $this = $this | 0;
    $s = $s | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Prefix = 0,
      $Suffix = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp2 = 0,
      $agg$tmp4 = 0,
      $agg$tmp4$byval_copy = 0,
      $tmpcast$byval_copy = 0,
      label = 0;
    var sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 48) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
    $agg$tmp4$byval_copy = (sp + 40) | 0;
    $tmpcast$byval_copy = (sp + 32) | 0;
    $agg$tmp$byval_copy = (sp + 24) | 0;
    $agg$tmp = (sp + 16) | 0;
    $agg$tmp2 = sp;
    $agg$tmp4 = (sp + 8) | 0;
    $Prefix = ($this + 8) | 0;
    $0 = HEAP32[$Prefix >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $s
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 13881);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $s,
      $agg$tmp$byval_copy
    );
    $Suffix = ($this + 12) | 0;
    $1 = $Suffix;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($1 + 4) | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $agg$tmp2;
    $8 = $7;
    HEAP32[$8 >> 2] = $3;
    $9 = ($7 + 4) | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $6;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $s,
      $tmpcast$byval_copy
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4, 11115);
    HEAP32[$agg$tmp4$byval_copy >> 2] = HEAP32[$agg$tmp4 >> 2] | 0;
    HEAP32[($agg$tmp4$byval_copy + 4) >> 2] = HEAP32[($agg$tmp4 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $s,
      $agg$tmp4$byval_copy
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle9DotSuffixD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseSpecialNameEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $BaseEncoding = 0,
      $Count = 0,
      $Encoding = 0,
      $FirstType = 0,
      $Name = 0,
      $Name119 = 0,
      $Name130 = 0,
      $Name88 = 0,
      $SecondType = 0;
    var $Ty = 0,
      $Ty11 = 0,
      $Ty22 = 0,
      $Ty33 = 0,
      $add$ptr = 0,
      $add$ptr10 = 0,
      $add$ptr118 = 0,
      $add$ptr129 = 0,
      $add$ptr21 = 0,
      $add$ptr32 = 0,
      $add$ptr43 = 0,
      $add$ptr57 = 0,
      $add$ptr77 = 0,
      $add$ptr87 = 0,
      $brmerge = 0,
      $call = 0,
      $call100 = 0,
      $call103 = 0,
      $call104 = 0,
      $call109 = 0;
    var $call110 = 0,
      $call114 = 0,
      $call12 = 0,
      $call120 = 0,
      $call121 = 0,
      $call125 = 0,
      $call13 = 0,
      $call131 = 0,
      $call132 = 0,
      $call136 = 0,
      $call139 = 0,
      $call143 = 0,
      $call17 = 0,
      $call2 = 0,
      $call23 = 0,
      $call24 = 0,
      $call28 = 0,
      $call34 = 0,
      $call35 = 0,
      $call39 = 0;
    var $call44 = 0,
      $call45 = 0,
      $call48 = 0,
      $call49 = 0,
      $call5 = 0,
      $call53 = 0,
      $call58 = 0,
      $call59 = 0,
      $call6 = 0,
      $call63 = 0,
      $call64 = 0,
      $call68 = 0,
      $call7 = 0,
      $call72 = 0,
      $call78 = 0,
      $call79 = 0,
      $call83 = 0,
      $call89 = 0,
      $call90 = 0,
      $call94 = 0;
    var $call97 = 0,
      $cmp = 0,
      $cmp105 = 0,
      $cmp122 = 0,
      $cmp133 = 0,
      $cmp14 = 0,
      $cmp25 = 0,
      $cmp36 = 0,
      $cmp50 = 0,
      $cmp60 = 0,
      $cmp69 = 0,
      $cmp80 = 0,
      $cmp91 = 0,
      $cmp99 = 0,
      $conv = 0,
      $conv115 = 0,
      $conv3 = 0,
      $incdec$ptr = 0,
      $ref$tmp = 0,
      $retval$0 = 0;
    var $retval$1 = 0,
      $retval$11 = 0,
      $retval$12 = 0,
      $retval$13 = 0,
      $retval$14 = 0,
      $retval$2 = 0,
      $retval$3 = 0,
      $retval$4 = 0,
      $retval$5 = 0,
      $retval$6 = 0,
      $retval$7 = 0,
      $retval$8 = 0,
      $retval$9 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 64) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
    $Ty = (sp + 60) | 0;
    $Ty11 = (sp + 56) | 0;
    $Ty22 = (sp + 52) | 0;
    $Ty33 = (sp + 48) | 0;
    $Encoding = (sp + 44) | 0;
    $FirstType = (sp + 40) | 0;
    $ref$tmp = (sp + 32) | 0;
    $SecondType = (sp + 24) | 0;
    $Name = (sp + 20) | 0;
    $Name88 = (sp + 16) | 0;
    $BaseEncoding = (sp + 12) | 0;
    $Name119 = (sp + 8) | 0;
    $Name130 = (sp + 4) | 0;
    $Count = sp;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
        $this,
        0
      ) | 0;
    $conv = ($call << 24) >> 24;
    L1: do {
      switch ($conv | 0) {
        case 84: {
          $call2 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              1
            ) | 0;
          $conv3 = ($call2 << 24) >> 24;
          switch ($conv3 | 0) {
            case 86: {
              $0 = HEAP32[$this >> 2] | 0;
              $add$ptr = ($0 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr;
              $call5 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call6 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
                  $call5
                ) | 0;
              HEAP32[$Ty >> 2] = $call6;
              $cmp = ($call6 | 0) == (0 | 0);
              if ($cmp) {
                $retval$0 = 0;
              } else {
                $call7 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA12_KcRPNS0_4NodeEEEESC_DpOT0_(
                    $this,
                    $Ty
                  ) | 0;
                $retval$0 = $call7;
              }
              $retval$14 = $retval$0;
              break L1;
              break;
            }
            case 84: {
              $1 = HEAP32[$this >> 2] | 0;
              $add$ptr10 = ($1 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr10;
              $call12 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call13 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
                  $call12
                ) | 0;
              HEAP32[$Ty11 >> 2] = $call13;
              $cmp14 = ($call13 | 0) == (0 | 0);
              if ($cmp14) {
                $retval$1 = 0;
              } else {
                $call17 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA9_KcRPNS0_4NodeEEEESC_DpOT0_(
                    $this,
                    $Ty11
                  ) | 0;
                $retval$1 = $call17;
              }
              $retval$14 = $retval$1;
              break L1;
              break;
            }
            case 73: {
              $2 = HEAP32[$this >> 2] | 0;
              $add$ptr21 = ($2 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr21;
              $call23 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call24 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
                  $call23
                ) | 0;
              HEAP32[$Ty22 >> 2] = $call24;
              $cmp25 = ($call24 | 0) == (0 | 0);
              if ($cmp25) {
                $retval$2 = 0;
              } else {
                $call28 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA14_KcRPNS0_4NodeEEEESC_DpOT0_(
                    $this,
                    $Ty22
                  ) | 0;
                $retval$2 = $call28;
              }
              $retval$14 = $retval$2;
              break L1;
              break;
            }
            case 83: {
              $3 = HEAP32[$this >> 2] | 0;
              $add$ptr32 = ($3 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr32;
              $call34 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call35 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
                  $call34
                ) | 0;
              HEAP32[$Ty33 >> 2] = $call35;
              $cmp36 = ($call35 | 0) == (0 | 0);
              if ($cmp36) {
                $retval$3 = 0;
              } else {
                $call39 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA19_KcRPNS0_4NodeEEEESC_DpOT0_(
                    $this,
                    $Ty33
                  ) | 0;
                $retval$3 = $call39;
              }
              $retval$14 = $retval$3;
              break L1;
              break;
            }
            case 99: {
              $4 = HEAP32[$this >> 2] | 0;
              $add$ptr43 = ($4 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr43;
              $call44 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseCallOffsetEv(
                  $this
                ) | 0;
              if ($call44) {
                $retval$14 = 0;
                break L1;
              }
              $call45 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseCallOffsetEv(
                  $this
                ) | 0;
              if ($call45) {
                $retval$14 = 0;
                break L1;
              }
              $call48 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call49 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv(
                  $call48
                ) | 0;
              HEAP32[$Encoding >> 2] = $call49;
              $cmp50 = ($call49 | 0) == (0 | 0);
              if ($cmp50) {
                $retval$4 = 0;
              } else {
                $call53 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA27_KcRPNS0_4NodeEEEESC_DpOT0_(
                    $this,
                    $Encoding
                  ) | 0;
                $retval$4 = $call53;
              }
              $retval$14 = $retval$4;
              break L1;
              break;
            }
            case 67: {
              $5 = HEAP32[$this >> 2] | 0;
              $add$ptr57 = ($5 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr57;
              $call58 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call59 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
                  $call58
                ) | 0;
              HEAP32[$FirstType >> 2] = $call59;
              $cmp60 = ($call59 | 0) == (0 | 0);
              do {
                if ($cmp60) {
                  $retval$6 = 0;
                } else {
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb(
                    $ref$tmp,
                    $this,
                    1
                  );
                  $call63 =
                    __ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp) | 0;
                  if ($call63) {
                    $retval$6 = 0;
                    break;
                  }
                  $call64 =
                    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                      $this,
                      95
                    ) | 0;
                  if ($call64) {
                    $call68 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv(
                        $call58
                      ) | 0;
                    HEAP32[$SecondType >> 2] = $call68;
                    $cmp69 = ($call68 | 0) == (0 | 0);
                    if ($cmp69) {
                      $retval$5 = 0;
                    } else {
                      $call72 =
                        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_21CtorVtableSpecialNameEJRPNS0_4NodeESA_EEES9_DpOT0_(
                          $this,
                          $SecondType,
                          $FirstType
                        ) | 0;
                      $retval$5 = $call72;
                    }
                    $retval$6 = $retval$5;
                  } else {
                    $retval$6 = 0;
                  }
                }
              } while (0);
              $retval$14 = $retval$6;
              break L1;
              break;
            }
            case 87: {
              $6 = HEAP32[$this >> 2] | 0;
              $add$ptr77 = ($6 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr77;
              $call78 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call79 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE(
                  $call78,
                  0
                ) | 0;
              HEAP32[$Name >> 2] = $call79;
              $cmp80 = ($call79 | 0) == (0 | 0);
              if ($cmp80) {
                $retval$7 = 0;
              } else {
                $call83 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA34_KcRPNS0_4NodeEEEESC_DpOT0_(
                    $this,
                    15913,
                    $Name
                  ) | 0;
                $retval$7 = $call83;
              }
              $retval$14 = $retval$7;
              break L1;
              break;
            }
            case 72: {
              $7 = HEAP32[$this >> 2] | 0;
              $add$ptr87 = ($7 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr87;
              $call89 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call90 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE(
                  $call89,
                  0
                ) | 0;
              HEAP32[$Name88 >> 2] = $call90;
              $cmp91 = ($call90 | 0) == (0 | 0);
              if ($cmp91) {
                $retval$8 = 0;
              } else {
                $call94 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA41_KcRPNS0_4NodeEEEESC_DpOT0_(
                    $this,
                    $Name88
                  ) | 0;
                $retval$8 = $call94;
              }
              $retval$14 = $retval$8;
              break L1;
              break;
            }
            default: {
              $8 = HEAP32[$this >> 2] | 0;
              $incdec$ptr = ($8 + 1) | 0;
              HEAP32[$this >> 2] = $incdec$ptr;
              $call97 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
                  $this,
                  0
                ) | 0;
              $cmp99 = ($call97 << 24) >> 24 == 118;
              $call100 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseCallOffsetEv(
                  $this
                ) | 0;
              if ($call100) {
                $retval$14 = 0;
                break L1;
              }
              $call103 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call104 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv(
                  $call103
                ) | 0;
              HEAP32[$BaseEncoding >> 2] = $call104;
              $cmp105 = ($call104 | 0) == (0 | 0);
              do {
                if ($cmp105) {
                  $retval$9 = 0;
                } else {
                  if ($cmp99) {
                    $call109 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA18_KcRPNS0_4NodeEEEESC_DpOT0_(
                        $this,
                        $BaseEncoding
                      ) | 0;
                    $retval$9 = $call109;
                    break;
                  } else {
                    $call110 =
                      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA22_KcRPNS0_4NodeEEEESC_DpOT0_(
                        $this,
                        $BaseEncoding
                      ) | 0;
                    $retval$9 = $call110;
                    break;
                  }
                }
              } while (0);
              $retval$14 = $retval$9;
              break L1;
            }
          }
          break;
        }
        case 71: {
          $call114 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
              $this,
              1
            ) | 0;
          $conv115 = ($call114 << 24) >> 24;
          switch ($conv115 | 0) {
            case 86: {
              $9 = HEAP32[$this >> 2] | 0;
              $add$ptr118 = ($9 + 2) | 0;
              HEAP32[$this >> 2] = $add$ptr118;
              $call120 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
                  $this
                ) | 0;
              $call121 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE(
                  $call120,
                  0
                ) | 0;
              HEAP32[$Name119 >> 2] = $call121;
              $cmp122 = ($call121 | 0) == (0 | 0);
              if ($cmp122) {
                $retval$11 = 0;
              } else {
                $call125 =
                  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA20_KcRPNS0_4NodeEEEESC_DpOT0_(
                    $this,
                    $Name119
                  ) | 0;
                $retval$11 = $call125;
              }
              $retval$14 = $retval$11;
              break L1;
              break;
            }
            case 82: {
              break;
            }
            default: {
              $retval$14 = 0;
              break L1;
            }
          }
          $10 = HEAP32[$this >> 2] | 0;
          $add$ptr129 = ($10 + 2) | 0;
          HEAP32[$this >> 2] = $add$ptr129;
          $call131 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv(
              $this
            ) | 0;
          $call132 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE(
              $call131,
              0
            ) | 0;
          HEAP32[$Name130 >> 2] = $call132;
          $cmp133 = ($call132 | 0) == (0 | 0);
          if ($cmp133) {
            $retval$13 = 0;
          } else {
            $call136 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10parseSeqIdEPm(
                $this,
                $Count
              ) | 0;
            $call139 =
              __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                $this,
                95
              ) | 0;
            $brmerge = $call136 | $call139;
            if ($brmerge) {
              $call143 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA25_KcRPNS0_4NodeEEEESC_DpOT0_(
                  $this,
                  $Name130
                ) | 0;
              $retval$12 = $call143;
            } else {
              $retval$12 = 0;
            }
            $retval$13 = $retval$12;
          }
          $retval$14 = $retval$13;
          break;
        }
        default: {
          $retval$14 = 0;
        }
      }
    } while (0);
    STACKTOP = sp;
    return $retval$14 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9NameStateC2EPS5_(
    $this,
    $Enclosing
  ) {
    $this = $this | 0;
    $Enclosing = $Enclosing | 0;
    var $CVQualifiers = 0,
      $EndsWithTemplateArgs = 0,
      $ForwardTemplateRefs = 0,
      $ForwardTemplateRefsBegin = 0,
      $ReferenceQualifier = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    HEAP8[$this >> 0] = 0;
    $EndsWithTemplateArgs = ($this + 1) | 0;
    HEAP8[$EndsWithTemplateArgs >> 0] = 0;
    $CVQualifiers = ($this + 4) | 0;
    HEAP32[$CVQualifiers >> 2] = 0;
    $ReferenceQualifier = ($this + 8) | 0;
    HEAP8[$ReferenceQualifier >> 0] = 0;
    $ForwardTemplateRefsBegin = ($this + 12) | 0;
    $ForwardTemplateRefs = ($Enclosing + 332) | 0;
    $call =
      __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv(
        $ForwardTemplateRefs
      ) | 0;
    HEAP32[$ForwardTemplateRefsBegin >> 2] = $call;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E26resolveForwardTemplateRefsERNS5_9NameStateE(
    $this,
    $State
  ) {
    $this = $this | 0;
    $State = $State | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $ForwardTemplateRefs = 0,
      $ForwardTemplateRefsBegin = 0,
      $I$0 = 0,
      $Index = 0,
      $Ref = 0,
      $TemplateParams = 0,
      $call = 0,
      $call3 = 0,
      $call4 = 0,
      $call7 = 0,
      $cmp = 0,
      $cmp5 = 0,
      $inc = 0,
      $retval$2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ForwardTemplateRefsBegin = ($State + 12) | 0;
    $0 = HEAP32[$ForwardTemplateRefsBegin >> 2] | 0;
    $ForwardTemplateRefs = ($this + 332) | 0;
    $call =
      __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv(
        $ForwardTemplateRefs
      ) | 0;
    $TemplateParams = ($this + 288) | 0;
    $I$0 = $0;
    while (1) {
      $cmp = $I$0 >>> 0 < $call >>> 0;
      if (!$cmp) {
        label = 5;
        break;
      }
      $call3 =
        __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EEixEm(
          $ForwardTemplateRefs,
          $I$0
        ) | 0;
      $1 = HEAP32[$call3 >> 2] | 0;
      $Index = ($1 + 8) | 0;
      $2 = HEAP32[$Index >> 2] | 0;
      $call4 =
        __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv(
          $TemplateParams
        ) | 0;
      $cmp5 = $2 >>> 0 < $call4 >>> 0;
      if (!$cmp5) {
        $retval$2 = 1;
        break;
      }
      $call7 =
        __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEixEm(
          $TemplateParams,
          $2
        ) | 0;
      $3 = HEAP32[$call7 >> 2] | 0;
      $Ref = ($1 + 12) | 0;
      HEAP32[$Ref >> 2] = $3;
      $inc = ($I$0 + 1) | 0;
      $I$0 = $inc;
    }
    if ((label | 0) == 5) {
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8dropBackEm(
        $ForwardTemplateRefs,
        $0
      );
      $retval$2 = 0;
    }
    return $retval$2 | 0;
  }
  function __ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEvENKUlvE_clEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      $call = 0,
      $call2 = 0,
      $cmp = 0,
      $cmp10 = 0,
      $cmp3 = 0,
      $cmp7 = 0,
      $spec$select = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$this >> 2] | 0;
    $call =
      __ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv(
        $0
      ) | 0;
    $cmp = ($call | 0) == 0;
    if (!$cmp) {
      $call2 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj(
          $0,
          0
        ) | 0;
      $cmp3 = ($call2 << 24) >> 24 == 69;
      if (!$cmp3) {
        $cmp7 = ($call2 << 24) >> 24 == 46;
        $cmp10 = ($call2 << 24) >> 24 == 95;
        $spec$select = $cmp7 | $cmp10;
        return $spec$select | 0;
      }
    }
    return 1;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12EnableIfAttrEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $ASTAllocator = 0,
      $call2 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call2 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12EnableIfAttrEJNS2_9NodeArrayEEEEPT_DpOT0_(
        $ASTAllocator,
        $args
      ) | 0;
    return $call2 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FunctionEncodingEJRPNS0_4NodeESA_NS0_9NodeArrayESA_RNS0_10QualifiersERNS0_15FunctionRefQualEEEES9_DpOT0_(
    $this,
    $args,
    $args1,
    $args3,
    $args5,
    $args7,
    $args9
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    $args5 = $args5 | 0;
    $args7 = $args7 | 0;
    $args9 = $args9 | 0;
    var $ASTAllocator = 0,
      $call17 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call17 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FunctionEncodingEJRPNS2_4NodeES6_NS2_9NodeArrayES6_RNS2_10QualifiersERNS2_15FunctionRefQualEEEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1,
        $args3,
        $args5,
        $args7,
        $args9
      ) | 0;
    return $call17 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FunctionEncodingEJRPNS2_4NodeES6_NS2_9NodeArrayES6_RNS2_10QualifiersERNS2_15FunctionRefQualEEEEPT_DpOT0_(
    $this,
    $args,
    $args1,
    $args3,
    $args5,
    $args7,
    $args9
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    $args3 = $args3 | 0;
    $args5 = $args5 | 0;
    $args7 = $args7 | 0;
    $args9 = $args9 | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 36) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = HEAP32[$args1 >> 2] | 0;
    $2 = $args3;
    $3 = $2;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($2 + 4) | 0;
    $6 = $5;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $agg$tmp;
    $9 = $8;
    HEAP32[$9 >> 2] = $4;
    $10 = ($8 + 4) | 0;
    $11 = $10;
    HEAP32[$11 >> 2] = $7;
    $12 = HEAP32[$args5 >> 2] | 0;
    $13 = HEAP32[$args7 >> 2] | 0;
    $14 = HEAP8[$args9 >> 0] | 0;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle16FunctionEncodingC2EPKNS0_4NodeES4_NS0_9NodeArrayES4_NS0_10QualifiersENS0_15FunctionRefQualE(
      $call,
      $0,
      $1,
      $tmpcast$byval_copy,
      $12,
      $13,
      $14
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle16FunctionEncodingC2EPKNS0_4NodeES4_NS0_9NodeArrayES4_NS0_10QualifiersENS0_15FunctionRefQualE(
    $this,
    $Ret_,
    $Name_,
    $Params_,
    $Attrs_,
    $CVQuals_,
    $RefQual_
  ) {
    $this = $this | 0;
    $Ret_ = $Ret_ | 0;
    $Name_ = $Name_ | 0;
    $Params_ = $Params_ | 0;
    $Attrs_ = $Attrs_ | 0;
    $CVQuals_ = $CVQuals_ | 0;
    $RefQual_ = $RefQual_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Attrs = 0,
      $CVQuals = 0,
      $Name = 0,
      $Params = 0,
      $RefQual = 0,
      $Ret = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      18,
      0,
      1,
      0
    );
    HEAP32[$this >> 2] = 6100;
    $Ret = ($this + 8) | 0;
    HEAP32[$Ret >> 2] = $Ret_;
    $Name = ($this + 12) | 0;
    HEAP32[$Name >> 2] = $Name_;
    $Params = ($this + 16) | 0;
    $0 = $Params_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Params;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    $Attrs = ($this + 24) | 0;
    HEAP32[$Attrs >> 2] = $Attrs_;
    $CVQuals = ($this + 28) | 0;
    HEAP32[$CVQuals >> 2] = $CVQuals_;
    $RefQual = ($this + 32) | 0;
    HEAP8[$RefQual >> 0] = $RefQual_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding19hasRHSComponentSlowERNS_12OutputStreamE(
    $this,
    $0
  ) {
    $this = $this | 0;
    $0 = $0 | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 1;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding15hasFunctionSlowERNS_12OutputStreamE(
    $this,
    $0
  ) {
    $this = $this | 0;
    $0 = $0 | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 1;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $Name = 0,
      $Ret = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      $tobool = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $Ret = ($this + 8) | 0;
    $0 = HEAP32[$Ret >> 2] | 0;
    $tobool = ($0 | 0) == (0 | 0);
    if (!$tobool) {
      $vtable = HEAP32[$0 >> 2] | 0;
      $vfn = ($vtable + 16) | 0;
      $1 = HEAP32[$vfn >> 2] | 0;
      FUNCTION_TABLE_vii[$1 & 511]($0, $S);
      $2 = HEAP32[$Ret >> 2] | 0;
      $call =
        __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE(
          $2,
          $S
        ) | 0;
      if (!$call) {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11117);
        HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
        HEAP32[($agg$tmp$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $S,
          $agg$tmp$byval_copy
        );
      }
    }
    $Name = ($this + 12) | 0;
    $3 = HEAP32[$Name >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $3,
      $S
    );
    STACKTOP = sp;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding10printRightERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $$pre = 0,
      $$pre10 = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $Attrs = 0,
      $CVQuals = 0,
      $Params = 0,
      $RefQual = 0,
      $Ret = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp14 = 0,
      $agg$tmp14$byval_copy = 0,
      $agg$tmp2 = 0,
      $agg$tmp2$byval_copy = 0;
    var $agg$tmp21 = 0,
      $agg$tmp21$byval_copy = 0,
      $agg$tmp25 = 0,
      $agg$tmp25$byval_copy = 0,
      $agg$tmp31 = 0,
      $agg$tmp31$byval_copy = 0,
      $agg$tmp7 = 0,
      $agg$tmp7$byval_copy = 0,
      $and = 0,
      $and11 = 0,
      $and18 = 0,
      $cmp35 = 0,
      $tobool = 0,
      $tobool12 = 0,
      $tobool19 = 0,
      $tobool5 = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 112) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112 | 0);
    $agg$tmp31$byval_copy = (sp + 104) | 0;
    $agg$tmp25$byval_copy = (sp + 96) | 0;
    $agg$tmp21$byval_copy = (sp + 88) | 0;
    $agg$tmp14$byval_copy = (sp + 80) | 0;
    $agg$tmp7$byval_copy = (sp + 72) | 0;
    $agg$tmp2$byval_copy = (sp + 64) | 0;
    $agg$tmp$byval_copy = (sp + 56) | 0;
    $agg$tmp = (sp + 48) | 0;
    $agg$tmp2 = (sp + 40) | 0;
    $agg$tmp7 = (sp + 32) | 0;
    $agg$tmp14 = (sp + 24) | 0;
    $agg$tmp21 = (sp + 16) | 0;
    $agg$tmp25 = (sp + 8) | 0;
    $agg$tmp31 = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 11119);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Params = ($this + 16) | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE(
      $Params,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 11115);
    HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($agg$tmp2$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp2$byval_copy
    );
    $Ret = ($this + 8) | 0;
    $0 = HEAP32[$Ret >> 2] | 0;
    $tobool = ($0 | 0) == (0 | 0);
    if (!$tobool) {
      $vtable = HEAP32[$0 >> 2] | 0;
      $vfn = ($vtable + 20) | 0;
      $1 = HEAP32[$vfn >> 2] | 0;
      FUNCTION_TABLE_vii[$1 & 511]($0, $S);
    }
    $CVQuals = ($this + 28) | 0;
    $2 = HEAP32[$CVQuals >> 2] | 0;
    $and = $2 & 1;
    $tobool5 = ($and | 0) == 0;
    if ($tobool5) {
      $3 = $2;
    } else {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp7, 15310);
      HEAP32[$agg$tmp7$byval_copy >> 2] = HEAP32[$agg$tmp7 >> 2] | 0;
      HEAP32[($agg$tmp7$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp7 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp7$byval_copy
      );
      $$pre = HEAP32[$CVQuals >> 2] | 0;
      $3 = $$pre;
    }
    $and11 = $3 & 2;
    $tobool12 = ($and11 | 0) == 0;
    if ($tobool12) {
      $4 = $3;
    } else {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp14, 15317);
      HEAP32[$agg$tmp14$byval_copy >> 2] = HEAP32[$agg$tmp14 >> 2] | 0;
      HEAP32[($agg$tmp14$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp14 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp14$byval_copy
      );
      $$pre10 = HEAP32[$CVQuals >> 2] | 0;
      $4 = $$pre10;
    }
    $and18 = $4 & 4;
    $tobool19 = ($and18 | 0) == 0;
    if (!$tobool19) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp21, 15327);
      HEAP32[$agg$tmp21$byval_copy >> 2] = HEAP32[$agg$tmp21 >> 2] | 0;
      HEAP32[($agg$tmp21$byval_copy + 4) >> 2] =
        HEAP32[($agg$tmp21 + 4) >> 2] | 0;
      __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
        $S,
        $agg$tmp21$byval_copy
      );
    }
    $RefQual = ($this + 32) | 0;
    $5 = HEAP8[$RefQual >> 0] | 0;
    switch (($5 << 24) >> 24) {
      case 1: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp25, 15512);
        HEAP32[$agg$tmp25$byval_copy >> 2] = HEAP32[$agg$tmp25 >> 2] | 0;
        HEAP32[($agg$tmp25$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp25 + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $S,
          $agg$tmp25$byval_copy
        );
        break;
      }
      case 2: {
        __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp31, 15515);
        HEAP32[$agg$tmp31$byval_copy >> 2] = HEAP32[$agg$tmp31 >> 2] | 0;
        HEAP32[($agg$tmp31$byval_copy + 4) >> 2] =
          HEAP32[($agg$tmp31 + 4) >> 2] | 0;
        __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
          $S,
          $agg$tmp31$byval_copy
        );
        break;
      }
      default: {
      }
    }
    $Attrs = ($this + 24) | 0;
    $6 = HEAP32[$Attrs >> 2] | 0;
    $cmp35 = ($6 | 0) == (0 | 0);
    if (!$cmp35) {
      __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
        $6,
        $S
      );
    }
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle16FunctionEncodingD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12EnableIfAttrEJNS2_9NodeArrayEEEEPT_DpOT0_(
    $this,
    $args
  ) {
    $this = $this | 0;
    $args = $args | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $agg$tmp = 0,
      $call = 0,
      $tmpcast$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $tmpcast$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    $0 = $args;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $agg$tmp;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($tmpcast$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle12EnableIfAttrC2ENS0_9NodeArrayE(
      $call,
      $tmpcast$byval_copy
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle12EnableIfAttrC2ENS0_9NodeArrayE(
    $this,
    $Conditions_
  ) {
    $this = $this | 0;
    $Conditions_ = $Conditions_ | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $Conditions = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      9,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 6144;
    $Conditions = ($this + 8) | 0;
    $0 = $Conditions_;
    $1 = $0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($0 + 4) | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $Conditions;
    $7 = $6;
    HEAP32[$7 >> 2] = $2;
    $8 = ($6 + 4) | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $5;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle12EnableIfAttr9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $Conditions = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 15851);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $Conditions = ($this + 8) | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE(
      $Conditions,
      $S
    );
    __ZN12_GLOBAL__N_112OutputStreampLEc($S, 93);
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle12EnableIfAttrD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EEixEm(
    $this,
    $Index
  ) {
    $this = $this | 0;
    $Index = $Index | 0;
    var $add$ptr = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE5beginEv(
        $this
      ) | 0;
    $add$ptr = ($call + ($Index << 2)) | 0;
    return $add$ptr | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8dropBackEm(
    $this,
    $Index
  ) {
    $this = $this | 0;
    $Index = $Index | 0;
    var $0 = 0,
      $Last = 0,
      $add$ptr = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$this >> 2] | 0;
    $add$ptr = ($0 + ($Index << 2)) | 0;
    $Last = ($this + 4) | 0;
    HEAP32[$Last >> 2] = $add$ptr;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE5beginEv(
    $this
  ) {
    $this = $this | 0;
    var $0 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = HEAP32[$this >> 2] | 0;
    return $0 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA12_KcRPNS0_4NodeEEEESC_DpOT0_(
    $this,
    $args1
  ) {
    $this = $this | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA12_KcRPNS2_4NodeEEEEPT_DpOT0_(
        $ASTAllocator,
        16230,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA9_KcRPNS0_4NodeEEEESC_DpOT0_(
    $this,
    $args1
  ) {
    $this = $this | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA9_KcRPNS2_4NodeEEEEPT_DpOT0_(
        $ASTAllocator,
        16221,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA14_KcRPNS0_4NodeEEEESC_DpOT0_(
    $this,
    $args1
  ) {
    $this = $this | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA14_KcRPNS2_4NodeEEEEPT_DpOT0_(
        $ASTAllocator,
        16207,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA19_KcRPNS0_4NodeEEEESC_DpOT0_(
    $this,
    $args1
  ) {
    $this = $this | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA19_KcRPNS2_4NodeEEEEPT_DpOT0_(
        $ASTAllocator,
        16188,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseCallOffsetEv(
    $this
  ) {
    $this = $this | 0;
    var $$ph = 0,
      $0 = 0,
      $1 = 0,
      $call = 0,
      $call11 = 0,
      $call13 = 0,
      $call2 = 0,
      $call3 = 0,
      $call4 = 0,
      $call7 = 0,
      $call8 = 0,
      $lnot = 0,
      $lnot14 = 0,
      $ref$tmp = 0,
      $ref$tmp10 = 0,
      $ref$tmp6 = 0,
      $retval$0 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $ref$tmp = (sp + 16) | 0;
    $ref$tmp6 = (sp + 8) | 0;
    $ref$tmp10 = sp;
    $call =
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
        $this,
        104
      ) | 0;
    if ($call) {
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb(
        $ref$tmp,
        $this,
        1
      );
      $call2 = __ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp) | 0;
      if ($call2) {
        $0 = 1;
      } else {
        $call3 =
          __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
            $this,
            95
          ) | 0;
        $lnot = $call3 ^ 1;
        $0 = $lnot;
      }
      $retval$0 = $0;
    } else {
      $call4 =
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
          $this,
          118
        ) | 0;
      if ($call4) {
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb(
          $ref$tmp6,
          $this,
          1
        );
        $call7 = __ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp6) | 0;
        if ($call7) {
          $1 = 1;
        } else {
          $call8 =
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
              $this,
              95
            ) | 0;
          if ($call8) {
            __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb(
              $ref$tmp10,
              $this,
              1
            );
            $call11 = __ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp10) | 0;
            if ($call11) {
              $$ph = 1;
            } else {
              $call13 =
                __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc(
                  $this,
                  95
                ) | 0;
              $lnot14 = $call13 ^ 1;
              $$ph = $lnot14;
            }
            $1 = $$ph;
          } else {
            $1 = 1;
          }
        }
        $retval$0 = $1;
      } else {
        $retval$0 = 1;
      }
    }
    STACKTOP = sp;
    return $retval$0 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA27_KcRPNS0_4NodeEEEESC_DpOT0_(
    $this,
    $args1
  ) {
    $this = $this | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA27_KcRPNS2_4NodeEEEEPT_DpOT0_(
        $ASTAllocator,
        16161,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_21CtorVtableSpecialNameEJRPNS0_4NodeESA_EEES9_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle21CtorVtableSpecialNameEJRPNS2_4NodeES6_EEEPT_DpOT0_(
        $ASTAllocator,
        $args,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA41_KcRPNS0_4NodeEEEESC_DpOT0_(
    $this,
    $args1
  ) {
    $this = $this | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA41_KcRPNS2_4NodeEEEEPT_DpOT0_(
        $ASTAllocator,
        16032,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA18_KcRPNS0_4NodeEEEESC_DpOT0_(
    $this,
    $args1
  ) {
    $this = $this | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA18_KcRPNS2_4NodeEEEEPT_DpOT0_(
        $ASTAllocator,
        16014,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA22_KcRPNS0_4NodeEEEESC_DpOT0_(
    $this,
    $args1
  ) {
    $this = $this | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA22_KcRPNS2_4NodeEEEEPT_DpOT0_(
        $ASTAllocator,
        15992,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA20_KcRPNS0_4NodeEEEESC_DpOT0_(
    $this,
    $args1
  ) {
    $this = $this | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA20_KcRPNS2_4NodeEEEEPT_DpOT0_(
        $ASTAllocator,
        15972,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA25_KcRPNS0_4NodeEEEESC_DpOT0_(
    $this,
    $args1
  ) {
    $this = $this | 0;
    $args1 = $args1 | 0;
    var $ASTAllocator = 0,
      $call5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $ASTAllocator = ($this + 368) | 0;
    $call5 =
      __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA25_KcRPNS2_4NodeEEEEPT_DpOT0_(
        $ASTAllocator,
        15947,
        $args1
      ) | 0;
    return $call5 | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA25_KcRPNS2_4NodeEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    $0 = HEAP32[$args1 >> 2] | 0;
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE(
      $call,
      $agg$tmp$byval_copy,
      $0
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA20_KcRPNS2_4NodeEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    $0 = HEAP32[$args1 >> 2] | 0;
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE(
      $call,
      $agg$tmp$byval_copy,
      $0
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA22_KcRPNS2_4NodeEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    $0 = HEAP32[$args1 >> 2] | 0;
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE(
      $call,
      $agg$tmp$byval_copy,
      $0
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA18_KcRPNS2_4NodeEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    $0 = HEAP32[$args1 >> 2] | 0;
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE(
      $call,
      $agg$tmp$byval_copy,
      $0
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA41_KcRPNS2_4NodeEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    $0 = HEAP32[$args1 >> 2] | 0;
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE(
      $call,
      $agg$tmp$byval_copy,
      $0
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle21CtorVtableSpecialNameEJRPNS2_4NodeES6_EEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $1 = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 16) | 0;
    $0 = HEAP32[$args >> 2] | 0;
    $1 = HEAP32[$args1 >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialNameC2EPKNS0_4NodeES4_(
      $call,
      $0,
      $1
    );
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialNameC2EPKNS0_4NodeES4_(
    $this,
    $FirstType_,
    $SecondType_
  ) {
    $this = $this | 0;
    $FirstType_ = $FirstType_ | 0;
    $SecondType_ = $SecondType_ | 0;
    var $FirstType = 0,
      $SecondType = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_(
      $this,
      21,
      1,
      1,
      1
    );
    HEAP32[$this >> 2] = 6188;
    $FirstType = ($this + 8) | 0;
    HEAP32[$FirstType >> 2] = $FirstType_;
    $SecondType = ($this + 12) | 0;
    HEAP32[$SecondType >> 2] = $SecondType_;
    return;
  }
  function __ZNK12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialName9printLeftERNS_12OutputStreamE(
    $this,
    $S
  ) {
    $this = $this | 0;
    $S = $S | 0;
    var $0 = 0,
      $1 = 0,
      $FirstType = 0,
      $SecondType = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $agg$tmp2 = 0,
      $agg$tmp2$byval_copy = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 32) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $agg$tmp2$byval_copy = (sp + 24) | 0;
    $agg$tmp$byval_copy = (sp + 16) | 0;
    $agg$tmp = (sp + 8) | 0;
    $agg$tmp2 = sp;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, 16073);
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp$byval_copy
    );
    $FirstType = ($this + 8) | 0;
    $0 = HEAP32[$FirstType >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $0,
      $S
    );
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2, 16098);
    HEAP32[$agg$tmp2$byval_copy >> 2] = HEAP32[$agg$tmp2 >> 2] | 0;
    HEAP32[($agg$tmp2$byval_copy + 4) >> 2] = HEAP32[($agg$tmp2 + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE(
      $S,
      $agg$tmp2$byval_copy
    );
    $SecondType = ($this + 12) | 0;
    $1 = HEAP32[$SecondType >> 2] | 0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE(
      $1,
      $S
    );
    STACKTOP = sp;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialNameD0Ev(
    $this
  ) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZdlPv($this);
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA27_KcRPNS2_4NodeEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    $0 = HEAP32[$args1 >> 2] | 0;
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE(
      $call,
      $agg$tmp$byval_copy,
      $0
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA19_KcRPNS2_4NodeEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    $0 = HEAP32[$args1 >> 2] | 0;
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE(
      $call,
      $agg$tmp$byval_copy,
      $0
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA14_KcRPNS2_4NodeEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    $0 = HEAP32[$args1 >> 2] | 0;
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE(
      $call,
      $agg$tmp$byval_copy,
      $0
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA9_KcRPNS2_4NodeEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    $0 = HEAP32[$args1 >> 2] | 0;
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE(
      $call,
      $agg$tmp$byval_copy,
      $0
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA12_KcRPNS2_4NodeEEEEPT_DpOT0_(
    $this,
    $args,
    $args1
  ) {
    $this = $this | 0;
    $args = $args | 0;
    $args1 = $args1 | 0;
    var $0 = 0,
      $agg$tmp = 0,
      $agg$tmp$byval_copy = 0,
      $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $agg$tmp$byval_copy = (sp + 8) | 0;
    $agg$tmp = sp;
    $call = __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this, 20) | 0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp, $args);
    $0 = HEAP32[$args1 >> 2] | 0;
    HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2] | 0;
    HEAP32[($agg$tmp$byval_copy + 4) >> 2] = HEAP32[($agg$tmp + 4) >> 2] | 0;
    __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE(
      $call,
      $agg$tmp$byval_copy,
      $0
    );
    STACKTOP = sp;
    return $call | 0;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_EC2EPKcS7_(
    $this,
    $First_,
    $Last_
  ) {
    $this = $this | 0;
    $First_ = $First_ | 0;
    $Last_ = $Last_ | 0;
    var $ASTAllocator = 0,
      $ForwardTemplateRefs = 0,
      $Last = 0,
      $Names = 0,
      $ParsingLambdaParams = 0,
      $PermitForwardTemplateReferences = 0,
      $Subs = 0,
      $TemplateParams = 0,
      $TryToParseTemplateArgs = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    HEAP32[$this >> 2] = $First_;
    $Last = ($this + 4) | 0;
    HEAP32[$Last >> 2] = $Last_;
    $Names = ($this + 8) | 0;
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEC2Ev(
      $Names
    );
    $Subs = ($this + 148) | 0;
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEC2Ev(
      $Subs
    );
    $TemplateParams = ($this + 288) | 0;
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2Ev(
      $TemplateParams
    );
    $ForwardTemplateRefs = ($this + 332) | 0;
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EEC2Ev(
      $ForwardTemplateRefs
    );
    $TryToParseTemplateArgs = ($this + 360) | 0;
    HEAP8[$TryToParseTemplateArgs >> 0] = 1;
    $PermitForwardTemplateReferences = ($this + 361) | 0;
    HEAP8[$PermitForwardTemplateReferences >> 0] = 0;
    $ParsingLambdaParams = ($this + 362) | 0;
    HEAP8[$ParsingLambdaParams >> 0] = 0;
    $ASTAllocator = ($this + 368) | 0;
    __ZN12_GLOBAL__N_116DefaultAllocatorC2Ev($ASTAllocator);
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEC2Ev(
    $this
  ) {
    $this = $this | 0;
    var $Cap = 0,
      $Last = 0,
      $add$ptr = 0,
      $arraydecay = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $arraydecay = ($this + 12) | 0;
    HEAP32[$this >> 2] = $arraydecay;
    $Last = ($this + 4) | 0;
    HEAP32[$Last >> 2] = $arraydecay;
    $Cap = ($this + 8) | 0;
    $add$ptr = ($this + 140) | 0;
    HEAP32[$Cap >> 2] = $add$ptr;
    return;
  }
  function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EEC2Ev(
    $this
  ) {
    $this = $this | 0;
    var $Cap = 0,
      $Last = 0,
      $add$ptr = 0,
      $arraydecay = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $arraydecay = ($this + 12) | 0;
    HEAP32[$this >> 2] = $arraydecay;
    $Last = ($this + 4) | 0;
    HEAP32[$Last >> 2] = $arraydecay;
    $Cap = ($this + 8) | 0;
    $add$ptr = ($this + 28) | 0;
    HEAP32[$Cap >> 2] = $add$ptr;
    return;
  }
  function __ZN12_GLOBAL__N_116DefaultAllocatorC2Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN12_GLOBAL__N_120BumpPointerAllocatorC2Ev($this);
    return;
  }
  function __ZN12_GLOBAL__N_120BumpPointerAllocatorC2Ev($this) {
    $this = $this | 0;
    var $BlockList = 0,
      $Current = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $BlockList = ($this + 4096) | 0;
    HEAP32[$this >> 2] = 0;
    $Current = ($this + 4) | 0;
    HEAP32[$Current >> 2] = 0;
    HEAP32[$BlockList >> 2] = $this;
    return;
  }
  function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
    __ZdlPv($this);
    return;
  }
  function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv(
    $this,
    $thrown_type,
    $0
  ) {
    $this = $this | 0;
    $thrown_type = $thrown_type | 0;
    $0 = $0 | 0;
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZL8is_equalPKSt9type_infoS1_b($this, $thrown_type, 0) | 0;
    return $call | 0;
  }
  function __ZN10__cxxabiv119__pointer_type_infoD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
    __ZdlPv($this);
    return;
  }
  function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv(
    $this,
    $thrown_type,
    $adjustedPtr
  ) {
    $this = $this | 0;
    $thrown_type = $thrown_type | 0;
    $adjustedPtr = $adjustedPtr | 0;
    var $$pr = 0,
      $$pr36 = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0,
      $23 = 0,
      $24 = 0;
    var $25 = 0,
      $26 = 0,
      $27 = 0,
      $28 = 0,
      $29 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $__flags = 0,
      $__flags13 = 0,
      $__pointee = 0,
      $__pointee25 = 0,
      $and = 0,
      $and14 = 0,
      $and20 = 0,
      $and21 = 0;
    var $call = 0,
      $call2 = 0,
      $call26 = 0,
      $call30 = 0,
      $call51 = 0,
      $call66 = 0,
      $cmp = 0,
      $cmp10 = 0,
      $cmp7 = 0,
      $cmp72 = 0,
      $cmp79 = 0,
      $cmp84 = 0,
      $cmp86 = 0,
      $dst_ptr_leading_to_static_ptr = 0,
      $info = 0,
      $neg = 0,
      $neg19 = 0,
      $neg45 = 0,
      $neg60 = 0,
      $number_of_dst_type = 0;
    var $path_dst_ptr_to_static_ptr = 0,
      $phitmp = 0,
      $retval$0 = 0,
      $retval$6 = 0,
      $src2dst_offset = 0,
      $static_ptr = 0,
      $static_type = 0,
      $tobool = 0,
      $tobool22 = 0,
      $tobool42 = 0,
      $tobool47 = 0,
      $tobool57 = 0,
      $tobool62 = 0,
      $vfn = 0,
      $vtable = 0,
      dest = 0,
      label = 0,
      sp = 0,
      stop = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 64) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
    $info = sp;
    $call = __ZL8is_equalPKSt9type_infoS1_b($thrown_type, 2680, 0) | 0;
    do {
      if ($call) {
        HEAP32[$adjustedPtr >> 2] = 0;
        $retval$6 = 1;
      } else {
        $call2 =
          __ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv(
            $this,
            $thrown_type,
            0
          ) | 0;
        if ($call2) {
          $0 = HEAP32[$adjustedPtr >> 2] | 0;
          $cmp = ($0 | 0) == (0 | 0);
          if ($cmp) {
            $retval$6 = 1;
            break;
          }
          $1 = HEAP32[$0 >> 2] | 0;
          HEAP32[$adjustedPtr >> 2] = $1;
          $retval$6 = 1;
          break;
        }
        $2 = ($thrown_type | 0) == (0 | 0);
        if ($2) {
          $retval$6 = 0;
        } else {
          $3 = ___dynamic_cast($thrown_type, 1472, 2608, 0) | 0;
          $cmp7 = ($3 | 0) == (0 | 0);
          if ($cmp7) {
            $retval$6 = 0;
          } else {
            $4 = HEAP32[$adjustedPtr >> 2] | 0;
            $cmp10 = ($4 | 0) == (0 | 0);
            if (!$cmp10) {
              $5 = HEAP32[$4 >> 2] | 0;
              HEAP32[$adjustedPtr >> 2] = $5;
            }
            $__flags = ($3 + 8) | 0;
            $6 = HEAP32[$__flags >> 2] | 0;
            $__flags13 = ($this + 8) | 0;
            $7 = HEAP32[$__flags13 >> 2] | 0;
            $neg = $7 ^ 7;
            $and = $6 & 7;
            $and14 = $and & $neg;
            $tobool = ($and14 | 0) == 0;
            if ($tobool) {
              $neg19 = $6 & 96;
              $and20 = $neg19 ^ 96;
              $and21 = $and20 & $7;
              $tobool22 = ($and21 | 0) == 0;
              if ($tobool22) {
                $__pointee = ($this + 12) | 0;
                $8 = HEAP32[$__pointee >> 2] | 0;
                $__pointee25 = ($3 + 12) | 0;
                $9 = HEAP32[$__pointee25 >> 2] | 0;
                $call26 = __ZL8is_equalPKSt9type_infoS1_b($8, $9, 0) | 0;
                if ($call26) {
                  $retval$6 = 1;
                } else {
                  $call30 = __ZL8is_equalPKSt9type_infoS1_b($8, 2672, 0) | 0;
                  if ($call30) {
                    $10 = ($9 | 0) == (0 | 0);
                    if ($10) {
                      $retval$6 = 1;
                      break;
                    }
                    $11 = ___dynamic_cast($9, 1472, 2624, 0) | 0;
                    $phitmp = ($11 | 0) == (0 | 0);
                    $retval$6 = $phitmp;
                    break;
                  }
                  $12 = ($8 | 0) == (0 | 0);
                  if ($12) {
                    $retval$6 = 0;
                  } else {
                    $13 = ___dynamic_cast($8, 1472, 2608, 0) | 0;
                    $tobool42 = ($13 | 0) == (0 | 0);
                    if (!$tobool42) {
                      $14 = HEAP32[$__flags13 >> 2] | 0;
                      $neg45 = $14 & 1;
                      $tobool47 = ($neg45 | 0) == 0;
                      if ($tobool47) {
                        $retval$6 = 0;
                        break;
                      }
                      $15 = HEAP32[$__pointee25 >> 2] | 0;
                      $call51 =
                        __ZNK10__cxxabiv119__pointer_type_info16can_catch_nestedEPKNS_16__shim_type_infoE(
                          $13,
                          $15
                        ) | 0;
                      $retval$6 = $call51;
                      break;
                    }
                    $$pr = HEAP32[$__pointee >> 2] | 0;
                    $16 = ($$pr | 0) == (0 | 0);
                    if ($16) {
                      $retval$6 = 0;
                    } else {
                      $17 = ___dynamic_cast($$pr, 1472, 2640, 0) | 0;
                      $tobool57 = ($17 | 0) == (0 | 0);
                      if (!$tobool57) {
                        $18 = HEAP32[$__flags13 >> 2] | 0;
                        $neg60 = $18 & 1;
                        $tobool62 = ($neg60 | 0) == 0;
                        if ($tobool62) {
                          $retval$6 = 0;
                          break;
                        }
                        $19 = HEAP32[$__pointee25 >> 2] | 0;
                        $call66 =
                          __ZNK10__cxxabiv129__pointer_to_member_type_info16can_catch_nestedEPKNS_16__shim_type_infoE(
                            $17,
                            $19
                          ) | 0;
                        $retval$6 = $call66;
                        break;
                      }
                      $$pr36 = HEAP32[$__pointee >> 2] | 0;
                      $20 = ($$pr36 | 0) == (0 | 0);
                      if ($20) {
                        $retval$6 = 0;
                      } else {
                        $21 = ___dynamic_cast($$pr36, 1472, 1456, 0) | 0;
                        $cmp72 = ($21 | 0) == (0 | 0);
                        if ($cmp72) {
                          $retval$6 = 0;
                        } else {
                          $22 = HEAP32[$__pointee25 >> 2] | 0;
                          $23 = ($22 | 0) == (0 | 0);
                          if ($23) {
                            $retval$6 = 0;
                          } else {
                            $24 = ___dynamic_cast($22, 1472, 1456, 0) | 0;
                            $cmp79 = ($24 | 0) == (0 | 0);
                            if ($cmp79) {
                              $retval$6 = 0;
                            } else {
                              HEAP32[$info >> 2] = $24;
                              $static_ptr = ($info + 4) | 0;
                              HEAP32[$static_ptr >> 2] = 0;
                              $static_type = ($info + 8) | 0;
                              HEAP32[$static_type >> 2] = $21;
                              $src2dst_offset = ($info + 12) | 0;
                              HEAP32[$src2dst_offset >> 2] = -1;
                              $dst_ptr_leading_to_static_ptr = ($info + 16) | 0;
                              $path_dst_ptr_to_static_ptr = ($info + 24) | 0;
                              $number_of_dst_type = ($info + 48) | 0;
                              dest = $dst_ptr_leading_to_static_ptr;
                              stop = (dest + 36) | 0;
                              do {
                                HEAP32[dest >> 2] = 0 | 0;
                                dest = (dest + 4) | 0;
                              } while ((dest | 0) < (stop | 0));
                              HEAP16[
                                ($dst_ptr_leading_to_static_ptr + 36) >> 1
                              ] = 0 | 0;
                              HEAP8[
                                ($dst_ptr_leading_to_static_ptr + 38) >> 0
                              ] = 0 | 0;
                              HEAP32[$number_of_dst_type >> 2] = 1;
                              $vtable = HEAP32[$24 >> 2] | 0;
                              $vfn = ($vtable + 28) | 0;
                              $25 = HEAP32[$vfn >> 2] | 0;
                              $26 = HEAP32[$adjustedPtr >> 2] | 0;
                              FUNCTION_TABLE_viiii[$25 & 511](
                                $24,
                                $info,
                                $26,
                                1
                              );
                              $27 =
                                HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0;
                              $cmp84 = ($27 | 0) == 1;
                              do {
                                if ($cmp84) {
                                  $28 = HEAP32[$adjustedPtr >> 2] | 0;
                                  $cmp86 = ($28 | 0) == (0 | 0);
                                  if ($cmp86) {
                                    $retval$0 = 1;
                                    break;
                                  }
                                  $29 =
                                    HEAP32[
                                      $dst_ptr_leading_to_static_ptr >> 2
                                    ] | 0;
                                  HEAP32[$adjustedPtr >> 2] = $29;
                                  $retval$0 = 1;
                                } else {
                                  $retval$0 = 0;
                                }
                              } while (0);
                              $retval$6 = $retval$0;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                $retval$6 = 0;
              }
            } else {
              $retval$6 = 0;
            }
          }
        }
      }
    } while (0);
    STACKTOP = sp;
    return $retval$6 | 0;
  }
  function __ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv(
    $this,
    $thrown_type,
    $0
  ) {
    $this = $this | 0;
    $thrown_type = $thrown_type | 0;
    $0 = $0 | 0;
    var $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $__flags = 0,
      $__flags5 = 0,
      $and = 0,
      $and6 = 0,
      $call = 0,
      $retval$1 = 0,
      $tobool = 0,
      $tobool3 = 0,
      $tobool7 = 0,
      $use_strcmp$1$off0 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $__flags = ($this + 8) | 0;
    $1 = HEAP32[$__flags >> 2] | 0;
    $and = $1 & 24;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      $2 = ($thrown_type | 0) == (0 | 0);
      if ($2) {
        $retval$1 = 0;
      } else {
        $3 = ___dynamic_cast($thrown_type, 1472, 2592, 0) | 0;
        $tobool3 = ($3 | 0) == (0 | 0);
        if ($tobool3) {
          $retval$1 = 0;
        } else {
          $__flags5 = ($3 + 8) | 0;
          $4 = HEAP32[$__flags5 >> 2] | 0;
          $and6 = $4 & 24;
          $tobool7 = ($and6 | 0) != 0;
          $use_strcmp$1$off0 = $tobool7;
          label = 5;
        }
      }
    } else {
      $use_strcmp$1$off0 = 1;
      label = 5;
    }
    if ((label | 0) == 5) {
      $call =
        __ZL8is_equalPKSt9type_infoS1_b(
          $this,
          $thrown_type,
          $use_strcmp$1$off0
        ) | 0;
      $retval$1 = $call;
    }
    return $retval$1 | 0;
  }
  function __ZNK10__cxxabiv119__pointer_type_info16can_catch_nestedEPKNS_16__shim_type_infoE(
    $this,
    $thrown_type
  ) {
    $this = $this | 0;
    $thrown_type = $thrown_type | 0;
    var $$pr = 0,
      $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $__flags = 0,
      $__flags2 = 0,
      $__pointee = 0,
      $__pointee5 = 0,
      $and = 0,
      $call = 0,
      $call30 = 0;
    var $cmp = 0,
      $neg = 0,
      $neg9 = 0,
      $or$cond = 0,
      $retval$2 = 0,
      $this$tr = 0,
      $thrown_type$tr = 0,
      $tobool = 0,
      $tobool11 = 0,
      $tobool18 = 0,
      $tobool27 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $this$tr = $this;
    $thrown_type$tr = $thrown_type;
    while (1) {
      $0 = ($thrown_type$tr | 0) == (0 | 0);
      if ($0) {
        $retval$2 = 0;
        break;
      }
      $1 = ___dynamic_cast($thrown_type$tr, 1472, 2608, 0) | 0;
      $cmp = ($1 | 0) == (0 | 0);
      if ($cmp) {
        $retval$2 = 0;
        break;
      }
      $__flags = ($1 + 8) | 0;
      $2 = HEAP32[$__flags >> 2] | 0;
      $__flags2 = ($this$tr + 8) | 0;
      $3 = HEAP32[$__flags2 >> 2] | 0;
      $neg = $3 ^ -1;
      $and = $2 & $neg;
      $tobool = ($and | 0) == 0;
      if (!$tobool) {
        $retval$2 = 0;
        break;
      }
      $__pointee = ($this$tr + 12) | 0;
      $4 = HEAP32[$__pointee >> 2] | 0;
      $__pointee5 = ($1 + 12) | 0;
      $5 = HEAP32[$__pointee5 >> 2] | 0;
      $call = __ZL8is_equalPKSt9type_infoS1_b($4, $5, 0) | 0;
      if ($call) {
        $retval$2 = 1;
        break;
      }
      $neg9 = $3 & 1;
      $tobool11 = ($neg9 | 0) == 0;
      $6 = ($4 | 0) == (0 | 0);
      $or$cond = $tobool11 | $6;
      if ($or$cond) {
        $retval$2 = 0;
        break;
      }
      $7 = ___dynamic_cast($4, 1472, 2608, 0) | 0;
      $tobool18 = ($7 | 0) == (0 | 0);
      if ($tobool18) {
        label = 9;
        break;
      }
      $8 = HEAP32[$__pointee5 >> 2] | 0;
      $this$tr = $7;
      $thrown_type$tr = $8;
    }
    if ((label | 0) == 9) {
      $$pr = HEAP32[$__pointee >> 2] | 0;
      $9 = ($$pr | 0) == (0 | 0);
      if ($9) {
        $retval$2 = 0;
      } else {
        $10 = ___dynamic_cast($$pr, 1472, 2640, 0) | 0;
        $tobool27 = ($10 | 0) == (0 | 0);
        if ($tobool27) {
          $retval$2 = 0;
        } else {
          $11 = HEAP32[$__pointee5 >> 2] | 0;
          $call30 =
            __ZNK10__cxxabiv129__pointer_to_member_type_info16can_catch_nestedEPKNS_16__shim_type_infoE(
              $10,
              $11
            ) | 0;
          $retval$2 = $call30;
        }
      }
    }
    return $retval$2 | 0;
  }
  function __ZNK10__cxxabiv129__pointer_to_member_type_info16can_catch_nestedEPKNS_16__shim_type_infoE(
    $this,
    $thrown_type
  ) {
    $this = $this | 0;
    $thrown_type = $thrown_type | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $__context = 0,
      $__context8 = 0,
      $__flags = 0,
      $__flags2 = 0,
      $__pointee = 0,
      $__pointee5 = 0,
      $and = 0,
      $call = 0,
      $call9 = 0,
      $cmp = 0,
      $neg = 0,
      $retval$0 = 0;
    var $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = ($thrown_type | 0) == (0 | 0);
    if ($0) {
      $retval$0 = 0;
    } else {
      $1 = ___dynamic_cast($thrown_type, 1472, 2640, 0) | 0;
      $cmp = ($1 | 0) == (0 | 0);
      if ($cmp) {
        $retval$0 = 0;
      } else {
        $__flags = ($this + 8) | 0;
        $2 = HEAP32[$__flags >> 2] | 0;
        $neg = $2 ^ -1;
        $__flags2 = ($1 + 8) | 0;
        $3 = HEAP32[$__flags2 >> 2] | 0;
        $and = $3 & $neg;
        $tobool = ($and | 0) == 0;
        if ($tobool) {
          $__pointee = ($this + 12) | 0;
          $4 = HEAP32[$__pointee >> 2] | 0;
          $__pointee5 = ($1 + 12) | 0;
          $5 = HEAP32[$__pointee5 >> 2] | 0;
          $call = __ZL8is_equalPKSt9type_infoS1_b($4, $5, 0) | 0;
          if ($call) {
            $__context = ($this + 16) | 0;
            $6 = HEAP32[$__context >> 2] | 0;
            $__context8 = ($1 + 16) | 0;
            $7 = HEAP32[$__context8 >> 2] | 0;
            $call9 = __ZL8is_equalPKSt9type_infoS1_b($6, $7, 0) | 0;
            $retval$0 = $call9;
          } else {
            $retval$0 = 0;
          }
        } else {
          $retval$0 = 0;
        }
      }
    }
    return $retval$0 | 0;
  }
  function __ZN10__cxxabiv116__enum_type_infoD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
    __ZdlPv($this);
    return;
  }
  function __ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv(
    $this,
    $thrown_type,
    $0
  ) {
    $this = $this | 0;
    $thrown_type = $thrown_type | 0;
    $0 = $0 | 0;
    var $call = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $call = __ZL8is_equalPKSt9type_infoS1_b($this, $thrown_type, 0) | 0;
    return $call | 0;
  }
  function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
    $this = $this | 0;
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
    __ZdlPv($this);
    return;
  }
  function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(
    $this,
    $info,
    $dst_ptr,
    $current_ptr,
    $path_below,
    $use_strcmp
  ) {
    $this = $this | 0;
    $info = $info | 0;
    $dst_ptr = $dst_ptr | 0;
    $current_ptr = $current_ptr | 0;
    $path_below = $path_below | 0;
    $use_strcmp = $use_strcmp | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $__base_count = 0,
      $__flags = 0,
      $add$ptr = 0,
      $and = 0;
    var $and44 = 0,
      $arraydecay = 0,
      $call = 0,
      $cmp = 0,
      $cmp33 = 0,
      $cmp70 = 0,
      $found_any_static_type$0 = 0,
      $found_any_static_type$1$off0 = 0,
      $found_any_static_type$1$off0$in = 0,
      $found_any_static_type5 = 0,
      $found_our_static_ptr$0 = 0,
      $found_our_static_ptr$1$off0 = 0,
      $found_our_static_ptr$1$off0$in = 0,
      $found_our_static_ptr2 = 0,
      $frombool74 = 0,
      $frombool77 = 0,
      $incdec$ptr = 0,
      $incdec$ptr69 = 0,
      $or2438 = 0,
      $or37 = 0;
    var $or5850 = 0,
      $or6651 = 0,
      $p$0 = 0,
      $path_dst_ptr_to_static_ptr = 0,
      $search_done = 0,
      $static_type = 0,
      $tobool28 = 0,
      $tobool31 = 0,
      $tobool36 = 0,
      $tobool41 = 0,
      $tobool45 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $static_type = ($info + 8) | 0;
    $0 = HEAP32[$static_type >> 2] | 0;
    $call = __ZL8is_equalPKSt9type_infoS1_b($this, $0, $use_strcmp) | 0;
    if ($call) {
      __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(
        0,
        $info,
        $dst_ptr,
        $current_ptr,
        $path_below
      );
    } else {
      $found_our_static_ptr2 = ($info + 52) | 0;
      $1 = HEAP8[$found_our_static_ptr2 >> 0] | 0;
      $found_any_static_type5 = ($info + 53) | 0;
      $2 = HEAP8[$found_any_static_type5 >> 0] | 0;
      $arraydecay = ($this + 16) | 0;
      $__base_count = ($this + 12) | 0;
      $3 = HEAP32[$__base_count >> 2] | 0;
      $add$ptr = ((($this + 16) | 0) + ($3 << 3)) | 0;
      HEAP8[$found_our_static_ptr2 >> 0] = 0;
      HEAP8[$found_any_static_type5 >> 0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(
        $arraydecay,
        $info,
        $dst_ptr,
        $current_ptr,
        $path_below,
        $use_strcmp
      );
      $4 = HEAP8[$found_our_static_ptr2 >> 0] | 0;
      $or37 = $4 | $1;
      $5 = HEAP8[$found_any_static_type5 >> 0] | 0;
      $or2438 = $5 | $2;
      $cmp = ($3 | 0) > 1;
      L4: do {
        if ($cmp) {
          $incdec$ptr = ($this + 24) | 0;
          $path_dst_ptr_to_static_ptr = ($info + 24) | 0;
          $__flags = ($this + 8) | 0;
          $search_done = ($info + 54) | 0;
          $12 = $5;
          $9 = $4;
          $found_any_static_type$0 = $or2438;
          $found_our_static_ptr$0 = $or37;
          $p$0 = $incdec$ptr;
          while (1) {
            $6 = HEAP8[$search_done >> 0] | 0;
            $tobool28 = ($6 << 24) >> 24 == 0;
            $7 = $found_any_static_type$0 & 1;
            $8 = $found_our_static_ptr$0 & 1;
            if (!$tobool28) {
              $found_any_static_type$1$off0$in = $7;
              $found_our_static_ptr$1$off0$in = $8;
              break L4;
            }
            $tobool31 = ($9 << 24) >> 24 == 0;
            if ($tobool31) {
              $tobool41 = ($12 << 24) >> 24 == 0;
              if (!$tobool41) {
                $13 = HEAP32[$__flags >> 2] | 0;
                $and44 = $13 & 1;
                $tobool45 = ($and44 | 0) == 0;
                if ($tobool45) {
                  $found_any_static_type$1$off0$in = $7;
                  $found_our_static_ptr$1$off0$in = $8;
                  break L4;
                }
              }
            } else {
              $10 = HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0;
              $cmp33 = ($10 | 0) == 1;
              if ($cmp33) {
                $found_any_static_type$1$off0$in = $7;
                $found_our_static_ptr$1$off0$in = $8;
                break L4;
              }
              $11 = HEAP32[$__flags >> 2] | 0;
              $and = $11 & 2;
              $tobool36 = ($and | 0) == 0;
              if ($tobool36) {
                $found_any_static_type$1$off0$in = $7;
                $found_our_static_ptr$1$off0$in = $8;
                break L4;
              }
            }
            HEAP8[$found_our_static_ptr2 >> 0] = 0;
            HEAP8[$found_any_static_type5 >> 0] = 0;
            __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(
              $p$0,
              $info,
              $dst_ptr,
              $current_ptr,
              $path_below,
              $use_strcmp
            );
            $14 = HEAP8[$found_our_static_ptr2 >> 0] | 0;
            $or5850 = $14 | $8;
            $15 = HEAP8[$found_any_static_type5 >> 0] | 0;
            $or6651 = $15 | $7;
            $incdec$ptr69 = ($p$0 + 8) | 0;
            $cmp70 = $incdec$ptr69 >>> 0 < $add$ptr >>> 0;
            if ($cmp70) {
              $12 = $15;
              $9 = $14;
              $found_any_static_type$0 = $or6651;
              $found_our_static_ptr$0 = $or5850;
              $p$0 = $incdec$ptr69;
            } else {
              $found_any_static_type$1$off0$in = $or6651;
              $found_our_static_ptr$1$off0$in = $or5850;
              break;
            }
          }
        } else {
          $found_any_static_type$1$off0$in = $or2438;
          $found_our_static_ptr$1$off0$in = $or37;
        }
      } while (0);
      $found_our_static_ptr$1$off0 =
        ($found_our_static_ptr$1$off0$in << 24) >> 24 != 0;
      $found_any_static_type$1$off0 =
        ($found_any_static_type$1$off0$in << 24) >> 24 != 0;
      $frombool74 = $found_our_static_ptr$1$off0 & 1;
      HEAP8[$found_our_static_ptr2 >> 0] = $frombool74;
      $frombool77 = $found_any_static_type$1$off0 & 1;
      HEAP8[$found_any_static_type5 >> 0] = $frombool77;
    }
    return;
  }
  function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(
    $this,
    $info,
    $current_ptr,
    $path_below,
    $use_strcmp
  ) {
    $this = $this | 0;
    $info = $info | 0;
    $current_ptr = $current_ptr | 0;
    $path_below = $path_below | 0;
    $use_strcmp = $use_strcmp | 0;
    var $0 = 0,
      $1 = 0,
      $10 = 0,
      $11 = 0,
      $12 = 0,
      $13 = 0,
      $14 = 0,
      $15 = 0,
      $16 = 0,
      $17 = 0,
      $18 = 0,
      $19 = 0,
      $2 = 0,
      $20 = 0,
      $21 = 0,
      $22 = 0,
      $23 = 0,
      $24 = 0,
      $25 = 0,
      $3 = 0;
    var $4 = 0,
      $5 = 0,
      $6 = 0,
      $7 = 0,
      $8 = 0,
      $9 = 0,
      $__base_count = 0,
      $__base_count63 = 0,
      $__flags34 = 0,
      $__flags72 = 0,
      $add = 0,
      $add$ptr = 0,
      $add$ptr64 = 0,
      $and = 0,
      $and35 = 0,
      $and73 = 0,
      $and88 = 0,
      $arraydecay = 0,
      $arraydecay62 = 0,
      $call = 0;
    var $call3 = 0,
      $cmp = 0,
      $cmp100 = 0,
      $cmp106 = 0,
      $cmp11 = 0,
      $cmp115 = 0,
      $cmp121 = 0,
      $cmp16 = 0,
      $cmp27 = 0,
      $cmp5 = 0,
      $cmp51 = 0,
      $cmp53 = 0,
      $cmp7 = 0,
      $cmp70 = 0,
      $cmp77 = 0,
      $cmp85 = 0,
      $cmp97 = 0,
      $does_dst_type_point_to_our_static_type$0 = 0,
      $does_dst_type_point_to_our_static_type$1 = 0,
      $does_dst_type_point_to_our_static_type$273 = 0;
    var $does_dst_type_point_to_our_static_type$274 = 0,
      $dst_ptr_leading_to_static_ptr = 0,
      $dst_ptr_not_leading_to_static_ptr = 0,
      $extract$t = 0,
      $found_any_static_type = 0,
      $found_our_static_ptr = 0,
      $incdec$ptr = 0,
      $incdec$ptr105 = 0,
      $incdec$ptr120 = 0,
      $incdec$ptr69 = 0,
      $incdec$ptr84 = 0,
      $is_dst_type_derived_from_static_type = 0,
      $is_dst_type_derived_from_static_type13$0$off0 = 0,
      $is_dst_type_derived_from_static_type13$1$off0 = 0,
      $number_to_dst_ptr = 0,
      $number_to_static_ptr = 0,
      $number_to_static_ptr76 = 0,
      $p$0 = 0,
      $p65$0 = 0,
      $p65$1 = 0;
    var $p65$2 = 0,
      $path_dst_ptr_to_static_ptr = 0,
      $path_dst_ptr_to_static_ptr52 = 0,
      $path_dst_ptr_to_static_ptr99 = 0,
      $path_dynamic_ptr_to_dst_ptr = 0,
      $path_dynamic_ptr_to_dst_ptr10 = 0,
      $search_done = 0,
      $search_done110 = 0,
      $search_done55 = 0,
      $search_done79 = 0,
      $search_done92 = 0,
      $static_type = 0,
      $tobool111 = 0,
      $tobool18 = 0,
      $tobool22 = 0,
      $tobool25 = 0,
      $tobool30 = 0,
      $tobool36 = 0,
      $tobool74 = 0,
      $tobool80 = 0;
    var $tobool89 = 0,
      $tobool93 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $static_type = ($info + 8) | 0;
    $0 = HEAP32[$static_type >> 2] | 0;
    $call = __ZL8is_equalPKSt9type_infoS1_b($this, $0, $use_strcmp) | 0;
    L1: do {
      if ($call) {
        __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(
          0,
          $info,
          $current_ptr,
          $path_below
        );
      } else {
        $1 = HEAP32[$info >> 2] | 0;
        $call3 = __ZL8is_equalPKSt9type_infoS1_b($this, $1, $use_strcmp) | 0;
        if (!$call3) {
          $arraydecay62 = ($this + 16) | 0;
          $__base_count63 = ($this + 12) | 0;
          $17 = HEAP32[$__base_count63 >> 2] | 0;
          $add$ptr64 = ((($this + 16) | 0) + ($17 << 3)) | 0;
          __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(
            $arraydecay62,
            $info,
            $current_ptr,
            $path_below,
            $use_strcmp
          );
          $incdec$ptr69 = ($this + 24) | 0;
          $cmp70 = ($17 | 0) > 1;
          if (!$cmp70) {
            break;
          }
          $__flags72 = ($this + 8) | 0;
          $18 = HEAP32[$__flags72 >> 2] | 0;
          $and73 = $18 & 2;
          $tobool74 = ($and73 | 0) == 0;
          if ($tobool74) {
            $number_to_static_ptr76 = ($info + 36) | 0;
            $19 = HEAP32[$number_to_static_ptr76 >> 2] | 0;
            $cmp77 = ($19 | 0) == 1;
            if (!$cmp77) {
              $and88 = $18 & 1;
              $tobool89 = ($and88 | 0) == 0;
              if ($tobool89) {
                $search_done110 = ($info + 54) | 0;
                $p65$2 = $incdec$ptr69;
                while (1) {
                  $24 = HEAP8[$search_done110 >> 0] | 0;
                  $tobool111 = ($24 << 24) >> 24 == 0;
                  if (!$tobool111) {
                    break L1;
                  }
                  $25 = HEAP32[$number_to_static_ptr76 >> 2] | 0;
                  $cmp115 = ($25 | 0) == 1;
                  if ($cmp115) {
                    break L1;
                  }
                  __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(
                    $p65$2,
                    $info,
                    $current_ptr,
                    $path_below,
                    $use_strcmp
                  );
                  $incdec$ptr120 = ($p65$2 + 8) | 0;
                  $cmp121 = $incdec$ptr120 >>> 0 < $add$ptr64 >>> 0;
                  if ($cmp121) {
                    $p65$2 = $incdec$ptr120;
                  } else {
                    break L1;
                  }
                }
              }
              $path_dst_ptr_to_static_ptr99 = ($info + 24) | 0;
              $search_done92 = ($info + 54) | 0;
              $p65$1 = $incdec$ptr69;
              while (1) {
                $21 = HEAP8[$search_done92 >> 0] | 0;
                $tobool93 = ($21 << 24) >> 24 == 0;
                if (!$tobool93) {
                  break L1;
                }
                $22 = HEAP32[$number_to_static_ptr76 >> 2] | 0;
                $cmp97 = ($22 | 0) == 1;
                if ($cmp97) {
                  $23 = HEAP32[$path_dst_ptr_to_static_ptr99 >> 2] | 0;
                  $cmp100 = ($23 | 0) == 1;
                  if ($cmp100) {
                    break L1;
                  }
                }
                __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(
                  $p65$1,
                  $info,
                  $current_ptr,
                  $path_below,
                  $use_strcmp
                );
                $incdec$ptr105 = ($p65$1 + 8) | 0;
                $cmp106 = $incdec$ptr105 >>> 0 < $add$ptr64 >>> 0;
                if ($cmp106) {
                  $p65$1 = $incdec$ptr105;
                } else {
                  break L1;
                }
              }
            }
          }
          $search_done79 = ($info + 54) | 0;
          $p65$0 = $incdec$ptr69;
          while (1) {
            $20 = HEAP8[$search_done79 >> 0] | 0;
            $tobool80 = ($20 << 24) >> 24 == 0;
            if (!$tobool80) {
              break L1;
            }
            __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(
              $p65$0,
              $info,
              $current_ptr,
              $path_below,
              $use_strcmp
            );
            $incdec$ptr84 = ($p65$0 + 8) | 0;
            $cmp85 = $incdec$ptr84 >>> 0 < $add$ptr64 >>> 0;
            if ($cmp85) {
              $p65$0 = $incdec$ptr84;
            } else {
              break L1;
            }
          }
        }
        $dst_ptr_leading_to_static_ptr = ($info + 16) | 0;
        $2 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
        $cmp = ($2 | 0) == ($current_ptr | 0);
        if (!$cmp) {
          $dst_ptr_not_leading_to_static_ptr = ($info + 20) | 0;
          $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0;
          $cmp5 = ($3 | 0) == ($current_ptr | 0);
          if (!$cmp5) {
            $path_dynamic_ptr_to_dst_ptr10 = ($info + 32) | 0;
            HEAP32[$path_dynamic_ptr_to_dst_ptr10 >> 2] = $path_below;
            $is_dst_type_derived_from_static_type = ($info + 44) | 0;
            $4 = HEAP32[$is_dst_type_derived_from_static_type >> 2] | 0;
            $cmp11 = ($4 | 0) == 4;
            if (!$cmp11) {
              $arraydecay = ($this + 16) | 0;
              $__base_count = ($this + 12) | 0;
              $5 = HEAP32[$__base_count >> 2] | 0;
              $add$ptr = ((($this + 16) | 0) + ($5 << 3)) | 0;
              $found_our_static_ptr = ($info + 52) | 0;
              $found_any_static_type = ($info + 53) | 0;
              $search_done = ($info + 54) | 0;
              $__flags34 = ($this + 8) | 0;
              $path_dst_ptr_to_static_ptr = ($info + 24) | 0;
              $does_dst_type_point_to_our_static_type$0 = 0;
              $is_dst_type_derived_from_static_type13$0$off0 = 0;
              $p$0 = $arraydecay;
              L33: while (1) {
                $cmp16 = $p$0 >>> 0 < $add$ptr >>> 0;
                if (!$cmp16) {
                  label = 18;
                  break;
                }
                HEAP8[$found_our_static_ptr >> 0] = 0;
                HEAP8[$found_any_static_type >> 0] = 0;
                __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(
                  $p$0,
                  $info,
                  $current_ptr,
                  $current_ptr,
                  1,
                  $use_strcmp
                );
                $6 = HEAP8[$search_done >> 0] | 0;
                $tobool18 = ($6 << 24) >> 24 == 0;
                if (!$tobool18) {
                  label = 18;
                  break;
                }
                $7 = HEAP8[$found_any_static_type >> 0] | 0;
                $tobool22 = ($7 << 24) >> 24 == 0;
                do {
                  if ($tobool22) {
                    $does_dst_type_point_to_our_static_type$1 = $does_dst_type_point_to_our_static_type$0;
                    $is_dst_type_derived_from_static_type13$1$off0 = $is_dst_type_derived_from_static_type13$0$off0;
                  } else {
                    $8 = HEAP8[$found_our_static_ptr >> 0] | 0;
                    $tobool25 = ($8 << 24) >> 24 == 0;
                    if ($tobool25) {
                      $11 = HEAP32[$__flags34 >> 2] | 0;
                      $and35 = $11 & 1;
                      $tobool36 = ($and35 | 0) == 0;
                      if ($tobool36) {
                        $does_dst_type_point_to_our_static_type$274 = $does_dst_type_point_to_our_static_type$0;
                        label = 19;
                        break L33;
                      } else {
                        $does_dst_type_point_to_our_static_type$1 = $does_dst_type_point_to_our_static_type$0;
                        $is_dst_type_derived_from_static_type13$1$off0 = 1;
                        break;
                      }
                    }
                    $9 = HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0;
                    $cmp27 = ($9 | 0) == 1;
                    if ($cmp27) {
                      $does_dst_type_point_to_our_static_type$274 = 1;
                      label = 19;
                      break L33;
                    }
                    $10 = HEAP32[$__flags34 >> 2] | 0;
                    $and = $10 & 2;
                    $tobool30 = ($and | 0) == 0;
                    if ($tobool30) {
                      $does_dst_type_point_to_our_static_type$274 = 1;
                      label = 19;
                      break L33;
                    } else {
                      $does_dst_type_point_to_our_static_type$1 = 1;
                      $is_dst_type_derived_from_static_type13$1$off0 = 1;
                    }
                  }
                } while (0);
                $incdec$ptr = ($p$0 + 8) | 0;
                $does_dst_type_point_to_our_static_type$0 = $does_dst_type_point_to_our_static_type$1;
                $is_dst_type_derived_from_static_type13$0$off0 = $is_dst_type_derived_from_static_type13$1$off0;
                $p$0 = $incdec$ptr;
              }
              if ((label | 0) == 18) {
                if ($is_dst_type_derived_from_static_type13$0$off0) {
                  $does_dst_type_point_to_our_static_type$274 = $does_dst_type_point_to_our_static_type$0;
                  label = 19;
                } else {
                  $12 = 4;
                  $does_dst_type_point_to_our_static_type$273 = $does_dst_type_point_to_our_static_type$0;
                }
              }
              if ((label | 0) == 19) {
                $12 = 3;
                $does_dst_type_point_to_our_static_type$273 = $does_dst_type_point_to_our_static_type$274;
              }
              HEAP32[$is_dst_type_derived_from_static_type >> 2] = $12;
              $13 = $does_dst_type_point_to_our_static_type$273 & 1;
              $extract$t = ($13 << 24) >> 24 == 0;
              if (!$extract$t) {
                break;
              }
            }
            HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
            $number_to_dst_ptr = ($info + 40) | 0;
            $14 = HEAP32[$number_to_dst_ptr >> 2] | 0;
            $add = ($14 + 1) | 0;
            HEAP32[$number_to_dst_ptr >> 2] = $add;
            $number_to_static_ptr = ($info + 36) | 0;
            $15 = HEAP32[$number_to_static_ptr >> 2] | 0;
            $cmp51 = ($15 | 0) == 1;
            if (!$cmp51) {
              break;
            }
            $path_dst_ptr_to_static_ptr52 = ($info + 24) | 0;
            $16 = HEAP32[$path_dst_ptr_to_static_ptr52 >> 2] | 0;
            $cmp53 = ($16 | 0) == 2;
            if (!$cmp53) {
              break;
            }
            $search_done55 = ($info + 54) | 0;
            HEAP8[$search_done55 >> 0] = 1;
            break;
          }
        }
        $cmp7 = ($path_below | 0) == 1;
        if ($cmp7) {
          $path_dynamic_ptr_to_dst_ptr = ($info + 32) | 0;
          HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] = 1;
        }
      }
    } while (0);
    return;
  }
  function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(
    $this,
    $info,
    $adjustedPtr,
    $path_below
  ) {
    $this = $this | 0;
    $info = $info | 0;
    $adjustedPtr = $adjustedPtr | 0;
    $path_below = $path_below | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $__base_count = 0,
      $add$ptr = 0,
      $arraydecay = 0,
      $call = 0,
      $cmp = 0,
      $cmp7 = 0,
      $incdec$ptr = 0,
      $incdec$ptr6 = 0,
      $p$0 = 0,
      $search_done = 0,
      $static_type = 0,
      $tobool = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $static_type = ($info + 8) | 0;
    $0 = HEAP32[$static_type >> 2] | 0;
    $call = __ZL8is_equalPKSt9type_infoS1_b($this, $0, 0) | 0;
    L1: do {
      if ($call) {
        __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(
          0,
          $info,
          $adjustedPtr,
          $path_below
        );
      } else {
        $arraydecay = ($this + 16) | 0;
        $__base_count = ($this + 12) | 0;
        $1 = HEAP32[$__base_count >> 2] | 0;
        $add$ptr = ((($this + 16) | 0) + ($1 << 3)) | 0;
        __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(
          $arraydecay,
          $info,
          $adjustedPtr,
          $path_below
        );
        $cmp = ($1 | 0) > 1;
        if ($cmp) {
          $incdec$ptr = ($this + 24) | 0;
          $search_done = ($info + 54) | 0;
          $p$0 = $incdec$ptr;
          while (1) {
            __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(
              $p$0,
              $info,
              $adjustedPtr,
              $path_below
            );
            $2 = HEAP8[$search_done >> 0] | 0;
            $tobool = ($2 << 24) >> 24 == 0;
            if (!$tobool) {
              break L1;
            }
            $incdec$ptr6 = ($p$0 + 8) | 0;
            $cmp7 = $incdec$ptr6 >>> 0 < $add$ptr >>> 0;
            if ($cmp7) {
              $p$0 = $incdec$ptr6;
            } else {
              break;
            }
          }
        }
      }
    } while (0);
    return;
  }
  function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(
    $this,
    $info,
    $adjustedPtr,
    $path_below
  ) {
    $this = $this | 0;
    $info = $info | 0;
    $adjustedPtr = $adjustedPtr | 0;
    $path_below = $path_below | 0;
    var $$pre = 0,
      $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $__offset_flags7$phi$trans$insert = 0,
      $add$ptr = 0,
      $add$ptr6 = 0,
      $and = 0,
      $and8 = 0,
      $cmp = 0,
      $cond = 0,
      $offset_to_base$0 = 0,
      $shr = 0,
      $tobool = 0,
      $tobool9 = 0,
      $vfn = 0,
      $vtable5 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $cmp = ($adjustedPtr | 0) == (0 | 0);
    $__offset_flags7$phi$trans$insert = ($this + 4) | 0;
    $$pre = HEAP32[$__offset_flags7$phi$trans$insert >> 2] | 0;
    if ($cmp) {
      $offset_to_base$0 = 0;
    } else {
      $shr = $$pre >> 8;
      $and = $$pre & 1;
      $tobool = ($and | 0) == 0;
      if ($tobool) {
        $offset_to_base$0 = $shr;
      } else {
        $0 = HEAP32[$adjustedPtr >> 2] | 0;
        $add$ptr = ($0 + $shr) | 0;
        $1 = HEAP32[$add$ptr >> 2] | 0;
        $offset_to_base$0 = $1;
      }
    }
    $2 = HEAP32[$this >> 2] | 0;
    $vtable5 = HEAP32[$2 >> 2] | 0;
    $vfn = ($vtable5 + 28) | 0;
    $3 = HEAP32[$vfn >> 2] | 0;
    $add$ptr6 = ($adjustedPtr + $offset_to_base$0) | 0;
    $and8 = $$pre & 2;
    $tobool9 = ($and8 | 0) == 0;
    $cond = $tobool9 ? 2 : $path_below;
    FUNCTION_TABLE_viiii[$3 & 511]($2, $info, $add$ptr6, $cond);
    return;
  }
  function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(
    $this,
    $info,
    $dst_ptr,
    $current_ptr,
    $path_below,
    $use_strcmp
  ) {
    $this = $this | 0;
    $info = $info | 0;
    $dst_ptr = $dst_ptr | 0;
    $current_ptr = $current_ptr | 0;
    $path_below = $path_below | 0;
    $use_strcmp = $use_strcmp | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $__offset_flags = 0,
      $add$ptr = 0,
      $add$ptr4 = 0,
      $and = 0,
      $and6 = 0,
      $cond = 0,
      $offset_to_base$0 = 0,
      $shr = 0,
      $tobool = 0,
      $tobool7 = 0,
      $vfn = 0,
      $vtable3 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $__offset_flags = ($this + 4) | 0;
    $0 = HEAP32[$__offset_flags >> 2] | 0;
    $shr = $0 >> 8;
    $and = $0 & 1;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      $offset_to_base$0 = $shr;
    } else {
      $1 = HEAP32[$current_ptr >> 2] | 0;
      $add$ptr = ($1 + $shr) | 0;
      $2 = HEAP32[$add$ptr >> 2] | 0;
      $offset_to_base$0 = $2;
    }
    $3 = HEAP32[$this >> 2] | 0;
    $vtable3 = HEAP32[$3 >> 2] | 0;
    $vfn = ($vtable3 + 20) | 0;
    $4 = HEAP32[$vfn >> 2] | 0;
    $add$ptr4 = ($current_ptr + $offset_to_base$0) | 0;
    $and6 = $0 & 2;
    $tobool7 = ($and6 | 0) == 0;
    $cond = $tobool7 ? 2 : $path_below;
    FUNCTION_TABLE_viiiiii[$4 & 255](
      $3,
      $info,
      $dst_ptr,
      $add$ptr4,
      $cond,
      $use_strcmp
    );
    return;
  }
  function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(
    $this,
    $info,
    $current_ptr,
    $path_below,
    $use_strcmp
  ) {
    $this = $this | 0;
    $info = $info | 0;
    $current_ptr = $current_ptr | 0;
    $path_below = $path_below | 0;
    $use_strcmp = $use_strcmp | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $3 = 0,
      $4 = 0,
      $__offset_flags = 0,
      $add$ptr = 0,
      $add$ptr4 = 0,
      $and = 0,
      $and6 = 0,
      $cond = 0,
      $offset_to_base$0 = 0,
      $shr = 0,
      $tobool = 0,
      $tobool7 = 0,
      $vfn = 0,
      $vtable3 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $__offset_flags = ($this + 4) | 0;
    $0 = HEAP32[$__offset_flags >> 2] | 0;
    $shr = $0 >> 8;
    $and = $0 & 1;
    $tobool = ($and | 0) == 0;
    if ($tobool) {
      $offset_to_base$0 = $shr;
    } else {
      $1 = HEAP32[$current_ptr >> 2] | 0;
      $add$ptr = ($1 + $shr) | 0;
      $2 = HEAP32[$add$ptr >> 2] | 0;
      $offset_to_base$0 = $2;
    }
    $3 = HEAP32[$this >> 2] | 0;
    $vtable3 = HEAP32[$3 >> 2] | 0;
    $vfn = ($vtable3 + 24) | 0;
    $4 = HEAP32[$vfn >> 2] | 0;
    $add$ptr4 = ($current_ptr + $offset_to_base$0) | 0;
    $and6 = $0 & 2;
    $tobool7 = ($and6 | 0) == 0;
    $cond = $tobool7 ? 2 : $path_below;
    FUNCTION_TABLE_viiiii[$4 & 255]($3, $info, $add$ptr4, $cond, $use_strcmp);
    return;
  }
  function __ZSt15get_new_handlerv() {
    var label = 0,
      sp = 0;
    sp = STACKTOP;
    return 0 | 0;
  }
  function ___cxa_can_catch($catchType, $excpType, $thrown) {
    $catchType = $catchType | 0;
    $excpType = $excpType | 0;
    $thrown = $thrown | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $call = 0,
      $conv = 0,
      $temp = 0,
      $vfn = 0,
      $vtable = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = (STACKTOP + 16) | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $temp = sp;
    $0 = HEAP32[$thrown >> 2] | 0;
    HEAP32[$temp >> 2] = $0;
    $vtable = HEAP32[$catchType >> 2] | 0;
    $vfn = ($vtable + 16) | 0;
    $1 = HEAP32[$vfn >> 2] | 0;
    $call = FUNCTION_TABLE_iiii[$1 & 511]($catchType, $excpType, $temp) | 0;
    $conv = $call & 1;
    if ($call) {
      $2 = HEAP32[$temp >> 2] | 0;
      HEAP32[$thrown >> 2] = $2;
    }
    STACKTOP = sp;
    return $conv | 0;
  }
  function ___cxa_is_pointer_type($type) {
    $type = $type | 0;
    var $0 = 0,
      $1 = 0,
      $2 = 0,
      $phitmp = 0,
      $phitmp1 = 0,
      label = 0,
      sp = 0;
    sp = STACKTOP;
    $0 = ($type | 0) == (0 | 0);
    if ($0) {
      $2 = 0;
    } else {
      $1 = ___dynamic_cast($type, 1472, 2608, 0) | 0;
      $phitmp = ($1 | 0) != (0 | 0);
      $phitmp1 = $phitmp & 1;
      $2 = $phitmp1;
    }
    return $2 | 0;
  }
  function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0,
      $2 = 0,
      $3 = 0,
      $6 = 0,
      $8 = 0,
      $11 = 0,
      $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = (($3 >>> 16) + (Math_imul($2, $6) | 0)) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (
      (setTempRet0(
        (((($8 >>> 16) + (Math_imul($11, $6) | 0)) | 0) +
          (((($8 & 65535) + $12) | 0) >>> 16)) |
          0 |
          0
      ),
      0 | ((($8 + $12) << 16) | ($3 & 65535))) | 0
    );
  }
  function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0,
      $y_sroa_0_0_extract_trunc = 0,
      $1$0 = 0,
      $1$1 = 0,
      $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = getTempRet0() | 0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (
      (setTempRet0(
        ((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2) | 0) + $1$1) |
          ($1$1 & 0) |
          0
      ),
      0 | ($1$0 & -1)) | 0
    );
  }
  function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    var l = 0,
      h = 0;
    l = (a + c) >>> 0;
    h = (b + d + ((l >>> 0 < a >>> 0) | 0)) >>> 0; // Add carry from low word to high word on overflow.
    return (setTempRet0(h | 0), l | 0) | 0;
  }
  function _i64Subtract(a, b, c, d) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    var l = 0,
      h = 0;
    l = (a - c) >>> 0;
    h = (b - d) >>> 0;
    h = (b - d - ((c >>> 0 > a >>> 0) | 0)) >>> 0; // Borrow one from high word to low word on underflow.
    return (setTempRet0(h | 0), l | 0) | 0;
  }
  function _llvm_cttz_i32(x) {
    // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32(x ^ (x - 1)) | 0)) | 0 : 32) | 0;
  }
  function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0,
      $n_sroa_1_4_extract_shift$0 = 0,
      $n_sroa_1_4_extract_trunc = 0,
      $d_sroa_0_0_extract_trunc = 0,
      $d_sroa_1_4_extract_shift$0 = 0,
      $d_sroa_1_4_extract_trunc = 0,
      $4 = 0,
      $17 = 0,
      $37 = 0,
      $49 = 0,
      $51 = 0,
      $57 = 0,
      $58 = 0,
      $66 = 0,
      $78 = 0,
      $86 = 0,
      $88 = 0,
      $89 = 0,
      $91 = 0,
      $92 = 0,
      $95 = 0,
      $105 = 0,
      $117 = 0,
      $119 = 0,
      $125 = 0,
      $126 = 0,
      $130 = 0,
      $q_sroa_1_1_ph = 0,
      $q_sroa_0_1_ph = 0,
      $r_sroa_1_1_ph = 0,
      $r_sroa_0_1_ph = 0,
      $sr_1_ph = 0,
      $d_sroa_0_0_insert_insert99$0 = 0,
      $d_sroa_0_0_insert_insert99$1 = 0,
      $137$0 = 0,
      $137$1 = 0,
      $carry_0203 = 0,
      $sr_1202 = 0,
      $r_sroa_0_1201 = 0,
      $r_sroa_1_1200 = 0,
      $q_sroa_0_1199 = 0,
      $q_sroa_1_1198 = 0,
      $147 = 0,
      $149 = 0,
      $r_sroa_0_0_insert_insert42$0 = 0,
      $r_sroa_0_0_insert_insert42$1 = 0,
      $150$1 = 0,
      $151$0 = 0,
      $152 = 0,
      $154$0 = 0,
      $r_sroa_0_0_extract_trunc = 0,
      $r_sroa_1_4_extract_trunc = 0,
      $155 = 0,
      $carry_0_lcssa$0 = 0,
      $carry_0_lcssa$1 = 0,
      $r_sroa_0_1_lcssa = 0,
      $r_sroa_1_1_lcssa = 0,
      $q_sroa_0_1_lcssa = 0,
      $q_sroa_1_1_lcssa = 0,
      $q_sroa_0_0_insert_ext75$0 = 0,
      $q_sroa_0_0_insert_ext75$1 = 0,
      $q_sroa_0_0_insert_insert77$1 = 0,
      $_0$0 = 0,
      $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] =
            ($n_sroa_0_0_extract_trunc >>> 0) %
            ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[($rem + 4) >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 =
          (($n_sroa_0_0_extract_trunc >>> 0) /
            ($d_sroa_0_0_extract_trunc >>> 0)) >>>
          0;
        return (setTempRet0($_0$1 | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0($_0$1 | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[($rem + 4) >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0($_0$1 | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] =
              ($n_sroa_1_4_extract_trunc >>> 0) %
              ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[($rem + 4) >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 =
            (($n_sroa_1_4_extract_trunc >>> 0) /
              ($d_sroa_0_0_extract_trunc >>> 0)) >>>
            0;
          return (setTempRet0($_0$1 | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[($rem + 4) >> 2] =
              ($n_sroa_1_4_extract_trunc >>> 0) %
              ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 =
            (($n_sroa_1_4_extract_trunc >>> 0) /
              ($d_sroa_1_4_extract_trunc >>> 0)) >>>
            0;
          return (setTempRet0($_0$1 | 0), $_0$0) | 0;
        }
        $37 = ($d_sroa_1_4_extract_trunc - 1) | 0;
        if ((($37 & $d_sroa_1_4_extract_trunc) | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | ($a$0 & -1);
            HEAP32[($rem + 4) >> 2] =
              ($37 & $n_sroa_1_4_extract_trunc) | ($a$1 & 0);
          }
          $_0$1 = 0;
          $_0$0 =
            $n_sroa_1_4_extract_trunc >>>
            ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0($_0$1 | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = ($49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0)) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = ($51 + 1) | 0;
          $58 = (31 - $51) | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph =
            ($n_sroa_1_4_extract_trunc << $58) |
            ($n_sroa_0_0_extract_trunc >>> ($57 >>> 0));
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0($_0$1 | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | ($a$0 & -1);
        HEAP32[($rem + 4) >> 2] = $n_sroa_1_4_extract_shift$0 | ($a$1 & 0);
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0($_0$1 | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = ($117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0)) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = ($119 + 1) | 0;
            $126 = (31 - $119) | 0;
            $130 = ($119 - 31) >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph =
              (($n_sroa_0_0_extract_trunc >>> ($125 >>> 0)) & $130) |
              ($n_sroa_1_4_extract_trunc << $126);
            $r_sroa_1_1_ph =
              ($n_sroa_1_4_extract_trunc >>> ($125 >>> 0)) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0($_0$1 | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | ($a$0 & -1);
          HEAP32[($rem + 4) >> 2] = $n_sroa_1_4_extract_shift$0 | ($a$1 & 0);
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0($_0$1 | 0), $_0$0) | 0;
        }
        $66 = ($d_sroa_0_0_extract_trunc - 1) | 0;
        if ((($66 & $d_sroa_0_0_extract_trunc) | 0) != 0) {
          $86 = ((Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33) | 0;
          $88 = ($86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0)) | 0;
          $89 = (64 - $88) | 0;
          $91 = (32 - $88) | 0;
          $92 = $91 >> 31;
          $95 = ($88 - 32) | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph =
            ((($91 - 1) >> 31) & ($n_sroa_1_4_extract_trunc >>> ($95 >>> 0))) |
            ((($n_sroa_1_4_extract_trunc << $91) |
              ($n_sroa_0_0_extract_trunc >>> ($88 >>> 0))) &
              $105);
          $r_sroa_1_1_ph = $105 & ($n_sroa_1_4_extract_trunc >>> ($88 >>> 0));
          $q_sroa_0_1_ph = ($n_sroa_0_0_extract_trunc << $89) & $92;
          $q_sroa_1_1_ph =
            ((($n_sroa_1_4_extract_trunc << $89) |
              ($n_sroa_0_0_extract_trunc >>> ($95 >>> 0))) &
              $92) |
            (($n_sroa_0_0_extract_trunc << $91) & (($88 - 33) >> 31));
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[($rem + 4) >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | ($a$1 & 0);
          $_0$0 = 0 | ($a$0 & -1);
          return (setTempRet0($_0$1 | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | ($n_sroa_1_4_extract_trunc >>> ($78 >>> 0));
          $_0$0 =
            ($n_sroa_1_4_extract_trunc << (32 - $78)) |
            ($n_sroa_0_0_extract_trunc >>> ($78 >>> 0)) |
            0;
          return (setTempRet0($_0$1 | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | ($b$0 & -1);
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | ($b$1 & 0);
      $137$0 =
        _i64Add(
          $d_sroa_0_0_insert_insert99$0 | 0,
          $d_sroa_0_0_insert_insert99$1 | 0,
          -1,
          -1
        ) | 0;
      $137$1 = getTempRet0() | 0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = ($q_sroa_0_1199 >>> 31) | ($q_sroa_1_1198 << 1);
        $149 = $carry_0203 | ($q_sroa_0_1199 << 1);
        $r_sroa_0_0_insert_insert42$0 =
          0 | (($r_sroa_0_1201 << 1) | ($q_sroa_1_1198 >>> 31));
        $r_sroa_0_0_insert_insert42$1 =
          ($r_sroa_0_1201 >>> 31) | ($r_sroa_1_1200 << 1) | 0;
        _i64Subtract(
          $137$0 | 0,
          $137$1 | 0,
          $r_sroa_0_0_insert_insert42$0 | 0,
          $r_sroa_0_0_insert_insert42$1 | 0
        ) | 0;
        $150$1 = getTempRet0() | 0;
        $151$0 = ($150$1 >> 31) | ((($150$1 | 0) < 0 ? -1 : 0) << 1);
        $152 = $151$0 & 1;
        $154$0 =
          _i64Subtract(
            $r_sroa_0_0_insert_insert42$0 | 0,
            $r_sroa_0_0_insert_insert42$1 | 0,
            ($151$0 & $d_sroa_0_0_insert_insert99$0) | 0,
            ((((($150$1 | 0) < 0 ? -1 : 0) >> 31) |
              ((($150$1 | 0) < 0 ? -1 : 0) << 1)) &
              $d_sroa_0_0_insert_insert99$1) |
              0
          ) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = getTempRet0() | 0;
        $155 = ($sr_1202 - 1) | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 =
      $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[($rem + 4) >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 =
      ((0 | $q_sroa_0_0_insert_ext75$0) >>> 31) |
      ($q_sroa_0_0_insert_insert77$1 << 1) |
      ((($q_sroa_0_0_insert_ext75$1 << 1) |
        ($q_sroa_0_0_insert_ext75$0 >>> 31)) &
        0) |
      $carry_0_lcssa$1;
    $_0$0 =
      ((($q_sroa_0_0_insert_ext75$0 << 1) | (0 >>> 31)) & -2) |
      $carry_0_lcssa$0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
  }
  function _bitshift64Lshr(low, high, bits) {
    low = low | 0;
    high = high | 0;
    bits = bits | 0;
    var ander = 0;
    if ((bits | 0) < 32) {
      ander = ((1 << bits) - 1) | 0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high & ander) << (32 - bits));
    }
    setTempRet0(0 | 0);
    return (high >>> (bits - 32)) | 0;
  }
  function _bitshift64Shl(low, high, bits) {
    low = low | 0;
    high = high | 0;
    bits = bits | 0;
    var ander = 0;
    if ((bits | 0) < 32) {
      ander = ((1 << bits) - 1) | 0;
      setTempRet0(
        (high << bits) | ((low & (ander << (32 - bits))) >>> (32 - bits)) | 0
      );
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
  }
  function _memcpy(dest, src, num) {
    dest = dest | 0;
    src = src | 0;
    num = num | 0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num | 0) >= 8192) {
      _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
      return dest | 0;
    }

    ret = dest | 0;
    dest_end = (dest + num) | 0;
    if ((dest & 3) == (src & 3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num | 0) == 0) return ret | 0;
        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
        dest = (dest + 1) | 0;
        src = (src + 1) | 0;
        num = (num - 1) | 0;
      }
      aligned_dest_end = (dest_end & -4) | 0;
      block_aligned_dest_end = (aligned_dest_end - 64) | 0;
      while ((dest | 0) <= (block_aligned_dest_end | 0)) {
        HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
        HEAP32[(dest + 4) >> 2] = HEAP32[(src + 4) >> 2] | 0;
        HEAP32[(dest + 8) >> 2] = HEAP32[(src + 8) >> 2] | 0;
        HEAP32[(dest + 12) >> 2] = HEAP32[(src + 12) >> 2] | 0;
        HEAP32[(dest + 16) >> 2] = HEAP32[(src + 16) >> 2] | 0;
        HEAP32[(dest + 20) >> 2] = HEAP32[(src + 20) >> 2] | 0;
        HEAP32[(dest + 24) >> 2] = HEAP32[(src + 24) >> 2] | 0;
        HEAP32[(dest + 28) >> 2] = HEAP32[(src + 28) >> 2] | 0;
        HEAP32[(dest + 32) >> 2] = HEAP32[(src + 32) >> 2] | 0;
        HEAP32[(dest + 36) >> 2] = HEAP32[(src + 36) >> 2] | 0;
        HEAP32[(dest + 40) >> 2] = HEAP32[(src + 40) >> 2] | 0;
        HEAP32[(dest + 44) >> 2] = HEAP32[(src + 44) >> 2] | 0;
        HEAP32[(dest + 48) >> 2] = HEAP32[(src + 48) >> 2] | 0;
        HEAP32[(dest + 52) >> 2] = HEAP32[(src + 52) >> 2] | 0;
        HEAP32[(dest + 56) >> 2] = HEAP32[(src + 56) >> 2] | 0;
        HEAP32[(dest + 60) >> 2] = HEAP32[(src + 60) >> 2] | 0;
        dest = (dest + 64) | 0;
        src = (src + 64) | 0;
      }
      while ((dest | 0) < (aligned_dest_end | 0)) {
        HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
        dest = (dest + 4) | 0;
        src = (src + 4) | 0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4) | 0;
      while ((dest | 0) < (aligned_dest_end | 0)) {
        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
        HEAP8[(dest + 1) >> 0] = HEAP8[(src + 1) >> 0] | 0;
        HEAP8[(dest + 2) >> 0] = HEAP8[(src + 2) >> 0] | 0;
        HEAP8[(dest + 3) >> 0] = HEAP8[(src + 3) >> 0] | 0;
        dest = (dest + 4) | 0;
        src = (src + 4) | 0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest | 0) < (dest_end | 0)) {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = (dest + 1) | 0;
      src = (src + 1) | 0;
    }
    return ret | 0;
  }
  function _memmove(dest, src, num) {
    dest = dest | 0;
    src = src | 0;
    num = num | 0;
    var ret = 0;
    if (((src | 0) < (dest | 0)) & ((dest | 0) < ((src + num) | 0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num) | 0;
      dest = (dest + num) | 0;
      while ((num | 0) > 0) {
        dest = (dest - 1) | 0;
        src = (src - 1) | 0;
        num = (num - 1) | 0;
        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
  }
  function _memset(ptr, value, num) {
    ptr = ptr | 0;
    value = value | 0;
    num = num | 0;
    var end = 0,
      aligned_end = 0,
      block_aligned_end = 0,
      value4 = 0;
    end = (ptr + num) | 0;

    value = value & 0xff;
    if (
      (num | 0) >=
      67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/
    ) {
      while ((ptr & 3) != 0) {
        HEAP8[ptr >> 0] = value;
        ptr = (ptr + 1) | 0;
      }

      aligned_end = (end & -4) | 0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      block_aligned_end = (aligned_end - 64) | 0;

      while ((ptr | 0) <= (block_aligned_end | 0)) {
        HEAP32[ptr >> 2] = value4;
        HEAP32[(ptr + 4) >> 2] = value4;
        HEAP32[(ptr + 8) >> 2] = value4;
        HEAP32[(ptr + 12) >> 2] = value4;
        HEAP32[(ptr + 16) >> 2] = value4;
        HEAP32[(ptr + 20) >> 2] = value4;
        HEAP32[(ptr + 24) >> 2] = value4;
        HEAP32[(ptr + 28) >> 2] = value4;
        HEAP32[(ptr + 32) >> 2] = value4;
        HEAP32[(ptr + 36) >> 2] = value4;
        HEAP32[(ptr + 40) >> 2] = value4;
        HEAP32[(ptr + 44) >> 2] = value4;
        HEAP32[(ptr + 48) >> 2] = value4;
        HEAP32[(ptr + 52) >> 2] = value4;
        HEAP32[(ptr + 56) >> 2] = value4;
        HEAP32[(ptr + 60) >> 2] = value4;
        ptr = (ptr + 64) | 0;
      }

      while ((ptr | 0) < (aligned_end | 0)) {
        HEAP32[ptr >> 2] = value4;
        ptr = (ptr + 4) | 0;
      }
    }
    // The remaining bytes.
    while ((ptr | 0) < (end | 0)) {
      HEAP8[ptr >> 0] = value;
      ptr = (ptr + 1) | 0;
    }
    return (end - num) | 0;
  }
  function _sbrk(increment) {
    increment = increment | 0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    totalMemory = _emscripten_get_heap_size() | 0;

    oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0;
    newDynamicTop = (oldDynamicTop + increment) | 0;

    if (
      (((increment | 0) > 0) & ((newDynamicTop | 0) < (oldDynamicTop | 0))) | // Detect and fail if we would wrap around signed 32-bit int.
      ((newDynamicTop | 0) < 0)
    ) {
      // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory(newDynamicTop | 0) | 0;
      ___setErrNo(12);
      return -1;
    }

    if ((newDynamicTop | 0) > (totalMemory | 0)) {
      if (_emscripten_resize_heap(newDynamicTop | 0) | 0) {
        // We resized the heap. Start another loop iteration if we need to.
      } else {
        // We failed to resize the heap.
        ___setErrNo(12);
        return -1;
      }
    }

    HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop | 0;

    return oldDynamicTop | 0;
  }

  function dynCall_dii(index, a1, a2) {
    index = index | 0;
    a1 = a1 | 0;
    a2 = a2 | 0;
    return +FUNCTION_TABLE_dii[index & 511](a1 | 0, a2 | 0);
  }

  function dynCall_i(index) {
    index = index | 0;

    return FUNCTION_TABLE_i[index & 511]() | 0;
  }

  function dynCall_ii(index, a1) {
    index = index | 0;
    a1 = a1 | 0;
    return FUNCTION_TABLE_ii[index & 511](a1 | 0) | 0;
  }

  function dynCall_iidiiii(index, a1, a2, a3, a4, a5, a6) {
    index = index | 0;
    a1 = a1 | 0;
    a2 = +a2;
    a3 = a3 | 0;
    a4 = a4 | 0;
    a5 = a5 | 0;
    a6 = a6 | 0;
    return (
      FUNCTION_TABLE_iidiiii[index & 511](
        a1 | 0,
        +a2,
        a3 | 0,
        a4 | 0,
        a5 | 0,
        a6 | 0
      ) | 0
    );
  }

  function dynCall_iii(index, a1, a2) {
    index = index | 0;
    a1 = a1 | 0;
    a2 = a2 | 0;
    return FUNCTION_TABLE_iii[index & 511](a1 | 0, a2 | 0) | 0;
  }

  function dynCall_iiii(index, a1, a2, a3) {
    index = index | 0;
    a1 = a1 | 0;
    a2 = a2 | 0;
    a3 = a3 | 0;
    return FUNCTION_TABLE_iiii[index & 511](a1 | 0, a2 | 0, a3 | 0) | 0;
  }

  function dynCall_iiiii(index, a1, a2, a3, a4) {
    index = index | 0;
    a1 = a1 | 0;
    a2 = a2 | 0;
    a3 = a3 | 0;
    a4 = a4 | 0;
    return (
      FUNCTION_TABLE_iiiii[index & 511](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0
    );
  }

  function dynCall_v(index) {
    index = index | 0;

    FUNCTION_TABLE_v[index & 511]();
  }

  function dynCall_vi(index, a1) {
    index = index | 0;
    a1 = a1 | 0;
    FUNCTION_TABLE_vi[index & 511](a1 | 0);
  }

  function dynCall_vii(index, a1, a2) {
    index = index | 0;
    a1 = a1 | 0;
    a2 = a2 | 0;
    FUNCTION_TABLE_vii[index & 511](a1 | 0, a2 | 0);
  }

  function dynCall_viid(index, a1, a2, a3) {
    index = index | 0;
    a1 = a1 | 0;
    a2 = a2 | 0;
    a3 = +a3;
    FUNCTION_TABLE_viid[index & 511](a1 | 0, a2 | 0, +a3);
  }

  function dynCall_viii(index, a1, a2, a3) {
    index = index | 0;
    a1 = a1 | 0;
    a2 = a2 | 0;
    a3 = a3 | 0;
    FUNCTION_TABLE_viii[index & 511](a1 | 0, a2 | 0, a3 | 0);
  }

  function dynCall_viiii(index, a1, a2, a3, a4) {
    index = index | 0;
    a1 = a1 | 0;
    a2 = a2 | 0;
    a3 = a3 | 0;
    a4 = a4 | 0;
    FUNCTION_TABLE_viiii[index & 511](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
  }

  function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
    index = index | 0;
    a1 = a1 | 0;
    a2 = a2 | 0;
    a3 = a3 | 0;
    a4 = a4 | 0;
    a5 = a5 | 0;
    FUNCTION_TABLE_viiiii[index & 255](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
  }

  function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
    index = index | 0;
    a1 = a1 | 0;
    a2 = a2 | 0;
    a3 = a3 | 0;
    a4 = a4 | 0;
    a5 = a5 | 0;
    a6 = a6 | 0;
    FUNCTION_TABLE_viiiiii[index & 255](
      a1 | 0,
      a2 | 0,
      a3 | 0,
      a4 | 0,
      a5 | 0,
      a6 | 0
    );
  }

  function b0(p0, p1) {
    p0 = p0 | 0;
    p1 = p1 | 0;
    nullFunc_dii(0);
    return +0;
  }
  function b1() {
    nullFunc_i(1);
    return 0;
  }
  function b2(p0) {
    p0 = p0 | 0;
    nullFunc_ii(2);
    return 0;
  }
  function b3(p0, p1, p2, p3, p4, p5) {
    p0 = p0 | 0;
    p1 = +p1;
    p2 = p2 | 0;
    p3 = p3 | 0;
    p4 = p4 | 0;
    p5 = p5 | 0;
    nullFunc_iidiiii(3);
    return 0;
  }
  function b4(p0, p1) {
    p0 = p0 | 0;
    p1 = p1 | 0;
    nullFunc_iii(4);
    return 0;
  }
  function b5(p0, p1, p2) {
    p0 = p0 | 0;
    p1 = p1 | 0;
    p2 = p2 | 0;
    nullFunc_iiii(5);
    return 0;
  }
  function b6(p0, p1, p2, p3) {
    p0 = p0 | 0;
    p1 = p1 | 0;
    p2 = p2 | 0;
    p3 = p3 | 0;
    nullFunc_iiiii(6);
    return 0;
  }
  function b7() {
    nullFunc_v(7);
  }
  function ___cxa_pure_virtual__wrapper() {
    ___cxa_pure_virtual();
  }
  function b8(p0) {
    p0 = p0 | 0;
    nullFunc_vi(8);
  }
  function b9(p0, p1) {
    p0 = p0 | 0;
    p1 = p1 | 0;
    nullFunc_vii(9);
  }
  function b10(p0, p1, p2) {
    p0 = p0 | 0;
    p1 = p1 | 0;
    p2 = +p2;
    nullFunc_viid(10);
  }
  function b11(p0, p1, p2) {
    p0 = p0 | 0;
    p1 = p1 | 0;
    p2 = p2 | 0;
    nullFunc_viii(11);
  }
  function b12(p0, p1, p2, p3) {
    p0 = p0 | 0;
    p1 = p1 | 0;
    p2 = p2 | 0;
    p3 = p3 | 0;
    nullFunc_viiii(12);
  }
  function b13(p0, p1, p2, p3, p4) {
    p0 = p0 | 0;
    p1 = p1 | 0;
    p2 = p2 | 0;
    p3 = p3 | 0;
    p4 = p4 | 0;
    nullFunc_viiiii(13);
  }
  function b14(p0, p1, p2, p3, p4, p5) {
    p0 = p0 | 0;
    p1 = p1 | 0;
    p2 = p2 | 0;
    p3 = p3 | 0;
    p4 = p4 | 0;
    p5 = p5 | 0;
    nullFunc_viiiiii(14);
  }

  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_dii = [
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    __ZN10emscripten8internal12MemberAccessIN10SmartDrive8SettingsEfE7getWireIS3_EEfRKMS3_fRKT_,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    __ZN10emscripten8internal12MemberAccessIN10SmartDrive21SwitchControlSettingsEfE7getWireIS3_EEfRKMS3_fRKT_,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    __ZN10emscripten8internal12MemberAccessIN6Packet9MotorInfoEfE7getWireIS3_EEfRKMS3_fRKT_,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0,
    b0
  ];
  var FUNCTION_TABLE_i = [
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    __ZN10emscripten8internal12operator_newI6PacketJEEEPT_DpOT0_,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    __ZN10emscripten8internal12operator_newINSt3__26vectorIhNS2_9allocatorIhEEEEJEEEPT_DpOT0_,
    b1,
    b1,
    __ZN10emscripten8internal15raw_constructorIN10SmartDrive8SettingsEJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    __ZN10emscripten8internal15raw_constructorIN10SmartDrive21SwitchControlSettingsEJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    __ZN10emscripten8internal15raw_constructorIN6Packet11VersionInfoEJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE,
    b1,
    b1,
    b1,
    __ZN10emscripten8internal15raw_constructorIN6Packet9DailyInfoEJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE,
    b1,
    b1,
    b1,
    b1,
    b1,
    __ZN10emscripten8internal15raw_constructorIN6Packet12PushSettingsEJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE,
    b1,
    b1,
    b1,
    __ZN10emscripten8internal15raw_constructorIN6Packet11JourneyInfoEJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE,
    b1,
    b1,
    b1,
    b1,
    b1,
    __ZN10emscripten8internal15raw_constructorIN6Packet12DistanceInfoEJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE,
    b1,
    b1,
    b1,
    __ZN10emscripten8internal15raw_constructorIN6Packet9MotorInfoEJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    __ZN10emscripten8internal15raw_constructorIN6Packet8TimeInfoEJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE,
    b1,
    b1,
    b1,
    b1,
    b1,
    __ZN10emscripten8internal15raw_constructorIN6Packet9ErrorInfoEJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    __ZN10emscripten8internal15raw_constructorIN6Packet10DeviceInfoEJEEEPT_DpNS0_11BindingTypeIT0_vE8WireTypeE,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1,
    b1
  ];
  var FUNCTION_TABLE_ii = [
    b2,
    ___stdio_close,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    __ZN10emscripten8internal13getActualTypeI6PacketEEPKvPT_,
    b2,
    b2,
    __ZN6Packet5validEv,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    __ZNK6Packet10getErrorIdEv,
    b2,
    b2,
    b2,
    __ZNK6Packet16getMotorDistanceEv,
    b2,
    __ZNK6Packet15getCaseDistanceEv,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    __ZNKSt3__26vectorIhNS_9allocatorIhEEE4sizeEv,
    __ZN10emscripten8internal13getActualTypeINSt3__26vectorIhNS2_9allocatorIhEEEEEEPKvPT_,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    __ZN10emscripten8internal7InvokerIPNSt3__26vectorIhNS2_9allocatorIhEEEEJEE6invokeEPFS7_vE,
    b2,
    b2,
    b2,
    b2,
    b2,
    __ZN10emscripten8internal7InvokerIP6PacketJEE6invokeEPFS3_vE,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2,
    b2
  ];
  var FUNCTION_TABLE_iidiiii = [
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    _fmt_fp,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3,
    b3
  ];
  var FUNCTION_TABLE_iii = [
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    __ZNK12_GLOBAL__N_116itanium_demangle4Node19hasRHSComponentSlowERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle4Node12hasArraySlowERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasFunctionSlowERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle4Node13getSyntaxNodeERNS_12OutputStreamE,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType19hasRHSComponentSlowERNS_12OutputStreamE,
    b4,
    b4,
    b4,
    __ZNK12_GLOBAL__N_116itanium_demangle11PointerType19hasRHSComponentSlowERNS_12OutputStreamE,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack19hasRHSComponentSlowERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack12hasArraySlowERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack15hasFunctionSlowERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack13getSyntaxNodeERNS_12OutputStreamE,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference19hasRHSComponentSlowERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference12hasArraySlowERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference15hasFunctionSlowERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference13getSyntaxNodeERNS_12OutputStreamE,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    __ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType19hasRHSComponentSlowERNS_12OutputStreamE,
    b4,
    b4,
    b4,
    __ZNK12_GLOBAL__N_116itanium_demangle9ArrayType19hasRHSComponentSlowERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle9ArrayType12hasArraySlowERNS_12OutputStreamE,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    __ZNK12_GLOBAL__N_116itanium_demangle8QualType19hasRHSComponentSlowERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle8QualType12hasArraySlowERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle8QualType15hasFunctionSlowERNS_12OutputStreamE,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    __ZNK12_GLOBAL__N_116itanium_demangle12FunctionType19hasRHSComponentSlowERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle12FunctionType15hasFunctionSlowERNS_12OutputStreamE,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    __ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding19hasRHSComponentSlowERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding15hasFunctionSlowERNS_12OutputStreamE,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    __ZN6Packet13processPacketENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,
    b4,
    b4,
    __ZN10emscripten8internal12MemberAccessI6PacketiE7getWireIS2_EEiRKMS2_iRKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_4TypeEE7getWireIS2_EES3_RKMS2_S3_RKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_4DataEE7getWireIS2_EES3_RKMS2_S3_RKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_7CommandEE7getWireIS2_EES3_RKMS2_S3_RKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessI6PacketN10SmartDrive5ErrorEE7getWireIS2_EES4_RKMS2_S4_RKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_3OTAEE7getWireIS2_EES3_RKMS2_S3_RKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessI6PacketN10SmartDrive8SettingsEE7getWireIS2_EEPS4_RKMS2_S4_RKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessI6PacketN10SmartDrive21SwitchControlSettingsEE7getWireIS2_EEPS4_RKMS2_S4_RKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_12PushSettingsEE7getWireIS2_EEPS3_RKMS2_S3_RKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_11VersionInfoEE7getWireIS2_EEPS3_RKMS2_S3_RKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_9DailyInfoEE7getWireIS2_EEPS3_RKMS2_S3_RKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_11JourneyInfoEE7getWireIS2_EEPS3_RKMS2_S3_RKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_9MotorInfoEE7getWireIS2_EEPS3_RKMS2_S3_RKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_8TimeInfoEE7getWireIS2_EEPS3_RKMS2_S3_RKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_10DeviceInfoEE7getWireIS2_EEPS3_RKMS2_S3_RKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_9ErrorInfoEE7getWireIS2_EEPS3_RKMS2_S3_RKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_11BatteryInfoEE7getWireIS2_EEPS3_RKMS2_S3_RKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_12DistanceInfoEE7getWireIS2_EEPS3_RKMS2_S3_RKT_,
    b4,
    b4,
    b4,
    __ZN10emscripten8internal12GetterPolicyIM6PacketKFivEE3getIS2_EEiRKS4_RKT_,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    __ZN10emscripten8internal12GetterPolicyIM6PacketKFNSt3__26vectorIhNS3_9allocatorIhEEEEvEE3getIS2_EEPS7_RKS9_RKT_,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    __ZN10emscripten8internal12MemberAccessIN10SmartDrive8SettingsENS2_11ControlModeEE7getWireIS3_EES4_RKMS3_S4_RKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessIN10SmartDrive8SettingsENS2_5UnitsEE7getWireIS3_EES4_RKMS3_S4_RKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessIN10SmartDrive8SettingsEhE7getWireIS3_EEhRKMS3_hRKT_,
    b4,
    b4,
    b4,
    b4,
    b4,
    __ZN10emscripten8internal12MemberAccessIN10SmartDrive21SwitchControlSettingsENS2_17SwitchControlModeEE7getWireIS3_EES4_RKMS3_S4_RKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessIN10SmartDrive21SwitchControlSettingsEhE7getWireIS3_EEhRKMS3_hRKT_,
    b4,
    b4,
    b4,
    b4,
    b4,
    __ZN10emscripten8internal12MemberAccessIN6Packet11VersionInfoEhE7getWireIS3_EEhRKMS3_hRKT_,
    b4,
    b4,
    b4,
    __ZN10emscripten8internal12MemberAccessIN6Packet9DailyInfoEtE7getWireIS3_EEtRKMS3_tRKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessIN6Packet9DailyInfoEhE7getWireIS3_EEhRKMS3_hRKT_,
    b4,
    b4,
    b4,
    __ZN10emscripten8internal12MemberAccessIN6Packet12PushSettingsEhE7getWireIS3_EEhRKMS3_hRKT_,
    b4,
    b4,
    b4,
    __ZN10emscripten8internal12MemberAccessIN6Packet11JourneyInfoEtE7getWireIS3_EEtRKMS3_tRKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessIN6Packet11JourneyInfoEhE7getWireIS3_EEhRKMS3_hRKT_,
    b4,
    b4,
    b4,
    __ZN10emscripten8internal12MemberAccessIN6Packet12DistanceInfoEyE7getWireIS3_EEPyRKMS3_yRKT_,
    b4,
    b4,
    b4,
    __ZN10emscripten8internal12MemberAccessIN6Packet9MotorInfoEN5Motor5StateEE7getWireIS3_EES5_RKMS3_S5_RKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessIN6Packet9MotorInfoEhE7getWireIS3_EEhRKMS3_hRKT_,
    b4,
    b4,
    b4,
    b4,
    b4,
    __ZN10emscripten8internal12MemberAccessIN6Packet8TimeInfoEtE7getWireIS3_EEtRKMS3_tRKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessIN6Packet8TimeInfoEhE7getWireIS3_EEhRKMS3_hRKT_,
    b4,
    b4,
    b4,
    __ZN10emscripten8internal12MemberAccessIN6Packet9ErrorInfoEtE7getWireIS3_EEtRKMS3_tRKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessIN6Packet9ErrorInfoEhE7getWireIS3_EEhRKMS3_hRKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessIN6Packet9ErrorInfoEN10SmartDrive5ErrorEE7getWireIS3_EES5_RKMS3_S5_RKT_,
    b4,
    b4,
    b4,
    __ZN10emscripten8internal12MemberAccessIN6Packet10DeviceInfoENS2_6DeviceEE7getWireIS3_EES4_RKMS3_S4_RKT_,
    b4,
    __ZN10emscripten8internal12MemberAccessIN6Packet10DeviceInfoEhE7getWireIS3_EEhRKMS3_hRKT_,
    b4,
    b4,
    b4,
    b4,
    __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIhNS2_9allocatorIhEEEEKFmvEmPKS6_JEE6invokeERKS8_SA_,
    b4,
    b4,
    b4,
    __ZN10emscripten8internal13MethodInvokerIM6PacketFbvEbPS2_JEE6invokeERKS4_S5_,
    b4,
    b4,
    __ZN10emscripten8internal13MethodInvokerIM6PacketFNSt3__26vectorIhNS3_9allocatorIhEEEEvES7_PS2_JEE6invokeERKS9_SA_,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4,
    b4
  ];
  var FUNCTION_TABLE_iiii = [
    b5,
    b5,
    ___stdout_write,
    b5,
    ___stdio_write,
    _sn_write,
    b5,
    b5,
    b5,
    b5,
    __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,
    b5,
    __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,
    b5,
    __ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    __ZN10emscripten8internal12VectorAccessINSt3__26vectorIhNS2_9allocatorIhEEEEE3setERS6_mRKh,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIhNS3_9allocatorIhEEEEmES2_S9_JmEE6invokeEPSB_PS7_m,
    b5,
    b5,
    b5,
    __ZN10emscripten8internal13MethodInvokerIM6PacketFbNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEbPS2_JS9_EE6invokeERKSB_SC_PNS0_11BindingTypeIS9_vEUt_E,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5,
    b5
  ];
  var FUNCTION_TABLE_iiiii = [
    b6,
    b6,
    b6,
    ___stdio_seek,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIhNS2_9allocatorIhEEEEmRKhEbS7_JmS9_EE6invokeEPSB_PS6_mh,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6,
    b6
  ];
  var FUNCTION_TABLE_v = [
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    ___cxa_pure_virtual__wrapper,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    __ZL28demangling_terminate_handlerv,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7,
    b7
  ];
  var FUNCTION_TABLE_vi = [
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    __ZN10__cxxabiv116__shim_type_infoD2Ev,
    __ZN10__cxxabiv117__class_type_infoD0Ev,
    __ZNK10__cxxabiv116__shim_type_info5noop1Ev,
    __ZNK10__cxxabiv116__shim_type_info5noop2Ev,
    b8,
    b8,
    b8,
    b8,
    __ZN10__cxxabiv120__si_class_type_infoD0Ev,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle4NodeD2Ev,
    __ZN12_GLOBAL__N_116itanium_demangle10AbiTagAttrD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle4NodeD0Ev,
    b8,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle19SpecialSubstitutionD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeD0Ev,
    b8,
    b8,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle13ReferenceTypeD0Ev,
    b8,
    b8,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle11PointerTypeD0Ev,
    b8,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgsD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle12TemplateArgsD0Ev,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle13ParameterPackD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle15IntegerCastExprD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeED0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdED0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfED0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle8BoolExprD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle14IntegerLiteralD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle20TemplateArgumentPackD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle9ThrowExprD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle12InitListExprD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle13NodeArrayNodeD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle19SizeofParamPackExprD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle8CastExprD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle15ConditionalExprD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle7NewExprD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle11PostfixExprD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle15BracedRangeExprD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle10BracedExprD0Ev,
    b8,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle8NameTypeD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle18ArraySubscriptExprD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle10MemberExprD0Ev,
    b8,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle19GlobalQualifiedNameD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle15LiteralOperatorD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle22ConversionOperatorTypeD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle8DtorNameD0Ev,
    b8,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle13QualifiedNameD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle10DeleteExprD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle14ConversionExprD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle8CallExprD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle10PrefixExprD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle10BinaryExprD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle8FoldExprD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle13FunctionParamD0Ev,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle24ForwardTemplateReferenceD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefTypeD0Ev,
    b8,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle16StdQualifiedNameD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle21StructuredBindingNameD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle15ClosureTypeNameD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle15UnnamedTypeNameD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle9LocalNameD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle12CtorDtorNameD0Ev,
    b8,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitutionD0Ev,
    b8,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle10NestedNameD0Ev,
    b8,
    b8,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle19PointerToMemberTypeD0Ev,
    b8,
    b8,
    b8,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle9ArrayTypeD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle15PixelVectorTypeD0Ev,
    b8,
    b8,
    b8,
    b8,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle8QualTypeD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle17VendorExtQualTypeD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle13ObjCProtoNameD0Ev,
    b8,
    b8,
    b8,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle12FunctionTypeD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpecD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle12NoexceptSpecD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle9DotSuffixD0Ev,
    b8,
    b8,
    b8,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle16FunctionEncodingD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle12EnableIfAttrD0Ev,
    b8,
    __ZN12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialNameD0Ev,
    __ZN10__cxxabiv123__fundamental_type_infoD0Ev,
    b8,
    __ZN10__cxxabiv119__pointer_type_infoD0Ev,
    b8,
    __ZN10__cxxabiv116__enum_type_infoD0Ev,
    b8,
    __ZN10__cxxabiv121__vmi_class_type_infoD0Ev,
    b8,
    b8,
    b8,
    b8,
    __ZN10emscripten8internal14raw_destructorI6PacketEEvPT_,
    b8,
    b8,
    b8,
    __ZN6Packet9newPacketEv,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    __ZN10emscripten8internal14raw_destructorINSt3__26vectorIhNS2_9allocatorIhEEEEEEvPT_,
    b8,
    b8,
    b8,
    b8,
    __ZN10emscripten8internal14raw_destructorIN10SmartDrive8SettingsEEEvPT_,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    __ZN10emscripten8internal14raw_destructorIN10SmartDrive21SwitchControlSettingsEEEvPT_,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    __ZN10emscripten8internal14raw_destructorIN6Packet11VersionInfoEEEvPT_,
    b8,
    b8,
    b8,
    __ZN10emscripten8internal14raw_destructorIN6Packet9DailyInfoEEEvPT_,
    b8,
    b8,
    b8,
    b8,
    b8,
    __ZN10emscripten8internal14raw_destructorIN6Packet12PushSettingsEEEvPT_,
    b8,
    b8,
    b8,
    __ZN10emscripten8internal14raw_destructorIN6Packet11JourneyInfoEEEvPT_,
    b8,
    b8,
    b8,
    b8,
    b8,
    __ZN10emscripten8internal14raw_destructorIN6Packet12DistanceInfoEEEvPT_,
    b8,
    b8,
    b8,
    __ZN10emscripten8internal14raw_destructorIN6Packet9MotorInfoEEEvPT_,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    __ZN10emscripten8internal14raw_destructorIN6Packet8TimeInfoEEEvPT_,
    b8,
    b8,
    b8,
    b8,
    b8,
    __ZN10emscripten8internal14raw_destructorIN6Packet9ErrorInfoEEEvPT_,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    __ZN10emscripten8internal14raw_destructorIN6Packet10DeviceInfoEEEvPT_,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8,
    b8
  ];
  var FUNCTION_TABLE_vii = [
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle10AbiTagAttr9printLeftERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle4Node10printRightERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle4Node11getBaseNameEv,
    b9,
    b9,
    b9,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle19SpecialSubstitution9printLeftERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle19SpecialSubstitution11getBaseNameEv,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle20PostfixQualifiedType9printLeftERNS_12OutputStreamE,
    b9,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType9printLeftERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType10printRightERNS_12OutputStreamE,
    b9,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle11PointerType9printLeftERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle11PointerType10printRightERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgs9printLeftERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgs11getBaseNameEv,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle12TemplateArgs9printLeftERNS_12OutputStreamE,
    b9,
    b9,
    b9,
    b9,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack9printLeftERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack10printRightERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle15IntegerCastExpr9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeE9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdE9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfE9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle8BoolExpr9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle14IntegerLiteral9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle20TemplateArgumentPack9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle9ThrowExpr9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle12InitListExpr9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle13NodeArrayNode9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle13EnclosingExpr9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle19SizeofParamPackExpr9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle22ParameterPackExpansion9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle8CastExpr9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle15ConditionalExpr9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle7NewExpr9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle11PostfixExpr9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle15BracedRangeExpr9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle10BracedExpr9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle8NameType9printLeftERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle8NameType11getBaseNameEv,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle18ArraySubscriptExpr9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle10MemberExpr9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle19GlobalQualifiedName9printLeftERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle19GlobalQualifiedName11getBaseNameEv,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle15LiteralOperator9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle22ConversionOperatorType9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle8DtorName9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle13QualifiedName9printLeftERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle13QualifiedName11getBaseNameEv,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle10DeleteExpr9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle14ConversionExpr9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle8CallExpr9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle10PrefixExpr9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle10BinaryExpr9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle13FunctionParam9printLeftERNS_12OutputStreamE,
    b9,
    b9,
    b9,
    b9,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference9printLeftERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference10printRightERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefType9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle16StdQualifiedName9printLeftERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle16StdQualifiedName11getBaseNameEv,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle21StructuredBindingName9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle15ClosureTypeName9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle15UnnamedTypeName9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle9LocalName9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle12CtorDtorName9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitution9printLeftERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitution11getBaseNameEv,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle10NestedName9printLeftERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle10NestedName11getBaseNameEv,
    b9,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType9printLeftERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType10printRightERNS_12OutputStreamE,
    b9,
    b9,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle9ArrayType9printLeftERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle9ArrayType10printRightERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle10VectorType9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle15PixelVectorType9printLeftERNS_12OutputStreamE,
    b9,
    b9,
    b9,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle8QualType9printLeftERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle8QualType10printRightERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle17VendorExtQualType9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName9printLeftERNS_12OutputStreamE,
    b9,
    b9,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle12FunctionType9printLeftERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle12FunctionType10printRightERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpec9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle12NoexceptSpec9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle11SpecialName9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle9DotSuffix9printLeftERNS_12OutputStreamE,
    b9,
    b9,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding9printLeftERNS_12OutputStreamE,
    __ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding10printRightERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle12EnableIfAttr9printLeftERNS_12OutputStreamE,
    b9,
    __ZNK12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialName9printLeftERNS_12OutputStreamE,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    __ZN6Packet6formatEv,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    __ZN6Packet10setErrorIdEi,
    b9,
    b9,
    b9,
    __ZN6Packet16setMotorDistanceEi,
    b9,
    __ZN6Packet15setCaseDistanceEi,
    __ZNK6Packet8getBytesEv,
    __ZN6Packet8setBytesENSt3__26vectorIhNS0_9allocatorIhEEEE,
    b9,
    b9,
    __ZNSt3__26vectorIhNS_9allocatorIhEEE9push_backERKh,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    __ZN10emscripten8internal13MethodInvokerIM6PacketFvvEvPS2_JEE6invokeERKS4_S5_,
    b9,
    b9,
    _pop_arg_long_double,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9,
    b9
  ];
  var FUNCTION_TABLE_viid = [
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    __ZN10emscripten8internal12MemberAccessIN10SmartDrive8SettingsEfE7setWireIS3_EEvRKMS3_fRT_f,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    __ZN10emscripten8internal12MemberAccessIN10SmartDrive21SwitchControlSettingsEfE7setWireIS3_EEvRKMS3_fRT_f,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    __ZN10emscripten8internal12MemberAccessIN6Packet9MotorInfoEfE7setWireIS3_EEvRKMS3_fRT_f,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10,
    b10
  ];
  var FUNCTION_TABLE_viii = [
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    __ZN10emscripten8internal12MemberAccessI6PacketiE7setWireIS2_EEvRKMS2_iRT_i,
    b11,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_4TypeEE7setWireIS2_EEvRKMS2_S3_RT_S3_,
    b11,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_4DataEE7setWireIS2_EEvRKMS2_S3_RT_S3_,
    b11,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_7CommandEE7setWireIS2_EEvRKMS2_S3_RT_S3_,
    b11,
    __ZN10emscripten8internal12MemberAccessI6PacketN10SmartDrive5ErrorEE7setWireIS2_EEvRKMS2_S4_RT_S4_,
    b11,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_3OTAEE7setWireIS2_EEvRKMS2_S3_RT_S3_,
    b11,
    __ZN10emscripten8internal12MemberAccessI6PacketN10SmartDrive8SettingsEE7setWireIS2_EEvRKMS2_S4_RT_PS4_,
    b11,
    __ZN10emscripten8internal12MemberAccessI6PacketN10SmartDrive21SwitchControlSettingsEE7setWireIS2_EEvRKMS2_S4_RT_PS4_,
    b11,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_12PushSettingsEE7setWireIS2_EEvRKMS2_S3_RT_PS3_,
    b11,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_11VersionInfoEE7setWireIS2_EEvRKMS2_S3_RT_PS3_,
    b11,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_9DailyInfoEE7setWireIS2_EEvRKMS2_S3_RT_PS3_,
    b11,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_11JourneyInfoEE7setWireIS2_EEvRKMS2_S3_RT_PS3_,
    b11,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_9MotorInfoEE7setWireIS2_EEvRKMS2_S3_RT_PS3_,
    b11,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_8TimeInfoEE7setWireIS2_EEvRKMS2_S3_RT_PS3_,
    b11,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_10DeviceInfoEE7setWireIS2_EEvRKMS2_S3_RT_PS3_,
    b11,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_9ErrorInfoEE7setWireIS2_EEvRKMS2_S3_RT_PS3_,
    b11,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_11BatteryInfoEE7setWireIS2_EEvRKMS2_S3_RT_PS3_,
    b11,
    __ZN10emscripten8internal12MemberAccessI6PacketNS2_12DistanceInfoEE7setWireIS2_EEvRKMS2_S3_RT_PS3_,
    b11,
    b11,
    b11,
    __ZN10emscripten8internal12SetterPolicyIM6PacketFviEE3setIS2_EEvRKS4_RT_i,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    __ZN10emscripten8internal12SetterPolicyIM6PacketFvNSt3__26vectorIhNS3_9allocatorIhEEEEEE3setIS2_EEvRKS9_RT_PS7_,
    b11,
    __ZNSt3__26vectorIhNS_9allocatorIhEEE6resizeEmRKh,
    b11,
    b11,
    b11,
    b11,
    __ZN10emscripten8internal12VectorAccessINSt3__26vectorIhNS2_9allocatorIhEEEEE3getERKS6_m,
    b11,
    b11,
    b11,
    b11,
    __ZN10emscripten8internal12MemberAccessIN10SmartDrive8SettingsENS2_11ControlModeEE7setWireIS3_EEvRKMS3_S4_RT_S4_,
    b11,
    __ZN10emscripten8internal12MemberAccessIN10SmartDrive8SettingsENS2_5UnitsEE7setWireIS3_EEvRKMS3_S4_RT_S4_,
    b11,
    __ZN10emscripten8internal12MemberAccessIN10SmartDrive8SettingsEhE7setWireIS3_EEvRKMS3_hRT_h,
    b11,
    b11,
    b11,
    b11,
    b11,
    __ZN10emscripten8internal12MemberAccessIN10SmartDrive21SwitchControlSettingsENS2_17SwitchControlModeEE7setWireIS3_EEvRKMS3_S4_RT_S4_,
    b11,
    __ZN10emscripten8internal12MemberAccessIN10SmartDrive21SwitchControlSettingsEhE7setWireIS3_EEvRKMS3_hRT_h,
    b11,
    b11,
    b11,
    b11,
    b11,
    __ZN10emscripten8internal12MemberAccessIN6Packet11VersionInfoEhE7setWireIS3_EEvRKMS3_hRT_h,
    b11,
    b11,
    b11,
    __ZN10emscripten8internal12MemberAccessIN6Packet9DailyInfoEtE7setWireIS3_EEvRKMS3_tRT_t,
    b11,
    __ZN10emscripten8internal12MemberAccessIN6Packet9DailyInfoEhE7setWireIS3_EEvRKMS3_hRT_h,
    b11,
    b11,
    b11,
    __ZN10emscripten8internal12MemberAccessIN6Packet12PushSettingsEhE7setWireIS3_EEvRKMS3_hRT_h,
    b11,
    b11,
    b11,
    __ZN10emscripten8internal12MemberAccessIN6Packet11JourneyInfoEtE7setWireIS3_EEvRKMS3_tRT_t,
    b11,
    __ZN10emscripten8internal12MemberAccessIN6Packet11JourneyInfoEhE7setWireIS3_EEvRKMS3_hRT_h,
    b11,
    b11,
    b11,
    __ZN10emscripten8internal12MemberAccessIN6Packet12DistanceInfoEyE7setWireIS3_EEvRKMS3_yRT_Py,
    b11,
    b11,
    b11,
    __ZN10emscripten8internal12MemberAccessIN6Packet9MotorInfoEN5Motor5StateEE7setWireIS3_EEvRKMS3_S5_RT_S5_,
    b11,
    __ZN10emscripten8internal12MemberAccessIN6Packet9MotorInfoEhE7setWireIS3_EEvRKMS3_hRT_h,
    b11,
    b11,
    b11,
    b11,
    b11,
    __ZN10emscripten8internal12MemberAccessIN6Packet8TimeInfoEtE7setWireIS3_EEvRKMS3_tRT_t,
    b11,
    __ZN10emscripten8internal12MemberAccessIN6Packet8TimeInfoEhE7setWireIS3_EEvRKMS3_hRT_h,
    b11,
    b11,
    b11,
    __ZN10emscripten8internal12MemberAccessIN6Packet9ErrorInfoEtE7setWireIS3_EEvRKMS3_tRT_t,
    b11,
    __ZN10emscripten8internal12MemberAccessIN6Packet9ErrorInfoEhE7setWireIS3_EEvRKMS3_hRT_h,
    b11,
    __ZN10emscripten8internal12MemberAccessIN6Packet9ErrorInfoEN10SmartDrive5ErrorEE7setWireIS3_EEvRKMS3_S5_RT_S5_,
    b11,
    b11,
    b11,
    __ZN10emscripten8internal12MemberAccessIN6Packet10DeviceInfoENS2_6DeviceEE7setWireIS3_EEvRKMS3_S4_RT_S4_,
    b11,
    __ZN10emscripten8internal12MemberAccessIN6Packet10DeviceInfoEhE7setWireIS3_EEvRKMS3_hRT_h,
    b11,
    __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIhNS2_9allocatorIhEEEEFvRKhEvPS6_JS8_EE6invokeERKSA_SB_h,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11,
    b11
  ];
  var FUNCTION_TABLE_viiii = [
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,
    b12,
    b12,
    b12,
    __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIhNS2_9allocatorIhEEEEFvmRKhEvPS6_JmS8_EE6invokeERKSA_SB_mh,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12,
    b12
  ];
  var FUNCTION_TABLE_viiiii = [
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,
    b13,
    b13,
    b13,
    __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13,
    b13
  ];
  var FUNCTION_TABLE_viiiiii = [
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,
    b14,
    b14,
    b14,
    __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14,
    b14
  ];

  return {
    __ZSt18uncaught_exceptionv: __ZSt18uncaught_exceptionv,
    ___cxa_can_catch: ___cxa_can_catch,
    ___cxa_is_pointer_type: ___cxa_is_pointer_type,
    ___embind_register_native_and_builtin_types: ___embind_register_native_and_builtin_types,
    ___errno_location: ___errno_location,
    ___getTypeName: ___getTypeName,
    ___muldi3: ___muldi3,
    ___udivdi3: ___udivdi3,
    _bitshift64Lshr: _bitshift64Lshr,
    _bitshift64Shl: _bitshift64Shl,
    _fflush: _fflush,
    _free: _free,
    _i64Add: _i64Add,
    _i64Subtract: _i64Subtract,
    _malloc: _malloc,
    _memcpy: _memcpy,
    _memmove: _memmove,
    _memset: _memset,
    _sbrk: _sbrk,
    dynCall_dii: dynCall_dii,
    dynCall_i: dynCall_i,
    dynCall_ii: dynCall_ii,
    dynCall_iidiiii: dynCall_iidiiii,
    dynCall_iii: dynCall_iii,
    dynCall_iiii: dynCall_iiii,
    dynCall_iiiii: dynCall_iiiii,
    dynCall_v: dynCall_v,
    dynCall_vi: dynCall_vi,
    dynCall_vii: dynCall_vii,
    dynCall_viid: dynCall_viid,
    dynCall_viii: dynCall_viii,
    dynCall_viiii: dynCall_viiii,
    dynCall_viiiii: dynCall_viiiii,
    dynCall_viiiiii: dynCall_viiiiii,
    establishStackSpace: establishStackSpace,
    globalCtors: globalCtors,
    stackAlloc: stackAlloc,
    stackRestore: stackRestore,
    stackSave: stackSave
  };
})(
  // EMSCRIPTEN_END_ASM
  asmGlobalArg,
  asmLibraryArg,
  buffer
);

var real___ZSt18uncaught_exceptionv = asm['__ZSt18uncaught_exceptionv'];
asm['__ZSt18uncaught_exceptionv'] = function() {
  assert(
    runtimeInitialized,
    'you need to wait for the runtime to be ready (e.g. wait for main() to be called)'
  );
  assert(
    !runtimeExited,
    'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)'
  );
  return real___ZSt18uncaught_exceptionv.apply(null, arguments);
};

var real____cxa_can_catch = asm['___cxa_can_catch'];
asm['___cxa_can_catch'] = function() {
  assert(
    runtimeInitialized,
    'you need to wait for the runtime to be ready (e.g. wait for main() to be called)'
  );
  assert(
    !runtimeExited,
    'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)'
  );
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm['___cxa_is_pointer_type'];
asm['___cxa_is_pointer_type'] = function() {
  assert(
    runtimeInitialized,
    'you need to wait for the runtime to be ready (e.g. wait for main() to be called)'
  );
  assert(
    !runtimeExited,
    'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)'
  );
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____embind_register_native_and_builtin_types =
  asm['___embind_register_native_and_builtin_types'];
asm['___embind_register_native_and_builtin_types'] = function() {
  assert(
    runtimeInitialized,
    'you need to wait for the runtime to be ready (e.g. wait for main() to be called)'
  );
  assert(
    !runtimeExited,
    'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)'
  );
  return real____embind_register_native_and_builtin_types.apply(
    null,
    arguments
  );
};

var real____errno_location = asm['___errno_location'];
asm['___errno_location'] = function() {
  assert(
    runtimeInitialized,
    'you need to wait for the runtime to be ready (e.g. wait for main() to be called)'
  );
  assert(
    !runtimeExited,
    'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)'
  );
  return real____errno_location.apply(null, arguments);
};

var real____getTypeName = asm['___getTypeName'];
asm['___getTypeName'] = function() {
  assert(
    runtimeInitialized,
    'you need to wait for the runtime to be ready (e.g. wait for main() to be called)'
  );
  assert(
    !runtimeExited,
    'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)'
  );
  return real____getTypeName.apply(null, arguments);
};

var real____muldi3 = asm['___muldi3'];
asm['___muldi3'] = function() {
  assert(
    runtimeInitialized,
    'you need to wait for the runtime to be ready (e.g. wait for main() to be called)'
  );
  assert(
    !runtimeExited,
    'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)'
  );
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm['___udivdi3'];
asm['___udivdi3'] = function() {
  assert(
    runtimeInitialized,
    'you need to wait for the runtime to be ready (e.g. wait for main() to be called)'
  );
  assert(
    !runtimeExited,
    'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)'
  );
  return real____udivdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm['_bitshift64Lshr'];
asm['_bitshift64Lshr'] = function() {
  assert(
    runtimeInitialized,
    'you need to wait for the runtime to be ready (e.g. wait for main() to be called)'
  );
  assert(
    !runtimeExited,
    'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)'
  );
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm['_bitshift64Shl'];
asm['_bitshift64Shl'] = function() {
  assert(
    runtimeInitialized,
    'you need to wait for the runtime to be ready (e.g. wait for main() to be called)'
  );
  assert(
    !runtimeExited,
    'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)'
  );
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm['_fflush'];
asm['_fflush'] = function() {
  assert(
    runtimeInitialized,
    'you need to wait for the runtime to be ready (e.g. wait for main() to be called)'
  );
  assert(
    !runtimeExited,
    'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)'
  );
  return real__fflush.apply(null, arguments);
};

var real__free = asm['_free'];
asm['_free'] = function() {
  assert(
    runtimeInitialized,
    'you need to wait for the runtime to be ready (e.g. wait for main() to be called)'
  );
  assert(
    !runtimeExited,
    'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)'
  );
  return real__free.apply(null, arguments);
};

var real__i64Add = asm['_i64Add'];
asm['_i64Add'] = function() {
  assert(
    runtimeInitialized,
    'you need to wait for the runtime to be ready (e.g. wait for main() to be called)'
  );
  assert(
    !runtimeExited,
    'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)'
  );
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm['_i64Subtract'];
asm['_i64Subtract'] = function() {
  assert(
    runtimeInitialized,
    'you need to wait for the runtime to be ready (e.g. wait for main() to be called)'
  );
  assert(
    !runtimeExited,
    'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)'
  );
  return real__i64Subtract.apply(null, arguments);
};

var real__malloc = asm['_malloc'];
asm['_malloc'] = function() {
  assert(
    runtimeInitialized,
    'you need to wait for the runtime to be ready (e.g. wait for main() to be called)'
  );
  assert(
    !runtimeExited,
    'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)'
  );
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm['_memmove'];
asm['_memmove'] = function() {
  assert(
    runtimeInitialized,
    'you need to wait for the runtime to be ready (e.g. wait for main() to be called)'
  );
  assert(
    !runtimeExited,
    'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)'
  );
  return real__memmove.apply(null, arguments);
};

var real__sbrk = asm['_sbrk'];
asm['_sbrk'] = function() {
  assert(
    runtimeInitialized,
    'you need to wait for the runtime to be ready (e.g. wait for main() to be called)'
  );
  assert(
    !runtimeExited,
    'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)'
  );
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm['establishStackSpace'];
asm['establishStackSpace'] = function() {
  assert(
    runtimeInitialized,
    'you need to wait for the runtime to be ready (e.g. wait for main() to be called)'
  );
  assert(
    !runtimeExited,
    'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)'
  );
  return real_establishStackSpace.apply(null, arguments);
};

var real_globalCtors = asm['globalCtors'];
asm['globalCtors'] = function() {
  assert(
    runtimeInitialized,
    'you need to wait for the runtime to be ready (e.g. wait for main() to be called)'
  );
  assert(
    !runtimeExited,
    'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)'
  );
  return real_globalCtors.apply(null, arguments);
};

var real_stackAlloc = asm['stackAlloc'];
asm['stackAlloc'] = function() {
  assert(
    runtimeInitialized,
    'you need to wait for the runtime to be ready (e.g. wait for main() to be called)'
  );
  assert(
    !runtimeExited,
    'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)'
  );
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm['stackRestore'];
asm['stackRestore'] = function() {
  assert(
    runtimeInitialized,
    'you need to wait for the runtime to be ready (e.g. wait for main() to be called)'
  );
  assert(
    !runtimeExited,
    'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)'
  );
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm['stackSave'];
asm['stackSave'] = function() {
  assert(
    runtimeInitialized,
    'you need to wait for the runtime to be ready (e.g. wait for main() to be called)'
  );
  assert(
    !runtimeExited,
    'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)'
  );
  return real_stackSave.apply(null, arguments);
};
var __ZSt18uncaught_exceptionv = (Module['__ZSt18uncaught_exceptionv'] =
  asm['__ZSt18uncaught_exceptionv']);
var ___cxa_can_catch = (Module['___cxa_can_catch'] = asm['___cxa_can_catch']);
var ___cxa_is_pointer_type = (Module['___cxa_is_pointer_type'] =
  asm['___cxa_is_pointer_type']);
var ___embind_register_native_and_builtin_types = (Module[
  '___embind_register_native_and_builtin_types'
] = asm['___embind_register_native_and_builtin_types']);
var ___errno_location = (Module['___errno_location'] =
  asm['___errno_location']);
var ___getTypeName = (Module['___getTypeName'] = asm['___getTypeName']);
var ___muldi3 = (Module['___muldi3'] = asm['___muldi3']);
var ___udivdi3 = (Module['___udivdi3'] = asm['___udivdi3']);
var _bitshift64Lshr = (Module['_bitshift64Lshr'] = asm['_bitshift64Lshr']);
var _bitshift64Shl = (Module['_bitshift64Shl'] = asm['_bitshift64Shl']);
var _fflush = (Module['_fflush'] = asm['_fflush']);
var _free = (Module['_free'] = asm['_free']);
var _i64Add = (Module['_i64Add'] = asm['_i64Add']);
var _i64Subtract = (Module['_i64Subtract'] = asm['_i64Subtract']);
var _malloc = (Module['_malloc'] = asm['_malloc']);
var _memcpy = (Module['_memcpy'] = asm['_memcpy']);
var _memmove = (Module['_memmove'] = asm['_memmove']);
var _memset = (Module['_memset'] = asm['_memset']);
var _sbrk = (Module['_sbrk'] = asm['_sbrk']);
var establishStackSpace = (Module['establishStackSpace'] =
  asm['establishStackSpace']);
var globalCtors = (Module['globalCtors'] = asm['globalCtors']);
var stackAlloc = (Module['stackAlloc'] = asm['stackAlloc']);
var stackRestore = (Module['stackRestore'] = asm['stackRestore']);
var stackSave = (Module['stackSave'] = asm['stackSave']);
var dynCall_dii = (Module['dynCall_dii'] = asm['dynCall_dii']);
var dynCall_i = (Module['dynCall_i'] = asm['dynCall_i']);
var dynCall_ii = (Module['dynCall_ii'] = asm['dynCall_ii']);
var dynCall_iidiiii = (Module['dynCall_iidiiii'] = asm['dynCall_iidiiii']);
var dynCall_iii = (Module['dynCall_iii'] = asm['dynCall_iii']);
var dynCall_iiii = (Module['dynCall_iiii'] = asm['dynCall_iiii']);
var dynCall_iiiii = (Module['dynCall_iiiii'] = asm['dynCall_iiiii']);
var dynCall_v = (Module['dynCall_v'] = asm['dynCall_v']);
var dynCall_vi = (Module['dynCall_vi'] = asm['dynCall_vi']);
var dynCall_vii = (Module['dynCall_vii'] = asm['dynCall_vii']);
var dynCall_viid = (Module['dynCall_viid'] = asm['dynCall_viid']);
var dynCall_viii = (Module['dynCall_viii'] = asm['dynCall_viii']);
var dynCall_viiii = (Module['dynCall_viiii'] = asm['dynCall_viiii']);
var dynCall_viiiii = (Module['dynCall_viiiii'] = asm['dynCall_viiiii']);
var dynCall_viiiiii = (Module['dynCall_viiiiii'] = asm['dynCall_viiiiii']);
// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Object.getOwnPropertyDescriptor(Module, 'intArrayFromString'))
  Module['intArrayFromString'] = function() {
    abort(
      "'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'intArrayToString'))
  Module['intArrayToString'] = function() {
    abort(
      "'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'ccall'))
  Module['ccall'] = function() {
    abort(
      "'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'cwrap'))
  Module['cwrap'] = function() {
    abort(
      "'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'setValue'))
  Module['setValue'] = function() {
    abort(
      "'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'getValue'))
  Module['getValue'] = function() {
    abort(
      "'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'allocate'))
  Module['allocate'] = function() {
    abort(
      "'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'getMemory'))
  Module['getMemory'] = function() {
    abort(
      "'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'AsciiToString'))
  Module['AsciiToString'] = function() {
    abort(
      "'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'stringToAscii'))
  Module['stringToAscii'] = function() {
    abort(
      "'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'UTF8ArrayToString'))
  Module['UTF8ArrayToString'] = function() {
    abort(
      "'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'UTF8ToString'))
  Module['UTF8ToString'] = function() {
    abort(
      "'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'stringToUTF8Array'))
  Module['stringToUTF8Array'] = function() {
    abort(
      "'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'stringToUTF8'))
  Module['stringToUTF8'] = function() {
    abort(
      "'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'lengthBytesUTF8'))
  Module['lengthBytesUTF8'] = function() {
    abort(
      "'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'UTF16ToString'))
  Module['UTF16ToString'] = function() {
    abort(
      "'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'stringToUTF16'))
  Module['stringToUTF16'] = function() {
    abort(
      "'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'lengthBytesUTF16'))
  Module['lengthBytesUTF16'] = function() {
    abort(
      "'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'UTF32ToString'))
  Module['UTF32ToString'] = function() {
    abort(
      "'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'stringToUTF32'))
  Module['stringToUTF32'] = function() {
    abort(
      "'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'lengthBytesUTF32'))
  Module['lengthBytesUTF32'] = function() {
    abort(
      "'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'allocateUTF8'))
  Module['allocateUTF8'] = function() {
    abort(
      "'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'stackTrace'))
  Module['stackTrace'] = function() {
    abort(
      "'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'addOnPreRun'))
  Module['addOnPreRun'] = function() {
    abort(
      "'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'addOnInit'))
  Module['addOnInit'] = function() {
    abort(
      "'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'addOnPreMain'))
  Module['addOnPreMain'] = function() {
    abort(
      "'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'addOnExit'))
  Module['addOnExit'] = function() {
    abort(
      "'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'addOnPostRun'))
  Module['addOnPostRun'] = function() {
    abort(
      "'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'writeStringToMemory'))
  Module['writeStringToMemory'] = function() {
    abort(
      "'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'writeArrayToMemory'))
  Module['writeArrayToMemory'] = function() {
    abort(
      "'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'writeAsciiToMemory'))
  Module['writeAsciiToMemory'] = function() {
    abort(
      "'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'addRunDependency'))
  Module['addRunDependency'] = function() {
    abort(
      "'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'removeRunDependency'))
  Module['removeRunDependency'] = function() {
    abort(
      "'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'ENV'))
  Module['ENV'] = function() {
    abort(
      "'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'FS'))
  Module['FS'] = function() {
    abort(
      "'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'FS_createFolder'))
  Module['FS_createFolder'] = function() {
    abort(
      "'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'FS_createPath'))
  Module['FS_createPath'] = function() {
    abort(
      "'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'FS_createDataFile'))
  Module['FS_createDataFile'] = function() {
    abort(
      "'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'FS_createPreloadedFile'))
  Module['FS_createPreloadedFile'] = function() {
    abort(
      "'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'FS_createLazyFile'))
  Module['FS_createLazyFile'] = function() {
    abort(
      "'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'FS_createLink'))
  Module['FS_createLink'] = function() {
    abort(
      "'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'FS_createDevice'))
  Module['FS_createDevice'] = function() {
    abort(
      "'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'FS_unlink'))
  Module['FS_unlink'] = function() {
    abort(
      "'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'GL'))
  Module['GL'] = function() {
    abort(
      "'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'dynamicAlloc'))
  Module['dynamicAlloc'] = function() {
    abort(
      "'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'warnOnce'))
  Module['warnOnce'] = function() {
    abort(
      "'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'loadDynamicLibrary'))
  Module['loadDynamicLibrary'] = function() {
    abort(
      "'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'loadWebAssemblyModule'))
  Module['loadWebAssemblyModule'] = function() {
    abort(
      "'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'getLEB'))
  Module['getLEB'] = function() {
    abort(
      "'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'getFunctionTables'))
  Module['getFunctionTables'] = function() {
    abort(
      "'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'alignFunctionTables'))
  Module['alignFunctionTables'] = function() {
    abort(
      "'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'registerFunctions'))
  Module['registerFunctions'] = function() {
    abort(
      "'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'addFunction'))
  Module['addFunction'] = function() {
    abort(
      "'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'removeFunction'))
  Module['removeFunction'] = function() {
    abort(
      "'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'getFuncWrapper'))
  Module['getFuncWrapper'] = function() {
    abort(
      "'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'prettyPrint'))
  Module['prettyPrint'] = function() {
    abort(
      "'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'makeBigInt'))
  Module['makeBigInt'] = function() {
    abort(
      "'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'dynCall'))
  Module['dynCall'] = function() {
    abort(
      "'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'getCompilerSetting'))
  Module['getCompilerSetting'] = function() {
    abort(
      "'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'stackSave'))
  Module['stackSave'] = function() {
    abort(
      "'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'stackRestore'))
  Module['stackRestore'] = function() {
    abort(
      "'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'stackAlloc'))
  Module['stackAlloc'] = function() {
    abort(
      "'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'establishStackSpace'))
  Module['establishStackSpace'] = function() {
    abort(
      "'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'print'))
  Module['print'] = function() {
    abort(
      "'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'printErr'))
  Module['printErr'] = function() {
    abort(
      "'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'getTempRet0'))
  Module['getTempRet0'] = function() {
    abort(
      "'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'setTempRet0'))
  Module['setTempRet0'] = function() {
    abort(
      "'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'callMain'))
  Module['callMain'] = function() {
    abort(
      "'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'Pointer_stringify'))
  Module['Pointer_stringify'] = function() {
    abort(
      "'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'intArrayFromBase64'))
  Module['intArrayFromBase64'] = function() {
    abort(
      "'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'tryParseAsDataURI'))
  Module['tryParseAsDataURI'] = function() {
    abort(
      "'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
    );
  };
if (!Object.getOwnPropertyDescriptor(Module, 'ALLOC_NORMAL'))
  Object.defineProperty(Module, 'ALLOC_NORMAL', {
    get: function() {
      abort(
        "'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
      );
    }
  });
if (!Object.getOwnPropertyDescriptor(Module, 'ALLOC_STACK'))
  Object.defineProperty(Module, 'ALLOC_STACK', {
    get: function() {
      abort(
        "'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
      );
    }
  });
if (!Object.getOwnPropertyDescriptor(Module, 'ALLOC_DYNAMIC'))
  Object.defineProperty(Module, 'ALLOC_DYNAMIC', {
    get: function() {
      abort(
        "'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
      );
    }
  });
if (!Object.getOwnPropertyDescriptor(Module, 'ALLOC_NONE'))
  Object.defineProperty(Module, 'ALLOC_NONE', {
    get: function() {
      abort(
        "'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)"
      );
    }
  });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = readBinary(memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(
          HEAPU8[GLOBAL_BASE + i] === 0,
          "area for memory initializer should not have been touched before it's loaded"
        );
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest'])
        delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    };
    var doBrowserLoad = function() {
      readAsync(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    };
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn(
              'a problem seems to have happened with Module.memoryInitializerRequest, status: ' +
                request.status +
                ', retrying ' +
                memoryInitializer
            );
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      };
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = 'ExitStatus';
  this.message = 'Program terminated with exit(' + status + ')';
  this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(
      !Module['_main'],
      'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]'
    );

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  };
  try {
    // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch (e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce(
      'stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.'
    );
    warnOnce(
      '(this may also be due to not including full filesystem support - try building with -s FORCE_FILESYSTEM=1)'
    );
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err(
        'exit(' +
          status +
          ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)'
      );
    }
  } else {
    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function')
    Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

Module['noExitRuntime'] = true;

run();

// {{MODULE_ADDITIONS}}
